
NucleoF446RE_ILI9341_DynaGraph_OS_Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027ac8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b9c  08027c98  08027c98  00037c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000072a  0802b834  0802b834  0003b834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0802bf60  0802bf60  0003bf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00001880  0802bf78  0802bf78  0003bf78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000001c  0802d7f8  0802d7f8  0003d7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0802d814  0802d814  00040100  2**0
                  CONTENTS
  8 .ARM          00000008  0802d814  0802d814  0003d814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0802d81c  0802d81c  00040100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  0802d81c  0802d81c  0003d81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   0000000c  0802d834  0802d834  0003d834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000100  20000000  0802d840  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000089b4  20000100  0802d940  00040100  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  20008ab4  0802d940  00048ab4  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00040100  2**0
                  CONTENTS, READONLY
 16 .debug_info   000a3931  00000000  00000000  00040130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0001020f  00000000  00000000  000e3a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003c80  00000000  00000000  000f3c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000038a0  00000000  00000000  000f78f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000e309  00000000  00000000  000fb190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003a2b8  00000000  00000000  00109499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000ff73b  00000000  00000000  00143751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  00242e8c  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00010e10  00000000  00000000  00242f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000100 	.word	0x20000100
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08027c80 	.word	0x08027c80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000104 	.word	0x20000104
 800020c:	08027c80 	.word	0x08027c80

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <ILI9341_Init>:
static void DC_H(void);
static void LED_H(void);

// Initialization
void ILI9341_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	ILI9341_Reset();
 80005b8:	f000 f99d 	bl	80008f6 <ILI9341_Reset>
	ILI9341_SoftReset();
 80005bc:	f000 f9ae 	bl	800091c <ILI9341_SoftReset>

	/* Power Control A */
	LCD_WR_REG(0xCB);
 80005c0:	20cb      	movs	r0, #203	; 0xcb
 80005c2:	f000 f9c5 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80005c6:	2039      	movs	r0, #57	; 0x39
 80005c8:	f000 f9dc 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80005cc:	202c      	movs	r0, #44	; 0x2c
 80005ce:	f000 f9d9 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 f9d6 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80005d8:	2034      	movs	r0, #52	; 0x34
 80005da:	f000 f9d3 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80005de:	2002      	movs	r0, #2
 80005e0:	f000 f9d0 	bl	8000984 <LCD_WR_DATA>
	/* Power Control B */
	LCD_WR_REG(0xCF);
 80005e4:	20cf      	movs	r0, #207	; 0xcf
 80005e6:	f000 f9b3 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 f9ca 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80005f0:	20c1      	movs	r0, #193	; 0xc1
 80005f2:	f000 f9c7 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x30);
 80005f6:	2030      	movs	r0, #48	; 0x30
 80005f8:	f000 f9c4 	bl	8000984 <LCD_WR_DATA>
	/* Driver timing control A */
	LCD_WR_REG(0xE8);
 80005fc:	20e8      	movs	r0, #232	; 0xe8
 80005fe:	f000 f9a7 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000602:	2085      	movs	r0, #133	; 0x85
 8000604:	f000 f9be 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000608:	2000      	movs	r0, #0
 800060a:	f000 f9bb 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x78);
 800060e:	2078      	movs	r0, #120	; 0x78
 8000610:	f000 f9b8 	bl	8000984 <LCD_WR_DATA>
	/* Driver timing control B */
	LCD_WR_REG(0xEA);
 8000614:	20ea      	movs	r0, #234	; 0xea
 8000616:	f000 f99b 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800061a:	2000      	movs	r0, #0
 800061c:	f000 f9b2 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000620:	2000      	movs	r0, #0
 8000622:	f000 f9af 	bl	8000984 <LCD_WR_DATA>
	/* Power on Sequence control */
	LCD_WR_REG(0xED);
 8000626:	20ed      	movs	r0, #237	; 0xed
 8000628:	f000 f992 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800062c:	2064      	movs	r0, #100	; 0x64
 800062e:	f000 f9a9 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000632:	2003      	movs	r0, #3
 8000634:	f000 f9a6 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 8000638:	2012      	movs	r0, #18
 800063a:	f000 f9a3 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x81);
 800063e:	2081      	movs	r0, #129	; 0x81
 8000640:	f000 f9a0 	bl	8000984 <LCD_WR_DATA>
	/* Pump ratio control */
	LCD_WR_REG(0xF7);
 8000644:	20f7      	movs	r0, #247	; 0xf7
 8000646:	f000 f983 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800064a:	2020      	movs	r0, #32
 800064c:	f000 f99a 	bl	8000984 <LCD_WR_DATA>
	/* Power Control 1 */
	LCD_WR_REG(0xC0);
 8000650:	20c0      	movs	r0, #192	; 0xc0
 8000652:	f000 f97d 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x10);
 8000656:	2010      	movs	r0, #16
 8000658:	f000 f994 	bl	8000984 <LCD_WR_DATA>
	/* Power Control 2 */
	LCD_WR_REG(0xC1);
 800065c:	20c1      	movs	r0, #193	; 0xc1
 800065e:	f000 f977 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x10);
 8000662:	2010      	movs	r0, #16
 8000664:	f000 f98e 	bl	8000984 <LCD_WR_DATA>
	/* VCOM Control 1 */
	LCD_WR_REG(0xC5);
 8000668:	20c5      	movs	r0, #197	; 0xc5
 800066a:	f000 f971 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x3E);
 800066e:	203e      	movs	r0, #62	; 0x3e
 8000670:	f000 f988 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000674:	2028      	movs	r0, #40	; 0x28
 8000676:	f000 f985 	bl	8000984 <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0xC7);
 800067a:	20c7      	movs	r0, #199	; 0xc7
 800067c:	f000 f968 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x86);
 8000680:	2086      	movs	r0, #134	; 0x86
 8000682:	f000 f97f 	bl	8000984 <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0x36);
 8000686:	2036      	movs	r0, #54	; 0x36
 8000688:	f000 f962 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x48);
 800068c:	2048      	movs	r0, #72	; 0x48
 800068e:	f000 f979 	bl	8000984 <LCD_WR_DATA>
	/* Pixel Format Set */
	LCD_WR_REG(0x3A);
 8000692:	203a      	movs	r0, #58	; 0x3a
 8000694:	f000 f95c 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x55);    //16bit
 8000698:	2055      	movs	r0, #85	; 0x55
 800069a:	f000 f973 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800069e:	20b1      	movs	r0, #177	; 0xb1
 80006a0:	f000 f956 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 f96d 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x18);
 80006aa:	2018      	movs	r0, #24
 80006ac:	f000 f96a 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x20); // Little Endian
#endif
	/* Display Function Control */
	LCD_WR_REG(0xB6);
 80006b0:	20b6      	movs	r0, #182	; 0xb6
 80006b2:	f000 f94d 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x08);
 80006b6:	2008      	movs	r0, #8
 80006b8:	f000 f964 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x82);
 80006bc:	2082      	movs	r0, #130	; 0x82
 80006be:	f000 f961 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x27);
 80006c2:	2027      	movs	r0, #39	; 0x27
 80006c4:	f000 f95e 	bl	8000984 <LCD_WR_DATA>
	/* 3GAMMA FUNCTION DISABLE */
	LCD_WR_REG(0xF2);
 80006c8:	20f2      	movs	r0, #242	; 0xf2
 80006ca:	f000 f941 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 f958 	bl	8000984 <LCD_WR_DATA>
	/* GAMMA CURVE SELECTED */
	LCD_WR_REG(0x26); //Gamma set
 80006d4:	2026      	movs	r0, #38	; 0x26
 80006d6:	f000 f93b 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x01); 	//Gamma Curve (G2.2)
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 f952 	bl	8000984 <LCD_WR_DATA>
	//Positive Gamma  Correction
	LCD_WR_REG(0xE0);
 80006e0:	20e0      	movs	r0, #224	; 0xe0
 80006e2:	f000 f935 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80006e6:	200f      	movs	r0, #15
 80006e8:	f000 f94c 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 80006ec:	2031      	movs	r0, #49	; 0x31
 80006ee:	f000 f949 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80006f2:	202b      	movs	r0, #43	; 0x2b
 80006f4:	f000 f946 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 80006f8:	200c      	movs	r0, #12
 80006fa:	f000 f943 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80006fe:	200e      	movs	r0, #14
 8000700:	f000 f940 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000704:	2008      	movs	r0, #8
 8000706:	f000 f93d 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x4E);
 800070a:	204e      	movs	r0, #78	; 0x4e
 800070c:	f000 f93a 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0xF1);
 8000710:	20f1      	movs	r0, #241	; 0xf1
 8000712:	f000 f937 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x37);
 8000716:	2037      	movs	r0, #55	; 0x37
 8000718:	f000 f934 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800071c:	2007      	movs	r0, #7
 800071e:	f000 f931 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000722:	2010      	movs	r0, #16
 8000724:	f000 f92e 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f92b 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800072e:	200e      	movs	r0, #14
 8000730:	f000 f928 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 8000734:	2009      	movs	r0, #9
 8000736:	f000 f925 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800073a:	2000      	movs	r0, #0
 800073c:	f000 f922 	bl	8000984 <LCD_WR_DATA>
	//Negative Gamma  Correction
	LCD_WR_REG(0xE1);
 8000740:	20e1      	movs	r0, #225	; 0xe1
 8000742:	f000 f905 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000746:	2000      	movs	r0, #0
 8000748:	f000 f91c 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800074c:	200e      	movs	r0, #14
 800074e:	f000 f919 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x14);
 8000752:	2014      	movs	r0, #20
 8000754:	f000 f916 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000758:	2003      	movs	r0, #3
 800075a:	f000 f913 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800075e:	2011      	movs	r0, #17
 8000760:	f000 f910 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000764:	2007      	movs	r0, #7
 8000766:	f000 f90d 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 800076a:	2031      	movs	r0, #49	; 0x31
 800076c:	f000 f90a 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000770:	20c1      	movs	r0, #193	; 0xc1
 8000772:	f000 f907 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x48);
 8000776:	2048      	movs	r0, #72	; 0x48
 8000778:	f000 f904 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800077c:	2008      	movs	r0, #8
 800077e:	f000 f901 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000782:	200f      	movs	r0, #15
 8000784:	f000 f8fe 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 8000788:	200c      	movs	r0, #12
 800078a:	f000 f8fb 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 800078e:	2031      	movs	r0, #49	; 0x31
 8000790:	f000 f8f8 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x36);
 8000794:	2036      	movs	r0, #54	; 0x36
 8000796:	f000 f8f5 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800079a:	200f      	movs	r0, #15
 800079c:	f000 f8f2 	bl	8000984 <LCD_WR_DATA>
	//EXIT SLEEP
	LCD_WR_REG(0x11);
 80007a0:	2011      	movs	r0, #17
 80007a2:	f000 f8d5 	bl	8000950 <LCD_WR_REG>

	HAL_Delay(120);
 80007a6:	2078      	movs	r0, #120	; 0x78
 80007a8:	f001 fdc0 	bl	800232c <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WR_REG(0x29);
 80007ac:	2029      	movs	r0, #41	; 0x29
 80007ae:	f000 f8cf 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x2C);
 80007b2:	202c      	movs	r0, #44	; 0x2c
 80007b4:	f000 f8e6 	bl	8000984 <LCD_WR_DATA>

	LCD_direction(ROTATE_270);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 f8fd 	bl	80009b8 <LCD_direction>

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y)
{
 80007c2:	b590      	push	{r4, r7, lr}
 80007c4:	b083      	sub	sp, #12
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4604      	mov	r4, r0
 80007ca:	4608      	mov	r0, r1
 80007cc:	4611      	mov	r1, r2
 80007ce:	461a      	mov	r2, r3
 80007d0:	4623      	mov	r3, r4
 80007d2:	80fb      	strh	r3, [r7, #6]
 80007d4:	4603      	mov	r3, r0
 80007d6:	80bb      	strh	r3, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	807b      	strh	r3, [r7, #2]
 80007dc:	4613      	mov	r3, r2
 80007de:	803b      	strh	r3, [r7, #0]
	// Set Window
	LCD_WR_REG(0x2a);
 80007e0:	202a      	movs	r0, #42	; 0x2a
 80007e2:	f000 f8b5 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(start_x >> 8);
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f8c8 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_x);
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f8c3 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(end_x >> 8);
 80007fe:	887b      	ldrh	r3, [r7, #2]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	b29b      	uxth	r3, r3
 8000804:	b2db      	uxtb	r3, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f8bc 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_x);
 800080c:	887b      	ldrh	r3, [r7, #2]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f8b7 	bl	8000984 <LCD_WR_DATA>

	LCD_WR_REG(0x2b);
 8000816:	202b      	movs	r0, #43	; 0x2b
 8000818:	f000 f89a 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(start_y >> 8);
 800081c:	88bb      	ldrh	r3, [r7, #4]
 800081e:	0a1b      	lsrs	r3, r3, #8
 8000820:	b29b      	uxth	r3, r3
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f8ad 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_y);
 800082a:	88bb      	ldrh	r3, [r7, #4]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f8a8 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(end_y >> 8);
 8000834:	883b      	ldrh	r3, [r7, #0]
 8000836:	0a1b      	lsrs	r3, r3, #8
 8000838:	b29b      	uxth	r3, r3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f8a1 	bl	8000984 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_y);
 8000842:	883b      	ldrh	r3, [r7, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f89c 	bl	8000984 <LCD_WR_DATA>

}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bd90      	pop	{r4, r7, pc}

08000854 <ConvHL>:
      ILI9341_WritePixel(x+i, y+j, color);
  }
}

static void ConvHL(uint8_t *s, int32_t l)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	uint8_t v;
	while (l > 0) {
 800085e:	e010      	b.n	8000882 <ConvHL+0x2e>
		v = *(s+1);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	785b      	ldrb	r3, [r3, #1]
 8000864:	73fb      	strb	r3, [r7, #15]
		*(s+1) = *s;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3301      	adds	r3, #1
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	7812      	ldrb	r2, [r2, #0]
 800086e:	701a      	strb	r2, [r3, #0]
		*s = v;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7bfa      	ldrb	r2, [r7, #15]
 8000874:	701a      	strb	r2, [r3, #0]
		s += 2;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3302      	adds	r3, #2
 800087a:	607b      	str	r3, [r7, #4]
		l -= 2;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	3b02      	subs	r3, #2
 8000880:	603b      	str	r3, [r7, #0]
	while (l > 0) {
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	dceb      	bgt.n	8000860 <ConvHL+0xc>
	}
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <ILI9341_DrawBitmap>:

// Call this function after ILI9341_SetWindow
// This function is non blocked
// The variable for Callback is open. User should set by himself
void ILI9341_DrawBitmap(uint16_t w, uint16_t h, uint8_t *s)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	603a      	str	r2, [r7, #0]
 80008a2:	80fb      	strh	r3, [r7, #6]
 80008a4:	460b      	mov	r3, r1
 80008a6:	80bb      	strh	r3, [r7, #4]
	// Enable to access GRAM
	LCD_WR_REG(0x2c);
 80008a8:	202c      	movs	r0, #44	; 0x2c
 80008aa:	f000 f851 	bl	8000950 <LCD_WR_REG>

	DC_H();
 80008ae:	f000 f8e7 	bl	8000a80 <DC_H>
#if 0
	__HAL_SPI_DISABLE(&hspi3);
	hspi13Instance->CR2 |= SPI_DATASIZE_16BIT; // Set 16 bit mode
	__HAL_SPI_ENABLE(&hspi3);
#endif
	ConvHL(s, (int32_t)w*h*2);
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	88ba      	ldrh	r2, [r7, #4]
 80008b6:	fb02 f303 	mul.w	r3, r2, r3
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	6838      	ldr	r0, [r7, #0]
 80008c0:	f7ff ffc8 	bl	8000854 <ConvHL>
	HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)s, w * h *2);
 80008c4:	88fa      	ldrh	r2, [r7, #6]
 80008c6:	88bb      	ldrh	r3, [r7, #4]
 80008c8:	fb12 f303 	smulbb	r3, r2, r3
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	461a      	mov	r2, r3
 80008d4:	6839      	ldr	r1, [r7, #0]
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <ILI9341_DrawBitmap+0x4c>)
 80008d8:	f003 fe90 	bl	80045fc <HAL_SPI_Transmit_DMA>
#if 0
	__HAL_SPI_DISABLE(&hspi3);
	hspi3.Instance->CR2 &= ~(SPI_DATASIZE_16BIT); // Set 8 bit mode
	__HAL_SPI_ENABLE(&hspi3);
#endif
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000017c 	.word	0x2000017c

080008e8 <ILI9341_EndOfDrawBitmap>:

// User should call it at callback
void ILI9341_EndOfDrawBitmap(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
#if 0
	__HAL_SPI_DISABLE(&hspi3);
	hspi3.Instance->CR2 &= ~(SPI_DATASIZE_16BIT); // Set 8 bit mode
	__HAL_SPI_ENABLE(&hspi3);
#endif
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
	RESET_L();
 80008fa:	f000 f891 	bl	8000a20 <RESET_L>
	HAL_Delay(100);
 80008fe:	2064      	movs	r0, #100	; 0x64
 8000900:	f001 fd14 	bl	800232c <HAL_Delay>
	RESET_H();
 8000904:	f000 f898 	bl	8000a38 <RESET_H>
	HAL_Delay(100);
 8000908:	2064      	movs	r0, #100	; 0x64
 800090a:	f001 fd0f 	bl	800232c <HAL_Delay>
	CS_L();
 800090e:	f000 f89f 	bl	8000a50 <CS_L>
	LED_H();
 8000912:	f000 f8c1 	bl	8000a98 <LED_H>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <ILI9341_SoftReset>:

void ILI9341_SoftReset(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
	uint8_t cmd;
	cmd = 0x01; //Software reset
 8000922:	2301      	movs	r3, #1
 8000924:	71fb      	strb	r3, [r7, #7]
	DC_L();
 8000926:	f000 f89f 	bl	8000a68 <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &cmd, 1, 1000) != HAL_OK) {
 800092a:	1df9      	adds	r1, r7, #7
 800092c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000930:	2201      	movs	r2, #1
 8000932:	4806      	ldr	r0, [pc, #24]	; (800094c <ILI9341_SoftReset+0x30>)
 8000934:	f003 fa73 	bl	8003e1e <HAL_SPI_Transmit>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <ILI9341_SoftReset+0x26>
		Error_Handler();
 800093e:	f000 fcaf 	bl	80012a0 <Error_Handler>
	}
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000017c 	.word	0x2000017c

08000950 <LCD_WR_REG>:


void LCD_WR_REG(uint8_t data)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
	DC_L();
 800095a:	f000 f885 	bl	8000a68 <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 800095e:	1df9      	adds	r1, r7, #7
 8000960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000964:	2201      	movs	r2, #1
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <LCD_WR_REG+0x30>)
 8000968:	f003 fa59 	bl	8003e1e <HAL_SPI_Transmit>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <LCD_WR_REG+0x26>
		Error_Handler();
 8000972:	f000 fc95 	bl	80012a0 <Error_Handler>
	}
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000017c 	.word	0x2000017c

08000984 <LCD_WR_DATA>:

static void LCD_WR_DATA(uint8_t data)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	DC_H();
 800098e:	f000 f877 	bl	8000a80 <DC_H>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 8000992:	1df9      	adds	r1, r7, #7
 8000994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000998:	2201      	movs	r2, #1
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <LCD_WR_DATA+0x30>)
 800099c:	f003 fa3f 	bl	8003e1e <HAL_SPI_Transmit>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <LCD_WR_DATA+0x26>
		Error_Handler();
 80009a6:	f000 fc7b 	bl	80012a0 <Error_Handler>
	}
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2000017c 	.word	0x2000017c

080009b8 <LCD_direction>:
	spiDmaTransferComplete = 1;
}
*/

static void LCD_direction(LCD_Horizontal_t direction)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	switch (direction) {
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b03      	cmp	r3, #3
 80009c6:	d827      	bhi.n	8000a18 <LCD_direction+0x60>
 80009c8:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <LCD_direction+0x18>)
 80009ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ce:	bf00      	nop
 80009d0:	080009e1 	.word	0x080009e1
 80009d4:	080009ef 	.word	0x080009ef
 80009d8:	080009fd 	.word	0x080009fd
 80009dc:	08000a0b 	.word	0x08000a0b
	case ROTATE_0:
		LCD_WR_REG(0x36);
 80009e0:	2036      	movs	r0, #54	; 0x36
 80009e2:	f7ff ffb5 	bl	8000950 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 80009e6:	2048      	movs	r0, #72	; 0x48
 80009e8:	f7ff ffcc 	bl	8000984 <LCD_WR_DATA>
		break;
 80009ec:	e014      	b.n	8000a18 <LCD_direction+0x60>
	case ROTATE_90:
		LCD_WR_REG(0x36);
 80009ee:	2036      	movs	r0, #54	; 0x36
 80009f0:	f7ff ffae 	bl	8000950 <LCD_WR_REG>
		LCD_WR_DATA(0x28);
 80009f4:	2028      	movs	r0, #40	; 0x28
 80009f6:	f7ff ffc5 	bl	8000984 <LCD_WR_DATA>
		break;
 80009fa:	e00d      	b.n	8000a18 <LCD_direction+0x60>
	case ROTATE_180:
		LCD_WR_REG(0x36);
 80009fc:	2036      	movs	r0, #54	; 0x36
 80009fe:	f7ff ffa7 	bl	8000950 <LCD_WR_REG>
		LCD_WR_DATA(0x88);
 8000a02:	2088      	movs	r0, #136	; 0x88
 8000a04:	f7ff ffbe 	bl	8000984 <LCD_WR_DATA>
		break;
 8000a08:	e006      	b.n	8000a18 <LCD_direction+0x60>
	case ROTATE_270:
		LCD_WR_REG(0x36);
 8000a0a:	2036      	movs	r0, #54	; 0x36
 8000a0c:	f7ff ffa0 	bl	8000950 <LCD_WR_REG>
		LCD_WR_DATA(0xE8);
 8000a10:	20e8      	movs	r0, #232	; 0xe8
 8000a12:	f7ff ffb7 	bl	8000984 <LCD_WR_DATA>
		break;
 8000a16:	bf00      	nop
	}
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <RESET_L>:

static void RESET_L(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2110      	movs	r1, #16
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <RESET_L+0x14>)
 8000a2a:	f002 fac7 	bl	8002fbc <HAL_GPIO_WritePin>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40020400 	.word	0x40020400

08000a38 <RESET_H>:

static void RESET_H(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2110      	movs	r1, #16
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <RESET_H+0x14>)
 8000a42:	f002 fabb 	bl	8002fbc <HAL_GPIO_WritePin>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40020400 	.word	0x40020400

08000a50 <CS_L>:

static void CS_L(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_NSS_GPIO_Port, SPI3_NSS_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5a:	4802      	ldr	r0, [pc, #8]	; (8000a64 <CS_L+0x14>)
 8000a5c:	f002 faae 	bl	8002fbc <HAL_GPIO_WritePin>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40020800 	.word	0x40020800

08000a68 <DC_L>:

static void DC_L(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2120      	movs	r1, #32
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <DC_L+0x14>)
 8000a72:	f002 faa3 	bl	8002fbc <HAL_GPIO_WritePin>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40020400 	.word	0x40020400

08000a80 <DC_H>:

static void DC_H(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2120      	movs	r1, #32
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <DC_H+0x14>)
 8000a8a:	f002 fa97 	bl	8002fbc <HAL_GPIO_WritePin>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40020400 	.word	0x40020400

08000a98 <LED_H>:

static void LED_H(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aac:	f001 fbfc 	bl	80022a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab0:	f000 f868 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab4:	f000 fa68 	bl	8000f88 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ab8:	f000 fa46 	bl	8000f48 <MX_DMA_Init>
  MX_CRC_Init();
 8000abc:	f000 f8d6 	bl	8000c6c <MX_CRC_Init>
  MX_SPI2_Init();
 8000ac0:	f000 f8e8 	bl	8000c94 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000ac4:	f000 f91c 	bl	8000d00 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000ac8:	f000 f950 	bl	8000d6c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000acc:	f000 fa12 	bl	8000ef4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000ad0:	f000 f998 	bl	8000e04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000ad4:	f000 f9e4 	bl	8000ea0 <MX_USART1_UART_Init>
  MX_TouchGFX_Init();
 8000ad8:	f008 fe3f 	bl	800975a <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000adc:	f008 fe36 	bl	800974c <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ae0:	4819      	ldr	r0, [pc, #100]	; (8000b48 <main+0xa0>)
 8000ae2:	f004 f96b 	bl	8004dbc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000ae6:	4819      	ldr	r0, [pc, #100]	; (8000b4c <main+0xa4>)
 8000ae8:	f004 f968 	bl	8004dbc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000aec:	f005 fa40 	bl	8005f70 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of waveSema */
  waveSemaHandle = osSemaphoreNew(1, 1, &waveSema_attributes);
 8000af0:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <main+0xa8>)
 8000af2:	2101      	movs	r1, #1
 8000af4:	2001      	movs	r0, #1
 8000af6:	f005 fb32 	bl	800615e <osSemaphoreNew>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <main+0xac>)
 8000afe:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of waveQueue */
  waveQueueHandle = osMessageQueueNew (3, sizeof(MSGQUEUE_WAVE_t), &waveQueue_attributes);
 8000b00:	4a15      	ldr	r2, [pc, #84]	; (8000b58 <main+0xb0>)
 8000b02:	2118      	movs	r1, #24
 8000b04:	2003      	movs	r0, #3
 8000b06:	f005 fc49 	bl	800639c <osMessageQueueNew>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <main+0xb4>)
 8000b0e:	6013      	str	r3, [r2, #0]
//  waveQueueHandle = osMessageQueueNew (1, sizeof(MSGQUEUE_WAVE_t), &waveQueue_attributes);
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of taskGUI */
  taskGUIHandle = osThreadNew(StartTaskGUI, NULL, &taskGUI_attributes);
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <main+0xb8>)
 8000b12:	2100      	movs	r1, #0
 8000b14:	4813      	ldr	r0, [pc, #76]	; (8000b64 <main+0xbc>)
 8000b16:	f005 fa75 	bl	8006004 <osThreadNew>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <main+0xc0>)
 8000b1e:	6013      	str	r3, [r2, #0]

  /* creation of taskEsp32 */
  taskEsp32Handle = osThreadNew(StartTaskEsp32, NULL, &taskEsp32_attributes);
 8000b20:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <main+0xc4>)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4812      	ldr	r0, [pc, #72]	; (8000b70 <main+0xc8>)
 8000b26:	f005 fa6d 	bl	8006004 <osThreadNew>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <main+0xcc>)
 8000b2e:	6013      	str	r3, [r2, #0]

  /* creation of taskWave */
  taskWaveHandle = osThreadNew(StartTaskWave, NULL, &taskWave_attributes);
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <main+0xd0>)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4811      	ldr	r0, [pc, #68]	; (8000b7c <main+0xd4>)
 8000b36:	f005 fa65 	bl	8006004 <osThreadNew>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <main+0xd8>)
 8000b3e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b40:	f005 fa3a 	bl	8005fb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <main+0x9c>
 8000b46:	bf00      	nop
 8000b48:	20000234 	.word	0x20000234
 8000b4c:	2000027c 	.word	0x2000027c
 8000b50:	08029458 	.word	0x08029458
 8000b54:	2000035c 	.word	0x2000035c
 8000b58:	08029440 	.word	0x08029440
 8000b5c:	20000358 	.word	0x20000358
 8000b60:	080293d4 	.word	0x080293d4
 8000b64:	0800119b 	.word	0x0800119b
 8000b68:	2000034c 	.word	0x2000034c
 8000b6c:	080293f8 	.word	0x080293f8
 8000b70:	080011b9 	.word	0x080011b9
 8000b74:	20000350 	.word	0x20000350
 8000b78:	0802941c 	.word	0x0802941c
 8000b7c:	08001215 	.word	0x08001215
 8000b80:	20000354 	.word	0x20000354

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b094      	sub	sp, #80	; 0x50
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	2234      	movs	r2, #52	; 0x34
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f026 f888 	bl	8026ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	f107 0308 	add.w	r3, r7, #8
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <SystemClock_Config+0xe0>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a2c      	ldr	r2, [pc, #176]	; (8000c64 <SystemClock_Config+0xe0>)
 8000bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <SystemClock_Config+0xe0>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <SystemClock_Config+0xe4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a26      	ldr	r2, [pc, #152]	; (8000c68 <SystemClock_Config+0xe4>)
 8000bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <SystemClock_Config+0xe4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be0:	2302      	movs	r3, #2
 8000be2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be4:	2301      	movs	r3, #1
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be8:	2310      	movs	r3, #16
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bec:	2302      	movs	r3, #2
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bf4:	2310      	movs	r3, #16
 8000bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000bf8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000bfc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c06:	2302      	movs	r3, #2
 8000c08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 fdde 	bl	80037d0 <HAL_RCC_OscConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c1a:	f000 fb41 	bl	80012a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c1e:	f002 fa0b 	bl	8003038 <HAL_PWREx_EnableOverDrive>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000c28:	f000 fb3a 	bl	80012a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c30:	2302      	movs	r3, #2
 8000c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	2105      	movs	r1, #5
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fa44 	bl	80030d8 <HAL_RCC_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000c56:	f000 fb23 	bl	80012a0 <Error_Handler>
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	3750      	adds	r7, #80	; 0x50
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40007000 	.word	0x40007000

08000c6c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_CRC_Init+0x20>)
 8000c72:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <MX_CRC_Init+0x24>)
 8000c74:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_CRC_Init+0x20>)
 8000c78:	f001 fc5e 	bl	8002538 <HAL_CRC_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000c82:	f000 fb0d 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000011c 	.word	0x2000011c
 8000c90:	40023000 	.word	0x40023000

08000c94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000c9a:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <MX_SPI2_Init+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ca0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cc8:	2220      	movs	r2, #32
 8000cca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ce0:	220a      	movs	r2, #10
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ce6:	f003 f811 	bl	8003d0c <HAL_SPI_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000cf0:	f000 fad6 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000124 	.word	0x20000124
 8000cfc:	40003800 	.word	0x40003800

08000d00 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d06:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <MX_SPI3_Init+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d10:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d30:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d4c:	220a      	movs	r2, #10
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_SPI3_Init+0x64>)
 8000d52:	f002 ffdb 	bl	8003d0c <HAL_SPI_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000d5c:	f000 faa0 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000017c 	.word	0x2000017c
 8000d68:	40003c00 	.word	0x40003c00

08000d6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	463b      	mov	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000d92:	22c7      	movs	r2, #199	; 0xc7
 8000d94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 45000-1;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000d9e:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000da2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db0:	4813      	ldr	r0, [pc, #76]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000db2:	f003 ffb3 	bl	8004d1c <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dbc:	f000 fa70 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000dce:	f004 f96d 	bl	80050ac <HAL_TIM_ConfigClockSource>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dd8:	f000 fa62 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000dea:	f004 fb89 	bl	8005500 <HAL_TIMEx_MasterConfigSynchronization>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000df4:	f000 fa54 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000234 	.word	0x20000234

08000e04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <MX_TIM3_Init+0x94>)
 8000e22:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <MX_TIM3_Init+0x98>)
 8000e24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40-1;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_TIM3_Init+0x94>)
 8000e28:	2227      	movs	r2, #39	; 0x27
 8000e2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <MX_TIM3_Init+0x94>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 45000-1;
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_TIM3_Init+0x94>)
 8000e34:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000e38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_TIM3_Init+0x94>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_TIM3_Init+0x94>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e46:	4814      	ldr	r0, [pc, #80]	; (8000e98 <MX_TIM3_Init+0x94>)
 8000e48:	f003 ff68 	bl	8004d1c <HAL_TIM_Base_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e52:	f000 fa25 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	4619      	mov	r1, r3
 8000e62:	480d      	ldr	r0, [pc, #52]	; (8000e98 <MX_TIM3_Init+0x94>)
 8000e64:	f004 f922 	bl	80050ac <HAL_TIM_ConfigClockSource>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e6e:	f000 fa17 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <MX_TIM3_Init+0x94>)
 8000e80:	f004 fb3e 	bl	8005500 <HAL_TIMEx_MasterConfigSynchronization>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e8a:	f000 fa09 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000027c 	.word	0x2000027c
 8000e9c:	40000400 	.word	0x40000400

08000ea0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <MX_USART1_UART_Init+0x50>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000ecc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ed0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_USART1_UART_Init+0x4c>)
 8000eda:	f004 fba1 	bl	8005620 <HAL_UART_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000ee4:	f000 f9dc 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200002c4 	.word	0x200002c4
 8000ef0:	40011000 	.word	0x40011000

08000ef4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <MX_USART2_UART_Init+0x50>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f2c:	f004 fb78 	bl	8005620 <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f36:	f000 f9b3 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000308 	.word	0x20000308
 8000f44:	40004400 	.word	0x40004400

08000f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_DMA_Init+0x3c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <MX_DMA_Init+0x3c>)
 8000f58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_DMA_Init+0x3c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2105      	movs	r1, #5
 8000f6e:	2010      	movs	r0, #16
 8000f70:	f001 fab8 	bl	80024e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f74:	2010      	movs	r0, #16
 8000f76:	f001 fad1 	bl	800251c <HAL_NVIC_EnableIRQ>

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800

08000f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b50      	ldr	r3, [pc, #320]	; (80010e4 <MX_GPIO_Init+0x15c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a4f      	ldr	r2, [pc, #316]	; (80010e4 <MX_GPIO_Init+0x15c>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b4d      	ldr	r3, [pc, #308]	; (80010e4 <MX_GPIO_Init+0x15c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <MX_GPIO_Init+0x15c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a48      	ldr	r2, [pc, #288]	; (80010e4 <MX_GPIO_Init+0x15c>)
 8000fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <MX_GPIO_Init+0x15c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	4b42      	ldr	r3, [pc, #264]	; (80010e4 <MX_GPIO_Init+0x15c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a41      	ldr	r2, [pc, #260]	; (80010e4 <MX_GPIO_Init+0x15c>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b3f      	ldr	r3, [pc, #252]	; (80010e4 <MX_GPIO_Init+0x15c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	4b3b      	ldr	r3, [pc, #236]	; (80010e4 <MX_GPIO_Init+0x15c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a3a      	ldr	r2, [pc, #232]	; (80010e4 <MX_GPIO_Init+0x15c>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <MX_GPIO_Init+0x15c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SysTickOut_Pin|TickOut_Pin|SPI3_NSS_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f241 0109 	movw	r1, #4105	; 0x1009
 8001014:	4834      	ldr	r0, [pc, #208]	; (80010e8 <MX_GPIO_Init+0x160>)
 8001016:	f001 ffd1 	bl	8002fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2120      	movs	r1, #32
 800101e:	4833      	ldr	r0, [pc, #204]	; (80010ec <MX_GPIO_Init+0x164>)
 8001020:	f001 ffcc 	bl	8002fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CS_Pin|RESET_Pin|DC_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2134      	movs	r1, #52	; 0x34
 8001028:	4831      	ldr	r0, [pc, #196]	; (80010f0 <MX_GPIO_Init+0x168>)
 800102a:	f001 ffc7 	bl	8002fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800102e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001034:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4828      	ldr	r0, [pc, #160]	; (80010e8 <MX_GPIO_Init+0x160>)
 8001046:	f001 fe25 	bl	8002c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SysTickOut_Pin TickOut_Pin SPI3_NSS_Pin */
  GPIO_InitStruct.Pin = SysTickOut_Pin|TickOut_Pin|SPI3_NSS_Pin;
 800104a:	f241 0309 	movw	r3, #4105	; 0x1009
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	4821      	ldr	r0, [pc, #132]	; (80010e8 <MX_GPIO_Init+0x160>)
 8001064:	f001 fe16 	bl	8002c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001068:	2320      	movs	r3, #32
 800106a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	481b      	ldr	r0, [pc, #108]	; (80010ec <MX_GPIO_Init+0x164>)
 8001080:	f001 fe08 	bl	8002c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001084:	2302      	movs	r3, #2
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001088:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4815      	ldr	r0, [pc, #84]	; (80010f0 <MX_GPIO_Init+0x168>)
 800109a:	f001 fdfb 	bl	8002c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CS_Pin RESET_Pin DC_Pin */
  GPIO_InitStruct.Pin = T_CS_Pin|RESET_Pin|DC_Pin;
 800109e:	2334      	movs	r3, #52	; 0x34
 80010a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	480e      	ldr	r0, [pc, #56]	; (80010f0 <MX_GPIO_Init+0x168>)
 80010b6:	f001 fded 	bl	8002c94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2105      	movs	r1, #5
 80010be:	2007      	movs	r0, #7
 80010c0:	f001 fa10 	bl	80024e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010c4:	2007      	movs	r0, #7
 80010c6:	f001 fa29 	bl	800251c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2105      	movs	r1, #5
 80010ce:	2028      	movs	r0, #40	; 0x28
 80010d0:	f001 fa08 	bl	80024e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010d4:	2028      	movs	r0, #40	; 0x28
 80010d6:	f001 fa21 	bl	800251c <HAL_NVIC_EnableIRQ>

}
 80010da:	bf00      	nop
 80010dc:	3728      	adds	r7, #40	; 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020800 	.word	0x40020800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020400 	.word	0x40020400

080010f4 <__io_putchar>:

/* USER CODE BEGIN 4 */
void __io_putchar(uint8_t ch)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart2, &ch, 1, 1);
 80010fe:	1df9      	adds	r1, r7, #7
 8001100:	2301      	movs	r3, #1
 8001102:	2201      	movs	r2, #1
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <__io_putchar+0x20>)
 8001106:	f004 fad8 	bl	80056ba <HAL_UART_Transmit>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000308 	.word	0x20000308

08001118 <__io_getchar>:

int __io_getchar(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef Status = HAL_BUSY;
 800111e:	2302      	movs	r3, #2
 8001120:	71fb      	strb	r3, [r7, #7]
  uint8_t Data;

  while(Status != HAL_OK)
 8001122:	e007      	b.n	8001134 <__io_getchar+0x1c>
    Status = HAL_UART_Receive(&huart2, &Data, 1, 10);
 8001124:	1db9      	adds	r1, r7, #6
 8001126:	230a      	movs	r3, #10
 8001128:	2201      	movs	r2, #1
 800112a:	4806      	ldr	r0, [pc, #24]	; (8001144 <__io_getchar+0x2c>)
 800112c:	f004 fb57 	bl	80057de <HAL_UART_Receive>
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  while(Status != HAL_OK)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f4      	bne.n	8001124 <__io_getchar+0xc>

  return Data;
 800113a:	79bb      	ldrb	r3, [r7, #6]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000308 	.word	0x20000308

08001148 <_writex>:

int _writex(UART_HandleTypeDef *huart, uint8_t *ptr, int len)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(huart, (uint8_t *)ptr, len, 0);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	b29a      	uxth	r2, r3
 8001158:	2300      	movs	r3, #0
 800115a:	68b9      	ldr	r1, [r7, #8]
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f004 faac 	bl	80056ba <HAL_UART_Transmit>
  return len;
 8001162:	687b      	ldr	r3, [r7, #4]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_readx>:

int _readx(UART_HandleTypeDef *huart, uint8_t *ptr, int len)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  if(HAL_UART_Receive(huart, (uint8_t *)ptr, len, 0) == HAL_OK)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	b29a      	uxth	r2, r3
 800117c:	2300      	movs	r3, #0
 800117e:	68b9      	ldr	r1, [r7, #8]
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f004 fb2c 	bl	80057de <HAL_UART_Receive>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <_readx+0x24>
    return len;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	e000      	b.n	8001192 <_readx+0x26>
  else
    return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <StartTaskGUI>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskGUI */
void StartTaskGUI(void *argument)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  ILI9341_Init();
 80011a2:	f7ff fa07 	bl	80005b4 <ILI9341_Init>
  XPT2046_Init();
 80011a6:	f000 ff13 	bl	8001fd0 <XPT2046_Init>
#ifndef USE_WAVE_TASK
  initSin();
#endif
  MX_TouchGFX_Process();
 80011aa:	f008 fadc 	bl	8009766 <MX_TouchGFX_Process>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f004 ffba 	bl	8006128 <osDelay>
 80011b4:	e7fb      	b.n	80011ae <StartTaskGUI+0x14>
	...

080011b8 <StartTaskEsp32>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskEsp32 */
void StartTaskEsp32(void *argument)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    uint8_t c;
    while(1){
      if(_readx(&huart1, &c, 1)){
 80011c0:	f107 030f 	add.w	r3, r7, #15
 80011c4:	2201      	movs	r2, #1
 80011c6:	4619      	mov	r1, r3
 80011c8:	4810      	ldr	r0, [pc, #64]	; (800120c <StartTaskEsp32+0x54>)
 80011ca:	f7ff ffcf 	bl	800116c <_readx>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d007      	beq.n	80011e4 <StartTaskEsp32+0x2c>
        _writex(&huart2, &c, 1);
 80011d4:	f107 030f 	add.w	r3, r7, #15
 80011d8:	2201      	movs	r2, #1
 80011da:	4619      	mov	r1, r3
 80011dc:	480c      	ldr	r0, [pc, #48]	; (8001210 <StartTaskEsp32+0x58>)
 80011de:	f7ff ffb3 	bl	8001148 <_writex>
      if(_readx(&huart1, &c, 1)){
 80011e2:	e7ed      	b.n	80011c0 <StartTaskEsp32+0x8>
      } else
        break;
 80011e4:	bf00      	nop
    }

    if(_readx(&huart2, &c, 1)){
 80011e6:	f107 030f 	add.w	r3, r7, #15
 80011ea:	2201      	movs	r2, #1
 80011ec:	4619      	mov	r1, r3
 80011ee:	4808      	ldr	r0, [pc, #32]	; (8001210 <StartTaskEsp32+0x58>)
 80011f0:	f7ff ffbc 	bl	800116c <_readx>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0e2      	beq.n	80011c0 <StartTaskEsp32+0x8>
      _writex(&huart1, &c, 1);
 80011fa:	f107 030f 	add.w	r3, r7, #15
 80011fe:	2201      	movs	r2, #1
 8001200:	4619      	mov	r1, r3
 8001202:	4802      	ldr	r0, [pc, #8]	; (800120c <StartTaskEsp32+0x54>)
 8001204:	f7ff ffa0 	bl	8001148 <_writex>
  {
 8001208:	e7da      	b.n	80011c0 <StartTaskEsp32+0x8>
 800120a:	bf00      	nop
 800120c:	200002c4 	.word	0x200002c4
 8001210:	20000308 	.word	0x20000308

08001214 <StartTaskWave>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskWave */
void StartTaskWave(void *argument)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskWave */

  /* Infinite loop */
#ifdef USE_WAVE_TASK
  osSemaphoreAcquire(waveSemaHandle, osWaitForever);
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <StartTaskWave+0x3c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	4618      	mov	r0, r3
 8001226:	f005 f823 	bl	8006270 <osSemaphoreAcquire>
  initSin();
 800122a:	f000 f83f 	bl	80012ac <initSin>
#endif
  for(;;)
  {
#ifdef USE_WAVE_TASK
    if(osSemaphoreAcquire(waveSemaHandle, osWaitForever) == osOK)
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <StartTaskWave+0x3c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f04f 31ff 	mov.w	r1, #4294967295
 8001236:	4618      	mov	r0, r3
 8001238:	f005 f81a 	bl	8006270 <osSemaphoreAcquire>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <StartTaskWave+0x32>
      generateSin();
 8001242:	f000 f893 	bl	800136c <generateSin>
#endif
    osDelay(1);
 8001246:	2001      	movs	r0, #1
 8001248:	f004 ff6e 	bl	8006128 <osDelay>
    if(osSemaphoreAcquire(waveSemaHandle, osWaitForever) == osOK)
 800124c:	e7ef      	b.n	800122e <StartTaskWave+0x1a>
 800124e:	bf00      	nop
 8001250:	2000035c 	.word	0x2000035c

08001254 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001266:	f001 f841 	bl	80022ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  extern void touchgfxSignalVSync(void);
  if (htim->Instance == TIM2) {
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001272:	d101      	bne.n	8001278 <HAL_TIM_PeriodElapsedCallback+0x24>
    touchgfxSignalVSync();
 8001274:	f00f fc4a 	bl	8010b0c <touchgfxSignalVSync>
  }

  if (htim->Instance == TIM3) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d104      	bne.n	800128c <HAL_TIM_PeriodElapsedCallback+0x38>
//    HAL_GPIO_TogglePin(GPIOC, SysTickOut_Pin);
#ifdef USE_WAVE_TASK
    osSemaphoreRelease(waveSemaHandle);
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f005 f844 	bl	8006314 <osSemaphoreRelease>
    generateSin();
#endif
  }

  /* USER CODE END Callback 1 */
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40014800 	.word	0x40014800
 8001298:	40000400 	.word	0x40000400
 800129c:	2000035c 	.word	0x2000035c

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <Error_Handler+0x8>
	...

080012ac <initSin>:
static MSGQUEUE_WAVE_t  wave;
/*
 * --------------------------------------SIN curve generation --------------------------------------
 */
void initSin()
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
  readyCount = 0;
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <initSin+0x94>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
  tick = 0;
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <initSin+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
  unitDeg = 2;      // 2deg / interval
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <initSin+0x9c>)
 80012c0:	2202      	movs	r2, #2
 80012c2:	601a      	str	r2, [r3, #0]
  intervalDeg = 360 / unitDeg;
 80012c4:	4b20      	ldr	r3, [pc, #128]	; (8001348 <initSin+0x9c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80012cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d0:	4a1e      	ldr	r2, [pc, #120]	; (800134c <initSin+0xa0>)
 80012d2:	6013      	str	r3, [r2, #0]
  tickH = 0;        //180 / (2*unitDeg);
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <initSin+0xa4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
  tickM = 170;       //90 / (2*unitDeg);
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <initSin+0xa8>)
 80012dc:	22aa      	movs	r2, #170	; 0xaa
 80012de:	601a      	str	r2, [r3, #0]
  tickL = 10;       //30;
 80012e0:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <initSin+0xac>)
 80012e2:	220a      	movs	r2, #10
 80012e4:	601a      	str	r2, [r3, #0]
  for(int i=0; i<360; i++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	e01d      	b.n	8001328 <initSin+0x7c>
    sin_lut[i] = sinf((float)(i) * 2.0f * 3.141592f / 360.0f);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012fa:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800135c <initSin+0xb0>
 80012fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001302:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001360 <initSin+0xb4>
 8001306:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800130a:	eeb0 0a47 	vmov.f32	s0, s14
 800130e:	f024 fde1 	bl	8025ed4 <sinf>
 8001312:	eef0 7a40 	vmov.f32	s15, s0
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <initSin+0xb8>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	edc3 7a00 	vstr	s15, [r3]
  for(int i=0; i<360; i++)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3301      	adds	r3, #1
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800132e:	dbdd      	blt.n	80012ec <initSin+0x40>
  dataCount = 0;
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <initSin+0xbc>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000091c 	.word	0x2000091c
 8001344:	20000360 	.word	0x20000360
 8001348:	20000374 	.word	0x20000374
 800134c:	20000370 	.word	0x20000370
 8001350:	20000364 	.word	0x20000364
 8001354:	20000368 	.word	0x20000368
 8001358:	2000036c 	.word	0x2000036c
 800135c:	40490fd8 	.word	0x40490fd8
 8001360:	43b40000 	.word	0x43b40000
 8001364:	20000378 	.word	0x20000378
 8001368:	20000918 	.word	0x20000918

0800136c <generateSin>:

void generateSin()
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
  extern osMessageQueueId_t waveQueueHandle;
  extern int graphActive;
  float ymaxH, ymaxM, ymaxL;
  float value;

  if(readyCount++ < 30) return;
 8001372:	4b71      	ldr	r3, [pc, #452]	; (8001538 <generateSin+0x1cc>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	496f      	ldr	r1, [pc, #444]	; (8001538 <generateSin+0x1cc>)
 800137a:	600a      	str	r2, [r1, #0]
 800137c:	2b1d      	cmp	r3, #29
 800137e:	f340 80d7 	ble.w	8001530 <generateSin+0x1c4>

  if(graphActive){
 8001382:	4b6e      	ldr	r3, [pc, #440]	; (800153c <generateSin+0x1d0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 80d3 	beq.w	8001532 <generateSin+0x1c6>
    ymaxH = 2.0;  //2.0f
 800138c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001390:	617b      	str	r3, [r7, #20]
    ymaxM = 5.0;  //5.0f;
 8001392:	4b6b      	ldr	r3, [pc, #428]	; (8001540 <generateSin+0x1d4>)
 8001394:	613b      	str	r3, [r7, #16]
    ymaxL = 30.0;  //30.0f;
 8001396:	4b6b      	ldr	r3, [pc, #428]	; (8001544 <generateSin+0x1d8>)
 8001398:	60fb      	str	r3, [r7, #12]
    value = (sin_lut[tickH*unitDeg] + 1.0f) * ymaxH;
 800139a:	4b6b      	ldr	r3, [pc, #428]	; (8001548 <generateSin+0x1dc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a6b      	ldr	r2, [pc, #428]	; (800154c <generateSin+0x1e0>)
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	4a6a      	ldr	r2, [pc, #424]	; (8001550 <generateSin+0x1e4>)
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	edc7 7a02 	vstr	s15, [r7, #8]
    value += (sin_lut[tickM*unitDeg] + 1.0f) * ymaxM;
 80013c4:	4b63      	ldr	r3, [pc, #396]	; (8001554 <generateSin+0x1e8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a60      	ldr	r2, [pc, #384]	; (800154c <generateSin+0x1e0>)
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	fb02 f303 	mul.w	r3, r2, r3
 80013d0:	4a5f      	ldr	r2, [pc, #380]	; (8001550 <generateSin+0x1e4>)
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80013ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f2:	edc7 7a02 	vstr	s15, [r7, #8]
    value += (sin_lut[tickL*unitDeg] + 1.0f) * ymaxL;
 80013f6:	4b58      	ldr	r3, [pc, #352]	; (8001558 <generateSin+0x1ec>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a54      	ldr	r2, [pc, #336]	; (800154c <generateSin+0x1e0>)
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	fb02 f303 	mul.w	r3, r2, r3
 8001402:	4a53      	ldr	r2, [pc, #332]	; (8001550 <generateSin+0x1e4>)
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001410:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001414:	edd7 7a03 	vldr	s15, [r7, #12]
 8001418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001424:	edc7 7a02 	vstr	s15, [r7, #8]
    value += (float)(rand() % 20);
 8001428:	f026 f82c 	bl	8027484 <rand>
 800142c:	4602      	mov	r2, r0
 800142e:	4b4b      	ldr	r3, [pc, #300]	; (800155c <generateSin+0x1f0>)
 8001430:	fb83 1302 	smull	r1, r3, r3, r2
 8001434:	10d9      	asrs	r1, r3, #3
 8001436:	17d3      	asrs	r3, r2, #31
 8001438:	1ac9      	subs	r1, r1, r3
 800143a:	460b      	mov	r3, r1
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	1ad1      	subs	r1, r2, r3
 8001444:	ee07 1a90 	vmov	s15, r1
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001454:	edc7 7a02 	vstr	s15, [r7, #8]
    wave.val[dataCount] = value;
 8001458:	4b41      	ldr	r3, [pc, #260]	; (8001560 <generateSin+0x1f4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a41      	ldr	r2, [pc, #260]	; (8001564 <generateSin+0x1f8>)
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	601a      	str	r2, [r3, #0]

//    if((tick % unitDeg) == 0)     tickL++;
//    if((tick % (unitDeg/2)) == 0) tickM++;
    tickL++;
 8001466:	4b3c      	ldr	r3, [pc, #240]	; (8001558 <generateSin+0x1ec>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	4a3a      	ldr	r2, [pc, #232]	; (8001558 <generateSin+0x1ec>)
 800146e:	6013      	str	r3, [r2, #0]
    tickM += 10;
 8001470:	4b38      	ldr	r3, [pc, #224]	; (8001554 <generateSin+0x1e8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	330a      	adds	r3, #10
 8001476:	4a37      	ldr	r2, [pc, #220]	; (8001554 <generateSin+0x1e8>)
 8001478:	6013      	str	r3, [r2, #0]
    tickH += 45;
 800147a:	4b33      	ldr	r3, [pc, #204]	; (8001548 <generateSin+0x1dc>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	332d      	adds	r3, #45	; 0x2d
 8001480:	4a31      	ldr	r2, [pc, #196]	; (8001548 <generateSin+0x1dc>)
 8001482:	6013      	str	r3, [r2, #0]
    tick++;
 8001484:	4b38      	ldr	r3, [pc, #224]	; (8001568 <generateSin+0x1fc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	4a37      	ldr	r2, [pc, #220]	; (8001568 <generateSin+0x1fc>)
 800148c:	6013      	str	r3, [r2, #0]

    tickL %= intervalDeg;
 800148e:	4b32      	ldr	r3, [pc, #200]	; (8001558 <generateSin+0x1ec>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a36      	ldr	r2, [pc, #216]	; (800156c <generateSin+0x200>)
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	fb93 f1f2 	sdiv	r1, r3, r2
 800149a:	fb01 f202 	mul.w	r2, r1, r2
 800149e:	1a9b      	subs	r3, r3, r2
 80014a0:	4a2d      	ldr	r2, [pc, #180]	; (8001558 <generateSin+0x1ec>)
 80014a2:	6013      	str	r3, [r2, #0]
    tickM %= intervalDeg;
 80014a4:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <generateSin+0x1e8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a30      	ldr	r2, [pc, #192]	; (800156c <generateSin+0x200>)
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80014b0:	fb01 f202 	mul.w	r2, r1, r2
 80014b4:	1a9b      	subs	r3, r3, r2
 80014b6:	4a27      	ldr	r2, [pc, #156]	; (8001554 <generateSin+0x1e8>)
 80014b8:	6013      	str	r3, [r2, #0]
    tickH %= intervalDeg;
 80014ba:	4b23      	ldr	r3, [pc, #140]	; (8001548 <generateSin+0x1dc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a2b      	ldr	r2, [pc, #172]	; (800156c <generateSin+0x200>)
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	fb93 f1f2 	sdiv	r1, r3, r2
 80014c6:	fb01 f202 	mul.w	r2, r1, r2
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	4a1e      	ldr	r2, [pc, #120]	; (8001548 <generateSin+0x1dc>)
 80014ce:	6013      	str	r3, [r2, #0]
    tick  %= intervalDeg;
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <generateSin+0x1fc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a25      	ldr	r2, [pc, #148]	; (800156c <generateSin+0x200>)
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80014dc:	fb01 f202 	mul.w	r2, r1, r2
 80014e0:	1a9b      	subs	r3, r3, r2
 80014e2:	4a21      	ldr	r2, [pc, #132]	; (8001568 <generateSin+0x1fc>)
 80014e4:	6013      	str	r3, [r2, #0]

    if(++dataCount == 5){
 80014e6:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <generateSin+0x1f4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <generateSin+0x1f4>)
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <generateSin+0x1f4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	d11c      	bne.n	8001532 <generateSin+0x1c6>
      wave.n = dataCount;
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <generateSin+0x1f4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <generateSin+0x1f8>)
 8001500:	829a      	strh	r2, [r3, #20]

      osStatus_t  s;
      if((s = osMessageQueuePut(waveQueueHandle, &wave, 0U, 0)) == osOK){
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <generateSin+0x204>)
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	2300      	movs	r3, #0
 8001508:	2200      	movs	r2, #0
 800150a:	4916      	ldr	r1, [pc, #88]	; (8001564 <generateSin+0x1f8>)
 800150c:	f004 ffba 	bl	8006484 <osMessageQueuePut>
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d007      	beq.n	8001528 <generateSin+0x1bc>
        printf("--- Put Queue ---\n");
        for(int i=0; i<5; i++)
          printf("[%d] = %d, ", i, (int)wave.val[i]);
        printf("\n");
#endif
      } else if(s == osErrorResource){
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f113 0f03 	cmn.w	r3, #3
 800151e:	d103      	bne.n	8001528 <generateSin+0x1bc>
        printf("Queue is not ready(%d)\n", s);
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4814      	ldr	r0, [pc, #80]	; (8001574 <generateSin+0x208>)
 8001524:	f025 ff96 	bl	8027454 <iprintf>
      }
      dataCount = 0;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <generateSin+0x1f4>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e000      	b.n	8001532 <generateSin+0x1c6>
  if(readyCount++ < 30) return;
 8001530:	bf00      	nop
//      osThreadYield();
    }
  }
}
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	2000091c 	.word	0x2000091c
 800153c:	2000545c 	.word	0x2000545c
 8001540:	40a00000 	.word	0x40a00000
 8001544:	41f00000 	.word	0x41f00000
 8001548:	20000364 	.word	0x20000364
 800154c:	20000374 	.word	0x20000374
 8001550:	20000378 	.word	0x20000378
 8001554:	20000368 	.word	0x20000368
 8001558:	2000036c 	.word	0x2000036c
 800155c:	66666667 	.word	0x66666667
 8001560:	20000918 	.word	0x20000918
 8001564:	20000920 	.word	0x20000920
 8001568:	20000360 	.word	0x20000360
 800156c:	20000370 	.word	0x20000370
 8001570:	20000358 	.word	0x20000358
 8001574:	08027cd0 	.word	0x08027cd0

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_MspInit+0x54>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <HAL_MspInit+0x54>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_MspInit+0x54>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_MspInit+0x54>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_MspInit+0x54>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_MspInit+0x54>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	210f      	movs	r1, #15
 80015ba:	f06f 0001 	mvn.w	r0, #1
 80015be:	f000 ff91 	bl	80024e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_CRC_MspInit+0x3c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d10d      	bne.n	80015fe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_CRC_MspInit+0x40>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a09      	ldr	r2, [pc, #36]	; (8001610 <HAL_CRC_MspInit+0x40>)
 80015ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <HAL_CRC_MspInit+0x40>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023000 	.word	0x40023000
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08e      	sub	sp, #56	; 0x38
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a85      	ldr	r2, [pc, #532]	; (8001848 <HAL_SPI_MspInit+0x234>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d163      	bne.n	80016fe <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
 800163a:	4b84      	ldr	r3, [pc, #528]	; (800184c <HAL_SPI_MspInit+0x238>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a83      	ldr	r2, [pc, #524]	; (800184c <HAL_SPI_MspInit+0x238>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b81      	ldr	r3, [pc, #516]	; (800184c <HAL_SPI_MspInit+0x238>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164e:	623b      	str	r3, [r7, #32]
 8001650:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	4b7d      	ldr	r3, [pc, #500]	; (800184c <HAL_SPI_MspInit+0x238>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a7c      	ldr	r2, [pc, #496]	; (800184c <HAL_SPI_MspInit+0x238>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b7a      	ldr	r3, [pc, #488]	; (800184c <HAL_SPI_MspInit+0x238>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	4b76      	ldr	r3, [pc, #472]	; (800184c <HAL_SPI_MspInit+0x238>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a75      	ldr	r2, [pc, #468]	; (800184c <HAL_SPI_MspInit+0x238>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b73      	ldr	r3, [pc, #460]	; (800184c <HAL_SPI_MspInit+0x238>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800168a:	2302      	movs	r3, #2
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	2303      	movs	r3, #3
 8001698:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800169a:	2307      	movs	r3, #7
 800169c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a2:	4619      	mov	r1, r3
 80016a4:	486a      	ldr	r0, [pc, #424]	; (8001850 <HAL_SPI_MspInit+0x23c>)
 80016a6:	f001 faf5 	bl	8002c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016aa:	2304      	movs	r3, #4
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016ba:	2305      	movs	r3, #5
 80016bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	4862      	ldr	r0, [pc, #392]	; (8001850 <HAL_SPI_MspInit+0x23c>)
 80016c6:	f001 fae5 	bl	8002c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016dc:	2305      	movs	r3, #5
 80016de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e4:	4619      	mov	r1, r3
 80016e6:	485b      	ldr	r0, [pc, #364]	; (8001854 <HAL_SPI_MspInit+0x240>)
 80016e8:	f001 fad4 	bl	8002c94 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2105      	movs	r1, #5
 80016f0:	2024      	movs	r0, #36	; 0x24
 80016f2:	f000 fef7 	bl	80024e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80016f6:	2024      	movs	r0, #36	; 0x24
 80016f8:	f000 ff10 	bl	800251c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016fc:	e09f      	b.n	800183e <HAL_SPI_MspInit+0x22a>
  else if(hspi->Instance==SPI3)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a55      	ldr	r2, [pc, #340]	; (8001858 <HAL_SPI_MspInit+0x244>)
 8001704:	4293      	cmp	r3, r2
 8001706:	f040 809a 	bne.w	800183e <HAL_SPI_MspInit+0x22a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	4b4f      	ldr	r3, [pc, #316]	; (800184c <HAL_SPI_MspInit+0x238>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a4e      	ldr	r2, [pc, #312]	; (800184c <HAL_SPI_MspInit+0x238>)
 8001714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b4c      	ldr	r3, [pc, #304]	; (800184c <HAL_SPI_MspInit+0x238>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_SPI_MspInit+0x238>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a47      	ldr	r2, [pc, #284]	; (800184c <HAL_SPI_MspInit+0x238>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b45      	ldr	r3, [pc, #276]	; (800184c <HAL_SPI_MspInit+0x238>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b41      	ldr	r3, [pc, #260]	; (800184c <HAL_SPI_MspInit+0x238>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a40      	ldr	r2, [pc, #256]	; (800184c <HAL_SPI_MspInit+0x238>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b3e      	ldr	r3, [pc, #248]	; (800184c <HAL_SPI_MspInit+0x238>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800175e:	2301      	movs	r3, #1
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800176e:	2307      	movs	r3, #7
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	4836      	ldr	r0, [pc, #216]	; (8001854 <HAL_SPI_MspInit+0x240>)
 800177a:	f001 fa8b 	bl	8002c94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800177e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001788:	2301      	movs	r3, #1
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001790:	2306      	movs	r3, #6
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001798:	4619      	mov	r1, r3
 800179a:	482d      	ldr	r0, [pc, #180]	; (8001850 <HAL_SPI_MspInit+0x23c>)
 800179c:	f001 fa7a 	bl	8002c94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017b2:	2306      	movs	r3, #6
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ba:	4619      	mov	r1, r3
 80017bc:	4824      	ldr	r0, [pc, #144]	; (8001850 <HAL_SPI_MspInit+0x23c>)
 80017be:	f001 fa69 	bl	8002c94 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_SPI_MspInit+0x248>)
 80017c4:	4a26      	ldr	r2, [pc, #152]	; (8001860 <HAL_SPI_MspInit+0x24c>)
 80017c6:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_SPI_MspInit+0x248>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <HAL_SPI_MspInit+0x248>)
 80017d0:	2240      	movs	r2, #64	; 0x40
 80017d2:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_SPI_MspInit+0x248>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <HAL_SPI_MspInit+0x248>)
 80017dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e0:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <HAL_SPI_MspInit+0x248>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <HAL_SPI_MspInit+0x248>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_SPI_MspInit+0x248>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <HAL_SPI_MspInit+0x248>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_SPI_MspInit+0x248>)
 80017fc:	2204      	movs	r2, #4
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_SPI_MspInit+0x248>)
 8001802:	2203      	movs	r2, #3
 8001804:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_SPI_MspInit+0x248>)
 8001808:	2200      	movs	r2, #0
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_SPI_MspInit+0x248>)
 800180e:	2200      	movs	r2, #0
 8001810:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001812:	4812      	ldr	r0, [pc, #72]	; (800185c <HAL_SPI_MspInit+0x248>)
 8001814:	f000 feac 	bl	8002570 <HAL_DMA_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_SPI_MspInit+0x20e>
      Error_Handler();
 800181e:	f7ff fd3f 	bl	80012a0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <HAL_SPI_MspInit+0x248>)
 8001826:	649a      	str	r2, [r3, #72]	; 0x48
 8001828:	4a0c      	ldr	r2, [pc, #48]	; (800185c <HAL_SPI_MspInit+0x248>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2105      	movs	r1, #5
 8001832:	2033      	movs	r0, #51	; 0x33
 8001834:	f000 fe56 	bl	80024e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001838:	2033      	movs	r0, #51	; 0x33
 800183a:	f000 fe6f 	bl	800251c <HAL_NVIC_EnableIRQ>
}
 800183e:	bf00      	nop
 8001840:	3738      	adds	r7, #56	; 0x38
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40003800 	.word	0x40003800
 800184c:	40023800 	.word	0x40023800
 8001850:	40020800 	.word	0x40020800
 8001854:	40020400 	.word	0x40020400
 8001858:	40003c00 	.word	0x40003c00
 800185c:	200001d4 	.word	0x200001d4
 8001860:	40026088 	.word	0x40026088

08001864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001874:	d116      	bne.n	80018a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_TIM_Base_MspInit+0x80>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a19      	ldr	r2, [pc, #100]	; (80018e4 <HAL_TIM_Base_MspInit+0x80>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <HAL_TIM_Base_MspInit+0x80>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2105      	movs	r1, #5
 8001896:	201c      	movs	r0, #28
 8001898:	f000 fe24 	bl	80024e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800189c:	201c      	movs	r0, #28
 800189e:	f000 fe3d 	bl	800251c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018a2:	e01a      	b.n	80018da <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <HAL_TIM_Base_MspInit+0x84>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d115      	bne.n	80018da <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_TIM_Base_MspInit+0x80>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <HAL_TIM_Base_MspInit+0x80>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_TIM_Base_MspInit+0x80>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2105      	movs	r1, #5
 80018ce:	201d      	movs	r0, #29
 80018d0:	f000 fe08 	bl	80024e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018d4:	201d      	movs	r0, #29
 80018d6:	f000 fe21 	bl	800251c <HAL_NVIC_EnableIRQ>
}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40000400 	.word	0x40000400

080018ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <HAL_UART_MspInit+0xe8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d12d      	bne.n	800196a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	4b31      	ldr	r3, [pc, #196]	; (80019d8 <HAL_UART_MspInit+0xec>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	4a30      	ldr	r2, [pc, #192]	; (80019d8 <HAL_UART_MspInit+0xec>)
 8001918:	f043 0310 	orr.w	r3, r3, #16
 800191c:	6453      	str	r3, [r2, #68]	; 0x44
 800191e:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <HAL_UART_MspInit+0xec>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <HAL_UART_MspInit+0xec>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a29      	ldr	r2, [pc, #164]	; (80019d8 <HAL_UART_MspInit+0xec>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <HAL_UART_MspInit+0xec>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001946:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001958:	2307      	movs	r3, #7
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	481e      	ldr	r0, [pc, #120]	; (80019dc <HAL_UART_MspInit+0xf0>)
 8001964:	f001 f996 	bl	8002c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001968:	e030      	b.n	80019cc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <HAL_UART_MspInit+0xf4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d12b      	bne.n	80019cc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_UART_MspInit+0xec>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	4a16      	ldr	r2, [pc, #88]	; (80019d8 <HAL_UART_MspInit+0xec>)
 800197e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001982:	6413      	str	r3, [r2, #64]	; 0x40
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_UART_MspInit+0xec>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <HAL_UART_MspInit+0xec>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	4a0f      	ldr	r2, [pc, #60]	; (80019d8 <HAL_UART_MspInit+0xec>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6313      	str	r3, [r2, #48]	; 0x30
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_UART_MspInit+0xec>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019ac:	230c      	movs	r3, #12
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019bc:	2307      	movs	r3, #7
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <HAL_UART_MspInit+0xf0>)
 80019c8:	f001 f964 	bl	8002c94 <HAL_GPIO_Init>
}
 80019cc:	bf00      	nop
 80019ce:	3730      	adds	r7, #48	; 0x30
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40011000 	.word	0x40011000
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020000 	.word	0x40020000
 80019e0:	40004400 	.word	0x40004400

080019e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <HAL_InitTick+0xd4>)
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	4a2e      	ldr	r2, [pc, #184]	; (8001ab8 <HAL_InitTick+0xd4>)
 80019fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a02:	6453      	str	r3, [r2, #68]	; 0x44
 8001a04:	4b2c      	ldr	r3, [pc, #176]	; (8001ab8 <HAL_InitTick+0xd4>)
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a10:	f107 020c 	add.w	r2, r7, #12
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 fc76 	bl	800330c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001a20:	f001 fc60 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 8001a24:	4603      	mov	r3, r0
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2c:	4a23      	ldr	r2, [pc, #140]	; (8001abc <HAL_InitTick+0xd8>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	0c9b      	lsrs	r3, r3, #18
 8001a34:	3b01      	subs	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_InitTick+0xdc>)
 8001a3a:	4a22      	ldr	r2, [pc, #136]	; (8001ac4 <HAL_InitTick+0xe0>)
 8001a3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_InitTick+0xdc>)
 8001a40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a44:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001a46:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <HAL_InitTick+0xdc>)
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <HAL_InitTick+0xdc>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a52:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <HAL_InitTick+0xdc>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_InitTick+0xdc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001a5e:	4818      	ldr	r0, [pc, #96]	; (8001ac0 <HAL_InitTick+0xdc>)
 8001a60:	f003 f95c 	bl	8004d1c <HAL_TIM_Base_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d11b      	bne.n	8001aaa <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001a72:	4813      	ldr	r0, [pc, #76]	; (8001ac0 <HAL_InitTick+0xdc>)
 8001a74:	f003 f9a2 	bl	8004dbc <HAL_TIM_Base_Start_IT>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d111      	bne.n	8001aaa <HAL_InitTick+0xc6>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a86:	201a      	movs	r0, #26
 8001a88:	f000 fd48 	bl	800251c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b0f      	cmp	r3, #15
 8001a90:	d808      	bhi.n	8001aa4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001a92:	2200      	movs	r2, #0
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	201a      	movs	r0, #26
 8001a98:	f000 fd24 	bl	80024e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <HAL_InitTick+0xe4>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e002      	b.n	8001aaa <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3730      	adds	r7, #48	; 0x30
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	431bde83 	.word	0x431bde83
 8001ac0:	20000938 	.word	0x20000938
 8001ac4:	40014800 	.word	0x40014800
 8001ac8:	20000008 	.word	0x20000008

08001acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <NMI_Handler+0x4>

08001ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <MemManage_Handler+0x4>

08001ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <BusFault_Handler+0x4>

08001ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <UsageFault_Handler+0x4>

08001aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 8001afc:	2002      	movs	r0, #2
 8001afe:	f001 fa77 	bl	8002ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <DMA1_Stream5_IRQHandler+0x10>)
 8001b0e:	f000 fe57 	bl	80027c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200001d4 	.word	0x200001d4

08001b1c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001b22:	f003 f9bb 	bl	8004e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000938 	.word	0x20000938

08001b30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <TIM2_IRQHandler+0x10>)
 8001b36:	f003 f9b1 	bl	8004e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000234 	.word	0x20000234

08001b44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <TIM3_IRQHandler+0x10>)
 8001b4a:	f003 f9a7 	bl	8004e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000027c 	.word	0x2000027c

08001b58 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <SPI2_IRQHandler+0x10>)
 8001b5e:	f002 fe03 	bl	8004768 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000124 	.word	0x20000124

08001b6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b74:	f001 fa3c 	bl	8002ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <SPI3_IRQHandler+0x10>)
 8001b82:	f002 fdf1 	bl	8004768 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000017c 	.word	0x2000017c

08001b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
	return 1;
 8001b94:	2301      	movs	r3, #1
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_kill>:

int _kill(int pid, int sig)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001baa:	f024 ff29 	bl	8026a00 <__errno>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2216      	movs	r2, #22
 8001bb2:	601a      	str	r2, [r3, #0]
	return -1;
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_exit>:

void _exit (int status)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ffe7 	bl	8001ba0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bd2:	e7fe      	b.n	8001bd2 <_exit+0x12>

08001bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e00a      	b.n	8001bfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001be6:	f7ff fa97 	bl	8001118 <__io_getchar>
 8001bea:	4601      	mov	r1, r0
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	60ba      	str	r2, [r7, #8]
 8001bf2:	b2ca      	uxtb	r2, r1
 8001bf4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbf0      	blt.n	8001be6 <_read+0x12>
	}

return len;
 8001c04:	687b      	ldr	r3, [r7, #4]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e009      	b.n	8001c34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	60ba      	str	r2, [r7, #8]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fa63 	bl	80010f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dbf1      	blt.n	8001c20 <_write+0x12>
	}
	return len;
 8001c3c:	687b      	ldr	r3, [r7, #4]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_close>:

int _close(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_isatty>:

int _isatty(int file)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
	return 1;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
	return 0;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb8:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <_sbrk+0x5c>)
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <_sbrk+0x60>)
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <_sbrk+0x64>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <_sbrk+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d207      	bcs.n	8001cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce0:	f024 fe8e 	bl	8026a00 <__errno>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	e009      	b.n	8001d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <_sbrk+0x64>)
 8001d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20020000 	.word	0x20020000
 8001d10:	00000400 	.word	0x00000400
 8001d14:	20000980 	.word	0x20000980
 8001d18:	20008ab8 	.word	0x20008ab8

08001d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <SystemInit+0x20>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <SystemInit+0x20>)
 8001d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <XPT2046_SetCS>:
extern SPI_HandleTypeDef hspi2;
extern void Error_Handler(void);
static uint8_t XPT2046_initilazed = 0;

static void XPT2046_SetCS(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_SET);
 8001d44:	2201      	movs	r2, #1
 8001d46:	2104      	movs	r1, #4
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <XPT2046_SetCS+0x14>)
 8001d4a:	f001 f937 	bl	8002fbc <HAL_GPIO_WritePin>
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40020400 	.word	0x40020400

08001d58 <XPT2046_ResetCS>:

static void XPT2046_ResetCS(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_RESET);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2104      	movs	r1, #4
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <XPT2046_ResetCS+0x14>)
 8001d62:	f001 f92b 	bl	8002fbc <HAL_GPIO_WritePin>
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40020400 	.word	0x40020400

08001d70 <XPT2046_Write_Byte>:

static void XPT2046_Write_Byte(uint8_t num)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  hspi2.Instance->CR2 &= ~(SPI_DATASIZE_16BIT); // Set 8 bit mode
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <XPT2046_Write_Byte+0x5c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <XPT2046_Write_Byte+0x5c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d88:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(&hspi2);
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <XPT2046_Write_Byte+0x5c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <XPT2046_Write_Byte+0x5c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d98:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_Transmit(&hspi2, &num, 1, 1000) != HAL_OK) {
 8001d9a:	1df9      	adds	r1, r7, #7
 8001d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da0:	2201      	movs	r2, #1
 8001da2:	480a      	ldr	r0, [pc, #40]	; (8001dcc <XPT2046_Write_Byte+0x5c>)
 8001da4:	f002 f83b 	bl	8003e1e <HAL_SPI_Transmit>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <XPT2046_Write_Byte+0x42>
	  Error_Handler();
 8001dae:	f7ff fa77 	bl	80012a0 <Error_Handler>
}
__HAL_SPI_DISABLE(&hspi2);
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <XPT2046_Write_Byte+0x5c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <XPT2046_Write_Byte+0x5c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dc0:	601a      	str	r2, [r3, #0]
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000124 	.word	0x20000124

08001dd0 <XPT2046_Read_AD>:

static uint16_t XPT2046_Read_AD(uint8_t cmd)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  uint8_t num[2];
  uint16_t ret;

  T_CS_OFF;
 8001dda:	f7ff ffbd 	bl	8001d58 <XPT2046_ResetCS>
  XPT2046_Write_Byte(cmd);
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ffc5 	bl	8001d70 <XPT2046_Write_Byte>
//  HAL_Delay(2);

  hspi2.Instance->CR2 |= SPI_DATASIZE_16BIT; // Set 16 bit mode
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <XPT2046_Read_AD+0x8c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <XPT2046_Read_AD+0x8c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001df4:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(&hspi2);
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <XPT2046_Read_AD+0x8c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <XPT2046_Read_AD+0x8c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e04:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_Receive(&hspi2, num, 1, 1000) != HAL_OK) {
 8001e06:	f107 010c 	add.w	r1, r7, #12
 8001e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4812      	ldr	r0, [pc, #72]	; (8001e5c <XPT2046_Read_AD+0x8c>)
 8001e12:	f002 f940 	bl	8004096 <HAL_SPI_Receive>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <XPT2046_Read_AD+0x50>
    Error_Handler();
 8001e1c:	f7ff fa40 	bl	80012a0 <Error_Handler>
  }
  __HAL_SPI_DISABLE(&hspi2);
 8001e20:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <XPT2046_Read_AD+0x8c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <XPT2046_Read_AD+0x8c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e2e:	601a      	str	r2, [r3, #0]
  T_CS_ON;
 8001e30:	f7ff ff86 	bl	8001d40 <XPT2046_SetCS>

  ret = num[0] << 8 | num[1];
 8001e34:	7b3b      	ldrb	r3, [r7, #12]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	7b7b      	ldrb	r3, [r7, #13]
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b21b      	sxth	r3, r3
 8001e42:	81fb      	strh	r3, [r7, #14]
  ret >>= 4;
 8001e44:	89fb      	ldrh	r3, [r7, #14]
 8001e46:	091b      	lsrs	r3, r3, #4
 8001e48:	81fb      	strh	r3, [r7, #14]
  ret &= (1<<12)-1;
 8001e4a:	89fb      	ldrh	r3, [r7, #14]
 8001e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e50:	81fb      	strh	r3, [r7, #14]

  return ret;
 8001e52:	89fb      	ldrh	r3, [r7, #14]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000124 	.word	0x20000124

08001e60 <sort>:

static void sort(int16_t *data)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  for (int i=0; i<5; ++i) {
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e031      	b.n	8001ed2 <sort+0x72>
    for (int j=i+1; j<5; ++j) {
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	e027      	b.n	8001ec6 <sort+0x66>
      if (data[i] > data[j]) {
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	440b      	add	r3, r1
 8001e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	dd16      	ble.n	8001ec0 <sort+0x60>
        int16_t tmp =  data[i];
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	81fb      	strh	r3, [r7, #14]
        data[i] = data[j];
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	441a      	add	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	440b      	add	r3, r1
 8001eae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001eb2:	801a      	strh	r2, [r3, #0]
        data[j] = tmp;
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	89fa      	ldrh	r2, [r7, #14]
 8001ebe:	801a      	strh	r2, [r3, #0]
    for (int j=i+1; j<5; ++j) {
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	ddd4      	ble.n	8001e76 <sort+0x16>
  for (int i=0; i<5; ++i) {
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	ddca      	ble.n	8001e6e <sort+0xe>
      }
    }
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <besttwoavg>:

static int16_t besttwoavg( int16_t x , int16_t y , int16_t z )
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	80fb      	strh	r3, [r7, #6]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	80bb      	strh	r3, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	807b      	strh	r3, [r7, #2]
  int16_t da, db, dc;
  int16_t reta = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	813b      	strh	r3, [r7, #8]

  if ( x > y ) da = x - y; else da = y - x;
 8001efc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	dd05      	ble.n	8001f14 <besttwoavg+0x2e>
 8001f08:	88fa      	ldrh	r2, [r7, #6]
 8001f0a:	88bb      	ldrh	r3, [r7, #4]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	81fb      	strh	r3, [r7, #14]
 8001f12:	e004      	b.n	8001f1e <besttwoavg+0x38>
 8001f14:	88ba      	ldrh	r2, [r7, #4]
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	81fb      	strh	r3, [r7, #14]
  if ( x > z ) db = x - z; else db = z - x;
 8001f1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	dd05      	ble.n	8001f36 <besttwoavg+0x50>
 8001f2a:	88fa      	ldrh	r2, [r7, #6]
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	81bb      	strh	r3, [r7, #12]
 8001f34:	e004      	b.n	8001f40 <besttwoavg+0x5a>
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	81bb      	strh	r3, [r7, #12]
  if ( z > y ) dc = z - y; else dc = y - z;
 8001f40:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001f44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	dd05      	ble.n	8001f58 <besttwoavg+0x72>
 8001f4c:	887a      	ldrh	r2, [r7, #2]
 8001f4e:	88bb      	ldrh	r3, [r7, #4]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	817b      	strh	r3, [r7, #10]
 8001f56:	e004      	b.n	8001f62 <besttwoavg+0x7c>
 8001f58:	88ba      	ldrh	r2, [r7, #4]
 8001f5a:	887b      	ldrh	r3, [r7, #2]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	817b      	strh	r3, [r7, #10]

  if ( da <= db && da <= dc ) reta = (x + y) >> 1;
 8001f62:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dc0d      	bgt.n	8001f8a <besttwoavg+0xa4>
 8001f6e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	dc07      	bgt.n	8001f8a <besttwoavg+0xa4>
 8001f7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	105b      	asrs	r3, r3, #1
 8001f86:	813b      	strh	r3, [r7, #8]
 8001f88:	e01a      	b.n	8001fc0 <besttwoavg+0xda>
  else if ( db <= da && db <= dc ) reta = (x + z) >> 1;
 8001f8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	dc0d      	bgt.n	8001fb2 <besttwoavg+0xcc>
 8001f96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f9a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	dc07      	bgt.n	8001fb2 <besttwoavg+0xcc>
 8001fa2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001fa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001faa:	4413      	add	r3, r2
 8001fac:	105b      	asrs	r3, r3, #1
 8001fae:	813b      	strh	r3, [r7, #8]
 8001fb0:	e006      	b.n	8001fc0 <besttwoavg+0xda>
  else reta = (y + z) >> 1;   //    else if ( dc <= da && dc <= db ) reta = (x + y) >> 1;
 8001fb2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001fb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001fba:	4413      	add	r3, r2
 8001fbc:	105b      	asrs	r3, r3, #1
 8001fbe:	813b      	strh	r3, [r7, #8]

  return (reta);
 8001fc0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <XPT2046_Init>:

void XPT2046_Init(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  XPT2046_initilazed = 1;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <XPT2046_Init+0x14>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	20000984 	.word	0x20000984

08001fe8 <XPT2046_Update>:

void XPT2046_Update(uint16_t *x, uint16_t *y, int32_t *z)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08c      	sub	sp, #48	; 0x30
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  int16_t data[10];
  static uint32_t ptime = 0;

  if (XPT2046_initilazed == 0) {
 8001ff4:	4b5c      	ldr	r3, [pc, #368]	; (8002168 <XPT2046_Update+0x180>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80ae 	beq.w	800215a <XPT2046_Update+0x172>
    return;
  }

  if (HAL_GetTick() - ptime < MSEC_THRESHOLD) {
 8001ffe:	f000 f989 	bl	8002314 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	4b59      	ldr	r3, [pc, #356]	; (800216c <XPT2046_Update+0x184>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	f240 80a7 	bls.w	800215e <XPT2046_Update+0x176>
    return;
  }

  XPT2046_Read_AD(0xb1);  // dummy 1st z1 measure
 8002010:	20b1      	movs	r0, #177	; 0xb1
 8002012:	f7ff fedd 	bl	8001dd0 <XPT2046_Read_AD>
  XPT2046_Read_AD(0xc1);  // dummy 1st z2 measure
 8002016:	20c1      	movs	r0, #193	; 0xc1
 8002018:	f7ff feda 	bl	8001dd0 <XPT2046_Read_AD>
  int16_t z1 = XPT2046_Read_AD(0xb1); // z1
 800201c:	20b1      	movs	r0, #177	; 0xb1
 800201e:	f7ff fed7 	bl	8001dd0 <XPT2046_Read_AD>
 8002022:	4603      	mov	r3, r0
 8002024:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t intz = z1 + 4095;
 8002026:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002028:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800202c:	b29b      	uxth	r3, r3
 800202e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int16_t z2 = XPT2046_Read_AD(0xc1); // z2
 8002030:	20c1      	movs	r0, #193	; 0xc1
 8002032:	f7ff fecd 	bl	8001dd0 <XPT2046_Read_AD>
 8002036:	4603      	mov	r3, r0
 8002038:	857b      	strh	r3, [r7, #42]	; 0x2a
  intz -= z2;
 800203a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800203c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	b29b      	uxth	r3, r3
 8002042:	85fb      	strh	r3, [r7, #46]	; 0x2e
  if (intz >= Z_THRESHOLD) {
 8002044:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002048:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800204c:	db42      	blt.n	80020d4 <XPT2046_Update+0xec>
    XPT2046_Read_AD(0x91);  // dummy 1st X measure
 800204e:	2091      	movs	r0, #145	; 0x91
 8002050:	f7ff febe 	bl	8001dd0 <XPT2046_Read_AD>
    XPT2046_Read_AD(0xd1);  // dummy 1st Y measure
 8002054:	20d1      	movs	r0, #209	; 0xd1
 8002056:	f7ff febb 	bl	8001dd0 <XPT2046_Read_AD>
    data[0] = XPT2046_Read_AD(0x91);
 800205a:	2091      	movs	r0, #145	; 0x91
 800205c:	f7ff feb8 	bl	8001dd0 <XPT2046_Read_AD>
 8002060:	4603      	mov	r3, r0
 8002062:	b21b      	sxth	r3, r3
 8002064:	823b      	strh	r3, [r7, #16]
    data[5] = XPT2046_Read_AD(0xd1);
 8002066:	20d1      	movs	r0, #209	; 0xd1
 8002068:	f7ff feb2 	bl	8001dd0 <XPT2046_Read_AD>
 800206c:	4603      	mov	r3, r0
 800206e:	b21b      	sxth	r3, r3
 8002070:	837b      	strh	r3, [r7, #26]
    data[1] = XPT2046_Read_AD(0x91);
 8002072:	2091      	movs	r0, #145	; 0x91
 8002074:	f7ff feac 	bl	8001dd0 <XPT2046_Read_AD>
 8002078:	4603      	mov	r3, r0
 800207a:	b21b      	sxth	r3, r3
 800207c:	827b      	strh	r3, [r7, #18]
    data[6] = XPT2046_Read_AD(0xd1);
 800207e:	20d1      	movs	r0, #209	; 0xd1
 8002080:	f7ff fea6 	bl	8001dd0 <XPT2046_Read_AD>
 8002084:	4603      	mov	r3, r0
 8002086:	b21b      	sxth	r3, r3
 8002088:	83bb      	strh	r3, [r7, #28]
    data[2] = XPT2046_Read_AD(0x91);
 800208a:	2091      	movs	r0, #145	; 0x91
 800208c:	f7ff fea0 	bl	8001dd0 <XPT2046_Read_AD>
 8002090:	4603      	mov	r3, r0
 8002092:	b21b      	sxth	r3, r3
 8002094:	82bb      	strh	r3, [r7, #20]
//    data[7] = XPT2046_Read_AD(0xd0);
    data[7] = XPT2046_Read_AD(0xd1);
 8002096:	20d1      	movs	r0, #209	; 0xd1
 8002098:	f7ff fe9a 	bl	8001dd0 <XPT2046_Read_AD>
 800209c:	4603      	mov	r3, r0
 800209e:	b21b      	sxth	r3, r3
 80020a0:	83fb      	strh	r3, [r7, #30]
    data[3] = XPT2046_Read_AD(0x91);
 80020a2:	2091      	movs	r0, #145	; 0x91
 80020a4:	f7ff fe94 	bl	8001dd0 <XPT2046_Read_AD>
 80020a8:	4603      	mov	r3, r0
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	82fb      	strh	r3, [r7, #22]
    data[8] = XPT2046_Read_AD(0xd1);
 80020ae:	20d1      	movs	r0, #209	; 0xd1
 80020b0:	f7ff fe8e 	bl	8001dd0 <XPT2046_Read_AD>
 80020b4:	4603      	mov	r3, r0
 80020b6:	b21b      	sxth	r3, r3
 80020b8:	843b      	strh	r3, [r7, #32]
    data[4] = XPT2046_Read_AD(0x91);
 80020ba:	2091      	movs	r0, #145	; 0x91
 80020bc:	f7ff fe88 	bl	8001dd0 <XPT2046_Read_AD>
 80020c0:	4603      	mov	r3, r0
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	833b      	strh	r3, [r7, #24]
    data[9] = XPT2046_Read_AD(0xd0);
 80020c6:	20d0      	movs	r0, #208	; 0xd0
 80020c8:	f7ff fe82 	bl	8001dd0 <XPT2046_Read_AD>
 80020cc:	4603      	mov	r3, r0
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	847b      	strh	r3, [r7, #34]	; 0x22
 80020d2:	e001      	b.n	80020d8 <XPT2046_Update+0xf0>
  } else {
    intz = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }
  ptime = HAL_GetTick();
 80020d8:	f000 f91c 	bl	8002314 <HAL_GetTick>
 80020dc:	4603      	mov	r3, r0
 80020de:	4a23      	ldr	r2, [pc, #140]	; (800216c <XPT2046_Update+0x184>)
 80020e0:	6013      	str	r3, [r2, #0]

  if (intz >= Z_THRESHOLD) {
 80020e2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80020e6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80020ea:	db2b      	blt.n	8002144 <XPT2046_Update+0x15c>
    sort(&data[0]);
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff feb5 	bl	8001e60 <sort>
    sort(&data[5]);
 80020f6:	f107 0310 	add.w	r3, r7, #16
 80020fa:	330a      	adds	r3, #10
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff feaf 	bl	8001e60 <sort>
    int16_t intx = besttwoavg( data[1], data[2], data[3] );
 8002102:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002106:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800210a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fee9 	bl	8001ee6 <besttwoavg>
 8002114:	4603      	mov	r3, r0
 8002116:	853b      	strh	r3, [r7, #40]	; 0x28
    int16_t inty = besttwoavg( data[6], data[7], data[8] );
 8002118:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800211c:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8002120:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fede 	bl	8001ee6 <besttwoavg>
 800212a:	4603      	mov	r3, r0
 800212c:	84fb      	strh	r3, [r7, #38]	; 0x26
//    int16_t intx = besttwoavg( data[0], data[1], data[2] );
//    int16_t inty = besttwoavg( data[5], data[6], data[7] );
    *x = intx;
 800212e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	801a      	strh	r2, [r3, #0]
    *y = inty;
 8002134:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	801a      	strh	r2, [r3, #0]
    *z = intz;
 800213a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	e00d      	b.n	8002160 <XPT2046_Update+0x178>
  } else{
    *x = *y = *z = 0;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2200      	movs	r2, #0
 800214e:	801a      	strh	r2, [r3, #0]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	881a      	ldrh	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	801a      	strh	r2, [r3, #0]
 8002158:	e002      	b.n	8002160 <XPT2046_Update+0x178>
    return;
 800215a:	bf00      	nop
 800215c:	e000      	b.n	8002160 <XPT2046_Update+0x178>
    return;
 800215e:	bf00      	nop
    *x = intx;
    *y = inty;
    *z = _z;
  }
#endif
}
 8002160:	3730      	adds	r7, #48	; 0x30
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000984 	.word	0x20000984
 800216c:	20000988 	.word	0x20000988

08002170 <XPT2046_IsReasonable>:

uint8_t XPT2046_IsReasonable(uint16_t x, uint16_t y)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	460a      	mov	r2, r1
 800217a:	80fb      	strh	r3, [r7, #6]
 800217c:	4613      	mov	r3, r2
 800217e:	80bb      	strh	r3, [r7, #4]
  if (x >= XPT_XMIN && x <= XPT_XMAX && y >= XPT_YMIN && y <= XPT_YMAX) {
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8002186:	d30f      	bcc.n	80021a8 <XPT2046_IsReasonable+0x38>
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	f640 7264 	movw	r2, #3940	; 0xf64
 800218e:	4293      	cmp	r3, r2
 8002190:	d80a      	bhi.n	80021a8 <XPT2046_IsReasonable+0x38>
 8002192:	88bb      	ldrh	r3, [r7, #4]
 8002194:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002198:	d306      	bcc.n	80021a8 <XPT2046_IsReasonable+0x38>
 800219a:	88bb      	ldrh	r3, [r7, #4]
 800219c:	f640 723c 	movw	r2, #3900	; 0xf3c
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d801      	bhi.n	80021a8 <XPT2046_IsReasonable+0x38>
    return 1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <XPT2046_IsReasonable+0x3a>
  }
  return 0;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <XPT2046_XPTtoILI>:

void XPT2046_XPTtoILI(uint16_t *x, uint16_t *y)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  int16_t tx,ty;
  tx = (int16_t)(((int32_t)*x - XPT_XMIN) * GUI_WIDTH / XPT_WIDTH);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	019b      	lsls	r3, r3, #6
 80021d2:	4a1e      	ldr	r2, [pc, #120]	; (800224c <XPT2046_XPTtoILI+0x94>)
 80021d4:	fb82 1203 	smull	r1, r2, r2, r3
 80021d8:	441a      	add	r2, r3
 80021da:	12d2      	asrs	r2, r2, #11
 80021dc:	17db      	asrs	r3, r3, #31
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	81fb      	strh	r3, [r7, #14]
  tx = (tx < 0) ? 0 : tx;
 80021e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80021ea:	81fb      	strh	r3, [r7, #14]
  tx = (tx >= GUI_WIDTH) ? GUI_WIDTH-1 : tx;
 80021ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021f0:	f240 123f 	movw	r2, #319	; 0x13f
 80021f4:	4293      	cmp	r3, r2
 80021f6:	bfa8      	it	ge
 80021f8:	4613      	movge	r3, r2
 80021fa:	81fb      	strh	r3, [r7, #14]
  ty = (int16_t)(((int32_t)*y - XPT_YMIN) * GUI_HEIGHT / XPT_HEIGHT);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	4a10      	ldr	r2, [pc, #64]	; (8002250 <XPT2046_XPTtoILI+0x98>)
 800220e:	fb82 1203 	smull	r1, r2, r2, r3
 8002212:	441a      	add	r2, r3
 8002214:	12d2      	asrs	r2, r2, #11
 8002216:	17db      	asrs	r3, r3, #31
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	81bb      	strh	r3, [r7, #12]
  ty = (ty < 0) ? 0 : ty;
 800221c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002220:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002224:	81bb      	strh	r3, [r7, #12]
  ty = (ty >= GUI_HEIGHT) ? GUI_HEIGHT-1 : ty;
 8002226:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800222a:	2bef      	cmp	r3, #239	; 0xef
 800222c:	bfa8      	it	ge
 800222e:	23ef      	movge	r3, #239	; 0xef
 8002230:	81bb      	strh	r3, [r7, #12]
  *x = tx;
 8002232:	89fa      	ldrh	r2, [r7, #14]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	801a      	strh	r2, [r3, #0]
  *y = ty;
 8002238:	89ba      	ldrh	r2, [r7, #12]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	801a      	strh	r2, [r3, #0]
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	93459be7 	.word	0x93459be7
 8002250:	9272fc49 	.word	0x9272fc49

08002254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800228c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002258:	480d      	ldr	r0, [pc, #52]	; (8002290 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800225a:	490e      	ldr	r1, [pc, #56]	; (8002294 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800225c:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002260:	e002      	b.n	8002268 <LoopCopyDataInit>

08002262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002266:	3304      	adds	r3, #4

08002268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800226c:	d3f9      	bcc.n	8002262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226e:	4a0b      	ldr	r2, [pc, #44]	; (800229c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002270:	4c0b      	ldr	r4, [pc, #44]	; (80022a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002274:	e001      	b.n	800227a <LoopFillZerobss>

08002276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002278:	3204      	adds	r2, #4

0800227a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800227c:	d3fb      	bcc.n	8002276 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800227e:	f7ff fd4d 	bl	8001d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002282:	f024 fccb 	bl	8026c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002286:	f7fe fc0f 	bl	8000aa8 <main>
  bx  lr    
 800228a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800228c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002294:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002298:	0802d840 	.word	0x0802d840
  ldr r2, =_sbss
 800229c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80022a0:	20008ab4 	.word	0x20008ab4

080022a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a4:	e7fe      	b.n	80022a4 <ADC_IRQHandler>
	...

080022a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_Init+0x40>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0d      	ldr	r2, [pc, #52]	; (80022e8 <HAL_Init+0x40>)
 80022b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_Init+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <HAL_Init+0x40>)
 80022be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_Init+0x40>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_Init+0x40>)
 80022ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f000 f8fc 	bl	80024ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d6:	200f      	movs	r0, #15
 80022d8:	f7ff fb84 	bl	80019e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022dc:	f7ff f94c 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023c00 	.word	0x40023c00

080022ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x20>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_IncTick+0x24>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <HAL_IncTick+0x24>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	2000000c 	.word	0x2000000c
 8002310:	2000098c 	.word	0x2000098c

08002314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return uwTick;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_GetTick+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	2000098c 	.word	0x2000098c

0800232c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002334:	f7ff ffee 	bl	8002314 <HAL_GetTick>
 8002338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d005      	beq.n	8002352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_Delay+0x44>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002352:	bf00      	nop
 8002354:	f7ff ffde 	bl	8002314 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	429a      	cmp	r2, r3
 8002362:	d8f7      	bhi.n	8002354 <HAL_Delay+0x28>
  {
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000000c 	.word	0x2000000c

08002374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800239c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <__NVIC_GetPriorityGrouping+0x18>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f003 0307 	and.w	r3, r3, #7
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	db0b      	blt.n	8002402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	4907      	ldr	r1, [pc, #28]	; (8002410 <__NVIC_EnableIRQ+0x38>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2001      	movs	r0, #1
 80023fa:	fa00 f202 	lsl.w	r2, r0, r2
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000e100 	.word	0xe000e100

08002414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	6039      	str	r1, [r7, #0]
 800241e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002424:	2b00      	cmp	r3, #0
 8002426:	db0a      	blt.n	800243e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	b2da      	uxtb	r2, r3
 800242c:	490c      	ldr	r1, [pc, #48]	; (8002460 <__NVIC_SetPriority+0x4c>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	0112      	lsls	r2, r2, #4
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	440b      	add	r3, r1
 8002438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800243c:	e00a      	b.n	8002454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4908      	ldr	r1, [pc, #32]	; (8002464 <__NVIC_SetPriority+0x50>)
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	3b04      	subs	r3, #4
 800244c:	0112      	lsls	r2, r2, #4
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	440b      	add	r3, r1
 8002452:	761a      	strb	r2, [r3, #24]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000e100 	.word	0xe000e100
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f1c3 0307 	rsb	r3, r3, #7
 8002482:	2b04      	cmp	r3, #4
 8002484:	bf28      	it	cs
 8002486:	2304      	movcs	r3, #4
 8002488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3304      	adds	r3, #4
 800248e:	2b06      	cmp	r3, #6
 8002490:	d902      	bls.n	8002498 <NVIC_EncodePriority+0x30>
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3b03      	subs	r3, #3
 8002496:	e000      	b.n	800249a <NVIC_EncodePriority+0x32>
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	f04f 32ff 	mov.w	r2, #4294967295
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43da      	mvns	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	401a      	ands	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b0:	f04f 31ff 	mov.w	r1, #4294967295
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	43d9      	mvns	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	4313      	orrs	r3, r2
         );
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3724      	adds	r7, #36	; 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ff4c 	bl	8002374 <__NVIC_SetPriorityGrouping>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f6:	f7ff ff61 	bl	80023bc <__NVIC_GetPriorityGrouping>
 80024fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68b9      	ldr	r1, [r7, #8]
 8002500:	6978      	ldr	r0, [r7, #20]
 8002502:	f7ff ffb1 	bl	8002468 <NVIC_EncodePriority>
 8002506:	4602      	mov	r2, r0
 8002508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ff80 	bl	8002414 <__NVIC_SetPriority>
}
 8002514:	bf00      	nop
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff54 	bl	80023d8 <__NVIC_EnableIRQ>
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e00e      	b.n	8002568 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	795b      	ldrb	r3, [r3, #5]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff f838 	bl	80015d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff feca 	bl	8002314 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e099      	b.n	80026c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ac:	e00f      	b.n	80025ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ae:	f7ff feb1 	bl	8002314 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d908      	bls.n	80025ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2203      	movs	r2, #3
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e078      	b.n	80026c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e8      	bne.n	80025ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <HAL_DMA_Init+0x158>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	2b04      	cmp	r3, #4
 8002626:	d107      	bne.n	8002638 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	4313      	orrs	r3, r2
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f023 0307 	bic.w	r3, r3, #7
 800264e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	2b04      	cmp	r3, #4
 8002660:	d117      	bne.n	8002692 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00e      	beq.n	8002692 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fa91 	bl	8002b9c <DMA_CheckFifoParam>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2240      	movs	r2, #64	; 0x40
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800268e:	2301      	movs	r3, #1
 8002690:	e016      	b.n	80026c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fa48 	bl	8002b30 <DMA_CalcBaseAndBitshift>
 80026a0:	4603      	mov	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	223f      	movs	r2, #63	; 0x3f
 80026aa:	409a      	lsls	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	f010803f 	.word	0xf010803f

080026cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_DMA_Start_IT+0x26>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e040      	b.n	8002774 <HAL_DMA_Start_IT+0xa8>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d12f      	bne.n	8002766 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2202      	movs	r2, #2
 800270a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f9da 	bl	8002ad4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	223f      	movs	r2, #63	; 0x3f
 8002726:	409a      	lsls	r2, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0216 	orr.w	r2, r2, #22
 800273a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0208 	orr.w	r2, r2, #8
 8002752:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e005      	b.n	8002772 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800276e:	2302      	movs	r3, #2
 8002770:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002772:	7dfb      	ldrb	r3, [r7, #23]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d004      	beq.n	800279a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2280      	movs	r2, #128	; 0x80
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e00c      	b.n	80027b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2205      	movs	r2, #5
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0201 	bic.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027cc:	4b8e      	ldr	r3, [pc, #568]	; (8002a08 <HAL_DMA_IRQHandler+0x248>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a8e      	ldr	r2, [pc, #568]	; (8002a0c <HAL_DMA_IRQHandler+0x24c>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	0a9b      	lsrs	r3, r3, #10
 80027d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	2208      	movs	r2, #8
 80027ec:	409a      	lsls	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d01a      	beq.n	800282c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d013      	beq.n	800282c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0204 	bic.w	r2, r2, #4
 8002812:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	2208      	movs	r2, #8
 800281a:	409a      	lsls	r2, r3
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	f043 0201 	orr.w	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002830:	2201      	movs	r2, #1
 8002832:	409a      	lsls	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d012      	beq.n	8002862 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284e:	2201      	movs	r2, #1
 8002850:	409a      	lsls	r2, r3
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285a:	f043 0202 	orr.w	r2, r3, #2
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	2204      	movs	r2, #4
 8002868:	409a      	lsls	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d012      	beq.n	8002898 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00b      	beq.n	8002898 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	2204      	movs	r2, #4
 8002886:	409a      	lsls	r2, r3
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	f043 0204 	orr.w	r2, r3, #4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289c:	2210      	movs	r2, #16
 800289e:	409a      	lsls	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d043      	beq.n	8002930 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d03c      	beq.n	8002930 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	2210      	movs	r2, #16
 80028bc:	409a      	lsls	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d018      	beq.n	8002902 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d108      	bne.n	80028f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d024      	beq.n	8002930 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	4798      	blx	r3
 80028ee:	e01f      	b.n	8002930 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01b      	beq.n	8002930 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	4798      	blx	r3
 8002900:	e016      	b.n	8002930 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d107      	bne.n	8002920 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0208 	bic.w	r2, r2, #8
 800291e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	2220      	movs	r2, #32
 8002936:	409a      	lsls	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 808f 	beq.w	8002a60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8087 	beq.w	8002a60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002956:	2220      	movs	r2, #32
 8002958:	409a      	lsls	r2, r3
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b05      	cmp	r3, #5
 8002968:	d136      	bne.n	80029d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0216 	bic.w	r2, r2, #22
 8002978:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002988:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d103      	bne.n	800299a <HAL_DMA_IRQHandler+0x1da>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0208 	bic.w	r2, r2, #8
 80029a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ae:	223f      	movs	r2, #63	; 0x3f
 80029b0:	409a      	lsls	r2, r3
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d07e      	beq.n	8002acc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
        }
        return;
 80029d6:	e079      	b.n	8002acc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01d      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10d      	bne.n	8002a10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d031      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
 8002a04:	e02c      	b.n	8002a60 <HAL_DMA_IRQHandler+0x2a0>
 8002a06:	bf00      	nop
 8002a08:	20000004 	.word	0x20000004
 8002a0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d023      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4798      	blx	r3
 8002a20:	e01e      	b.n	8002a60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10f      	bne.n	8002a50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0210 	bic.w	r2, r2, #16
 8002a3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d032      	beq.n	8002ace <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d022      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2205      	movs	r2, #5
 8002a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d307      	bcc.n	8002aa8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f2      	bne.n	8002a8c <HAL_DMA_IRQHandler+0x2cc>
 8002aa6:	e000      	b.n	8002aaa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002aa8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	4798      	blx	r3
 8002aca:	e000      	b.n	8002ace <HAL_DMA_IRQHandler+0x30e>
        return;
 8002acc:	bf00      	nop
    }
  }
}
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002af0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b40      	cmp	r3, #64	; 0x40
 8002b00:	d108      	bne.n	8002b14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b12:	e007      	b.n	8002b24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	60da      	str	r2, [r3, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	3b10      	subs	r3, #16
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <DMA_CalcBaseAndBitshift+0x64>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b4a:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <DMA_CalcBaseAndBitshift+0x68>)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d909      	bls.n	8002b72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b66:	f023 0303 	bic.w	r3, r3, #3
 8002b6a:	1d1a      	adds	r2, r3, #4
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b70:	e007      	b.n	8002b82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b7a:	f023 0303 	bic.w	r3, r3, #3
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	aaaaaaab 	.word	0xaaaaaaab
 8002b98:	08029480 	.word	0x08029480

08002b9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d11f      	bne.n	8002bf6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d856      	bhi.n	8002c6a <DMA_CheckFifoParam+0xce>
 8002bbc:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <DMA_CheckFifoParam+0x28>)
 8002bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc2:	bf00      	nop
 8002bc4:	08002bd5 	.word	0x08002bd5
 8002bc8:	08002be7 	.word	0x08002be7
 8002bcc:	08002bd5 	.word	0x08002bd5
 8002bd0:	08002c6b 	.word	0x08002c6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d046      	beq.n	8002c6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be4:	e043      	b.n	8002c6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bee:	d140      	bne.n	8002c72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf4:	e03d      	b.n	8002c72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfe:	d121      	bne.n	8002c44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d837      	bhi.n	8002c76 <DMA_CheckFifoParam+0xda>
 8002c06:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <DMA_CheckFifoParam+0x70>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c1d 	.word	0x08002c1d
 8002c10:	08002c23 	.word	0x08002c23
 8002c14:	08002c1d 	.word	0x08002c1d
 8002c18:	08002c35 	.word	0x08002c35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c20:	e030      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d025      	beq.n	8002c7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c32:	e022      	b.n	8002c7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c3c:	d11f      	bne.n	8002c7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c42:	e01c      	b.n	8002c7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d903      	bls.n	8002c52 <DMA_CheckFifoParam+0xb6>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d003      	beq.n	8002c58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c50:	e018      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
      break;
 8002c56:	e015      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00e      	beq.n	8002c82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      break;
 8002c68:	e00b      	b.n	8002c82 <DMA_CheckFifoParam+0xe6>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e00a      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e008      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      break;
 8002c72:	bf00      	nop
 8002c74:	e006      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      break;
 8002c76:	bf00      	nop
 8002c78:	e004      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e002      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c7e:	bf00      	nop
 8002c80:	e000      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      break;
 8002c82:	bf00      	nop
    }
  } 
  
  return status; 
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop

08002c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	; 0x24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	e165      	b.n	8002f7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	f040 8154 	bne.w	8002f76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d005      	beq.n	8002ce6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d130      	bne.n	8002d48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 0201 	and.w	r2, r3, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d017      	beq.n	8002d84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d123      	bne.n	8002dd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	08da      	lsrs	r2, r3, #3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3208      	adds	r2, #8
 8002d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	220f      	movs	r2, #15
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	08da      	lsrs	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3208      	adds	r2, #8
 8002dd2:	69b9      	ldr	r1, [r7, #24]
 8002dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0203 	and.w	r2, r3, #3
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80ae 	beq.w	8002f76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	4b5d      	ldr	r3, [pc, #372]	; (8002f94 <HAL_GPIO_Init+0x300>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	4a5c      	ldr	r2, [pc, #368]	; (8002f94 <HAL_GPIO_Init+0x300>)
 8002e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e28:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2a:	4b5a      	ldr	r3, [pc, #360]	; (8002f94 <HAL_GPIO_Init+0x300>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e36:	4a58      	ldr	r2, [pc, #352]	; (8002f98 <HAL_GPIO_Init+0x304>)
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	089b      	lsrs	r3, r3, #2
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a4f      	ldr	r2, [pc, #316]	; (8002f9c <HAL_GPIO_Init+0x308>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d025      	beq.n	8002eae <HAL_GPIO_Init+0x21a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a4e      	ldr	r2, [pc, #312]	; (8002fa0 <HAL_GPIO_Init+0x30c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01f      	beq.n	8002eaa <HAL_GPIO_Init+0x216>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a4d      	ldr	r2, [pc, #308]	; (8002fa4 <HAL_GPIO_Init+0x310>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d019      	beq.n	8002ea6 <HAL_GPIO_Init+0x212>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a4c      	ldr	r2, [pc, #304]	; (8002fa8 <HAL_GPIO_Init+0x314>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_GPIO_Init+0x20e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a4b      	ldr	r2, [pc, #300]	; (8002fac <HAL_GPIO_Init+0x318>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00d      	beq.n	8002e9e <HAL_GPIO_Init+0x20a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a4a      	ldr	r2, [pc, #296]	; (8002fb0 <HAL_GPIO_Init+0x31c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d007      	beq.n	8002e9a <HAL_GPIO_Init+0x206>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a49      	ldr	r2, [pc, #292]	; (8002fb4 <HAL_GPIO_Init+0x320>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <HAL_GPIO_Init+0x202>
 8002e92:	2306      	movs	r3, #6
 8002e94:	e00c      	b.n	8002eb0 <HAL_GPIO_Init+0x21c>
 8002e96:	2307      	movs	r3, #7
 8002e98:	e00a      	b.n	8002eb0 <HAL_GPIO_Init+0x21c>
 8002e9a:	2305      	movs	r3, #5
 8002e9c:	e008      	b.n	8002eb0 <HAL_GPIO_Init+0x21c>
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	e006      	b.n	8002eb0 <HAL_GPIO_Init+0x21c>
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e004      	b.n	8002eb0 <HAL_GPIO_Init+0x21c>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e002      	b.n	8002eb0 <HAL_GPIO_Init+0x21c>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_GPIO_Init+0x21c>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	f002 0203 	and.w	r2, r2, #3
 8002eb6:	0092      	lsls	r2, r2, #2
 8002eb8:	4093      	lsls	r3, r2
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ec0:	4935      	ldr	r1, [pc, #212]	; (8002f98 <HAL_GPIO_Init+0x304>)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ece:	4b3a      	ldr	r3, [pc, #232]	; (8002fb8 <HAL_GPIO_Init+0x324>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ef2:	4a31      	ldr	r2, [pc, #196]	; (8002fb8 <HAL_GPIO_Init+0x324>)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef8:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <HAL_GPIO_Init+0x324>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f1c:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <HAL_GPIO_Init+0x324>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f22:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <HAL_GPIO_Init+0x324>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f46:	4a1c      	ldr	r2, [pc, #112]	; (8002fb8 <HAL_GPIO_Init+0x324>)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <HAL_GPIO_Init+0x324>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f70:	4a11      	ldr	r2, [pc, #68]	; (8002fb8 <HAL_GPIO_Init+0x324>)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	f67f ae96 	bls.w	8002cb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	3724      	adds	r7, #36	; 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40013800 	.word	0x40013800
 8002f9c:	40020000 	.word	0x40020000
 8002fa0:	40020400 	.word	0x40020400
 8002fa4:	40020800 	.word	0x40020800
 8002fa8:	40020c00 	.word	0x40020c00
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40021400 	.word	0x40021400
 8002fb4:	40021800 	.word	0x40021800
 8002fb8:	40013c00 	.word	0x40013c00

08002fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fcc:	787b      	ldrb	r3, [r7, #1]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fd8:	e003      	b.n	8002fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	041a      	lsls	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	619a      	str	r2, [r3, #24]
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ffa:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	4013      	ands	r3, r2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d006      	beq.n	8003014 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003006:	4a05      	ldr	r2, [pc, #20]	; (800301c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f806 	bl	8003020 <HAL_GPIO_EXTI_Callback>
  }
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40013c00 	.word	0x40013c00

08003020 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800304c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003050:	6413      	str	r3, [r2, #64]	; 0x40
 8003052:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800305e:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_PWREx_EnableOverDrive+0x94>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003064:	f7ff f956 	bl	8002314 <HAL_GetTick>
 8003068:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800306a:	e009      	b.n	8003080 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800306c:	f7ff f952 	bl	8002314 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800307a:	d901      	bls.n	8003080 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e01f      	b.n	80030c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308c:	d1ee      	bne.n	800306c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800308e:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003090:	2201      	movs	r2, #1
 8003092:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003094:	f7ff f93e 	bl	8002314 <HAL_GetTick>
 8003098:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800309a:	e009      	b.n	80030b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800309c:	f7ff f93a 	bl	8002314 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030aa:	d901      	bls.n	80030b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e007      	b.n	80030c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030bc:	d1ee      	bne.n	800309c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40023800 	.word	0x40023800
 80030cc:	420e0040 	.word	0x420e0040
 80030d0:	40007000 	.word	0x40007000
 80030d4:	420e0044 	.word	0x420e0044

080030d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0cc      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030ec:	4b68      	ldr	r3, [pc, #416]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d90c      	bls.n	8003114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b65      	ldr	r3, [pc, #404]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b63      	ldr	r3, [pc, #396]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0b8      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d020      	beq.n	8003162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800312c:	4b59      	ldr	r3, [pc, #356]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a58      	ldr	r2, [pc, #352]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a52      	ldr	r2, [pc, #328]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800314e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003150:	4b50      	ldr	r3, [pc, #320]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	494d      	ldr	r1, [pc, #308]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d044      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b47      	ldr	r3, [pc, #284]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d119      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e07f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d003      	beq.n	8003196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003192:	2b03      	cmp	r3, #3
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003196:	4b3f      	ldr	r3, [pc, #252]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e06f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a6:	4b3b      	ldr	r3, [pc, #236]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e067      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b6:	4b37      	ldr	r3, [pc, #220]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f023 0203 	bic.w	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4934      	ldr	r1, [pc, #208]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c8:	f7ff f8a4 	bl	8002314 <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d0:	f7ff f8a0 	bl	8002314 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e04f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	4b2b      	ldr	r3, [pc, #172]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 020c 	and.w	r2, r3, #12
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1eb      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f8:	4b25      	ldr	r3, [pc, #148]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d20c      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b22      	ldr	r3, [pc, #136]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e032      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800322c:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4916      	ldr	r1, [pc, #88]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	490e      	ldr	r1, [pc, #56]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800325e:	f000 f887 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 8003262:	4602      	mov	r2, r0
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	490a      	ldr	r1, [pc, #40]	; (8003298 <HAL_RCC_ClockConfig+0x1c0>)
 8003270:	5ccb      	ldrb	r3, [r1, r3]
 8003272:	fa22 f303 	lsr.w	r3, r2, r3
 8003276:	4a09      	ldr	r2, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe fbb0 	bl	80019e4 <HAL_InitTick>

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023c00 	.word	0x40023c00
 8003294:	40023800 	.word	0x40023800
 8003298:	08029468 	.word	0x08029468
 800329c:	20000004 	.word	0x20000004
 80032a0:	20000008 	.word	0x20000008

080032a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000004 	.word	0x20000004

080032bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032c0:	f7ff fff0 	bl	80032a4 <HAL_RCC_GetHCLKFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	0a9b      	lsrs	r3, r3, #10
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	4903      	ldr	r1, [pc, #12]	; (80032e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40023800 	.word	0x40023800
 80032e0:	08029478 	.word	0x08029478

080032e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032e8:	f7ff ffdc 	bl	80032a4 <HAL_RCC_GetHCLKFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	0b5b      	lsrs	r3, r3, #13
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4903      	ldr	r1, [pc, #12]	; (8003308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40023800 	.word	0x40023800
 8003308:	08029478 	.word	0x08029478

0800330c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	220f      	movs	r2, #15
 800331a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_RCC_GetClockConfig+0x5c>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0203 	and.w	r2, r3, #3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_RCC_GetClockConfig+0x5c>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <HAL_RCC_GetClockConfig+0x5c>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003340:	4b09      	ldr	r3, [pc, #36]	; (8003368 <HAL_RCC_GetClockConfig+0x5c>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	08db      	lsrs	r3, r3, #3
 8003346:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800334e:	4b07      	ldr	r3, [pc, #28]	; (800336c <HAL_RCC_GetClockConfig+0x60>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 020f 	and.w	r2, r3, #15
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	601a      	str	r2, [r3, #0]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800
 800336c:	40023c00 	.word	0x40023c00

08003370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003374:	b0ae      	sub	sp, #184	; 0xb8
 8003376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003396:	4bcb      	ldr	r3, [pc, #812]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	f200 8206 	bhi.w	80037b0 <HAL_RCC_GetSysClockFreq+0x440>
 80033a4:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033e1 	.word	0x080033e1
 80033b0:	080037b1 	.word	0x080037b1
 80033b4:	080037b1 	.word	0x080037b1
 80033b8:	080037b1 	.word	0x080037b1
 80033bc:	080033e9 	.word	0x080033e9
 80033c0:	080037b1 	.word	0x080037b1
 80033c4:	080037b1 	.word	0x080037b1
 80033c8:	080037b1 	.word	0x080037b1
 80033cc:	080033f1 	.word	0x080033f1
 80033d0:	080037b1 	.word	0x080037b1
 80033d4:	080037b1 	.word	0x080037b1
 80033d8:	080037b1 	.word	0x080037b1
 80033dc:	080035e1 	.word	0x080035e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4bb9      	ldr	r3, [pc, #740]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80033e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80033e6:	e1e7      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e8:	4bb8      	ldr	r3, [pc, #736]	; (80036cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80033ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80033ee:	e1e3      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f0:	4bb4      	ldr	r3, [pc, #720]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033fc:	4bb1      	ldr	r3, [pc, #708]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d071      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003408:	4bae      	ldr	r3, [pc, #696]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	2200      	movs	r2, #0
 8003410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003414:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800341c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003420:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800342a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800342e:	4622      	mov	r2, r4
 8003430:	462b      	mov	r3, r5
 8003432:	f04f 0000 	mov.w	r0, #0
 8003436:	f04f 0100 	mov.w	r1, #0
 800343a:	0159      	lsls	r1, r3, #5
 800343c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003440:	0150      	lsls	r0, r2, #5
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4621      	mov	r1, r4
 8003448:	1a51      	subs	r1, r2, r1
 800344a:	6439      	str	r1, [r7, #64]	; 0x40
 800344c:	4629      	mov	r1, r5
 800344e:	eb63 0301 	sbc.w	r3, r3, r1
 8003452:	647b      	str	r3, [r7, #68]	; 0x44
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003460:	4649      	mov	r1, r9
 8003462:	018b      	lsls	r3, r1, #6
 8003464:	4641      	mov	r1, r8
 8003466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800346a:	4641      	mov	r1, r8
 800346c:	018a      	lsls	r2, r1, #6
 800346e:	4641      	mov	r1, r8
 8003470:	1a51      	subs	r1, r2, r1
 8003472:	63b9      	str	r1, [r7, #56]	; 0x38
 8003474:	4649      	mov	r1, r9
 8003476:	eb63 0301 	sbc.w	r3, r3, r1
 800347a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003488:	4649      	mov	r1, r9
 800348a:	00cb      	lsls	r3, r1, #3
 800348c:	4641      	mov	r1, r8
 800348e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003492:	4641      	mov	r1, r8
 8003494:	00ca      	lsls	r2, r1, #3
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	4603      	mov	r3, r0
 800349c:	4622      	mov	r2, r4
 800349e:	189b      	adds	r3, r3, r2
 80034a0:	633b      	str	r3, [r7, #48]	; 0x30
 80034a2:	462b      	mov	r3, r5
 80034a4:	460a      	mov	r2, r1
 80034a6:	eb42 0303 	adc.w	r3, r2, r3
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034b8:	4629      	mov	r1, r5
 80034ba:	024b      	lsls	r3, r1, #9
 80034bc:	4621      	mov	r1, r4
 80034be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034c2:	4621      	mov	r1, r4
 80034c4:	024a      	lsls	r2, r1, #9
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80034dc:	f7fc fee8 	bl	80002b0 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4613      	mov	r3, r2
 80034e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034ea:	e067      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ec:	4b75      	ldr	r3, [pc, #468]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034f8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80034fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003504:	67bb      	str	r3, [r7, #120]	; 0x78
 8003506:	2300      	movs	r3, #0
 8003508:	67fb      	str	r3, [r7, #124]	; 0x7c
 800350a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800350e:	4622      	mov	r2, r4
 8003510:	462b      	mov	r3, r5
 8003512:	f04f 0000 	mov.w	r0, #0
 8003516:	f04f 0100 	mov.w	r1, #0
 800351a:	0159      	lsls	r1, r3, #5
 800351c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003520:	0150      	lsls	r0, r2, #5
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4621      	mov	r1, r4
 8003528:	1a51      	subs	r1, r2, r1
 800352a:	62b9      	str	r1, [r7, #40]	; 0x28
 800352c:	4629      	mov	r1, r5
 800352e:	eb63 0301 	sbc.w	r3, r3, r1
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003540:	4649      	mov	r1, r9
 8003542:	018b      	lsls	r3, r1, #6
 8003544:	4641      	mov	r1, r8
 8003546:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800354a:	4641      	mov	r1, r8
 800354c:	018a      	lsls	r2, r1, #6
 800354e:	4641      	mov	r1, r8
 8003550:	ebb2 0a01 	subs.w	sl, r2, r1
 8003554:	4649      	mov	r1, r9
 8003556:	eb63 0b01 	sbc.w	fp, r3, r1
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003566:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800356a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800356e:	4692      	mov	sl, r2
 8003570:	469b      	mov	fp, r3
 8003572:	4623      	mov	r3, r4
 8003574:	eb1a 0303 	adds.w	r3, sl, r3
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	462b      	mov	r3, r5
 800357c:	eb4b 0303 	adc.w	r3, fp, r3
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800358e:	4629      	mov	r1, r5
 8003590:	028b      	lsls	r3, r1, #10
 8003592:	4621      	mov	r1, r4
 8003594:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003598:	4621      	mov	r1, r4
 800359a:	028a      	lsls	r2, r1, #10
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035a4:	2200      	movs	r2, #0
 80035a6:	673b      	str	r3, [r7, #112]	; 0x70
 80035a8:	677a      	str	r2, [r7, #116]	; 0x74
 80035aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80035ae:	f7fc fe7f 	bl	80002b0 <__aeabi_uldivmod>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4613      	mov	r3, r2
 80035b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035bc:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	3301      	adds	r3, #1
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80035ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035de:	e0eb      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035e0:	4b38      	ldr	r3, [pc, #224]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ec:	4b35      	ldr	r3, [pc, #212]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d06b      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f8:	4b32      	ldr	r3, [pc, #200]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	099b      	lsrs	r3, r3, #6
 80035fe:	2200      	movs	r2, #0
 8003600:	66bb      	str	r3, [r7, #104]	; 0x68
 8003602:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360a:	663b      	str	r3, [r7, #96]	; 0x60
 800360c:	2300      	movs	r3, #0
 800360e:	667b      	str	r3, [r7, #100]	; 0x64
 8003610:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003614:	4622      	mov	r2, r4
 8003616:	462b      	mov	r3, r5
 8003618:	f04f 0000 	mov.w	r0, #0
 800361c:	f04f 0100 	mov.w	r1, #0
 8003620:	0159      	lsls	r1, r3, #5
 8003622:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003626:	0150      	lsls	r0, r2, #5
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4621      	mov	r1, r4
 800362e:	1a51      	subs	r1, r2, r1
 8003630:	61b9      	str	r1, [r7, #24]
 8003632:	4629      	mov	r1, r5
 8003634:	eb63 0301 	sbc.w	r3, r3, r1
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003646:	4659      	mov	r1, fp
 8003648:	018b      	lsls	r3, r1, #6
 800364a:	4651      	mov	r1, sl
 800364c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003650:	4651      	mov	r1, sl
 8003652:	018a      	lsls	r2, r1, #6
 8003654:	4651      	mov	r1, sl
 8003656:	ebb2 0801 	subs.w	r8, r2, r1
 800365a:	4659      	mov	r1, fp
 800365c:	eb63 0901 	sbc.w	r9, r3, r1
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800366c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003670:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003674:	4690      	mov	r8, r2
 8003676:	4699      	mov	r9, r3
 8003678:	4623      	mov	r3, r4
 800367a:	eb18 0303 	adds.w	r3, r8, r3
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	462b      	mov	r3, r5
 8003682:	eb49 0303 	adc.w	r3, r9, r3
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003694:	4629      	mov	r1, r5
 8003696:	024b      	lsls	r3, r1, #9
 8003698:	4621      	mov	r1, r4
 800369a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800369e:	4621      	mov	r1, r4
 80036a0:	024a      	lsls	r2, r1, #9
 80036a2:	4610      	mov	r0, r2
 80036a4:	4619      	mov	r1, r3
 80036a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036aa:	2200      	movs	r2, #0
 80036ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80036ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80036b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036b4:	f7fc fdfc 	bl	80002b0 <__aeabi_uldivmod>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4613      	mov	r3, r2
 80036be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036c2:	e065      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x420>
 80036c4:	40023800 	.word	0x40023800
 80036c8:	00f42400 	.word	0x00f42400
 80036cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d0:	4b3d      	ldr	r3, [pc, #244]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	2200      	movs	r2, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	4611      	mov	r1, r2
 80036dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036e0:	653b      	str	r3, [r7, #80]	; 0x50
 80036e2:	2300      	movs	r3, #0
 80036e4:	657b      	str	r3, [r7, #84]	; 0x54
 80036e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80036ea:	4642      	mov	r2, r8
 80036ec:	464b      	mov	r3, r9
 80036ee:	f04f 0000 	mov.w	r0, #0
 80036f2:	f04f 0100 	mov.w	r1, #0
 80036f6:	0159      	lsls	r1, r3, #5
 80036f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036fc:	0150      	lsls	r0, r2, #5
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4641      	mov	r1, r8
 8003704:	1a51      	subs	r1, r2, r1
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	4649      	mov	r1, r9
 800370a:	eb63 0301 	sbc.w	r3, r3, r1
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800371c:	4659      	mov	r1, fp
 800371e:	018b      	lsls	r3, r1, #6
 8003720:	4651      	mov	r1, sl
 8003722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003726:	4651      	mov	r1, sl
 8003728:	018a      	lsls	r2, r1, #6
 800372a:	4651      	mov	r1, sl
 800372c:	1a54      	subs	r4, r2, r1
 800372e:	4659      	mov	r1, fp
 8003730:	eb63 0501 	sbc.w	r5, r3, r1
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	00eb      	lsls	r3, r5, #3
 800373e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003742:	00e2      	lsls	r2, r4, #3
 8003744:	4614      	mov	r4, r2
 8003746:	461d      	mov	r5, r3
 8003748:	4643      	mov	r3, r8
 800374a:	18e3      	adds	r3, r4, r3
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	464b      	mov	r3, r9
 8003750:	eb45 0303 	adc.w	r3, r5, r3
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003762:	4629      	mov	r1, r5
 8003764:	028b      	lsls	r3, r1, #10
 8003766:	4621      	mov	r1, r4
 8003768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800376c:	4621      	mov	r1, r4
 800376e:	028a      	lsls	r2, r1, #10
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003778:	2200      	movs	r2, #0
 800377a:	64bb      	str	r3, [r7, #72]	; 0x48
 800377c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800377e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003782:	f7fc fd95 	bl	80002b0 <__aeabi_uldivmod>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4613      	mov	r3, r2
 800378c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	0f1b      	lsrs	r3, r3, #28
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800379e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80037ae:	e003      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80037b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80037b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	37b8      	adds	r7, #184	; 0xb8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800
 80037cc:	00f42400 	.word	0x00f42400

080037d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e28d      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8083 	beq.w	80038f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037f0:	4b94      	ldr	r3, [pc, #592]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d019      	beq.n	8003830 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037fc:	4b91      	ldr	r3, [pc, #580]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003804:	2b08      	cmp	r3, #8
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003808:	4b8e      	ldr	r3, [pc, #568]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003814:	d00c      	beq.n	8003830 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003816:	4b8b      	ldr	r3, [pc, #556]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800381e:	2b0c      	cmp	r3, #12
 8003820:	d112      	bne.n	8003848 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003822:	4b88      	ldr	r3, [pc, #544]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800382e:	d10b      	bne.n	8003848 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003830:	4b84      	ldr	r3, [pc, #528]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d05b      	beq.n	80038f4 <HAL_RCC_OscConfig+0x124>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d157      	bne.n	80038f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e25a      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003850:	d106      	bne.n	8003860 <HAL_RCC_OscConfig+0x90>
 8003852:	4b7c      	ldr	r3, [pc, #496]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a7b      	ldr	r2, [pc, #492]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e01d      	b.n	800389c <HAL_RCC_OscConfig+0xcc>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003868:	d10c      	bne.n	8003884 <HAL_RCC_OscConfig+0xb4>
 800386a:	4b76      	ldr	r3, [pc, #472]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a75      	ldr	r2, [pc, #468]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	4b73      	ldr	r3, [pc, #460]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a72      	ldr	r2, [pc, #456]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e00b      	b.n	800389c <HAL_RCC_OscConfig+0xcc>
 8003884:	4b6f      	ldr	r3, [pc, #444]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a6e      	ldr	r2, [pc, #440]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 800388a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4b6c      	ldr	r3, [pc, #432]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a6b      	ldr	r2, [pc, #428]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d013      	beq.n	80038cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fe fd36 	bl	8002314 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ac:	f7fe fd32 	bl	8002314 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	; 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e21f      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	4b61      	ldr	r3, [pc, #388]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0xdc>
 80038ca:	e014      	b.n	80038f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fe fd22 	bl	8002314 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d4:	f7fe fd1e 	bl	8002314 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	; 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e20b      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e6:	4b57      	ldr	r3, [pc, #348]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x104>
 80038f2:	e000      	b.n	80038f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d06f      	beq.n	80039e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003902:	4b50      	ldr	r3, [pc, #320]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b00      	cmp	r3, #0
 800390c:	d017      	beq.n	800393e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800390e:	4b4d      	ldr	r3, [pc, #308]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003916:	2b08      	cmp	r3, #8
 8003918:	d105      	bne.n	8003926 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800391a:	4b4a      	ldr	r3, [pc, #296]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00b      	beq.n	800393e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003926:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800392e:	2b0c      	cmp	r3, #12
 8003930:	d11c      	bne.n	800396c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003932:	4b44      	ldr	r3, [pc, #272]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d116      	bne.n	800396c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393e:	4b41      	ldr	r3, [pc, #260]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_RCC_OscConfig+0x186>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d001      	beq.n	8003956 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e1d3      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4937      	ldr	r1, [pc, #220]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003966:	4313      	orrs	r3, r2
 8003968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396a:	e03a      	b.n	80039e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d020      	beq.n	80039b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003974:	4b34      	ldr	r3, [pc, #208]	; (8003a48 <HAL_RCC_OscConfig+0x278>)
 8003976:	2201      	movs	r2, #1
 8003978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397a:	f7fe fccb 	bl	8002314 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003982:	f7fe fcc7 	bl	8002314 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e1b4      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003994:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a0:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4925      	ldr	r1, [pc, #148]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]
 80039b4:	e015      	b.n	80039e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b6:	4b24      	ldr	r3, [pc, #144]	; (8003a48 <HAL_RCC_OscConfig+0x278>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fe fcaa 	bl	8002314 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c4:	f7fe fca6 	bl	8002314 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e193      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d036      	beq.n	8003a5c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d016      	beq.n	8003a24 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f6:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <HAL_RCC_OscConfig+0x27c>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fc:	f7fe fc8a 	bl	8002314 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a04:	f7fe fc86 	bl	8002314 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e173      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x234>
 8003a22:	e01b      	b.n	8003a5c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a24:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <HAL_RCC_OscConfig+0x27c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fe fc73 	bl	8002314 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a30:	e00e      	b.n	8003a50 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a32:	f7fe fc6f 	bl	8002314 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d907      	bls.n	8003a50 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e15c      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
 8003a44:	40023800 	.word	0x40023800
 8003a48:	42470000 	.word	0x42470000
 8003a4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a50:	4b8a      	ldr	r3, [pc, #552]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ea      	bne.n	8003a32 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8097 	beq.w	8003b98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6e:	4b83      	ldr	r3, [pc, #524]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10f      	bne.n	8003a9a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	4b7f      	ldr	r3, [pc, #508]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	4a7e      	ldr	r2, [pc, #504]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a88:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8a:	4b7c      	ldr	r3, [pc, #496]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a96:	2301      	movs	r3, #1
 8003a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9a:	4b79      	ldr	r3, [pc, #484]	; (8003c80 <HAL_RCC_OscConfig+0x4b0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d118      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa6:	4b76      	ldr	r3, [pc, #472]	; (8003c80 <HAL_RCC_OscConfig+0x4b0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a75      	ldr	r2, [pc, #468]	; (8003c80 <HAL_RCC_OscConfig+0x4b0>)
 8003aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab2:	f7fe fc2f 	bl	8002314 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aba:	f7fe fc2b 	bl	8002314 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e118      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003acc:	4b6c      	ldr	r3, [pc, #432]	; (8003c80 <HAL_RCC_OscConfig+0x4b0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d106      	bne.n	8003aee <HAL_RCC_OscConfig+0x31e>
 8003ae0:	4b66      	ldr	r3, [pc, #408]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae4:	4a65      	ldr	r2, [pc, #404]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	6713      	str	r3, [r2, #112]	; 0x70
 8003aec:	e01c      	b.n	8003b28 <HAL_RCC_OscConfig+0x358>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b05      	cmp	r3, #5
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x340>
 8003af6:	4b61      	ldr	r3, [pc, #388]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	4a60      	ldr	r2, [pc, #384]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003afc:	f043 0304 	orr.w	r3, r3, #4
 8003b00:	6713      	str	r3, [r2, #112]	; 0x70
 8003b02:	4b5e      	ldr	r3, [pc, #376]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	4a5d      	ldr	r2, [pc, #372]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0e:	e00b      	b.n	8003b28 <HAL_RCC_OscConfig+0x358>
 8003b10:	4b5a      	ldr	r3, [pc, #360]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	4a59      	ldr	r2, [pc, #356]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b16:	f023 0301 	bic.w	r3, r3, #1
 8003b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1c:	4b57      	ldr	r3, [pc, #348]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	4a56      	ldr	r2, [pc, #344]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b22:	f023 0304 	bic.w	r3, r3, #4
 8003b26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d015      	beq.n	8003b5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b30:	f7fe fbf0 	bl	8002314 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b38:	f7fe fbec 	bl	8002314 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e0d7      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4e:	4b4b      	ldr	r3, [pc, #300]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0ee      	beq.n	8003b38 <HAL_RCC_OscConfig+0x368>
 8003b5a:	e014      	b.n	8003b86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fe fbda 	bl	8002314 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b64:	f7fe fbd6 	bl	8002314 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e0c1      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7a:	4b40      	ldr	r3, [pc, #256]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1ee      	bne.n	8003b64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d105      	bne.n	8003b98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8c:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	4a3a      	ldr	r2, [pc, #232]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80ad 	beq.w	8003cfc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ba2:	4b36      	ldr	r3, [pc, #216]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d060      	beq.n	8003c70 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d145      	bne.n	8003c42 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb6:	4b33      	ldr	r3, [pc, #204]	; (8003c84 <HAL_RCC_OscConfig+0x4b4>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fbaa 	bl	8002314 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7fe fba6 	bl	8002314 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e093      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd6:	4b29      	ldr	r3, [pc, #164]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	019b      	lsls	r3, r3, #6
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	085b      	lsrs	r3, r3, #1
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	041b      	lsls	r3, r3, #16
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	061b      	lsls	r3, r3, #24
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	071b      	lsls	r3, r3, #28
 8003c0e:	491b      	ldr	r1, [pc, #108]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c14:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_RCC_OscConfig+0x4b4>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1a:	f7fe fb7b 	bl	8002314 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fe fb77 	bl	8002314 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e064      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c34:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x452>
 8003c40:	e05c      	b.n	8003cfc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <HAL_RCC_OscConfig+0x4b4>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fe fb64 	bl	8002314 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fe fb60 	bl	8002314 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e04d      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x480>
 8003c6e:	e045      	b.n	8003cfc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e040      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40007000 	.word	0x40007000
 8003c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c88:	4b1f      	ldr	r3, [pc, #124]	; (8003d08 <HAL_RCC_OscConfig+0x538>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d030      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d129      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d122      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cb8:	4013      	ands	r3, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d119      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d10f      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d107      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40023800 	.word	0x40023800

08003d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e07b      	b.n	8003e16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d108      	bne.n	8003d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d2e:	d009      	beq.n	8003d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	61da      	str	r2, [r3, #28]
 8003d36:	e005      	b.n	8003d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fd fc58 	bl	8001614 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	ea42 0103 	orr.w	r1, r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	f003 0104 	and.w	r1, r3, #4
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f003 0210 	and.w	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b088      	sub	sp, #32
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_SPI_Transmit+0x22>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e126      	b.n	800408e <HAL_SPI_Transmit+0x270>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e48:	f7fe fa64 	bl	8002314 <HAL_GetTick>
 8003e4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d002      	beq.n	8003e64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e62:	e10b      	b.n	800407c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_SPI_Transmit+0x52>
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d102      	bne.n	8003e76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e74:	e102      	b.n	800407c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2203      	movs	r2, #3
 8003e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	88fa      	ldrh	r2, [r7, #6]
 8003e8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	88fa      	ldrh	r2, [r7, #6]
 8003e94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ebc:	d10f      	bne.n	8003ede <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ecc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003edc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	d007      	beq.n	8003efc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003efa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f04:	d14b      	bne.n	8003f9e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_SPI_Transmit+0xf6>
 8003f0e:	8afb      	ldrh	r3, [r7, #22]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d13e      	bne.n	8003f92 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	881a      	ldrh	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	1c9a      	adds	r2, r3, #2
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f38:	e02b      	b.n	8003f92 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d112      	bne.n	8003f6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	881a      	ldrh	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	1c9a      	adds	r2, r3, #2
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f6c:	e011      	b.n	8003f92 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f6e:	f7fe f9d1 	bl	8002314 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d803      	bhi.n	8003f86 <HAL_SPI_Transmit+0x168>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d102      	bne.n	8003f8c <HAL_SPI_Transmit+0x16e>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f90:	e074      	b.n	800407c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ce      	bne.n	8003f3a <HAL_SPI_Transmit+0x11c>
 8003f9c:	e04c      	b.n	8004038 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_SPI_Transmit+0x18e>
 8003fa6:	8afb      	ldrh	r3, [r7, #22]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d140      	bne.n	800402e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	7812      	ldrb	r2, [r2, #0]
 8003fb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fd2:	e02c      	b.n	800402e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d113      	bne.n	800400a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	330c      	adds	r3, #12
 8003fec:	7812      	ldrb	r2, [r2, #0]
 8003fee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	86da      	strh	r2, [r3, #54]	; 0x36
 8004008:	e011      	b.n	800402e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800400a:	f7fe f983 	bl	8002314 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d803      	bhi.n	8004022 <HAL_SPI_Transmit+0x204>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d102      	bne.n	8004028 <HAL_SPI_Transmit+0x20a>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800402c:	e026      	b.n	800407c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1cd      	bne.n	8003fd4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	6839      	ldr	r1, [r7, #0]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fe2b 	bl	8004c98 <SPI_EndRxTxTransaction>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10a      	bne.n	800406c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004056:	2300      	movs	r3, #0
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e000      	b.n	800407c <HAL_SPI_Transmit+0x25e>
  }

error:
 800407a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800408c:	7ffb      	ldrb	r3, [r7, #31]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b088      	sub	sp, #32
 800409a:	af02      	add	r7, sp, #8
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	603b      	str	r3, [r7, #0]
 80040a2:	4613      	mov	r3, r2
 80040a4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040b2:	d112      	bne.n	80040da <HAL_SPI_Receive+0x44>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10e      	bne.n	80040da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2204      	movs	r2, #4
 80040c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	4613      	mov	r3, r2
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f8f1 	bl	80042b8 <HAL_SPI_TransmitReceive>
 80040d6:	4603      	mov	r3, r0
 80040d8:	e0ea      	b.n	80042b0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_SPI_Receive+0x52>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e0e3      	b.n	80042b0 <HAL_SPI_Receive+0x21a>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040f0:	f7fe f910 	bl	8002314 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d002      	beq.n	8004108 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004102:	2302      	movs	r3, #2
 8004104:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004106:	e0ca      	b.n	800429e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_SPI_Receive+0x7e>
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004118:	e0c1      	b.n	800429e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2204      	movs	r2, #4
 800411e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	88fa      	ldrh	r2, [r7, #6]
 8004132:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	88fa      	ldrh	r2, [r7, #6]
 8004138:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004160:	d10f      	bne.n	8004182 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004170:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004180:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418c:	2b40      	cmp	r3, #64	; 0x40
 800418e:	d007      	beq.n	80041a0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800419e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d162      	bne.n	800426e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80041a8:	e02e      	b.n	8004208 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d115      	bne.n	80041e4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f103 020c 	add.w	r2, r3, #12
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	7812      	ldrb	r2, [r2, #0]
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041e2:	e011      	b.n	8004208 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041e4:	f7fe f896 	bl	8002314 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d803      	bhi.n	80041fc <HAL_SPI_Receive+0x166>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fa:	d102      	bne.n	8004202 <HAL_SPI_Receive+0x16c>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d102      	bne.n	8004208 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004206:	e04a      	b.n	800429e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1cb      	bne.n	80041aa <HAL_SPI_Receive+0x114>
 8004212:	e031      	b.n	8004278 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d113      	bne.n	800424a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	b292      	uxth	r2, r2
 800422e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	1c9a      	adds	r2, r3, #2
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004248:	e011      	b.n	800426e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800424a:	f7fe f863 	bl	8002314 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d803      	bhi.n	8004262 <HAL_SPI_Receive+0x1cc>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d102      	bne.n	8004268 <HAL_SPI_Receive+0x1d2>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d102      	bne.n	800426e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800426c:	e017      	b.n	800429e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1cd      	bne.n	8004214 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	6839      	ldr	r1, [r7, #0]
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fca5 	bl	8004bcc <SPI_EndRxTransaction>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	75fb      	strb	r3, [r7, #23]
 800429a:	e000      	b.n	800429e <HAL_SPI_Receive+0x208>
  }

error :
 800429c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08c      	sub	sp, #48	; 0x30
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042c6:	2301      	movs	r3, #1
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_SPI_TransmitReceive+0x26>
 80042da:	2302      	movs	r3, #2
 80042dc:	e18a      	b.n	80045f4 <HAL_SPI_TransmitReceive+0x33c>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042e6:	f7fe f815 	bl	8002314 <HAL_GetTick>
 80042ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80042fc:	887b      	ldrh	r3, [r7, #2]
 80042fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004300:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004304:	2b01      	cmp	r3, #1
 8004306:	d00f      	beq.n	8004328 <HAL_SPI_TransmitReceive+0x70>
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800430e:	d107      	bne.n	8004320 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d103      	bne.n	8004320 <HAL_SPI_TransmitReceive+0x68>
 8004318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800431c:	2b04      	cmp	r3, #4
 800431e:	d003      	beq.n	8004328 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004320:	2302      	movs	r3, #2
 8004322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004326:	e15b      	b.n	80045e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_SPI_TransmitReceive+0x82>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <HAL_SPI_TransmitReceive+0x82>
 8004334:	887b      	ldrh	r3, [r7, #2]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d103      	bne.n	8004342 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004340:	e14e      	b.n	80045e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b04      	cmp	r3, #4
 800434c:	d003      	beq.n	8004356 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2205      	movs	r2, #5
 8004352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	887a      	ldrh	r2, [r7, #2]
 8004366:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	887a      	ldrh	r2, [r7, #2]
 800436c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	887a      	ldrh	r2, [r7, #2]
 8004378:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	887a      	ldrh	r2, [r7, #2]
 800437e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d007      	beq.n	80043aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b2:	d178      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <HAL_SPI_TransmitReceive+0x10a>
 80043bc:	8b7b      	ldrh	r3, [r7, #26]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d166      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	881a      	ldrh	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	1c9a      	adds	r2, r3, #2
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043e6:	e053      	b.n	8004490 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d11b      	bne.n	800442e <HAL_SPI_TransmitReceive+0x176>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d016      	beq.n	800442e <HAL_SPI_TransmitReceive+0x176>
 8004400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004402:	2b01      	cmp	r3, #1
 8004404:	d113      	bne.n	800442e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	881a      	ldrh	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	1c9a      	adds	r2, r3, #2
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b01      	cmp	r3, #1
 800443a:	d119      	bne.n	8004470 <HAL_SPI_TransmitReceive+0x1b8>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d014      	beq.n	8004470 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	b292      	uxth	r2, r2
 8004452:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	1c9a      	adds	r2, r3, #2
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800446c:	2301      	movs	r3, #1
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004470:	f7fd ff50 	bl	8002314 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800447c:	429a      	cmp	r2, r3
 800447e:	d807      	bhi.n	8004490 <HAL_SPI_TransmitReceive+0x1d8>
 8004480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004486:	d003      	beq.n	8004490 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800448e:	e0a7      	b.n	80045e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1a6      	bne.n	80043e8 <HAL_SPI_TransmitReceive+0x130>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1a1      	bne.n	80043e8 <HAL_SPI_TransmitReceive+0x130>
 80044a4:	e07c      	b.n	80045a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_SPI_TransmitReceive+0x1fc>
 80044ae:	8b7b      	ldrh	r3, [r7, #26]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d16b      	bne.n	800458c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	7812      	ldrb	r2, [r2, #0]
 80044c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044da:	e057      	b.n	800458c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d11c      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x26c>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d017      	beq.n	8004524 <HAL_SPI_TransmitReceive+0x26c>
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d114      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	7812      	ldrb	r2, [r2, #0]
 8004506:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b01      	cmp	r3, #1
 8004530:	d119      	bne.n	8004566 <HAL_SPI_TransmitReceive+0x2ae>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d014      	beq.n	8004566 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004562:	2301      	movs	r3, #1
 8004564:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004566:	f7fd fed5 	bl	8002314 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004572:	429a      	cmp	r2, r3
 8004574:	d803      	bhi.n	800457e <HAL_SPI_TransmitReceive+0x2c6>
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457c:	d102      	bne.n	8004584 <HAL_SPI_TransmitReceive+0x2cc>
 800457e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004580:	2b00      	cmp	r3, #0
 8004582:	d103      	bne.n	800458c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800458a:	e029      	b.n	80045e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1a2      	bne.n	80044dc <HAL_SPI_TransmitReceive+0x224>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d19d      	bne.n	80044dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 fb77 	bl	8004c98 <SPI_EndRxTxTransaction>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d006      	beq.n	80045be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80045bc:	e010      	b.n	80045e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10b      	bne.n	80045de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	e000      	b.n	80045e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80045de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3730      	adds	r7, #48	; 0x30
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_SPI_Transmit_DMA+0x20>
 8004618:	2302      	movs	r3, #2
 800461a:	e09b      	b.n	8004754 <HAL_SPI_Transmit_DMA+0x158>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d002      	beq.n	8004636 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004630:	2302      	movs	r3, #2
 8004632:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004634:	e089      	b.n	800474a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <HAL_SPI_Transmit_DMA+0x46>
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004646:	e080      	b.n	800474a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2203      	movs	r2, #3
 800464c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	88fa      	ldrh	r2, [r7, #6]
 8004666:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468e:	d10f      	bne.n	80046b0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b4:	4a29      	ldr	r2, [pc, #164]	; (800475c <HAL_SPI_Transmit_DMA+0x160>)
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046bc:	4a28      	ldr	r2, [pc, #160]	; (8004760 <HAL_SPI_Transmit_DMA+0x164>)
 80046be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c4:	4a27      	ldr	r2, [pc, #156]	; (8004764 <HAL_SPI_Transmit_DMA+0x168>)
 80046c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046cc:	2200      	movs	r2, #0
 80046ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	4619      	mov	r1, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	330c      	adds	r3, #12
 80046e0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80046e8:	f7fd fff0 	bl	80026cc <HAL_DMA_Start_IT>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00c      	beq.n	800470c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f6:	f043 0210 	orr.w	r2, r3, #16
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800470a:	e01e      	b.n	800474a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004716:	2b40      	cmp	r3, #64	; 0x40
 8004718:	d007      	beq.n	800472a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004728:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0220 	orr.w	r2, r2, #32
 8004738:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0202 	orr.w	r2, r2, #2
 8004748:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004752:	7dfb      	ldrb	r3, [r7, #23]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	08004a39 	.word	0x08004a39
 8004760:	08004991 	.word	0x08004991
 8004764:	08004a55 	.word	0x08004a55

08004768 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	099b      	lsrs	r3, r3, #6
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10f      	bne.n	80047ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	099b      	lsrs	r3, r3, #6
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d004      	beq.n	80047ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	4798      	blx	r3
    return;
 80047aa:	e0d7      	b.n	800495c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	085b      	lsrs	r3, r3, #1
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_SPI_IRQHandler+0x66>
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	09db      	lsrs	r3, r3, #7
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	4798      	blx	r3
    return;
 80047cc:	e0c6      	b.n	800495c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10c      	bne.n	80047f4 <HAL_SPI_IRQHandler+0x8c>
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	099b      	lsrs	r3, r3, #6
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	0a1b      	lsrs	r3, r3, #8
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80b4 	beq.w	800495c <HAL_SPI_IRQHandler+0x1f4>
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 80ad 	beq.w	800495c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	099b      	lsrs	r3, r3, #6
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d023      	beq.n	8004856 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b03      	cmp	r3, #3
 8004818:	d011      	beq.n	800483e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	f043 0204 	orr.w	r2, r3, #4
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	e00b      	b.n	8004856 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800483e:	2300      	movs	r3, #0
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	693b      	ldr	r3, [r7, #16]
        return;
 8004854:	e082      	b.n	800495c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d014      	beq.n	800488c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	f043 0201 	orr.w	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	0a1b      	lsrs	r3, r3, #8
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00c      	beq.n	80048b2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489c:	f043 0208 	orr.w	r2, r3, #8
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80048a4:	2300      	movs	r3, #0
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d04f      	beq.n	800495a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048c8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <HAL_SPI_IRQHandler+0x17e>
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d034      	beq.n	8004950 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0203 	bic.w	r2, r2, #3
 80048f4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d011      	beq.n	8004922 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004902:	4a18      	ldr	r2, [pc, #96]	; (8004964 <HAL_SPI_IRQHandler+0x1fc>)
 8004904:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd ff36 	bl	800277c <HAL_DMA_Abort_IT>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d005      	beq.n	8004922 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004926:	2b00      	cmp	r3, #0
 8004928:	d016      	beq.n	8004958 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492e:	4a0d      	ldr	r2, [pc, #52]	; (8004964 <HAL_SPI_IRQHandler+0x1fc>)
 8004930:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004936:	4618      	mov	r0, r3
 8004938:	f7fd ff20 	bl	800277c <HAL_DMA_Abort_IT>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004946:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800494e:	e003      	b.n	8004958 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f813 	bl	800497c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004956:	e000      	b.n	800495a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004958:	bf00      	nop
    return;
 800495a:	bf00      	nop
  }
}
 800495c:	3720      	adds	r7, #32
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	08004a95 	.word	0x08004a95

08004968 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800499e:	f7fd fcb9 	bl	8002314 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b2:	d03b      	beq.n	8004a2c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0220 	bic.w	r2, r2, #32
 80049c2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0202 	bic.w	r2, r2, #2
 80049d2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	2164      	movs	r1, #100	; 0x64
 80049d8:	6978      	ldr	r0, [r7, #20]
 80049da:	f000 f95d 	bl	8004c98 <SPI_EndRxTxTransaction>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	f043 0220 	orr.w	r2, r3, #32
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2200      	movs	r2, #0
 8004a12:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004a24:	6978      	ldr	r0, [r7, #20]
 8004a26:	f7ff ffa9 	bl	800497c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004a2a:	e002      	b.n	8004a32 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004a2c:	6978      	ldr	r0, [r7, #20]
 8004a2e:	f00a ff69 	bl	800f904 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7ff ff8e 	bl	8004968 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a4c:	bf00      	nop
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0203 	bic.w	r2, r2, #3
 8004a70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a76:	f043 0210 	orr.w	r2, r3, #16
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f7ff ff78 	bl	800497c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a8c:	bf00      	nop
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f7ff ff64 	bl	800497c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ab4:	bf00      	nop
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004acc:	f7fd fc22 	bl	8002314 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	1a9b      	subs	r3, r3, r2
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	4413      	add	r3, r2
 8004ada:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004adc:	f7fd fc1a 	bl	8002314 <HAL_GetTick>
 8004ae0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ae2:	4b39      	ldr	r3, [pc, #228]	; (8004bc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	015b      	lsls	r3, r3, #5
 8004ae8:	0d1b      	lsrs	r3, r3, #20
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	fb02 f303 	mul.w	r3, r2, r3
 8004af0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004af2:	e054      	b.n	8004b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afa:	d050      	beq.n	8004b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004afc:	f7fd fc0a 	bl	8002314 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d902      	bls.n	8004b12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d13d      	bne.n	8004b8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b2a:	d111      	bne.n	8004b50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b34:	d004      	beq.n	8004b40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3e:	d107      	bne.n	8004b50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b58:	d10f      	bne.n	8004b7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e017      	b.n	8004bbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	bf0c      	ite	eq
 8004bae:	2301      	moveq	r3, #1
 8004bb0:	2300      	movne	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d19b      	bne.n	8004af4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3720      	adds	r7, #32
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000004 	.word	0x20000004

08004bcc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be0:	d111      	bne.n	8004c06 <SPI_EndRxTransaction+0x3a>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bea:	d004      	beq.n	8004bf6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf4:	d107      	bne.n	8004c06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c04:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c0e:	d12a      	bne.n	8004c66 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c18:	d012      	beq.n	8004c40 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2200      	movs	r2, #0
 8004c22:	2180      	movs	r1, #128	; 0x80
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7ff ff49 	bl	8004abc <SPI_WaitFlagStateUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d02d      	beq.n	8004c8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c34:	f043 0220 	orr.w	r2, r3, #32
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e026      	b.n	8004c8e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2200      	movs	r2, #0
 8004c48:	2101      	movs	r1, #1
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff ff36 	bl	8004abc <SPI_WaitFlagStateUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01a      	beq.n	8004c8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5a:	f043 0220 	orr.w	r2, r3, #32
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e013      	b.n	8004c8e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2101      	movs	r1, #1
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f7ff ff23 	bl	8004abc <SPI_WaitFlagStateUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c80:	f043 0220 	orr.w	r2, r3, #32
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e000      	b.n	8004c8e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ca4:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <SPI_EndRxTxTransaction+0x7c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1b      	ldr	r2, [pc, #108]	; (8004d18 <SPI_EndRxTxTransaction+0x80>)
 8004caa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cae:	0d5b      	lsrs	r3, r3, #21
 8004cb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cb4:	fb02 f303 	mul.w	r3, r2, r3
 8004cb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cc2:	d112      	bne.n	8004cea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2180      	movs	r1, #128	; 0x80
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f7ff fef4 	bl	8004abc <SPI_WaitFlagStateUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d016      	beq.n	8004d08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cde:	f043 0220 	orr.w	r2, r3, #32
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e00f      	b.n	8004d0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d0f2      	beq.n	8004cea <SPI_EndRxTxTransaction+0x52>
 8004d04:	e000      	b.n	8004d08 <SPI_EndRxTxTransaction+0x70>
        break;
 8004d06:	bf00      	nop
  }

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000004 	.word	0x20000004
 8004d18:	165e9f81 	.word	0x165e9f81

08004d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e041      	b.n	8004db2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fc fd8e 	bl	8001864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f000 fa96 	bl	800528c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d001      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e04e      	b.n	8004e72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a23      	ldr	r2, [pc, #140]	; (8004e80 <HAL_TIM_Base_Start_IT+0xc4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d022      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfe:	d01d      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d018      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1e      	ldr	r2, [pc, #120]	; (8004e88 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d013      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1c      	ldr	r2, [pc, #112]	; (8004e8c <HAL_TIM_Base_Start_IT+0xd0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00e      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d009      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d111      	bne.n	8004e60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b06      	cmp	r3, #6
 8004e4c:	d010      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0201 	orr.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5e:	e007      	b.n	8004e70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40010400 	.word	0x40010400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40001800 	.word	0x40001800

08004e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d122      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d11b      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0202 	mvn.w	r2, #2
 8004ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f9b5 	bl	800524e <HAL_TIM_IC_CaptureCallback>
 8004ee4:	e005      	b.n	8004ef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f9a7 	bl	800523a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f9b8 	bl	8005262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d122      	bne.n	8004f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d11b      	bne.n	8004f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0204 	mvn.w	r2, #4
 8004f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2202      	movs	r2, #2
 8004f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f98b 	bl	800524e <HAL_TIM_IC_CaptureCallback>
 8004f38:	e005      	b.n	8004f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f97d 	bl	800523a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f98e 	bl	8005262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d122      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d11b      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0208 	mvn.w	r2, #8
 8004f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2204      	movs	r2, #4
 8004f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f961 	bl	800524e <HAL_TIM_IC_CaptureCallback>
 8004f8c:	e005      	b.n	8004f9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f953 	bl	800523a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f964 	bl	8005262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	2b10      	cmp	r3, #16
 8004fac:	d122      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d11b      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0210 	mvn.w	r2, #16
 8004fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2208      	movs	r2, #8
 8004fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f937 	bl	800524e <HAL_TIM_IC_CaptureCallback>
 8004fe0:	e005      	b.n	8004fee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f929 	bl	800523a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f93a 	bl	8005262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d10e      	bne.n	8005020 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b01      	cmp	r3, #1
 800500e:	d107      	bne.n	8005020 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0201 	mvn.w	r2, #1
 8005018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7fc f91a 	bl	8001254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502a:	2b80      	cmp	r3, #128	; 0x80
 800502c:	d10e      	bne.n	800504c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005038:	2b80      	cmp	r3, #128	; 0x80
 800503a:	d107      	bne.n	800504c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fae0 	bl	800560c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005056:	2b40      	cmp	r3, #64	; 0x40
 8005058:	d10e      	bne.n	8005078 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005064:	2b40      	cmp	r3, #64	; 0x40
 8005066:	d107      	bne.n	8005078 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f8ff 	bl	8005276 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b20      	cmp	r3, #32
 8005084:	d10e      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b20      	cmp	r3, #32
 8005092:	d107      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0220 	mvn.w	r2, #32
 800509c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 faaa 	bl	80055f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050a4:	bf00      	nop
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_TIM_ConfigClockSource+0x1c>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e0b4      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x186>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005100:	d03e      	beq.n	8005180 <HAL_TIM_ConfigClockSource+0xd4>
 8005102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005106:	f200 8087 	bhi.w	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 800510a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510e:	f000 8086 	beq.w	800521e <HAL_TIM_ConfigClockSource+0x172>
 8005112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005116:	d87f      	bhi.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 8005118:	2b70      	cmp	r3, #112	; 0x70
 800511a:	d01a      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0xa6>
 800511c:	2b70      	cmp	r3, #112	; 0x70
 800511e:	d87b      	bhi.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 8005120:	2b60      	cmp	r3, #96	; 0x60
 8005122:	d050      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005124:	2b60      	cmp	r3, #96	; 0x60
 8005126:	d877      	bhi.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 8005128:	2b50      	cmp	r3, #80	; 0x50
 800512a:	d03c      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0xfa>
 800512c:	2b50      	cmp	r3, #80	; 0x50
 800512e:	d873      	bhi.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 8005130:	2b40      	cmp	r3, #64	; 0x40
 8005132:	d058      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005134:	2b40      	cmp	r3, #64	; 0x40
 8005136:	d86f      	bhi.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 8005138:	2b30      	cmp	r3, #48	; 0x30
 800513a:	d064      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0x15a>
 800513c:	2b30      	cmp	r3, #48	; 0x30
 800513e:	d86b      	bhi.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 8005140:	2b20      	cmp	r3, #32
 8005142:	d060      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0x15a>
 8005144:	2b20      	cmp	r3, #32
 8005146:	d867      	bhi.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d05c      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0x15a>
 800514c:	2b10      	cmp	r3, #16
 800514e:	d05a      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0x15a>
 8005150:	e062      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	6899      	ldr	r1, [r3, #8]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f000 f9ad 	bl	80054c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005174:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	609a      	str	r2, [r3, #8]
      break;
 800517e:	e04f      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	6899      	ldr	r1, [r3, #8]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f000 f996 	bl	80054c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051a2:	609a      	str	r2, [r3, #8]
      break;
 80051a4:	e03c      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6859      	ldr	r1, [r3, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	461a      	mov	r2, r3
 80051b4:	f000 f90a 	bl	80053cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2150      	movs	r1, #80	; 0x50
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f963 	bl	800548a <TIM_ITRx_SetConfig>
      break;
 80051c4:	e02c      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6859      	ldr	r1, [r3, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f000 f929 	bl	800542a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2160      	movs	r1, #96	; 0x60
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 f953 	bl	800548a <TIM_ITRx_SetConfig>
      break;
 80051e4:	e01c      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	6859      	ldr	r1, [r3, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	461a      	mov	r2, r3
 80051f4:	f000 f8ea 	bl	80053cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2140      	movs	r1, #64	; 0x40
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f943 	bl	800548a <TIM_ITRx_SetConfig>
      break;
 8005204:	e00c      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4619      	mov	r1, r3
 8005210:	4610      	mov	r0, r2
 8005212:	f000 f93a 	bl	800548a <TIM_ITRx_SetConfig>
      break;
 8005216:	e003      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]
      break;
 800521c:	e000      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800521e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005230:	7bfb      	ldrb	r3, [r7, #15]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
	...

0800528c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a40      	ldr	r2, [pc, #256]	; (80053a0 <TIM_Base_SetConfig+0x114>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d013      	beq.n	80052cc <TIM_Base_SetConfig+0x40>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052aa:	d00f      	beq.n	80052cc <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a3d      	ldr	r2, [pc, #244]	; (80053a4 <TIM_Base_SetConfig+0x118>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00b      	beq.n	80052cc <TIM_Base_SetConfig+0x40>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a3c      	ldr	r2, [pc, #240]	; (80053a8 <TIM_Base_SetConfig+0x11c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d007      	beq.n	80052cc <TIM_Base_SetConfig+0x40>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a3b      	ldr	r2, [pc, #236]	; (80053ac <TIM_Base_SetConfig+0x120>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_Base_SetConfig+0x40>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a3a      	ldr	r2, [pc, #232]	; (80053b0 <TIM_Base_SetConfig+0x124>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d108      	bne.n	80052de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a2f      	ldr	r2, [pc, #188]	; (80053a0 <TIM_Base_SetConfig+0x114>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d02b      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ec:	d027      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a2c      	ldr	r2, [pc, #176]	; (80053a4 <TIM_Base_SetConfig+0x118>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d023      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a2b      	ldr	r2, [pc, #172]	; (80053a8 <TIM_Base_SetConfig+0x11c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01f      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a2a      	ldr	r2, [pc, #168]	; (80053ac <TIM_Base_SetConfig+0x120>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d01b      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a29      	ldr	r2, [pc, #164]	; (80053b0 <TIM_Base_SetConfig+0x124>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d017      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a28      	ldr	r2, [pc, #160]	; (80053b4 <TIM_Base_SetConfig+0x128>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d013      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a27      	ldr	r2, [pc, #156]	; (80053b8 <TIM_Base_SetConfig+0x12c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00f      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a26      	ldr	r2, [pc, #152]	; (80053bc <TIM_Base_SetConfig+0x130>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00b      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a25      	ldr	r2, [pc, #148]	; (80053c0 <TIM_Base_SetConfig+0x134>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d007      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a24      	ldr	r2, [pc, #144]	; (80053c4 <TIM_Base_SetConfig+0x138>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a23      	ldr	r2, [pc, #140]	; (80053c8 <TIM_Base_SetConfig+0x13c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d108      	bne.n	8005350 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <TIM_Base_SetConfig+0x114>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d003      	beq.n	8005384 <TIM_Base_SetConfig+0xf8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a0c      	ldr	r2, [pc, #48]	; (80053b0 <TIM_Base_SetConfig+0x124>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d103      	bne.n	800538c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	615a      	str	r2, [r3, #20]
}
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40010000 	.word	0x40010000
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800
 80053ac:	40000c00 	.word	0x40000c00
 80053b0:	40010400 	.word	0x40010400
 80053b4:	40014000 	.word	0x40014000
 80053b8:	40014400 	.word	0x40014400
 80053bc:	40014800 	.word	0x40014800
 80053c0:	40001800 	.word	0x40001800
 80053c4:	40001c00 	.word	0x40001c00
 80053c8:	40002000 	.word	0x40002000

080053cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f023 0201 	bic.w	r2, r3, #1
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f023 030a 	bic.w	r3, r3, #10
 8005408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800542a:	b480      	push	{r7}
 800542c:	b087      	sub	sp, #28
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f023 0210 	bic.w	r2, r3, #16
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	031b      	lsls	r3, r3, #12
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005466:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	621a      	str	r2, [r3, #32]
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f043 0307 	orr.w	r3, r3, #7
 80054ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	609a      	str	r2, [r3, #8]
}
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	021a      	lsls	r2, r3, #8
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	609a      	str	r2, [r3, #8]
}
 80054f4:	bf00      	nop
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005514:	2302      	movs	r3, #2
 8005516:	e05a      	b.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a21      	ldr	r2, [pc, #132]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d022      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005564:	d01d      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1d      	ldr	r2, [pc, #116]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d018      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d013      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1a      	ldr	r2, [pc, #104]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00e      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a18      	ldr	r2, [pc, #96]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d009      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d004      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a15      	ldr	r2, [pc, #84]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d10c      	bne.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40010000 	.word	0x40010000
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800
 80055e8:	40000c00 	.word	0x40000c00
 80055ec:	40010400 	.word	0x40010400
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40001800 	.word	0x40001800

080055f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e03f      	b.n	80056b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fc f950 	bl	80018ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2224      	movs	r2, #36	; 0x24
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f9cb 	bl	8005a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695a      	ldr	r2, [r3, #20]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b08a      	sub	sp, #40	; 0x28
 80056be:	af02      	add	r7, sp, #8
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	603b      	str	r3, [r7, #0]
 80056c6:	4613      	mov	r3, r2
 80056c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d17c      	bne.n	80057d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <HAL_UART_Transmit+0x2c>
 80056e0:	88fb      	ldrh	r3, [r7, #6]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e075      	b.n	80057d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_UART_Transmit+0x3e>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e06e      	b.n	80057d6 <HAL_UART_Transmit+0x11c>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2221      	movs	r2, #33	; 0x21
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800570e:	f7fc fe01 	bl	8002314 <HAL_GetTick>
 8005712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	88fa      	ldrh	r2, [r7, #6]
 8005718:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	88fa      	ldrh	r2, [r7, #6]
 800571e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005728:	d108      	bne.n	800573c <HAL_UART_Transmit+0x82>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d104      	bne.n	800573c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	e003      	b.n	8005744 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005740:	2300      	movs	r3, #0
 8005742:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800574c:	e02a      	b.n	80057a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2200      	movs	r2, #0
 8005756:	2180      	movs	r1, #128	; 0x80
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f8e2 	bl	8005922 <UART_WaitOnFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e036      	b.n	80057d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10b      	bne.n	8005786 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800577c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	3302      	adds	r3, #2
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	e007      	b.n	8005796 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	781a      	ldrb	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	3301      	adds	r3, #1
 8005794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1cf      	bne.n	800574e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2200      	movs	r2, #0
 80057b6:	2140      	movs	r1, #64	; 0x40
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 f8b2 	bl	8005922 <UART_WaitOnFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e006      	b.n	80057d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e000      	b.n	80057d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057d4:	2302      	movs	r3, #2
  }
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b08a      	sub	sp, #40	; 0x28
 80057e2:	af02      	add	r7, sp, #8
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	f040 808c 	bne.w	8005918 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <HAL_UART_Receive+0x2e>
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e084      	b.n	800591a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_UART_Receive+0x40>
 800581a:	2302      	movs	r3, #2
 800581c:	e07d      	b.n	800591a <HAL_UART_Receive+0x13c>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2222      	movs	r2, #34	; 0x22
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800583a:	f7fc fd6b 	bl	8002314 <HAL_GetTick>
 800583e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	88fa      	ldrh	r2, [r7, #6]
 8005844:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	88fa      	ldrh	r2, [r7, #6]
 800584a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005854:	d108      	bne.n	8005868 <HAL_UART_Receive+0x8a>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d104      	bne.n	8005868 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	e003      	b.n	8005870 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800586c:	2300      	movs	r3, #0
 800586e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005878:	e043      	b.n	8005902 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2200      	movs	r2, #0
 8005882:	2120      	movs	r1, #32
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f84c 	bl	8005922 <UART_WaitOnFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e042      	b.n	800591a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10c      	bne.n	80058b4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	3302      	adds	r3, #2
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	e01f      	b.n	80058f4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058bc:	d007      	beq.n	80058ce <HAL_UART_Receive+0xf0>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <HAL_UART_Receive+0xfe>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	e008      	b.n	80058ee <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	3301      	adds	r3, #1
 80058f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1b6      	bne.n	800587a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	e000      	b.n	800591a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005918:	2302      	movs	r3, #2
  }
}
 800591a:	4618      	mov	r0, r3
 800591c:	3720      	adds	r7, #32
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b090      	sub	sp, #64	; 0x40
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	603b      	str	r3, [r7, #0]
 800592e:	4613      	mov	r3, r2
 8005930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005932:	e050      	b.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593a:	d04c      	beq.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800593c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800593e:	2b00      	cmp	r3, #0
 8005940:	d007      	beq.n	8005952 <UART_WaitOnFlagUntilTimeout+0x30>
 8005942:	f7fc fce7 	bl	8002314 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800594e:	429a      	cmp	r2, r3
 8005950:	d241      	bcs.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	330c      	adds	r3, #12
 8005958:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005972:	637a      	str	r2, [r7, #52]	; 0x34
 8005974:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e5      	bne.n	8005952 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3314      	adds	r3, #20
 800598c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	613b      	str	r3, [r7, #16]
   return(result);
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f023 0301 	bic.w	r3, r3, #1
 800599c:	63bb      	str	r3, [r7, #56]	; 0x38
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3314      	adds	r3, #20
 80059a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059a6:	623a      	str	r2, [r7, #32]
 80059a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	69f9      	ldr	r1, [r7, #28]
 80059ac:	6a3a      	ldr	r2, [r7, #32]
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e5      	bne.n	8005986 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e00f      	b.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4013      	ands	r3, r2
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	bf0c      	ite	eq
 80059e6:	2301      	moveq	r3, #1
 80059e8:	2300      	movne	r3, #0
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d09f      	beq.n	8005934 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3740      	adds	r7, #64	; 0x40
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a04:	b0c0      	sub	sp, #256	; 0x100
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1c:	68d9      	ldr	r1, [r3, #12]
 8005a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	ea40 0301 	orr.w	r3, r0, r1
 8005a28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a58:	f021 010c 	bic.w	r1, r1, #12
 8005a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a66:	430b      	orrs	r3, r1
 8005a68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7a:	6999      	ldr	r1, [r3, #24]
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	ea40 0301 	orr.w	r3, r0, r1
 8005a86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4b8f      	ldr	r3, [pc, #572]	; (8005ccc <UART_SetConfig+0x2cc>)
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d005      	beq.n	8005aa0 <UART_SetConfig+0xa0>
 8005a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	4b8d      	ldr	r3, [pc, #564]	; (8005cd0 <UART_SetConfig+0x2d0>)
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d104      	bne.n	8005aaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005aa0:	f7fd fc20 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 8005aa4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005aa8:	e003      	b.n	8005ab2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005aaa:	f7fd fc07 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 8005aae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005abc:	f040 810c 	bne.w	8005cd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ace:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	1891      	adds	r1, r2, r2
 8005ad8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ada:	415b      	adcs	r3, r3
 8005adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ade:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	eb12 0801 	adds.w	r8, r2, r1
 8005ae8:	4629      	mov	r1, r5
 8005aea:	eb43 0901 	adc.w	r9, r3, r1
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b02:	4690      	mov	r8, r2
 8005b04:	4699      	mov	r9, r3
 8005b06:	4623      	mov	r3, r4
 8005b08:	eb18 0303 	adds.w	r3, r8, r3
 8005b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b10:	462b      	mov	r3, r5
 8005b12:	eb49 0303 	adc.w	r3, r9, r3
 8005b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b2e:	460b      	mov	r3, r1
 8005b30:	18db      	adds	r3, r3, r3
 8005b32:	653b      	str	r3, [r7, #80]	; 0x50
 8005b34:	4613      	mov	r3, r2
 8005b36:	eb42 0303 	adc.w	r3, r2, r3
 8005b3a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b44:	f7fa fbb4 	bl	80002b0 <__aeabi_uldivmod>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4b61      	ldr	r3, [pc, #388]	; (8005cd4 <UART_SetConfig+0x2d4>)
 8005b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b52:	095b      	lsrs	r3, r3, #5
 8005b54:	011c      	lsls	r4, r3, #4
 8005b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b68:	4642      	mov	r2, r8
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	1891      	adds	r1, r2, r2
 8005b6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b70:	415b      	adcs	r3, r3
 8005b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b78:	4641      	mov	r1, r8
 8005b7a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b7e:	4649      	mov	r1, r9
 8005b80:	eb43 0b01 	adc.w	fp, r3, r1
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	f04f 0300 	mov.w	r3, #0
 8005b8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b98:	4692      	mov	sl, r2
 8005b9a:	469b      	mov	fp, r3
 8005b9c:	4643      	mov	r3, r8
 8005b9e:	eb1a 0303 	adds.w	r3, sl, r3
 8005ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ba6:	464b      	mov	r3, r9
 8005ba8:	eb4b 0303 	adc.w	r3, fp, r3
 8005bac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005bc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	18db      	adds	r3, r3, r3
 8005bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8005bca:	4613      	mov	r3, r2
 8005bcc:	eb42 0303 	adc.w	r3, r2, r3
 8005bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8005bd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bda:	f7fa fb69 	bl	80002b0 <__aeabi_uldivmod>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4611      	mov	r1, r2
 8005be4:	4b3b      	ldr	r3, [pc, #236]	; (8005cd4 <UART_SetConfig+0x2d4>)
 8005be6:	fba3 2301 	umull	r2, r3, r3, r1
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	2264      	movs	r2, #100	; 0x64
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	1acb      	subs	r3, r1, r3
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005bfa:	4b36      	ldr	r3, [pc, #216]	; (8005cd4 <UART_SetConfig+0x2d4>)
 8005bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c08:	441c      	add	r4, r3
 8005c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	464b      	mov	r3, r9
 8005c20:	1891      	adds	r1, r2, r2
 8005c22:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c24:	415b      	adcs	r3, r3
 8005c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c2c:	4641      	mov	r1, r8
 8005c2e:	1851      	adds	r1, r2, r1
 8005c30:	6339      	str	r1, [r7, #48]	; 0x30
 8005c32:	4649      	mov	r1, r9
 8005c34:	414b      	adcs	r3, r1
 8005c36:	637b      	str	r3, [r7, #52]	; 0x34
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c44:	4659      	mov	r1, fp
 8005c46:	00cb      	lsls	r3, r1, #3
 8005c48:	4651      	mov	r1, sl
 8005c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c4e:	4651      	mov	r1, sl
 8005c50:	00ca      	lsls	r2, r1, #3
 8005c52:	4610      	mov	r0, r2
 8005c54:	4619      	mov	r1, r3
 8005c56:	4603      	mov	r3, r0
 8005c58:	4642      	mov	r2, r8
 8005c5a:	189b      	adds	r3, r3, r2
 8005c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c60:	464b      	mov	r3, r9
 8005c62:	460a      	mov	r2, r1
 8005c64:	eb42 0303 	adc.w	r3, r2, r3
 8005c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c80:	460b      	mov	r3, r1
 8005c82:	18db      	adds	r3, r3, r3
 8005c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c86:	4613      	mov	r3, r2
 8005c88:	eb42 0303 	adc.w	r3, r2, r3
 8005c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c96:	f7fa fb0b 	bl	80002b0 <__aeabi_uldivmod>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <UART_SetConfig+0x2d4>)
 8005ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	2164      	movs	r1, #100	; 0x64
 8005ca8:	fb01 f303 	mul.w	r3, r1, r3
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	3332      	adds	r3, #50	; 0x32
 8005cb2:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <UART_SetConfig+0x2d4>)
 8005cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb8:	095b      	lsrs	r3, r3, #5
 8005cba:	f003 0207 	and.w	r2, r3, #7
 8005cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4422      	add	r2, r4
 8005cc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cc8:	e105      	b.n	8005ed6 <UART_SetConfig+0x4d6>
 8005cca:	bf00      	nop
 8005ccc:	40011000 	.word	0x40011000
 8005cd0:	40011400 	.word	0x40011400
 8005cd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ce2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ce6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005cea:	4642      	mov	r2, r8
 8005cec:	464b      	mov	r3, r9
 8005cee:	1891      	adds	r1, r2, r2
 8005cf0:	6239      	str	r1, [r7, #32]
 8005cf2:	415b      	adcs	r3, r3
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cfa:	4641      	mov	r1, r8
 8005cfc:	1854      	adds	r4, r2, r1
 8005cfe:	4649      	mov	r1, r9
 8005d00:	eb43 0501 	adc.w	r5, r3, r1
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	00eb      	lsls	r3, r5, #3
 8005d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d12:	00e2      	lsls	r2, r4, #3
 8005d14:	4614      	mov	r4, r2
 8005d16:	461d      	mov	r5, r3
 8005d18:	4643      	mov	r3, r8
 8005d1a:	18e3      	adds	r3, r4, r3
 8005d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d20:	464b      	mov	r3, r9
 8005d22:	eb45 0303 	adc.w	r3, r5, r3
 8005d26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d46:	4629      	mov	r1, r5
 8005d48:	008b      	lsls	r3, r1, #2
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d50:	4621      	mov	r1, r4
 8005d52:	008a      	lsls	r2, r1, #2
 8005d54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d58:	f7fa faaa 	bl	80002b0 <__aeabi_uldivmod>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4b60      	ldr	r3, [pc, #384]	; (8005ee4 <UART_SetConfig+0x4e4>)
 8005d62:	fba3 2302 	umull	r2, r3, r3, r2
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	011c      	lsls	r4, r3, #4
 8005d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	464b      	mov	r3, r9
 8005d80:	1891      	adds	r1, r2, r2
 8005d82:	61b9      	str	r1, [r7, #24]
 8005d84:	415b      	adcs	r3, r3
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	1851      	adds	r1, r2, r1
 8005d90:	6139      	str	r1, [r7, #16]
 8005d92:	4649      	mov	r1, r9
 8005d94:	414b      	adcs	r3, r1
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	f04f 0200 	mov.w	r2, #0
 8005d9c:	f04f 0300 	mov.w	r3, #0
 8005da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005da4:	4659      	mov	r1, fp
 8005da6:	00cb      	lsls	r3, r1, #3
 8005da8:	4651      	mov	r1, sl
 8005daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dae:	4651      	mov	r1, sl
 8005db0:	00ca      	lsls	r2, r1, #3
 8005db2:	4610      	mov	r0, r2
 8005db4:	4619      	mov	r1, r3
 8005db6:	4603      	mov	r3, r0
 8005db8:	4642      	mov	r2, r8
 8005dba:	189b      	adds	r3, r3, r2
 8005dbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dc0:	464b      	mov	r3, r9
 8005dc2:	460a      	mov	r2, r1
 8005dc4:	eb42 0303 	adc.w	r3, r2, r3
 8005dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	f04f 0300 	mov.w	r3, #0
 8005de0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005de4:	4649      	mov	r1, r9
 8005de6:	008b      	lsls	r3, r1, #2
 8005de8:	4641      	mov	r1, r8
 8005dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dee:	4641      	mov	r1, r8
 8005df0:	008a      	lsls	r2, r1, #2
 8005df2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005df6:	f7fa fa5b 	bl	80002b0 <__aeabi_uldivmod>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4b39      	ldr	r3, [pc, #228]	; (8005ee4 <UART_SetConfig+0x4e4>)
 8005e00:	fba3 1302 	umull	r1, r3, r3, r2
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	2164      	movs	r1, #100	; 0x64
 8005e08:	fb01 f303 	mul.w	r3, r1, r3
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	3332      	adds	r3, #50	; 0x32
 8005e12:	4a34      	ldr	r2, [pc, #208]	; (8005ee4 <UART_SetConfig+0x4e4>)
 8005e14:	fba2 2303 	umull	r2, r3, r2, r3
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e1e:	441c      	add	r4, r3
 8005e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e24:	2200      	movs	r2, #0
 8005e26:	673b      	str	r3, [r7, #112]	; 0x70
 8005e28:	677a      	str	r2, [r7, #116]	; 0x74
 8005e2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e2e:	4642      	mov	r2, r8
 8005e30:	464b      	mov	r3, r9
 8005e32:	1891      	adds	r1, r2, r2
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	415b      	adcs	r3, r3
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e3e:	4641      	mov	r1, r8
 8005e40:	1851      	adds	r1, r2, r1
 8005e42:	6039      	str	r1, [r7, #0]
 8005e44:	4649      	mov	r1, r9
 8005e46:	414b      	adcs	r3, r1
 8005e48:	607b      	str	r3, [r7, #4]
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e56:	4659      	mov	r1, fp
 8005e58:	00cb      	lsls	r3, r1, #3
 8005e5a:	4651      	mov	r1, sl
 8005e5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e60:	4651      	mov	r1, sl
 8005e62:	00ca      	lsls	r2, r1, #3
 8005e64:	4610      	mov	r0, r2
 8005e66:	4619      	mov	r1, r3
 8005e68:	4603      	mov	r3, r0
 8005e6a:	4642      	mov	r2, r8
 8005e6c:	189b      	adds	r3, r3, r2
 8005e6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e70:	464b      	mov	r3, r9
 8005e72:	460a      	mov	r2, r1
 8005e74:	eb42 0303 	adc.w	r3, r2, r3
 8005e78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	663b      	str	r3, [r7, #96]	; 0x60
 8005e84:	667a      	str	r2, [r7, #100]	; 0x64
 8005e86:	f04f 0200 	mov.w	r2, #0
 8005e8a:	f04f 0300 	mov.w	r3, #0
 8005e8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e92:	4649      	mov	r1, r9
 8005e94:	008b      	lsls	r3, r1, #2
 8005e96:	4641      	mov	r1, r8
 8005e98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e9c:	4641      	mov	r1, r8
 8005e9e:	008a      	lsls	r2, r1, #2
 8005ea0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ea4:	f7fa fa04 	bl	80002b0 <__aeabi_uldivmod>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <UART_SetConfig+0x4e4>)
 8005eae:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	2164      	movs	r1, #100	; 0x64
 8005eb6:	fb01 f303 	mul.w	r3, r1, r3
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	3332      	adds	r3, #50	; 0x32
 8005ec0:	4a08      	ldr	r2, [pc, #32]	; (8005ee4 <UART_SetConfig+0x4e4>)
 8005ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	f003 020f 	and.w	r2, r3, #15
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4422      	add	r2, r4
 8005ed4:	609a      	str	r2, [r3, #8]
}
 8005ed6:	bf00      	nop
 8005ed8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005edc:	46bd      	mov	sp, r7
 8005ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee2:	bf00      	nop
 8005ee4:	51eb851f 	.word	0x51eb851f

08005ee8 <__NVIC_SetPriority>:
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	6039      	str	r1, [r7, #0]
 8005ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	db0a      	blt.n	8005f12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	490c      	ldr	r1, [pc, #48]	; (8005f34 <__NVIC_SetPriority+0x4c>)
 8005f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f06:	0112      	lsls	r2, r2, #4
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005f10:	e00a      	b.n	8005f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	4908      	ldr	r1, [pc, #32]	; (8005f38 <__NVIC_SetPriority+0x50>)
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	3b04      	subs	r3, #4
 8005f20:	0112      	lsls	r2, r2, #4
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	440b      	add	r3, r1
 8005f26:	761a      	strb	r2, [r3, #24]
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	e000e100 	.word	0xe000e100
 8005f38:	e000ed00 	.word	0xe000ed00

08005f3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005f40:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <SysTick_Handler+0x1c>)
 8005f42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005f44:	f002 fa9a 	bl	800847c <xTaskGetSchedulerState>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d001      	beq.n	8005f52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005f4e:	f003 f983 	bl	8009258 <xPortSysTickHandler>
  }
}
 8005f52:	bf00      	nop
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	e000e010 	.word	0xe000e010

08005f5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f60:	2100      	movs	r1, #0
 8005f62:	f06f 0004 	mvn.w	r0, #4
 8005f66:	f7ff ffbf 	bl	8005ee8 <__NVIC_SetPriority>
#endif
}
 8005f6a:	bf00      	nop
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f76:	f3ef 8305 	mrs	r3, IPSR
 8005f7a:	603b      	str	r3, [r7, #0]
  return(result);
 8005f7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f82:	f06f 0305 	mvn.w	r3, #5
 8005f86:	607b      	str	r3, [r7, #4]
 8005f88:	e00c      	b.n	8005fa4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f8a:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <osKernelInitialize+0x44>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d105      	bne.n	8005f9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <osKernelInitialize+0x44>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	e002      	b.n	8005fa4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005fa4:	687b      	ldr	r3, [r7, #4]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	20000990 	.word	0x20000990

08005fb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fbe:	f3ef 8305 	mrs	r3, IPSR
 8005fc2:	603b      	str	r3, [r7, #0]
  return(result);
 8005fc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005fca:	f06f 0305 	mvn.w	r3, #5
 8005fce:	607b      	str	r3, [r7, #4]
 8005fd0:	e010      	b.n	8005ff4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005fd2:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <osKernelStart+0x48>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d109      	bne.n	8005fee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005fda:	f7ff ffbf 	bl	8005f5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005fde:	4b08      	ldr	r3, [pc, #32]	; (8006000 <osKernelStart+0x48>)
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005fe4:	f001 fdee 	bl	8007bc4 <vTaskStartScheduler>
      stat = osOK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	607b      	str	r3, [r7, #4]
 8005fec:	e002      	b.n	8005ff4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005fee:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ff4:	687b      	ldr	r3, [r7, #4]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000990 	.word	0x20000990

08006004 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006004:	b580      	push	{r7, lr}
 8006006:	b08e      	sub	sp, #56	; 0x38
 8006008:	af04      	add	r7, sp, #16
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006010:	2300      	movs	r3, #0
 8006012:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006014:	f3ef 8305 	mrs	r3, IPSR
 8006018:	617b      	str	r3, [r7, #20]
  return(result);
 800601a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800601c:	2b00      	cmp	r3, #0
 800601e:	d17e      	bne.n	800611e <osThreadNew+0x11a>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d07b      	beq.n	800611e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006026:	2380      	movs	r3, #128	; 0x80
 8006028:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800602a:	2318      	movs	r3, #24
 800602c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800602e:	2300      	movs	r3, #0
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006032:	f04f 33ff 	mov.w	r3, #4294967295
 8006036:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d045      	beq.n	80060ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <osThreadNew+0x48>
        name = attr->name;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <osThreadNew+0x6e>
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	2b38      	cmp	r3, #56	; 0x38
 8006064:	d805      	bhi.n	8006072 <osThreadNew+0x6e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <osThreadNew+0x72>
        return (NULL);
 8006072:	2300      	movs	r3, #0
 8006074:	e054      	b.n	8006120 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	089b      	lsrs	r3, r3, #2
 8006084:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00e      	beq.n	80060ac <osThreadNew+0xa8>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	2bbb      	cmp	r3, #187	; 0xbb
 8006094:	d90a      	bls.n	80060ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800609a:	2b00      	cmp	r3, #0
 800609c:	d006      	beq.n	80060ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <osThreadNew+0xa8>
        mem = 1;
 80060a6:	2301      	movs	r3, #1
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	e010      	b.n	80060ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10c      	bne.n	80060ce <osThreadNew+0xca>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d108      	bne.n	80060ce <osThreadNew+0xca>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d104      	bne.n	80060ce <osThreadNew+0xca>
          mem = 0;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61bb      	str	r3, [r7, #24]
 80060c8:	e001      	b.n	80060ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d110      	bne.n	80060f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060dc:	9202      	str	r2, [sp, #8]
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6a3a      	ldr	r2, [r7, #32]
 80060e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f001 fb7e 	bl	80077ec <xTaskCreateStatic>
 80060f0:	4603      	mov	r3, r0
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	e013      	b.n	800611e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d110      	bne.n	800611e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	b29a      	uxth	r2, r3
 8006100:	f107 0310 	add.w	r3, r7, #16
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f001 fbc9 	bl	80078a6 <xTaskCreate>
 8006114:	4603      	mov	r3, r0
 8006116:	2b01      	cmp	r3, #1
 8006118:	d001      	beq.n	800611e <osThreadNew+0x11a>
            hTask = NULL;
 800611a:	2300      	movs	r3, #0
 800611c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800611e:	693b      	ldr	r3, [r7, #16]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3728      	adds	r7, #40	; 0x28
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006130:	f3ef 8305 	mrs	r3, IPSR
 8006134:	60bb      	str	r3, [r7, #8]
  return(result);
 8006136:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <osDelay+0x1c>
    stat = osErrorISR;
 800613c:	f06f 0305 	mvn.w	r3, #5
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	e007      	b.n	8006154 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <osDelay+0x2c>
      vTaskDelay(ticks);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f001 fd04 	bl	8007b5c <vTaskDelay>
    }
  }

  return (stat);
 8006154:	68fb      	ldr	r3, [r7, #12]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800615e:	b580      	push	{r7, lr}
 8006160:	b08a      	sub	sp, #40	; 0x28
 8006162:	af02      	add	r7, sp, #8
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800616e:	f3ef 8305 	mrs	r3, IPSR
 8006172:	613b      	str	r3, [r7, #16]
  return(result);
 8006174:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006176:	2b00      	cmp	r3, #0
 8006178:	d175      	bne.n	8006266 <osSemaphoreNew+0x108>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d072      	beq.n	8006266 <osSemaphoreNew+0x108>
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	429a      	cmp	r2, r3
 8006186:	d86e      	bhi.n	8006266 <osSemaphoreNew+0x108>
    mem = -1;
 8006188:	f04f 33ff 	mov.w	r3, #4294967295
 800618c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d015      	beq.n	80061c0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d006      	beq.n	80061aa <osSemaphoreNew+0x4c>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	2b4f      	cmp	r3, #79	; 0x4f
 80061a2:	d902      	bls.n	80061aa <osSemaphoreNew+0x4c>
        mem = 1;
 80061a4:	2301      	movs	r3, #1
 80061a6:	61bb      	str	r3, [r7, #24]
 80061a8:	e00c      	b.n	80061c4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d108      	bne.n	80061c4 <osSemaphoreNew+0x66>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d104      	bne.n	80061c4 <osSemaphoreNew+0x66>
          mem = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	e001      	b.n	80061c4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ca:	d04c      	beq.n	8006266 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d128      	bne.n	8006224 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d10a      	bne.n	80061ee <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	2203      	movs	r2, #3
 80061de:	9200      	str	r2, [sp, #0]
 80061e0:	2200      	movs	r2, #0
 80061e2:	2100      	movs	r1, #0
 80061e4:	2001      	movs	r0, #1
 80061e6:	f000 fb5b 	bl	80068a0 <xQueueGenericCreateStatic>
 80061ea:	61f8      	str	r0, [r7, #28]
 80061ec:	e005      	b.n	80061fa <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80061ee:	2203      	movs	r2, #3
 80061f0:	2100      	movs	r1, #0
 80061f2:	2001      	movs	r0, #1
 80061f4:	f000 fbcc 	bl	8006990 <xQueueGenericCreate>
 80061f8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d022      	beq.n	8006246 <osSemaphoreNew+0xe8>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01f      	beq.n	8006246 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006206:	2300      	movs	r3, #0
 8006208:	2200      	movs	r2, #0
 800620a:	2100      	movs	r1, #0
 800620c:	69f8      	ldr	r0, [r7, #28]
 800620e:	f000 fc87 	bl	8006b20 <xQueueGenericSend>
 8006212:	4603      	mov	r3, r0
 8006214:	2b01      	cmp	r3, #1
 8006216:	d016      	beq.n	8006246 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006218:	69f8      	ldr	r0, [r7, #28]
 800621a:	f001 f913 	bl	8007444 <vQueueDelete>
            hSemaphore = NULL;
 800621e:	2300      	movs	r3, #0
 8006220:	61fb      	str	r3, [r7, #28]
 8006222:	e010      	b.n	8006246 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d108      	bne.n	800623c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	461a      	mov	r2, r3
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 fc09 	bl	8006a4a <xQueueCreateCountingSemaphoreStatic>
 8006238:	61f8      	str	r0, [r7, #28]
 800623a:	e004      	b.n	8006246 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fc3a 	bl	8006ab8 <xQueueCreateCountingSemaphore>
 8006244:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00c      	beq.n	8006266 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <osSemaphoreNew+0xfc>
          name = attr->name;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	e001      	b.n	800625e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800625e:	6979      	ldr	r1, [r7, #20]
 8006260:	69f8      	ldr	r0, [r7, #28]
 8006262:	f001 fa3b 	bl	80076dc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006266:	69fb      	ldr	r3, [r7, #28]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3720      	adds	r7, #32
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800627e:	2300      	movs	r3, #0
 8006280:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d103      	bne.n	8006290 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006288:	f06f 0303 	mvn.w	r3, #3
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	e039      	b.n	8006304 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006290:	f3ef 8305 	mrs	r3, IPSR
 8006294:	60fb      	str	r3, [r7, #12]
  return(result);
 8006296:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006298:	2b00      	cmp	r3, #0
 800629a:	d022      	beq.n	80062e2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80062a2:	f06f 0303 	mvn.w	r3, #3
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	e02c      	b.n	8006304 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80062ae:	f107 0308 	add.w	r3, r7, #8
 80062b2:	461a      	mov	r2, r3
 80062b4:	2100      	movs	r1, #0
 80062b6:	6938      	ldr	r0, [r7, #16]
 80062b8:	f001 f844 	bl	8007344 <xQueueReceiveFromISR>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d003      	beq.n	80062ca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80062c2:	f06f 0302 	mvn.w	r3, #2
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	e01c      	b.n	8006304 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d019      	beq.n	8006304 <osSemaphoreAcquire+0x94>
 80062d0:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <osSemaphoreAcquire+0xa0>)
 80062d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	e010      	b.n	8006304 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6938      	ldr	r0, [r7, #16]
 80062e6:	f000 ff21 	bl	800712c <xQueueSemaphoreTake>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d009      	beq.n	8006304 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80062f6:	f06f 0301 	mvn.w	r3, #1
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	e002      	b.n	8006304 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80062fe:	f06f 0302 	mvn.w	r3, #2
 8006302:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006304:	697b      	ldr	r3, [r7, #20]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006320:	2300      	movs	r3, #0
 8006322:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d103      	bne.n	8006332 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800632a:	f06f 0303 	mvn.w	r3, #3
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e02c      	b.n	800638c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006332:	f3ef 8305 	mrs	r3, IPSR
 8006336:	60fb      	str	r3, [r7, #12]
  return(result);
 8006338:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800633a:	2b00      	cmp	r3, #0
 800633c:	d01a      	beq.n	8006374 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800633e:	2300      	movs	r3, #0
 8006340:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006342:	f107 0308 	add.w	r3, r7, #8
 8006346:	4619      	mov	r1, r3
 8006348:	6938      	ldr	r0, [r7, #16]
 800634a:	f000 fd82 	bl	8006e52 <xQueueGiveFromISR>
 800634e:	4603      	mov	r3, r0
 8006350:	2b01      	cmp	r3, #1
 8006352:	d003      	beq.n	800635c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006354:	f06f 0302 	mvn.w	r3, #2
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	e017      	b.n	800638c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d014      	beq.n	800638c <osSemaphoreRelease+0x78>
 8006362:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <osSemaphoreRelease+0x84>)
 8006364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	e00b      	b.n	800638c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006374:	2300      	movs	r3, #0
 8006376:	2200      	movs	r2, #0
 8006378:	2100      	movs	r1, #0
 800637a:	6938      	ldr	r0, [r7, #16]
 800637c:	f000 fbd0 	bl	8006b20 <xQueueGenericSend>
 8006380:	4603      	mov	r3, r0
 8006382:	2b01      	cmp	r3, #1
 8006384:	d002      	beq.n	800638c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006386:	f06f 0302 	mvn.w	r3, #2
 800638a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800638c:	697b      	ldr	r3, [r7, #20]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800639c:	b580      	push	{r7, lr}
 800639e:	b08a      	sub	sp, #40	; 0x28
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ac:	f3ef 8305 	mrs	r3, IPSR
 80063b0:	613b      	str	r3, [r7, #16]
  return(result);
 80063b2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d15f      	bne.n	8006478 <osMessageQueueNew+0xdc>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d05c      	beq.n	8006478 <osMessageQueueNew+0xdc>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d059      	beq.n	8006478 <osMessageQueueNew+0xdc>
    mem = -1;
 80063c4:	f04f 33ff 	mov.w	r3, #4294967295
 80063c8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d029      	beq.n	8006424 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d012      	beq.n	80063fe <osMessageQueueNew+0x62>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	2b4f      	cmp	r3, #79	; 0x4f
 80063de:	d90e      	bls.n	80063fe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00a      	beq.n	80063fe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	695a      	ldr	r2, [r3, #20]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	68b9      	ldr	r1, [r7, #8]
 80063f0:	fb01 f303 	mul.w	r3, r1, r3
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d302      	bcc.n	80063fe <osMessageQueueNew+0x62>
        mem = 1;
 80063f8:	2301      	movs	r3, #1
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	e014      	b.n	8006428 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d110      	bne.n	8006428 <osMessageQueueNew+0x8c>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10c      	bne.n	8006428 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006412:	2b00      	cmp	r3, #0
 8006414:	d108      	bne.n	8006428 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d104      	bne.n	8006428 <osMessageQueueNew+0x8c>
          mem = 0;
 800641e:	2300      	movs	r3, #0
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	e001      	b.n	8006428 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d10b      	bne.n	8006446 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691a      	ldr	r2, [r3, #16]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	2100      	movs	r1, #0
 8006438:	9100      	str	r1, [sp, #0]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fa2f 	bl	80068a0 <xQueueGenericCreateStatic>
 8006442:	61f8      	str	r0, [r7, #28]
 8006444:	e008      	b.n	8006458 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d105      	bne.n	8006458 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800644c:	2200      	movs	r2, #0
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 fa9d 	bl	8006990 <xQueueGenericCreate>
 8006456:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00c      	beq.n	8006478 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <osMessageQueueNew+0xd0>
        name = attr->name;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	e001      	b.n	8006470 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006470:	6979      	ldr	r1, [r7, #20]
 8006472:	69f8      	ldr	r0, [r7, #28]
 8006474:	f001 f932 	bl	80076dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006478:	69fb      	ldr	r3, [r7, #28]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3720      	adds	r7, #32
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	603b      	str	r3, [r7, #0]
 8006490:	4613      	mov	r3, r2
 8006492:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006498:	2300      	movs	r3, #0
 800649a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800649c:	f3ef 8305 	mrs	r3, IPSR
 80064a0:	617b      	str	r3, [r7, #20]
  return(result);
 80064a2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d028      	beq.n	80064fa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <osMessageQueuePut+0x36>
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <osMessageQueuePut+0x36>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80064ba:	f06f 0303 	mvn.w	r3, #3
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	e038      	b.n	8006534 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80064c2:	2300      	movs	r3, #0
 80064c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80064c6:	f107 0210 	add.w	r2, r7, #16
 80064ca:	2300      	movs	r3, #0
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	69b8      	ldr	r0, [r7, #24]
 80064d0:	f000 fc24 	bl	8006d1c <xQueueGenericSendFromISR>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d003      	beq.n	80064e2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80064da:	f06f 0302 	mvn.w	r3, #2
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	e028      	b.n	8006534 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d025      	beq.n	8006534 <osMessageQueuePut+0xb0>
 80064e8:	4b15      	ldr	r3, [pc, #84]	; (8006540 <osMessageQueuePut+0xbc>)
 80064ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	e01c      	b.n	8006534 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <osMessageQueuePut+0x82>
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d103      	bne.n	800650e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006506:	f06f 0303 	mvn.w	r3, #3
 800650a:	61fb      	str	r3, [r7, #28]
 800650c:	e012      	b.n	8006534 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800650e:	2300      	movs	r3, #0
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	68b9      	ldr	r1, [r7, #8]
 8006514:	69b8      	ldr	r0, [r7, #24]
 8006516:	f000 fb03 	bl	8006b20 <xQueueGenericSend>
 800651a:	4603      	mov	r3, r0
 800651c:	2b01      	cmp	r3, #1
 800651e:	d009      	beq.n	8006534 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006526:	f06f 0301 	mvn.w	r3, #1
 800652a:	61fb      	str	r3, [r7, #28]
 800652c:	e002      	b.n	8006534 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800652e:	f06f 0302 	mvn.w	r3, #2
 8006532:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006534:	69fb      	ldr	r3, [r7, #28]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006556:	2300      	movs	r3, #0
 8006558:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800655a:	f3ef 8305 	mrs	r3, IPSR
 800655e:	617b      	str	r3, [r7, #20]
  return(result);
 8006560:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006562:	2b00      	cmp	r3, #0
 8006564:	d028      	beq.n	80065b8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <osMessageQueueGet+0x34>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <osMessageQueueGet+0x34>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006578:	f06f 0303 	mvn.w	r3, #3
 800657c:	61fb      	str	r3, [r7, #28]
 800657e:	e037      	b.n	80065f0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006580:	2300      	movs	r3, #0
 8006582:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006584:	f107 0310 	add.w	r3, r7, #16
 8006588:	461a      	mov	r2, r3
 800658a:	68b9      	ldr	r1, [r7, #8]
 800658c:	69b8      	ldr	r0, [r7, #24]
 800658e:	f000 fed9 	bl	8007344 <xQueueReceiveFromISR>
 8006592:	4603      	mov	r3, r0
 8006594:	2b01      	cmp	r3, #1
 8006596:	d003      	beq.n	80065a0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006598:	f06f 0302 	mvn.w	r3, #2
 800659c:	61fb      	str	r3, [r7, #28]
 800659e:	e027      	b.n	80065f0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d024      	beq.n	80065f0 <osMessageQueueGet+0xac>
 80065a6:	4b15      	ldr	r3, [pc, #84]	; (80065fc <osMessageQueueGet+0xb8>)
 80065a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	e01b      	b.n	80065f0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <osMessageQueueGet+0x80>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d103      	bne.n	80065cc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80065c4:	f06f 0303 	mvn.w	r3, #3
 80065c8:	61fb      	str	r3, [r7, #28]
 80065ca:	e011      	b.n	80065f0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	69b8      	ldr	r0, [r7, #24]
 80065d2:	f000 fccb 	bl	8006f6c <xQueueReceive>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d009      	beq.n	80065f0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80065e2:	f06f 0301 	mvn.w	r3, #1
 80065e6:	61fb      	str	r3, [r7, #28]
 80065e8:	e002      	b.n	80065f0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80065ea:	f06f 0302 	mvn.w	r3, #2
 80065ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80065f0:	69fb      	ldr	r3, [r7, #28]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3720      	adds	r7, #32
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	e000ed04 	.word	0xe000ed04

08006600 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4a07      	ldr	r2, [pc, #28]	; (800662c <vApplicationGetIdleTaskMemory+0x2c>)
 8006610:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	4a06      	ldr	r2, [pc, #24]	; (8006630 <vApplicationGetIdleTaskMemory+0x30>)
 8006616:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2280      	movs	r2, #128	; 0x80
 800661c:	601a      	str	r2, [r3, #0]
}
 800661e:	bf00      	nop
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	20000994 	.word	0x20000994
 8006630:	20000a50 	.word	0x20000a50

08006634 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4a07      	ldr	r2, [pc, #28]	; (8006660 <vApplicationGetTimerTaskMemory+0x2c>)
 8006644:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4a06      	ldr	r2, [pc, #24]	; (8006664 <vApplicationGetTimerTaskMemory+0x30>)
 800664a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006652:	601a      	str	r2, [r3, #0]
}
 8006654:	bf00      	nop
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	20000c50 	.word	0x20000c50
 8006664:	20000d0c 	.word	0x20000d0c

08006668 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f103 0208 	add.w	r2, r3, #8
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f04f 32ff 	mov.w	r2, #4294967295
 8006680:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f103 0208 	add.w	r2, r3, #8
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f103 0208 	add.w	r2, r3, #8
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066c2:	b480      	push	{r7}
 80066c4:	b085      	sub	sp, #20
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	601a      	str	r2, [r3, #0]
}
 80066fe:	bf00      	nop
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800670a:	b480      	push	{r7}
 800670c:	b085      	sub	sp, #20
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006720:	d103      	bne.n	800672a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	e00c      	b.n	8006744 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3308      	adds	r3, #8
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	e002      	b.n	8006738 <vListInsert+0x2e>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	429a      	cmp	r2, r3
 8006742:	d2f6      	bcs.n	8006732 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	601a      	str	r2, [r3, #0]
}
 8006770:	bf00      	nop
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6892      	ldr	r2, [r2, #8]
 8006792:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6852      	ldr	r2, [r2, #4]
 800679c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d103      	bne.n	80067b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	1e5a      	subs	r2, r3, #1
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10a      	bne.n	80067fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067f6:	bf00      	nop
 80067f8:	e7fe      	b.n	80067f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80067fa:	f002 fc9b 	bl	8009134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006806:	68f9      	ldr	r1, [r7, #12]
 8006808:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800680a:	fb01 f303 	mul.w	r3, r1, r3
 800680e:	441a      	add	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682a:	3b01      	subs	r3, #1
 800682c:	68f9      	ldr	r1, [r7, #12]
 800682e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006830:	fb01 f303 	mul.w	r3, r1, r3
 8006834:	441a      	add	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	22ff      	movs	r2, #255	; 0xff
 800683e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	22ff      	movs	r2, #255	; 0xff
 8006846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d114      	bne.n	800687a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01a      	beq.n	800688e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3310      	adds	r3, #16
 800685c:	4618      	mov	r0, r3
 800685e:	f001 fc4b 	bl	80080f8 <xTaskRemoveFromEventList>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d012      	beq.n	800688e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006868:	4b0c      	ldr	r3, [pc, #48]	; (800689c <xQueueGenericReset+0xcc>)
 800686a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	e009      	b.n	800688e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3310      	adds	r3, #16
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff fef2 	bl	8006668 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3324      	adds	r3, #36	; 0x24
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff feed 	bl	8006668 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800688e:	f002 fc81 	bl	8009194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006892:	2301      	movs	r3, #1
}
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	e000ed04 	.word	0xe000ed04

080068a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08e      	sub	sp, #56	; 0x38
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068c6:	bf00      	nop
 80068c8:	e7fe      	b.n	80068c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068e2:	bf00      	nop
 80068e4:	e7fe      	b.n	80068e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d002      	beq.n	80068f2 <xQueueGenericCreateStatic+0x52>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <xQueueGenericCreateStatic+0x56>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e000      	b.n	80068f8 <xQueueGenericCreateStatic+0x58>
 80068f6:	2300      	movs	r3, #0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	623b      	str	r3, [r7, #32]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d102      	bne.n	800691e <xQueueGenericCreateStatic+0x7e>
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <xQueueGenericCreateStatic+0x82>
 800691e:	2301      	movs	r3, #1
 8006920:	e000      	b.n	8006924 <xQueueGenericCreateStatic+0x84>
 8006922:	2300      	movs	r3, #0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10a      	bne.n	800693e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	61fb      	str	r3, [r7, #28]
}
 800693a:	bf00      	nop
 800693c:	e7fe      	b.n	800693c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800693e:	2350      	movs	r3, #80	; 0x50
 8006940:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b50      	cmp	r3, #80	; 0x50
 8006946:	d00a      	beq.n	800695e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	61bb      	str	r3, [r7, #24]
}
 800695a:	bf00      	nop
 800695c:	e7fe      	b.n	800695c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800695e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00d      	beq.n	8006986 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006972:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	4613      	mov	r3, r2
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 f83f 	bl	8006a04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006988:	4618      	mov	r0, r3
 800698a:	3730      	adds	r7, #48	; 0x30
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08a      	sub	sp, #40	; 0x28
 8006994:	af02      	add	r7, sp, #8
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	4613      	mov	r3, r2
 800699c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10a      	bne.n	80069ba <xQueueGenericCreate+0x2a>
	__asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	613b      	str	r3, [r7, #16]
}
 80069b6:	bf00      	nop
 80069b8:	e7fe      	b.n	80069b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	fb02 f303 	mul.w	r3, r2, r3
 80069c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	3350      	adds	r3, #80	; 0x50
 80069c8:	4618      	mov	r0, r3
 80069ca:	f002 fcd5 	bl	8009378 <pvPortMalloc>
 80069ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d011      	beq.n	80069fa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	3350      	adds	r3, #80	; 0x50
 80069de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069e8:	79fa      	ldrb	r2, [r7, #7]
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	4613      	mov	r3, r2
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	68b9      	ldr	r1, [r7, #8]
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 f805 	bl	8006a04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069fa:	69bb      	ldr	r3, [r7, #24]
	}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3720      	adds	r7, #32
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d103      	bne.n	8006a20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	e002      	b.n	8006a26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a32:	2101      	movs	r1, #1
 8006a34:	69b8      	ldr	r0, [r7, #24]
 8006a36:	f7ff fecb 	bl	80067d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	78fa      	ldrb	r2, [r7, #3]
 8006a3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a42:	bf00      	nop
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b08a      	sub	sp, #40	; 0x28
 8006a4e:	af02      	add	r7, sp, #8
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	61bb      	str	r3, [r7, #24]
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d90a      	bls.n	8006a90 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	617b      	str	r3, [r7, #20]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006a90:	2302      	movs	r3, #2
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	2100      	movs	r1, #0
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f7ff ff00 	bl	80068a0 <xQueueGenericCreateStatic>
 8006aa0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006aae:	69fb      	ldr	r3, [r7, #28]
	}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3720      	adds	r7, #32
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10a      	bne.n	8006ade <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	613b      	str	r3, [r7, #16]
}
 8006ada:	bf00      	nop
 8006adc:	e7fe      	b.n	8006adc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d90a      	bls.n	8006afc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	60fb      	str	r3, [r7, #12]
}
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006afc:	2202      	movs	r2, #2
 8006afe:	2100      	movs	r1, #0
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff ff45 	bl	8006990 <xQueueGenericCreate>
 8006b06:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006b14:	697b      	ldr	r3, [r7, #20]
	}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08e      	sub	sp, #56	; 0x38
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <xQueueGenericSend+0x32>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d103      	bne.n	8006b60 <xQueueGenericSend+0x40>
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <xQueueGenericSend+0x44>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <xQueueGenericSend+0x46>
 8006b64:	2300      	movs	r3, #0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <xQueueGenericSend+0x60>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d103      	bne.n	8006b8e <xQueueGenericSend+0x6e>
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <xQueueGenericSend+0x72>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e000      	b.n	8006b94 <xQueueGenericSend+0x74>
 8006b92:	2300      	movs	r3, #0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <xQueueGenericSend+0x8e>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	623b      	str	r3, [r7, #32]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bae:	f001 fc65 	bl	800847c <xTaskGetSchedulerState>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d102      	bne.n	8006bbe <xQueueGenericSend+0x9e>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <xQueueGenericSend+0xa2>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <xQueueGenericSend+0xa4>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <xQueueGenericSend+0xbe>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	61fb      	str	r3, [r7, #28]
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bde:	f002 faa9 	bl	8009134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d302      	bcc.n	8006bf4 <xQueueGenericSend+0xd4>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d129      	bne.n	8006c48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bfa:	f000 fc5e 	bl	80074ba <prvCopyDataToQueue>
 8006bfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d010      	beq.n	8006c2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	3324      	adds	r3, #36	; 0x24
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 fa73 	bl	80080f8 <xTaskRemoveFromEventList>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d013      	beq.n	8006c40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c18:	4b3f      	ldr	r3, [pc, #252]	; (8006d18 <xQueueGenericSend+0x1f8>)
 8006c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	e00a      	b.n	8006c40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c30:	4b39      	ldr	r3, [pc, #228]	; (8006d18 <xQueueGenericSend+0x1f8>)
 8006c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c40:	f002 faa8 	bl	8009194 <vPortExitCritical>
				return pdPASS;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e063      	b.n	8006d10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d103      	bne.n	8006c56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c4e:	f002 faa1 	bl	8009194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e05c      	b.n	8006d10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c5c:	f107 0314 	add.w	r3, r7, #20
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 faad 	bl	80081c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c66:	2301      	movs	r3, #1
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c6a:	f002 fa93 	bl	8009194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c6e:	f001 f819 	bl	8007ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c72:	f002 fa5f 	bl	8009134 <vPortEnterCritical>
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c7c:	b25b      	sxtb	r3, r3
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c82:	d103      	bne.n	8006c8c <xQueueGenericSend+0x16c>
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c92:	b25b      	sxtb	r3, r3
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c98:	d103      	bne.n	8006ca2 <xQueueGenericSend+0x182>
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ca2:	f002 fa77 	bl	8009194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ca6:	1d3a      	adds	r2, r7, #4
 8006ca8:	f107 0314 	add.w	r3, r7, #20
 8006cac:	4611      	mov	r1, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 fa9c 	bl	80081ec <xTaskCheckForTimeOut>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d124      	bne.n	8006d04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cbc:	f000 fcf5 	bl	80076aa <prvIsQueueFull>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d018      	beq.n	8006cf8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	3310      	adds	r3, #16
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	4611      	mov	r1, r2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f001 f9c2 	bl	8008058 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cd6:	f000 fc80 	bl	80075da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006cda:	f000 fff1 	bl	8007cc0 <xTaskResumeAll>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f47f af7c 	bne.w	8006bde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006ce6:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <xQueueGenericSend+0x1f8>)
 8006ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	e772      	b.n	8006bde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cfa:	f000 fc6e 	bl	80075da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cfe:	f000 ffdf 	bl	8007cc0 <xTaskResumeAll>
 8006d02:	e76c      	b.n	8006bde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d06:	f000 fc68 	bl	80075da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d0a:	f000 ffd9 	bl	8007cc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3738      	adds	r7, #56	; 0x38
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b090      	sub	sp, #64	; 0x40
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d46:	bf00      	nop
 8006d48:	e7fe      	b.n	8006d48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d103      	bne.n	8006d58 <xQueueGenericSendFromISR+0x3c>
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <xQueueGenericSendFromISR+0x40>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e000      	b.n	8006d5e <xQueueGenericSendFromISR+0x42>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d74:	bf00      	nop
 8006d76:	e7fe      	b.n	8006d76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d103      	bne.n	8006d86 <xQueueGenericSendFromISR+0x6a>
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d101      	bne.n	8006d8a <xQueueGenericSendFromISR+0x6e>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <xQueueGenericSendFromISR+0x70>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	623b      	str	r3, [r7, #32]
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006da6:	f002 faa7 	bl	80092f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006daa:	f3ef 8211 	mrs	r2, BASEPRI
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	61fa      	str	r2, [r7, #28]
 8006dc0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006dc2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dc4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d302      	bcc.n	8006dd8 <xQueueGenericSendFromISR+0xbc>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d12f      	bne.n	8006e38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006dee:	f000 fb64 	bl	80074ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006df2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfa:	d112      	bne.n	8006e22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d016      	beq.n	8006e32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e06:	3324      	adds	r3, #36	; 0x24
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f001 f975 	bl	80080f8 <xTaskRemoveFromEventList>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00e      	beq.n	8006e32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00b      	beq.n	8006e32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	e007      	b.n	8006e32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e26:	3301      	adds	r3, #1
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	b25a      	sxtb	r2, r3
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e32:	2301      	movs	r3, #1
 8006e34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006e36:	e001      	b.n	8006e3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3740      	adds	r7, #64	; 0x40
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b08e      	sub	sp, #56	; 0x38
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	623b      	str	r3, [r7, #32]
}
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00a      	beq.n	8006e9a <xQueueGiveFromISR+0x48>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	61fb      	str	r3, [r7, #28]
}
 8006e96:	bf00      	nop
 8006e98:	e7fe      	b.n	8006e98 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d103      	bne.n	8006eaa <xQueueGiveFromISR+0x58>
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <xQueueGiveFromISR+0x5c>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <xQueueGiveFromISR+0x5e>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <xQueueGiveFromISR+0x78>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	61bb      	str	r3, [r7, #24]
}
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006eca:	f002 fa15 	bl	80092f8 <vPortValidateInterruptPriority>
	__asm volatile
 8006ece:	f3ef 8211 	mrs	r2, BASEPRI
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	617a      	str	r2, [r7, #20]
 8006ee4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006ee6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d22b      	bcs.n	8006f52 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d112      	bne.n	8006f3c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d016      	beq.n	8006f4c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f20:	3324      	adds	r3, #36	; 0x24
 8006f22:	4618      	mov	r0, r3
 8006f24:	f001 f8e8 	bl	80080f8 <xTaskRemoveFromEventList>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00e      	beq.n	8006f4c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2201      	movs	r2, #1
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	e007      	b.n	8006f4c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f40:	3301      	adds	r3, #1
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	b25a      	sxtb	r2, r3
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f50:	e001      	b.n	8006f56 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	637b      	str	r3, [r7, #52]	; 0x34
 8006f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f58:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f383 8811 	msr	BASEPRI, r3
}
 8006f60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3738      	adds	r7, #56	; 0x38
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08c      	sub	sp, #48	; 0x30
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10a      	bne.n	8006f9c <xQueueReceive+0x30>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	623b      	str	r3, [r7, #32]
}
 8006f98:	bf00      	nop
 8006f9a:	e7fe      	b.n	8006f9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d103      	bne.n	8006faa <xQueueReceive+0x3e>
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <xQueueReceive+0x42>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <xQueueReceive+0x44>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <xQueueReceive+0x5e>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	61fb      	str	r3, [r7, #28]
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fca:	f001 fa57 	bl	800847c <xTaskGetSchedulerState>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d102      	bne.n	8006fda <xQueueReceive+0x6e>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <xQueueReceive+0x72>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <xQueueReceive+0x74>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10a      	bne.n	8006ffa <xQueueReceive+0x8e>
	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	61bb      	str	r3, [r7, #24]
}
 8006ff6:	bf00      	nop
 8006ff8:	e7fe      	b.n	8006ff8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ffa:	f002 f89b 	bl	8009134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007002:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	2b00      	cmp	r3, #0
 8007008:	d01f      	beq.n	800704a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800700a:	68b9      	ldr	r1, [r7, #8]
 800700c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800700e:	f000 fabe 	bl	800758e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	1e5a      	subs	r2, r3, #1
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00f      	beq.n	8007042 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	3310      	adds	r3, #16
 8007026:	4618      	mov	r0, r3
 8007028:	f001 f866 	bl	80080f8 <xTaskRemoveFromEventList>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d007      	beq.n	8007042 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007032:	4b3d      	ldr	r3, [pc, #244]	; (8007128 <xQueueReceive+0x1bc>)
 8007034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007042:	f002 f8a7 	bl	8009194 <vPortExitCritical>
				return pdPASS;
 8007046:	2301      	movs	r3, #1
 8007048:	e069      	b.n	800711e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d103      	bne.n	8007058 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007050:	f002 f8a0 	bl	8009194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007054:	2300      	movs	r3, #0
 8007056:	e062      	b.n	800711e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800705e:	f107 0310 	add.w	r3, r7, #16
 8007062:	4618      	mov	r0, r3
 8007064:	f001 f8ac 	bl	80081c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007068:	2301      	movs	r3, #1
 800706a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800706c:	f002 f892 	bl	8009194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007070:	f000 fe18 	bl	8007ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007074:	f002 f85e 	bl	8009134 <vPortEnterCritical>
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800707e:	b25b      	sxtb	r3, r3
 8007080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007084:	d103      	bne.n	800708e <xQueueReceive+0x122>
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007094:	b25b      	sxtb	r3, r3
 8007096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709a:	d103      	bne.n	80070a4 <xQueueReceive+0x138>
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070a4:	f002 f876 	bl	8009194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070a8:	1d3a      	adds	r2, r7, #4
 80070aa:	f107 0310 	add.w	r3, r7, #16
 80070ae:	4611      	mov	r1, r2
 80070b0:	4618      	mov	r0, r3
 80070b2:	f001 f89b 	bl	80081ec <xTaskCheckForTimeOut>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d123      	bne.n	8007104 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070be:	f000 fade 	bl	800767e <prvIsQueueEmpty>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d017      	beq.n	80070f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ca:	3324      	adds	r3, #36	; 0x24
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	4611      	mov	r1, r2
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 ffc1 	bl	8008058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070d8:	f000 fa7f 	bl	80075da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070dc:	f000 fdf0 	bl	8007cc0 <xTaskResumeAll>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d189      	bne.n	8006ffa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80070e6:	4b10      	ldr	r3, [pc, #64]	; (8007128 <xQueueReceive+0x1bc>)
 80070e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	e780      	b.n	8006ffa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070fa:	f000 fa6e 	bl	80075da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070fe:	f000 fddf 	bl	8007cc0 <xTaskResumeAll>
 8007102:	e77a      	b.n	8006ffa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007106:	f000 fa68 	bl	80075da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800710a:	f000 fdd9 	bl	8007cc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800710e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007110:	f000 fab5 	bl	800767e <prvIsQueueEmpty>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	f43f af6f 	beq.w	8006ffa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800711c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800711e:	4618      	mov	r0, r3
 8007120:	3730      	adds	r7, #48	; 0x30
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	e000ed04 	.word	0xe000ed04

0800712c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b08e      	sub	sp, #56	; 0x38
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007136:	2300      	movs	r3, #0
 8007138:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800713e:	2300      	movs	r3, #0
 8007140:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10a      	bne.n	800715e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	623b      	str	r3, [r7, #32]
}
 800715a:	bf00      	nop
 800715c:	e7fe      	b.n	800715c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00a      	beq.n	800717c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	61fb      	str	r3, [r7, #28]
}
 8007178:	bf00      	nop
 800717a:	e7fe      	b.n	800717a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800717c:	f001 f97e 	bl	800847c <xTaskGetSchedulerState>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d102      	bne.n	800718c <xQueueSemaphoreTake+0x60>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <xQueueSemaphoreTake+0x64>
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <xQueueSemaphoreTake+0x66>
 8007190:	2300      	movs	r3, #0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	61bb      	str	r3, [r7, #24]
}
 80071a8:	bf00      	nop
 80071aa:	e7fe      	b.n	80071aa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071ac:	f001 ffc2 	bl	8009134 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80071b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d024      	beq.n	8007206 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	1e5a      	subs	r2, r3, #1
 80071c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d104      	bne.n	80071d6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80071cc:	f001 facc 	bl	8008768 <pvTaskIncrementMutexHeldCount>
 80071d0:	4602      	mov	r2, r0
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00f      	beq.n	80071fe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e0:	3310      	adds	r3, #16
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 ff88 	bl	80080f8 <xTaskRemoveFromEventList>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d007      	beq.n	80071fe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071ee:	4b54      	ldr	r3, [pc, #336]	; (8007340 <xQueueSemaphoreTake+0x214>)
 80071f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071fe:	f001 ffc9 	bl	8009194 <vPortExitCritical>
				return pdPASS;
 8007202:	2301      	movs	r3, #1
 8007204:	e097      	b.n	8007336 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d111      	bne.n	8007230 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	617b      	str	r3, [r7, #20]
}
 8007224:	bf00      	nop
 8007226:	e7fe      	b.n	8007226 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007228:	f001 ffb4 	bl	8009194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800722c:	2300      	movs	r3, #0
 800722e:	e082      	b.n	8007336 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007232:	2b00      	cmp	r3, #0
 8007234:	d106      	bne.n	8007244 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007236:	f107 030c 	add.w	r3, r7, #12
 800723a:	4618      	mov	r0, r3
 800723c:	f000 ffc0 	bl	80081c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007240:	2301      	movs	r3, #1
 8007242:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007244:	f001 ffa6 	bl	8009194 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007248:	f000 fd2c 	bl	8007ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800724c:	f001 ff72 	bl	8009134 <vPortEnterCritical>
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007256:	b25b      	sxtb	r3, r3
 8007258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725c:	d103      	bne.n	8007266 <xQueueSemaphoreTake+0x13a>
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800726c:	b25b      	sxtb	r3, r3
 800726e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007272:	d103      	bne.n	800727c <xQueueSemaphoreTake+0x150>
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800727c:	f001 ff8a 	bl	8009194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007280:	463a      	mov	r2, r7
 8007282:	f107 030c 	add.w	r3, r7, #12
 8007286:	4611      	mov	r1, r2
 8007288:	4618      	mov	r0, r3
 800728a:	f000 ffaf 	bl	80081ec <xTaskCheckForTimeOut>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d132      	bne.n	80072fa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007296:	f000 f9f2 	bl	800767e <prvIsQueueEmpty>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d026      	beq.n	80072ee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d109      	bne.n	80072bc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80072a8:	f001 ff44 	bl	8009134 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	4618      	mov	r0, r3
 80072b2:	f001 f901 	bl	80084b8 <xTaskPriorityInherit>
 80072b6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80072b8:	f001 ff6c 	bl	8009194 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072be:	3324      	adds	r3, #36	; 0x24
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	4611      	mov	r1, r2
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fec7 	bl	8008058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072cc:	f000 f985 	bl	80075da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072d0:	f000 fcf6 	bl	8007cc0 <xTaskResumeAll>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f47f af68 	bne.w	80071ac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80072dc:	4b18      	ldr	r3, [pc, #96]	; (8007340 <xQueueSemaphoreTake+0x214>)
 80072de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	e75e      	b.n	80071ac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80072ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072f0:	f000 f973 	bl	80075da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072f4:	f000 fce4 	bl	8007cc0 <xTaskResumeAll>
 80072f8:	e758      	b.n	80071ac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80072fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072fc:	f000 f96d 	bl	80075da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007300:	f000 fcde 	bl	8007cc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007304:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007306:	f000 f9ba 	bl	800767e <prvIsQueueEmpty>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	f43f af4d 	beq.w	80071ac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00d      	beq.n	8007334 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007318:	f001 ff0c 	bl	8009134 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800731c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800731e:	f000 f8b4 	bl	800748a <prvGetDisinheritPriorityAfterTimeout>
 8007322:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800732a:	4618      	mov	r0, r3
 800732c:	f001 f99a 	bl	8008664 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007330:	f001 ff30 	bl	8009194 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007334:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007336:	4618      	mov	r0, r3
 8007338:	3738      	adds	r7, #56	; 0x38
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	e000ed04 	.word	0xe000ed04

08007344 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b08e      	sub	sp, #56	; 0x38
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10a      	bne.n	8007370 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	623b      	str	r3, [r7, #32]
}
 800736c:	bf00      	nop
 800736e:	e7fe      	b.n	800736e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d103      	bne.n	800737e <xQueueReceiveFromISR+0x3a>
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <xQueueReceiveFromISR+0x3e>
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <xQueueReceiveFromISR+0x40>
 8007382:	2300      	movs	r3, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	61fb      	str	r3, [r7, #28]
}
 800739a:	bf00      	nop
 800739c:	e7fe      	b.n	800739c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800739e:	f001 ffab 	bl	80092f8 <vPortValidateInterruptPriority>
	__asm volatile
 80073a2:	f3ef 8211 	mrs	r2, BASEPRI
 80073a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	61ba      	str	r2, [r7, #24]
 80073b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80073ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d02f      	beq.n	800742a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073d8:	f000 f8d9 	bl	800758e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	1e5a      	subs	r2, r3, #1
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80073e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ec:	d112      	bne.n	8007414 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d016      	beq.n	8007424 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	3310      	adds	r3, #16
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fe7c 	bl	80080f8 <xTaskRemoveFromEventList>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00e      	beq.n	8007424 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00b      	beq.n	8007424 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	e007      	b.n	8007424 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007418:	3301      	adds	r3, #1
 800741a:	b2db      	uxtb	r3, r3
 800741c:	b25a      	sxtb	r2, r3
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007424:	2301      	movs	r3, #1
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
 8007428:	e001      	b.n	800742e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800742a:	2300      	movs	r3, #0
 800742c:	637b      	str	r3, [r7, #52]	; 0x34
 800742e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007430:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f383 8811 	msr	BASEPRI, r3
}
 8007438:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800743a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800743c:	4618      	mov	r0, r3
 800743e:	3738      	adds	r7, #56	; 0x38
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10a      	bne.n	800746c <vQueueDelete+0x28>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	60bb      	str	r3, [r7, #8]
}
 8007468:	bf00      	nop
 800746a:	e7fe      	b.n	800746a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 f95f 	bl	8007730 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007478:	2b00      	cmp	r3, #0
 800747a:	d102      	bne.n	8007482 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f002 f847 	bl	8009510 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007482:	bf00      	nop
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	2b00      	cmp	r3, #0
 8007498:	d006      	beq.n	80074a8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	e001      	b.n	80074ac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80074ac:	68fb      	ldr	r3, [r7, #12]
	}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b086      	sub	sp, #24
 80074be:	af00      	add	r7, sp, #0
 80074c0:	60f8      	str	r0, [r7, #12]
 80074c2:	60b9      	str	r1, [r7, #8]
 80074c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80074c6:	2300      	movs	r3, #0
 80074c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10d      	bne.n	80074f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d14d      	bne.n	800757c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f001 f84f 	bl	8008588 <xTaskPriorityDisinherit>
 80074ea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	609a      	str	r2, [r3, #8]
 80074f2:	e043      	b.n	800757c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d119      	bne.n	800752e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6858      	ldr	r0, [r3, #4]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	461a      	mov	r2, r3
 8007504:	68b9      	ldr	r1, [r7, #8]
 8007506:	f01f fbc1 	bl	8026c8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	441a      	add	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	429a      	cmp	r2, r3
 8007522:	d32b      	bcc.n	800757c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	605a      	str	r2, [r3, #4]
 800752c:	e026      	b.n	800757c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	68d8      	ldr	r0, [r3, #12]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	461a      	mov	r2, r3
 8007538:	68b9      	ldr	r1, [r7, #8]
 800753a:	f01f fba7 	bl	8026c8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	425b      	negs	r3, r3
 8007548:	441a      	add	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d207      	bcs.n	800756a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	425b      	negs	r3, r3
 8007564:	441a      	add	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b02      	cmp	r3, #2
 800756e:	d105      	bne.n	800757c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	3b01      	subs	r3, #1
 800757a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007584:	697b      	ldr	r3, [r7, #20]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759c:	2b00      	cmp	r3, #0
 800759e:	d018      	beq.n	80075d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a8:	441a      	add	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d303      	bcc.n	80075c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68d9      	ldr	r1, [r3, #12]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	461a      	mov	r2, r3
 80075cc:	6838      	ldr	r0, [r7, #0]
 80075ce:	f01f fb5d 	bl	8026c8c <memcpy>
	}
}
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80075e2:	f001 fda7 	bl	8009134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075ee:	e011      	b.n	8007614 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d012      	beq.n	800761e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3324      	adds	r3, #36	; 0x24
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 fd7b 	bl	80080f8 <xTaskRemoveFromEventList>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007608:	f000 fe52 	bl	80082b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	3b01      	subs	r3, #1
 8007610:	b2db      	uxtb	r3, r3
 8007612:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007618:	2b00      	cmp	r3, #0
 800761a:	dce9      	bgt.n	80075f0 <prvUnlockQueue+0x16>
 800761c:	e000      	b.n	8007620 <prvUnlockQueue+0x46>
					break;
 800761e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	22ff      	movs	r2, #255	; 0xff
 8007624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007628:	f001 fdb4 	bl	8009194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800762c:	f001 fd82 	bl	8009134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007636:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007638:	e011      	b.n	800765e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d012      	beq.n	8007668 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3310      	adds	r3, #16
 8007646:	4618      	mov	r0, r3
 8007648:	f000 fd56 	bl	80080f8 <xTaskRemoveFromEventList>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007652:	f000 fe2d 	bl	80082b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	3b01      	subs	r3, #1
 800765a:	b2db      	uxtb	r3, r3
 800765c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800765e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007662:	2b00      	cmp	r3, #0
 8007664:	dce9      	bgt.n	800763a <prvUnlockQueue+0x60>
 8007666:	e000      	b.n	800766a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007668:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	22ff      	movs	r2, #255	; 0xff
 800766e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007672:	f001 fd8f 	bl	8009194 <vPortExitCritical>
}
 8007676:	bf00      	nop
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007686:	f001 fd55 	bl	8009134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768e:	2b00      	cmp	r3, #0
 8007690:	d102      	bne.n	8007698 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007692:	2301      	movs	r3, #1
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	e001      	b.n	800769c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007698:	2300      	movs	r3, #0
 800769a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800769c:	f001 fd7a 	bl	8009194 <vPortExitCritical>

	return xReturn;
 80076a0:	68fb      	ldr	r3, [r7, #12]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076b2:	f001 fd3f 	bl	8009134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076be:	429a      	cmp	r2, r3
 80076c0:	d102      	bne.n	80076c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80076c2:	2301      	movs	r3, #1
 80076c4:	60fb      	str	r3, [r7, #12]
 80076c6:	e001      	b.n	80076cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076cc:	f001 fd62 	bl	8009194 <vPortExitCritical>

	return xReturn;
 80076d0:	68fb      	ldr	r3, [r7, #12]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	e014      	b.n	8007716 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80076ec:	4a0f      	ldr	r2, [pc, #60]	; (800772c <vQueueAddToRegistry+0x50>)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10b      	bne.n	8007710 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80076f8:	490c      	ldr	r1, [pc, #48]	; (800772c <vQueueAddToRegistry+0x50>)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007702:	4a0a      	ldr	r2, [pc, #40]	; (800772c <vQueueAddToRegistry+0x50>)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	4413      	add	r3, r2
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800770e:	e006      	b.n	800771e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3301      	adds	r3, #1
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b07      	cmp	r3, #7
 800771a:	d9e7      	bls.n	80076ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800771c:	bf00      	nop
 800771e:	bf00      	nop
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	2000110c 	.word	0x2000110c

08007730 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007738:	2300      	movs	r3, #0
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	e016      	b.n	800776c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800773e:	4a10      	ldr	r2, [pc, #64]	; (8007780 <vQueueUnregisterQueue+0x50>)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	4413      	add	r3, r2
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	429a      	cmp	r2, r3
 800774c:	d10b      	bne.n	8007766 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800774e:	4a0c      	ldr	r2, [pc, #48]	; (8007780 <vQueueUnregisterQueue+0x50>)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2100      	movs	r1, #0
 8007754:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007758:	4a09      	ldr	r2, [pc, #36]	; (8007780 <vQueueUnregisterQueue+0x50>)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	00db      	lsls	r3, r3, #3
 800775e:	4413      	add	r3, r2
 8007760:	2200      	movs	r2, #0
 8007762:	605a      	str	r2, [r3, #4]
				break;
 8007764:	e006      	b.n	8007774 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3301      	adds	r3, #1
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b07      	cmp	r3, #7
 8007770:	d9e5      	bls.n	800773e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007772:	bf00      	nop
 8007774:	bf00      	nop
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	2000110c 	.word	0x2000110c

08007784 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007794:	f001 fcce 	bl	8009134 <vPortEnterCritical>
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800779e:	b25b      	sxtb	r3, r3
 80077a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a4:	d103      	bne.n	80077ae <vQueueWaitForMessageRestricted+0x2a>
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077b4:	b25b      	sxtb	r3, r3
 80077b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ba:	d103      	bne.n	80077c4 <vQueueWaitForMessageRestricted+0x40>
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077c4:	f001 fce6 	bl	8009194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d106      	bne.n	80077de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	3324      	adds	r3, #36	; 0x24
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	68b9      	ldr	r1, [r7, #8]
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fc61 	bl	80080a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077de:	6978      	ldr	r0, [r7, #20]
 80077e0:	f7ff fefb 	bl	80075da <prvUnlockQueue>
	}
 80077e4:	bf00      	nop
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08e      	sub	sp, #56	; 0x38
 80077f0:	af04      	add	r7, sp, #16
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	623b      	str	r3, [r7, #32]
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <xTaskCreateStatic+0x46>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	61fb      	str	r3, [r7, #28]
}
 800782e:	bf00      	nop
 8007830:	e7fe      	b.n	8007830 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007832:	23bc      	movs	r3, #188	; 0xbc
 8007834:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2bbc      	cmp	r3, #188	; 0xbc
 800783a:	d00a      	beq.n	8007852 <xTaskCreateStatic+0x66>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	61bb      	str	r3, [r7, #24]
}
 800784e:	bf00      	nop
 8007850:	e7fe      	b.n	8007850 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007852:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007856:	2b00      	cmp	r3, #0
 8007858:	d01e      	beq.n	8007898 <xTaskCreateStatic+0xac>
 800785a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01b      	beq.n	8007898 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007868:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	2202      	movs	r2, #2
 800786e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007872:	2300      	movs	r3, #0
 8007874:	9303      	str	r3, [sp, #12]
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	9302      	str	r3, [sp, #8]
 800787a:	f107 0314 	add.w	r3, r7, #20
 800787e:	9301      	str	r3, [sp, #4]
 8007880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	68b9      	ldr	r1, [r7, #8]
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 f850 	bl	8007930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007892:	f000 f8f3 	bl	8007a7c <prvAddNewTaskToReadyList>
 8007896:	e001      	b.n	800789c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007898:	2300      	movs	r3, #0
 800789a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800789c:	697b      	ldr	r3, [r7, #20]
	}
 800789e:	4618      	mov	r0, r3
 80078a0:	3728      	adds	r7, #40	; 0x28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b08c      	sub	sp, #48	; 0x30
 80078aa:	af04      	add	r7, sp, #16
 80078ac:	60f8      	str	r0, [r7, #12]
 80078ae:	60b9      	str	r1, [r7, #8]
 80078b0:	603b      	str	r3, [r7, #0]
 80078b2:	4613      	mov	r3, r2
 80078b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078b6:	88fb      	ldrh	r3, [r7, #6]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f001 fd5c 	bl	8009378 <pvPortMalloc>
 80078c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00e      	beq.n	80078e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078c8:	20bc      	movs	r0, #188	; 0xbc
 80078ca:	f001 fd55 	bl	8009378 <pvPortMalloc>
 80078ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	631a      	str	r2, [r3, #48]	; 0x30
 80078dc:	e005      	b.n	80078ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078de:	6978      	ldr	r0, [r7, #20]
 80078e0:	f001 fe16 	bl	8009510 <vPortFree>
 80078e4:	e001      	b.n	80078ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d017      	beq.n	8007920 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078f8:	88fa      	ldrh	r2, [r7, #6]
 80078fa:	2300      	movs	r3, #0
 80078fc:	9303      	str	r3, [sp, #12]
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	9302      	str	r3, [sp, #8]
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68b9      	ldr	r1, [r7, #8]
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 f80e 	bl	8007930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007914:	69f8      	ldr	r0, [r7, #28]
 8007916:	f000 f8b1 	bl	8007a7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800791a:	2301      	movs	r3, #1
 800791c:	61bb      	str	r3, [r7, #24]
 800791e:	e002      	b.n	8007926 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007920:	f04f 33ff 	mov.w	r3, #4294967295
 8007924:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007926:	69bb      	ldr	r3, [r7, #24]
	}
 8007928:	4618      	mov	r0, r3
 800792a:	3720      	adds	r7, #32
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	461a      	mov	r2, r3
 8007948:	21a5      	movs	r1, #165	; 0xa5
 800794a:	f01f f9ad 	bl	8026ca8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007958:	3b01      	subs	r3, #1
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	f023 0307 	bic.w	r3, r3, #7
 8007966:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	617b      	str	r3, [r7, #20]
}
 8007984:	bf00      	nop
 8007986:	e7fe      	b.n	8007986 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d01f      	beq.n	80079ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800798e:	2300      	movs	r3, #0
 8007990:	61fb      	str	r3, [r7, #28]
 8007992:	e012      	b.n	80079ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	4413      	add	r3, r2
 800799a:	7819      	ldrb	r1, [r3, #0]
 800799c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	4413      	add	r3, r2
 80079a2:	3334      	adds	r3, #52	; 0x34
 80079a4:	460a      	mov	r2, r1
 80079a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	4413      	add	r3, r2
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d006      	beq.n	80079c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	3301      	adds	r3, #1
 80079b8:	61fb      	str	r3, [r7, #28]
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	2b0f      	cmp	r3, #15
 80079be:	d9e9      	bls.n	8007994 <prvInitialiseNewTask+0x64>
 80079c0:	e000      	b.n	80079c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80079c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079cc:	e003      	b.n	80079d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	2b37      	cmp	r3, #55	; 0x37
 80079da:	d901      	bls.n	80079e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079dc:	2337      	movs	r3, #55	; 0x37
 80079de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	2200      	movs	r2, #0
 80079f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	3304      	adds	r3, #4
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fe fe56 	bl	80066a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fe:	3318      	adds	r3, #24
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fe fe51 	bl	80066a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	3354      	adds	r3, #84	; 0x54
 8007a30:	2260      	movs	r2, #96	; 0x60
 8007a32:	2100      	movs	r1, #0
 8007a34:	4618      	mov	r0, r3
 8007a36:	f01f f937 	bl	8026ca8 <memset>
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	4a0c      	ldr	r2, [pc, #48]	; (8007a70 <prvInitialiseNewTask+0x140>)
 8007a3e:	659a      	str	r2, [r3, #88]	; 0x58
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	4a0c      	ldr	r2, [pc, #48]	; (8007a74 <prvInitialiseNewTask+0x144>)
 8007a44:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	4a0b      	ldr	r2, [pc, #44]	; (8007a78 <prvInitialiseNewTask+0x148>)
 8007a4a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	68f9      	ldr	r1, [r7, #12]
 8007a50:	69b8      	ldr	r0, [r7, #24]
 8007a52:	f001 fa3f 	bl	8008ed4 <pxPortInitialiseStack>
 8007a56:	4602      	mov	r2, r0
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a68:	bf00      	nop
 8007a6a:	3720      	adds	r7, #32
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	0802b744 	.word	0x0802b744
 8007a74:	0802b764 	.word	0x0802b764
 8007a78:	0802b724 	.word	0x0802b724

08007a7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a84:	f001 fb56 	bl	8009134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a88:	4b2d      	ldr	r3, [pc, #180]	; (8007b40 <prvAddNewTaskToReadyList+0xc4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	4a2c      	ldr	r2, [pc, #176]	; (8007b40 <prvAddNewTaskToReadyList+0xc4>)
 8007a90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a92:	4b2c      	ldr	r3, [pc, #176]	; (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d109      	bne.n	8007aae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a9a:	4a2a      	ldr	r2, [pc, #168]	; (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007aa0:	4b27      	ldr	r3, [pc, #156]	; (8007b40 <prvAddNewTaskToReadyList+0xc4>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d110      	bne.n	8007aca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007aa8:	f000 fc26 	bl	80082f8 <prvInitialiseTaskLists>
 8007aac:	e00d      	b.n	8007aca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007aae:	4b26      	ldr	r3, [pc, #152]	; (8007b48 <prvAddNewTaskToReadyList+0xcc>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d109      	bne.n	8007aca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ab6:	4b23      	ldr	r3, [pc, #140]	; (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d802      	bhi.n	8007aca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ac4:	4a1f      	ldr	r2, [pc, #124]	; (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007aca:	4b20      	ldr	r3, [pc, #128]	; (8007b4c <prvAddNewTaskToReadyList+0xd0>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	4a1e      	ldr	r2, [pc, #120]	; (8007b4c <prvAddNewTaskToReadyList+0xd0>)
 8007ad2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ad4:	4b1d      	ldr	r3, [pc, #116]	; (8007b4c <prvAddNewTaskToReadyList+0xd0>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae0:	4b1b      	ldr	r3, [pc, #108]	; (8007b50 <prvAddNewTaskToReadyList+0xd4>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d903      	bls.n	8007af0 <prvAddNewTaskToReadyList+0x74>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	4a18      	ldr	r2, [pc, #96]	; (8007b50 <prvAddNewTaskToReadyList+0xd4>)
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af4:	4613      	mov	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4a15      	ldr	r2, [pc, #84]	; (8007b54 <prvAddNewTaskToReadyList+0xd8>)
 8007afe:	441a      	add	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4619      	mov	r1, r3
 8007b06:	4610      	mov	r0, r2
 8007b08:	f7fe fddb 	bl	80066c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b0c:	f001 fb42 	bl	8009194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b10:	4b0d      	ldr	r3, [pc, #52]	; (8007b48 <prvAddNewTaskToReadyList+0xcc>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00e      	beq.n	8007b36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b18:	4b0a      	ldr	r3, [pc, #40]	; (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d207      	bcs.n	8007b36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b26:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <prvAddNewTaskToReadyList+0xdc>)
 8007b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b36:	bf00      	nop
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20001620 	.word	0x20001620
 8007b44:	2000114c 	.word	0x2000114c
 8007b48:	2000162c 	.word	0x2000162c
 8007b4c:	2000163c 	.word	0x2000163c
 8007b50:	20001628 	.word	0x20001628
 8007b54:	20001150 	.word	0x20001150
 8007b58:	e000ed04 	.word	0xe000ed04

08007b5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b64:	2300      	movs	r3, #0
 8007b66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d017      	beq.n	8007b9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b6e:	4b13      	ldr	r3, [pc, #76]	; (8007bbc <vTaskDelay+0x60>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <vTaskDelay+0x30>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	60bb      	str	r3, [r7, #8]
}
 8007b88:	bf00      	nop
 8007b8a:	e7fe      	b.n	8007b8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b8c:	f000 f88a 	bl	8007ca4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b90:	2100      	movs	r1, #0
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fdfc 	bl	8008790 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b98:	f000 f892 	bl	8007cc0 <xTaskResumeAll>
 8007b9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d107      	bne.n	8007bb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007ba4:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <vTaskDelay+0x64>)
 8007ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bb4:	bf00      	nop
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	20001648 	.word	0x20001648
 8007bc0:	e000ed04 	.word	0xe000ed04

08007bc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08a      	sub	sp, #40	; 0x28
 8007bc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bd2:	463a      	mov	r2, r7
 8007bd4:	1d39      	adds	r1, r7, #4
 8007bd6:	f107 0308 	add.w	r3, r7, #8
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe fd10 	bl	8006600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	9202      	str	r2, [sp, #8]
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	2300      	movs	r3, #0
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	460a      	mov	r2, r1
 8007bf2:	4924      	ldr	r1, [pc, #144]	; (8007c84 <vTaskStartScheduler+0xc0>)
 8007bf4:	4824      	ldr	r0, [pc, #144]	; (8007c88 <vTaskStartScheduler+0xc4>)
 8007bf6:	f7ff fdf9 	bl	80077ec <xTaskCreateStatic>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	4a23      	ldr	r2, [pc, #140]	; (8007c8c <vTaskStartScheduler+0xc8>)
 8007bfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c00:	4b22      	ldr	r3, [pc, #136]	; (8007c8c <vTaskStartScheduler+0xc8>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	e001      	b.n	8007c12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d102      	bne.n	8007c1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c18:	f000 fe0e 	bl	8008838 <xTimerCreateTimerTask>
 8007c1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d11b      	bne.n	8007c5c <vTaskStartScheduler+0x98>
	__asm volatile
 8007c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	613b      	str	r3, [r7, #16]
}
 8007c36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c38:	4b15      	ldr	r3, [pc, #84]	; (8007c90 <vTaskStartScheduler+0xcc>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3354      	adds	r3, #84	; 0x54
 8007c3e:	4a15      	ldr	r2, [pc, #84]	; (8007c94 <vTaskStartScheduler+0xd0>)
 8007c40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c42:	4b15      	ldr	r3, [pc, #84]	; (8007c98 <vTaskStartScheduler+0xd4>)
 8007c44:	f04f 32ff 	mov.w	r2, #4294967295
 8007c48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c4a:	4b14      	ldr	r3, [pc, #80]	; (8007c9c <vTaskStartScheduler+0xd8>)
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c50:	4b13      	ldr	r3, [pc, #76]	; (8007ca0 <vTaskStartScheduler+0xdc>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c56:	f001 f9cb 	bl	8008ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c5a:	e00e      	b.n	8007c7a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c62:	d10a      	bne.n	8007c7a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	60fb      	str	r3, [r7, #12]
}
 8007c76:	bf00      	nop
 8007c78:	e7fe      	b.n	8007c78 <vTaskStartScheduler+0xb4>
}
 8007c7a:	bf00      	nop
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	08027ce8 	.word	0x08027ce8
 8007c88:	080082c9 	.word	0x080082c9
 8007c8c:	20001644 	.word	0x20001644
 8007c90:	2000114c 	.word	0x2000114c
 8007c94:	20000098 	.word	0x20000098
 8007c98:	20001640 	.word	0x20001640
 8007c9c:	2000162c 	.word	0x2000162c
 8007ca0:	20001624 	.word	0x20001624

08007ca4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ca8:	4b04      	ldr	r3, [pc, #16]	; (8007cbc <vTaskSuspendAll+0x18>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3301      	adds	r3, #1
 8007cae:	4a03      	ldr	r2, [pc, #12]	; (8007cbc <vTaskSuspendAll+0x18>)
 8007cb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007cb2:	bf00      	nop
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	20001648 	.word	0x20001648

08007cc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cce:	4b42      	ldr	r3, [pc, #264]	; (8007dd8 <xTaskResumeAll+0x118>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10a      	bne.n	8007cec <xTaskResumeAll+0x2c>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	603b      	str	r3, [r7, #0]
}
 8007ce8:	bf00      	nop
 8007cea:	e7fe      	b.n	8007cea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cec:	f001 fa22 	bl	8009134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cf0:	4b39      	ldr	r3, [pc, #228]	; (8007dd8 <xTaskResumeAll+0x118>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	4a38      	ldr	r2, [pc, #224]	; (8007dd8 <xTaskResumeAll+0x118>)
 8007cf8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cfa:	4b37      	ldr	r3, [pc, #220]	; (8007dd8 <xTaskResumeAll+0x118>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d162      	bne.n	8007dc8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d02:	4b36      	ldr	r3, [pc, #216]	; (8007ddc <xTaskResumeAll+0x11c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d05e      	beq.n	8007dc8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d0a:	e02f      	b.n	8007d6c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d0c:	4b34      	ldr	r3, [pc, #208]	; (8007de0 <xTaskResumeAll+0x120>)
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3318      	adds	r3, #24
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fe fd2f 	bl	800677c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3304      	adds	r3, #4
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe fd2a 	bl	800677c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d2c:	4b2d      	ldr	r3, [pc, #180]	; (8007de4 <xTaskResumeAll+0x124>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d903      	bls.n	8007d3c <xTaskResumeAll+0x7c>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	4a2a      	ldr	r2, [pc, #168]	; (8007de4 <xTaskResumeAll+0x124>)
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d40:	4613      	mov	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4a27      	ldr	r2, [pc, #156]	; (8007de8 <xTaskResumeAll+0x128>)
 8007d4a:	441a      	add	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3304      	adds	r3, #4
 8007d50:	4619      	mov	r1, r3
 8007d52:	4610      	mov	r0, r2
 8007d54:	f7fe fcb5 	bl	80066c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5c:	4b23      	ldr	r3, [pc, #140]	; (8007dec <xTaskResumeAll+0x12c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d302      	bcc.n	8007d6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d66:	4b22      	ldr	r3, [pc, #136]	; (8007df0 <xTaskResumeAll+0x130>)
 8007d68:	2201      	movs	r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d6c:	4b1c      	ldr	r3, [pc, #112]	; (8007de0 <xTaskResumeAll+0x120>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1cb      	bne.n	8007d0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d7a:	f000 fb5f 	bl	800843c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d7e:	4b1d      	ldr	r3, [pc, #116]	; (8007df4 <xTaskResumeAll+0x134>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d010      	beq.n	8007dac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d8a:	f000 f847 	bl	8007e1c <xTaskIncrementTick>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007d94:	4b16      	ldr	r3, [pc, #88]	; (8007df0 <xTaskResumeAll+0x130>)
 8007d96:	2201      	movs	r2, #1
 8007d98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1f1      	bne.n	8007d8a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007da6:	4b13      	ldr	r3, [pc, #76]	; (8007df4 <xTaskResumeAll+0x134>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007dac:	4b10      	ldr	r3, [pc, #64]	; (8007df0 <xTaskResumeAll+0x130>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d009      	beq.n	8007dc8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007db4:	2301      	movs	r3, #1
 8007db6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007db8:	4b0f      	ldr	r3, [pc, #60]	; (8007df8 <xTaskResumeAll+0x138>)
 8007dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dc8:	f001 f9e4 	bl	8009194 <vPortExitCritical>

	return xAlreadyYielded;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20001648 	.word	0x20001648
 8007ddc:	20001620 	.word	0x20001620
 8007de0:	200015e0 	.word	0x200015e0
 8007de4:	20001628 	.word	0x20001628
 8007de8:	20001150 	.word	0x20001150
 8007dec:	2000114c 	.word	0x2000114c
 8007df0:	20001634 	.word	0x20001634
 8007df4:	20001630 	.word	0x20001630
 8007df8:	e000ed04 	.word	0xe000ed04

08007dfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e02:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <xTaskGetTickCount+0x1c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e08:	687b      	ldr	r3, [r7, #4]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	20001624 	.word	0x20001624

08007e1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e22:	2300      	movs	r3, #0
 8007e24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e26:	4b4f      	ldr	r3, [pc, #316]	; (8007f64 <xTaskIncrementTick+0x148>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f040 808f 	bne.w	8007f4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e30:	4b4d      	ldr	r3, [pc, #308]	; (8007f68 <xTaskIncrementTick+0x14c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3301      	adds	r3, #1
 8007e36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e38:	4a4b      	ldr	r2, [pc, #300]	; (8007f68 <xTaskIncrementTick+0x14c>)
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d120      	bne.n	8007e86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e44:	4b49      	ldr	r3, [pc, #292]	; (8007f6c <xTaskIncrementTick+0x150>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <xTaskIncrementTick+0x48>
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	603b      	str	r3, [r7, #0]
}
 8007e60:	bf00      	nop
 8007e62:	e7fe      	b.n	8007e62 <xTaskIncrementTick+0x46>
 8007e64:	4b41      	ldr	r3, [pc, #260]	; (8007f6c <xTaskIncrementTick+0x150>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	4b41      	ldr	r3, [pc, #260]	; (8007f70 <xTaskIncrementTick+0x154>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a3f      	ldr	r2, [pc, #252]	; (8007f6c <xTaskIncrementTick+0x150>)
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	4a3f      	ldr	r2, [pc, #252]	; (8007f70 <xTaskIncrementTick+0x154>)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	4b3e      	ldr	r3, [pc, #248]	; (8007f74 <xTaskIncrementTick+0x158>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	4a3d      	ldr	r2, [pc, #244]	; (8007f74 <xTaskIncrementTick+0x158>)
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	f000 fadb 	bl	800843c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e86:	4b3c      	ldr	r3, [pc, #240]	; (8007f78 <xTaskIncrementTick+0x15c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	693a      	ldr	r2, [r7, #16]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d349      	bcc.n	8007f24 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e90:	4b36      	ldr	r3, [pc, #216]	; (8007f6c <xTaskIncrementTick+0x150>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d104      	bne.n	8007ea4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e9a:	4b37      	ldr	r3, [pc, #220]	; (8007f78 <xTaskIncrementTick+0x15c>)
 8007e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea0:	601a      	str	r2, [r3, #0]
					break;
 8007ea2:	e03f      	b.n	8007f24 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ea4:	4b31      	ldr	r3, [pc, #196]	; (8007f6c <xTaskIncrementTick+0x150>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d203      	bcs.n	8007ec4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ebc:	4a2e      	ldr	r2, [pc, #184]	; (8007f78 <xTaskIncrementTick+0x15c>)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ec2:	e02f      	b.n	8007f24 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fe fc57 	bl	800677c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d004      	beq.n	8007ee0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	3318      	adds	r3, #24
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fe fc4e 	bl	800677c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee4:	4b25      	ldr	r3, [pc, #148]	; (8007f7c <xTaskIncrementTick+0x160>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d903      	bls.n	8007ef4 <xTaskIncrementTick+0xd8>
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef0:	4a22      	ldr	r2, [pc, #136]	; (8007f7c <xTaskIncrementTick+0x160>)
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef8:	4613      	mov	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4a1f      	ldr	r2, [pc, #124]	; (8007f80 <xTaskIncrementTick+0x164>)
 8007f02:	441a      	add	r2, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	3304      	adds	r3, #4
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	f7fe fbd9 	bl	80066c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f14:	4b1b      	ldr	r3, [pc, #108]	; (8007f84 <xTaskIncrementTick+0x168>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d3b8      	bcc.n	8007e90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f22:	e7b5      	b.n	8007e90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f24:	4b17      	ldr	r3, [pc, #92]	; (8007f84 <xTaskIncrementTick+0x168>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2a:	4915      	ldr	r1, [pc, #84]	; (8007f80 <xTaskIncrementTick+0x164>)
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	440b      	add	r3, r1
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d901      	bls.n	8007f40 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f40:	4b11      	ldr	r3, [pc, #68]	; (8007f88 <xTaskIncrementTick+0x16c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d007      	beq.n	8007f58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	617b      	str	r3, [r7, #20]
 8007f4c:	e004      	b.n	8007f58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f4e:	4b0f      	ldr	r3, [pc, #60]	; (8007f8c <xTaskIncrementTick+0x170>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3301      	adds	r3, #1
 8007f54:	4a0d      	ldr	r2, [pc, #52]	; (8007f8c <xTaskIncrementTick+0x170>)
 8007f56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f58:	697b      	ldr	r3, [r7, #20]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3718      	adds	r7, #24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20001648 	.word	0x20001648
 8007f68:	20001624 	.word	0x20001624
 8007f6c:	200015d8 	.word	0x200015d8
 8007f70:	200015dc 	.word	0x200015dc
 8007f74:	20001638 	.word	0x20001638
 8007f78:	20001640 	.word	0x20001640
 8007f7c:	20001628 	.word	0x20001628
 8007f80:	20001150 	.word	0x20001150
 8007f84:	2000114c 	.word	0x2000114c
 8007f88:	20001634 	.word	0x20001634
 8007f8c:	20001630 	.word	0x20001630

08007f90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f96:	4b2a      	ldr	r3, [pc, #168]	; (8008040 <vTaskSwitchContext+0xb0>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f9e:	4b29      	ldr	r3, [pc, #164]	; (8008044 <vTaskSwitchContext+0xb4>)
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fa4:	e046      	b.n	8008034 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007fa6:	4b27      	ldr	r3, [pc, #156]	; (8008044 <vTaskSwitchContext+0xb4>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fac:	4b26      	ldr	r3, [pc, #152]	; (8008048 <vTaskSwitchContext+0xb8>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	e010      	b.n	8007fd6 <vTaskSwitchContext+0x46>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <vTaskSwitchContext+0x40>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	607b      	str	r3, [r7, #4]
}
 8007fcc:	bf00      	nop
 8007fce:	e7fe      	b.n	8007fce <vTaskSwitchContext+0x3e>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	491d      	ldr	r1, [pc, #116]	; (800804c <vTaskSwitchContext+0xbc>)
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	440b      	add	r3, r1
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0e4      	beq.n	8007fb4 <vTaskSwitchContext+0x24>
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	4613      	mov	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4a15      	ldr	r2, [pc, #84]	; (800804c <vTaskSwitchContext+0xbc>)
 8007ff6:	4413      	add	r3, r2
 8007ff8:	60bb      	str	r3, [r7, #8]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	605a      	str	r2, [r3, #4]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	3308      	adds	r3, #8
 800800c:	429a      	cmp	r2, r3
 800800e:	d104      	bne.n	800801a <vTaskSwitchContext+0x8a>
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	605a      	str	r2, [r3, #4]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	4a0b      	ldr	r2, [pc, #44]	; (8008050 <vTaskSwitchContext+0xc0>)
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	4a08      	ldr	r2, [pc, #32]	; (8008048 <vTaskSwitchContext+0xb8>)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800802a:	4b09      	ldr	r3, [pc, #36]	; (8008050 <vTaskSwitchContext+0xc0>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3354      	adds	r3, #84	; 0x54
 8008030:	4a08      	ldr	r2, [pc, #32]	; (8008054 <vTaskSwitchContext+0xc4>)
 8008032:	6013      	str	r3, [r2, #0]
}
 8008034:	bf00      	nop
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	20001648 	.word	0x20001648
 8008044:	20001634 	.word	0x20001634
 8008048:	20001628 	.word	0x20001628
 800804c:	20001150 	.word	0x20001150
 8008050:	2000114c 	.word	0x2000114c
 8008054:	20000098 	.word	0x20000098

08008058 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10a      	bne.n	800807e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	60fb      	str	r3, [r7, #12]
}
 800807a:	bf00      	nop
 800807c:	e7fe      	b.n	800807c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800807e:	4b07      	ldr	r3, [pc, #28]	; (800809c <vTaskPlaceOnEventList+0x44>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3318      	adds	r3, #24
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7fe fb3f 	bl	800670a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800808c:	2101      	movs	r1, #1
 800808e:	6838      	ldr	r0, [r7, #0]
 8008090:	f000 fb7e 	bl	8008790 <prvAddCurrentTaskToDelayedList>
}
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	2000114c 	.word	0x2000114c

080080a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10a      	bne.n	80080c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	617b      	str	r3, [r7, #20]
}
 80080c4:	bf00      	nop
 80080c6:	e7fe      	b.n	80080c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080c8:	4b0a      	ldr	r3, [pc, #40]	; (80080f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3318      	adds	r3, #24
 80080ce:	4619      	mov	r1, r3
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f7fe faf6 	bl	80066c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80080dc:	f04f 33ff 	mov.w	r3, #4294967295
 80080e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	68b8      	ldr	r0, [r7, #8]
 80080e6:	f000 fb53 	bl	8008790 <prvAddCurrentTaskToDelayedList>
	}
 80080ea:	bf00      	nop
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	2000114c 	.word	0x2000114c

080080f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10a      	bne.n	8008124 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	60fb      	str	r3, [r7, #12]
}
 8008120:	bf00      	nop
 8008122:	e7fe      	b.n	8008122 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	3318      	adds	r3, #24
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe fb27 	bl	800677c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800812e:	4b1e      	ldr	r3, [pc, #120]	; (80081a8 <xTaskRemoveFromEventList+0xb0>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d11d      	bne.n	8008172 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	3304      	adds	r3, #4
 800813a:	4618      	mov	r0, r3
 800813c:	f7fe fb1e 	bl	800677c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008144:	4b19      	ldr	r3, [pc, #100]	; (80081ac <xTaskRemoveFromEventList+0xb4>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	429a      	cmp	r2, r3
 800814a:	d903      	bls.n	8008154 <xTaskRemoveFromEventList+0x5c>
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	4a16      	ldr	r2, [pc, #88]	; (80081ac <xTaskRemoveFromEventList+0xb4>)
 8008152:	6013      	str	r3, [r2, #0]
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4a13      	ldr	r2, [pc, #76]	; (80081b0 <xTaskRemoveFromEventList+0xb8>)
 8008162:	441a      	add	r2, r3
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	3304      	adds	r3, #4
 8008168:	4619      	mov	r1, r3
 800816a:	4610      	mov	r0, r2
 800816c:	f7fe faa9 	bl	80066c2 <vListInsertEnd>
 8008170:	e005      	b.n	800817e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	3318      	adds	r3, #24
 8008176:	4619      	mov	r1, r3
 8008178:	480e      	ldr	r0, [pc, #56]	; (80081b4 <xTaskRemoveFromEventList+0xbc>)
 800817a:	f7fe faa2 	bl	80066c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008182:	4b0d      	ldr	r3, [pc, #52]	; (80081b8 <xTaskRemoveFromEventList+0xc0>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008188:	429a      	cmp	r2, r3
 800818a:	d905      	bls.n	8008198 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800818c:	2301      	movs	r3, #1
 800818e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008190:	4b0a      	ldr	r3, [pc, #40]	; (80081bc <xTaskRemoveFromEventList+0xc4>)
 8008192:	2201      	movs	r2, #1
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	e001      	b.n	800819c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008198:	2300      	movs	r3, #0
 800819a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800819c:	697b      	ldr	r3, [r7, #20]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3718      	adds	r7, #24
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20001648 	.word	0x20001648
 80081ac:	20001628 	.word	0x20001628
 80081b0:	20001150 	.word	0x20001150
 80081b4:	200015e0 	.word	0x200015e0
 80081b8:	2000114c 	.word	0x2000114c
 80081bc:	20001634 	.word	0x20001634

080081c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80081c8:	4b06      	ldr	r3, [pc, #24]	; (80081e4 <vTaskInternalSetTimeOutState+0x24>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081d0:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <vTaskInternalSetTimeOutState+0x28>)
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	605a      	str	r2, [r3, #4]
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	20001638 	.word	0x20001638
 80081e8:	20001624 	.word	0x20001624

080081ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10a      	bne.n	8008212 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	613b      	str	r3, [r7, #16]
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10a      	bne.n	800822e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	60fb      	str	r3, [r7, #12]
}
 800822a:	bf00      	nop
 800822c:	e7fe      	b.n	800822c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800822e:	f000 ff81 	bl	8009134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008232:	4b1d      	ldr	r3, [pc, #116]	; (80082a8 <xTaskCheckForTimeOut+0xbc>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	69ba      	ldr	r2, [r7, #24]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824a:	d102      	bne.n	8008252 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800824c:	2300      	movs	r3, #0
 800824e:	61fb      	str	r3, [r7, #28]
 8008250:	e023      	b.n	800829a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	4b15      	ldr	r3, [pc, #84]	; (80082ac <xTaskCheckForTimeOut+0xc0>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	d007      	beq.n	800826e <xTaskCheckForTimeOut+0x82>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	429a      	cmp	r2, r3
 8008266:	d302      	bcc.n	800826e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008268:	2301      	movs	r3, #1
 800826a:	61fb      	str	r3, [r7, #28]
 800826c:	e015      	b.n	800829a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	429a      	cmp	r2, r3
 8008276:	d20b      	bcs.n	8008290 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	1ad2      	subs	r2, r2, r3
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7ff ff9b 	bl	80081c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800828a:	2300      	movs	r3, #0
 800828c:	61fb      	str	r3, [r7, #28]
 800828e:	e004      	b.n	800829a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008296:	2301      	movs	r3, #1
 8008298:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800829a:	f000 ff7b 	bl	8009194 <vPortExitCritical>

	return xReturn;
 800829e:	69fb      	ldr	r3, [r7, #28]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3720      	adds	r7, #32
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20001624 	.word	0x20001624
 80082ac:	20001638 	.word	0x20001638

080082b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80082b0:	b480      	push	{r7}
 80082b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082b4:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <vTaskMissedYield+0x14>)
 80082b6:	2201      	movs	r2, #1
 80082b8:	601a      	str	r2, [r3, #0]
}
 80082ba:	bf00      	nop
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	20001634 	.word	0x20001634

080082c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082d0:	f000 f852 	bl	8008378 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082d4:	4b06      	ldr	r3, [pc, #24]	; (80082f0 <prvIdleTask+0x28>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d9f9      	bls.n	80082d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80082dc:	4b05      	ldr	r3, [pc, #20]	; (80082f4 <prvIdleTask+0x2c>)
 80082de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082ec:	e7f0      	b.n	80082d0 <prvIdleTask+0x8>
 80082ee:	bf00      	nop
 80082f0:	20001150 	.word	0x20001150
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082fe:	2300      	movs	r3, #0
 8008300:	607b      	str	r3, [r7, #4]
 8008302:	e00c      	b.n	800831e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	4613      	mov	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4a12      	ldr	r2, [pc, #72]	; (8008358 <prvInitialiseTaskLists+0x60>)
 8008310:	4413      	add	r3, r2
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe f9a8 	bl	8006668 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	3301      	adds	r3, #1
 800831c:	607b      	str	r3, [r7, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b37      	cmp	r3, #55	; 0x37
 8008322:	d9ef      	bls.n	8008304 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008324:	480d      	ldr	r0, [pc, #52]	; (800835c <prvInitialiseTaskLists+0x64>)
 8008326:	f7fe f99f 	bl	8006668 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800832a:	480d      	ldr	r0, [pc, #52]	; (8008360 <prvInitialiseTaskLists+0x68>)
 800832c:	f7fe f99c 	bl	8006668 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008330:	480c      	ldr	r0, [pc, #48]	; (8008364 <prvInitialiseTaskLists+0x6c>)
 8008332:	f7fe f999 	bl	8006668 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008336:	480c      	ldr	r0, [pc, #48]	; (8008368 <prvInitialiseTaskLists+0x70>)
 8008338:	f7fe f996 	bl	8006668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800833c:	480b      	ldr	r0, [pc, #44]	; (800836c <prvInitialiseTaskLists+0x74>)
 800833e:	f7fe f993 	bl	8006668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008342:	4b0b      	ldr	r3, [pc, #44]	; (8008370 <prvInitialiseTaskLists+0x78>)
 8008344:	4a05      	ldr	r2, [pc, #20]	; (800835c <prvInitialiseTaskLists+0x64>)
 8008346:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008348:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <prvInitialiseTaskLists+0x7c>)
 800834a:	4a05      	ldr	r2, [pc, #20]	; (8008360 <prvInitialiseTaskLists+0x68>)
 800834c:	601a      	str	r2, [r3, #0]
}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20001150 	.word	0x20001150
 800835c:	200015b0 	.word	0x200015b0
 8008360:	200015c4 	.word	0x200015c4
 8008364:	200015e0 	.word	0x200015e0
 8008368:	200015f4 	.word	0x200015f4
 800836c:	2000160c 	.word	0x2000160c
 8008370:	200015d8 	.word	0x200015d8
 8008374:	200015dc 	.word	0x200015dc

08008378 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800837e:	e019      	b.n	80083b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008380:	f000 fed8 	bl	8009134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008384:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <prvCheckTasksWaitingTermination+0x50>)
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	3304      	adds	r3, #4
 8008390:	4618      	mov	r0, r3
 8008392:	f7fe f9f3 	bl	800677c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008396:	4b0d      	ldr	r3, [pc, #52]	; (80083cc <prvCheckTasksWaitingTermination+0x54>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3b01      	subs	r3, #1
 800839c:	4a0b      	ldr	r2, [pc, #44]	; (80083cc <prvCheckTasksWaitingTermination+0x54>)
 800839e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083a0:	4b0b      	ldr	r3, [pc, #44]	; (80083d0 <prvCheckTasksWaitingTermination+0x58>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	4a0a      	ldr	r2, [pc, #40]	; (80083d0 <prvCheckTasksWaitingTermination+0x58>)
 80083a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083aa:	f000 fef3 	bl	8009194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f810 	bl	80083d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083b4:	4b06      	ldr	r3, [pc, #24]	; (80083d0 <prvCheckTasksWaitingTermination+0x58>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e1      	bne.n	8008380 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083bc:	bf00      	nop
 80083be:	bf00      	nop
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	200015f4 	.word	0x200015f4
 80083cc:	20001620 	.word	0x20001620
 80083d0:	20001608 	.word	0x20001608

080083d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3354      	adds	r3, #84	; 0x54
 80083e0:	4618      	mov	r0, r3
 80083e2:	f01f f89b 	bl	802751c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d108      	bne.n	8008402 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f4:	4618      	mov	r0, r3
 80083f6:	f001 f88b 	bl	8009510 <vPortFree>
				vPortFree( pxTCB );
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 f888 	bl	8009510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008400:	e018      	b.n	8008434 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008408:	2b01      	cmp	r3, #1
 800840a:	d103      	bne.n	8008414 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 f87f 	bl	8009510 <vPortFree>
	}
 8008412:	e00f      	b.n	8008434 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800841a:	2b02      	cmp	r3, #2
 800841c:	d00a      	beq.n	8008434 <prvDeleteTCB+0x60>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	60fb      	str	r3, [r7, #12]
}
 8008430:	bf00      	nop
 8008432:	e7fe      	b.n	8008432 <prvDeleteTCB+0x5e>
	}
 8008434:	bf00      	nop
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008442:	4b0c      	ldr	r3, [pc, #48]	; (8008474 <prvResetNextTaskUnblockTime+0x38>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d104      	bne.n	8008456 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800844c:	4b0a      	ldr	r3, [pc, #40]	; (8008478 <prvResetNextTaskUnblockTime+0x3c>)
 800844e:	f04f 32ff 	mov.w	r2, #4294967295
 8008452:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008454:	e008      	b.n	8008468 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008456:	4b07      	ldr	r3, [pc, #28]	; (8008474 <prvResetNextTaskUnblockTime+0x38>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	4a04      	ldr	r2, [pc, #16]	; (8008478 <prvResetNextTaskUnblockTime+0x3c>)
 8008466:	6013      	str	r3, [r2, #0]
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	200015d8 	.word	0x200015d8
 8008478:	20001640 	.word	0x20001640

0800847c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008482:	4b0b      	ldr	r3, [pc, #44]	; (80084b0 <xTaskGetSchedulerState+0x34>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d102      	bne.n	8008490 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800848a:	2301      	movs	r3, #1
 800848c:	607b      	str	r3, [r7, #4]
 800848e:	e008      	b.n	80084a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008490:	4b08      	ldr	r3, [pc, #32]	; (80084b4 <xTaskGetSchedulerState+0x38>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d102      	bne.n	800849e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008498:	2302      	movs	r3, #2
 800849a:	607b      	str	r3, [r7, #4]
 800849c:	e001      	b.n	80084a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800849e:	2300      	movs	r3, #0
 80084a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084a2:	687b      	ldr	r3, [r7, #4]
	}
 80084a4:	4618      	mov	r0, r3
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	2000162c 	.word	0x2000162c
 80084b4:	20001648 	.word	0x20001648

080084b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d051      	beq.n	8008572 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d2:	4b2a      	ldr	r3, [pc, #168]	; (800857c <xTaskPriorityInherit+0xc4>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	429a      	cmp	r2, r3
 80084da:	d241      	bcs.n	8008560 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	db06      	blt.n	80084f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084e4:	4b25      	ldr	r3, [pc, #148]	; (800857c <xTaskPriorityInherit+0xc4>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	6959      	ldr	r1, [r3, #20]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fa:	4613      	mov	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4a1f      	ldr	r2, [pc, #124]	; (8008580 <xTaskPriorityInherit+0xc8>)
 8008504:	4413      	add	r3, r2
 8008506:	4299      	cmp	r1, r3
 8008508:	d122      	bne.n	8008550 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	3304      	adds	r3, #4
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe f934 	bl	800677c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008514:	4b19      	ldr	r3, [pc, #100]	; (800857c <xTaskPriorityInherit+0xc4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008522:	4b18      	ldr	r3, [pc, #96]	; (8008584 <xTaskPriorityInherit+0xcc>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	429a      	cmp	r2, r3
 8008528:	d903      	bls.n	8008532 <xTaskPriorityInherit+0x7a>
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852e:	4a15      	ldr	r2, [pc, #84]	; (8008584 <xTaskPriorityInherit+0xcc>)
 8008530:	6013      	str	r3, [r2, #0]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008536:	4613      	mov	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4a10      	ldr	r2, [pc, #64]	; (8008580 <xTaskPriorityInherit+0xc8>)
 8008540:	441a      	add	r2, r3
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	3304      	adds	r3, #4
 8008546:	4619      	mov	r1, r3
 8008548:	4610      	mov	r0, r2
 800854a:	f7fe f8ba 	bl	80066c2 <vListInsertEnd>
 800854e:	e004      	b.n	800855a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008550:	4b0a      	ldr	r3, [pc, #40]	; (800857c <xTaskPriorityInherit+0xc4>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800855a:	2301      	movs	r3, #1
 800855c:	60fb      	str	r3, [r7, #12]
 800855e:	e008      	b.n	8008572 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008564:	4b05      	ldr	r3, [pc, #20]	; (800857c <xTaskPriorityInherit+0xc4>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856a:	429a      	cmp	r2, r3
 800856c:	d201      	bcs.n	8008572 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800856e:	2301      	movs	r3, #1
 8008570:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008572:	68fb      	ldr	r3, [r7, #12]
	}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	2000114c 	.word	0x2000114c
 8008580:	20001150 	.word	0x20001150
 8008584:	20001628 	.word	0x20001628

08008588 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008594:	2300      	movs	r3, #0
 8008596:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d056      	beq.n	800864c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800859e:	4b2e      	ldr	r3, [pc, #184]	; (8008658 <xTaskPriorityDisinherit+0xd0>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d00a      	beq.n	80085be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	60fb      	str	r3, [r7, #12]
}
 80085ba:	bf00      	nop
 80085bc:	e7fe      	b.n	80085bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10a      	bne.n	80085dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	60bb      	str	r3, [r7, #8]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e0:	1e5a      	subs	r2, r3, #1
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d02c      	beq.n	800864c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d128      	bne.n	800864c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	3304      	adds	r3, #4
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fe f8bc 	bl	800677c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008610:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861c:	4b0f      	ldr	r3, [pc, #60]	; (800865c <xTaskPriorityDisinherit+0xd4>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	429a      	cmp	r2, r3
 8008622:	d903      	bls.n	800862c <xTaskPriorityDisinherit+0xa4>
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	4a0c      	ldr	r2, [pc, #48]	; (800865c <xTaskPriorityDisinherit+0xd4>)
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4a09      	ldr	r2, [pc, #36]	; (8008660 <xTaskPriorityDisinherit+0xd8>)
 800863a:	441a      	add	r2, r3
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	3304      	adds	r3, #4
 8008640:	4619      	mov	r1, r3
 8008642:	4610      	mov	r0, r2
 8008644:	f7fe f83d 	bl	80066c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008648:	2301      	movs	r3, #1
 800864a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800864c:	697b      	ldr	r3, [r7, #20]
	}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	2000114c 	.word	0x2000114c
 800865c:	20001628 	.word	0x20001628
 8008660:	20001150 	.word	0x20001150

08008664 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008664:	b580      	push	{r7, lr}
 8008666:	b088      	sub	sp, #32
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008672:	2301      	movs	r3, #1
 8008674:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d06a      	beq.n	8008752 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10a      	bne.n	800869a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	60fb      	str	r3, [r7, #12]
}
 8008696:	bf00      	nop
 8008698:	e7fe      	b.n	8008698 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d902      	bls.n	80086aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	e002      	b.n	80086b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b4:	69fa      	ldr	r2, [r7, #28]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d04b      	beq.n	8008752 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d146      	bne.n	8008752 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80086c4:	4b25      	ldr	r3, [pc, #148]	; (800875c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d10a      	bne.n	80086e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	60bb      	str	r3, [r7, #8]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	db04      	blt.n	8008702 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	6959      	ldr	r1, [r3, #20]
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4613      	mov	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4a13      	ldr	r2, [pc, #76]	; (8008760 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008712:	4413      	add	r3, r2
 8008714:	4299      	cmp	r1, r3
 8008716:	d11c      	bne.n	8008752 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	3304      	adds	r3, #4
 800871c:	4618      	mov	r0, r3
 800871e:	f7fe f82d 	bl	800677c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008726:	4b0f      	ldr	r3, [pc, #60]	; (8008764 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	429a      	cmp	r2, r3
 800872c:	d903      	bls.n	8008736 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008732:	4a0c      	ldr	r2, [pc, #48]	; (8008764 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008734:	6013      	str	r3, [r2, #0]
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873a:	4613      	mov	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4a07      	ldr	r2, [pc, #28]	; (8008760 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008744:	441a      	add	r2, r3
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	3304      	adds	r3, #4
 800874a:	4619      	mov	r1, r3
 800874c:	4610      	mov	r0, r2
 800874e:	f7fd ffb8 	bl	80066c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008752:	bf00      	nop
 8008754:	3720      	adds	r7, #32
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	2000114c 	.word	0x2000114c
 8008760:	20001150 	.word	0x20001150
 8008764:	20001628 	.word	0x20001628

08008768 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008768:	b480      	push	{r7}
 800876a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800876c:	4b07      	ldr	r3, [pc, #28]	; (800878c <pvTaskIncrementMutexHeldCount+0x24>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d004      	beq.n	800877e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008774:	4b05      	ldr	r3, [pc, #20]	; (800878c <pvTaskIncrementMutexHeldCount+0x24>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800877a:	3201      	adds	r2, #1
 800877c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800877e:	4b03      	ldr	r3, [pc, #12]	; (800878c <pvTaskIncrementMutexHeldCount+0x24>)
 8008780:	681b      	ldr	r3, [r3, #0]
	}
 8008782:	4618      	mov	r0, r3
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	2000114c 	.word	0x2000114c

08008790 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800879a:	4b21      	ldr	r3, [pc, #132]	; (8008820 <prvAddCurrentTaskToDelayedList+0x90>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087a0:	4b20      	ldr	r3, [pc, #128]	; (8008824 <prvAddCurrentTaskToDelayedList+0x94>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3304      	adds	r3, #4
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fd ffe8 	bl	800677c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b2:	d10a      	bne.n	80087ca <prvAddCurrentTaskToDelayedList+0x3a>
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d007      	beq.n	80087ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087ba:	4b1a      	ldr	r3, [pc, #104]	; (8008824 <prvAddCurrentTaskToDelayedList+0x94>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3304      	adds	r3, #4
 80087c0:	4619      	mov	r1, r3
 80087c2:	4819      	ldr	r0, [pc, #100]	; (8008828 <prvAddCurrentTaskToDelayedList+0x98>)
 80087c4:	f7fd ff7d 	bl	80066c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087c8:	e026      	b.n	8008818 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4413      	add	r3, r2
 80087d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80087d2:	4b14      	ldr	r3, [pc, #80]	; (8008824 <prvAddCurrentTaskToDelayedList+0x94>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d209      	bcs.n	80087f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087e2:	4b12      	ldr	r3, [pc, #72]	; (800882c <prvAddCurrentTaskToDelayedList+0x9c>)
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	4b0f      	ldr	r3, [pc, #60]	; (8008824 <prvAddCurrentTaskToDelayedList+0x94>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3304      	adds	r3, #4
 80087ec:	4619      	mov	r1, r3
 80087ee:	4610      	mov	r0, r2
 80087f0:	f7fd ff8b 	bl	800670a <vListInsert>
}
 80087f4:	e010      	b.n	8008818 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087f6:	4b0e      	ldr	r3, [pc, #56]	; (8008830 <prvAddCurrentTaskToDelayedList+0xa0>)
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	4b0a      	ldr	r3, [pc, #40]	; (8008824 <prvAddCurrentTaskToDelayedList+0x94>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3304      	adds	r3, #4
 8008800:	4619      	mov	r1, r3
 8008802:	4610      	mov	r0, r2
 8008804:	f7fd ff81 	bl	800670a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008808:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <prvAddCurrentTaskToDelayedList+0xa4>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	429a      	cmp	r2, r3
 8008810:	d202      	bcs.n	8008818 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008812:	4a08      	ldr	r2, [pc, #32]	; (8008834 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	6013      	str	r3, [r2, #0]
}
 8008818:	bf00      	nop
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20001624 	.word	0x20001624
 8008824:	2000114c 	.word	0x2000114c
 8008828:	2000160c 	.word	0x2000160c
 800882c:	200015dc 	.word	0x200015dc
 8008830:	200015d8 	.word	0x200015d8
 8008834:	20001640 	.word	0x20001640

08008838 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08a      	sub	sp, #40	; 0x28
 800883c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800883e:	2300      	movs	r3, #0
 8008840:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008842:	f000 fb07 	bl	8008e54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008846:	4b1c      	ldr	r3, [pc, #112]	; (80088b8 <xTimerCreateTimerTask+0x80>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d021      	beq.n	8008892 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008852:	2300      	movs	r3, #0
 8008854:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008856:	1d3a      	adds	r2, r7, #4
 8008858:	f107 0108 	add.w	r1, r7, #8
 800885c:	f107 030c 	add.w	r3, r7, #12
 8008860:	4618      	mov	r0, r3
 8008862:	f7fd fee7 	bl	8006634 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	9202      	str	r2, [sp, #8]
 800886e:	9301      	str	r3, [sp, #4]
 8008870:	2302      	movs	r3, #2
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	2300      	movs	r3, #0
 8008876:	460a      	mov	r2, r1
 8008878:	4910      	ldr	r1, [pc, #64]	; (80088bc <xTimerCreateTimerTask+0x84>)
 800887a:	4811      	ldr	r0, [pc, #68]	; (80088c0 <xTimerCreateTimerTask+0x88>)
 800887c:	f7fe ffb6 	bl	80077ec <xTaskCreateStatic>
 8008880:	4603      	mov	r3, r0
 8008882:	4a10      	ldr	r2, [pc, #64]	; (80088c4 <xTimerCreateTimerTask+0x8c>)
 8008884:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008886:	4b0f      	ldr	r3, [pc, #60]	; (80088c4 <xTimerCreateTimerTask+0x8c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800888e:	2301      	movs	r3, #1
 8008890:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10a      	bne.n	80088ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	613b      	str	r3, [r7, #16]
}
 80088aa:	bf00      	nop
 80088ac:	e7fe      	b.n	80088ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80088ae:	697b      	ldr	r3, [r7, #20]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3718      	adds	r7, #24
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	2000167c 	.word	0x2000167c
 80088bc:	08027cf0 	.word	0x08027cf0
 80088c0:	080089fd 	.word	0x080089fd
 80088c4:	20001680 	.word	0x20001680

080088c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b08a      	sub	sp, #40	; 0x28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80088d6:	2300      	movs	r3, #0
 80088d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10a      	bne.n	80088f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	623b      	str	r3, [r7, #32]
}
 80088f2:	bf00      	nop
 80088f4:	e7fe      	b.n	80088f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80088f6:	4b1a      	ldr	r3, [pc, #104]	; (8008960 <xTimerGenericCommand+0x98>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d02a      	beq.n	8008954 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	2b05      	cmp	r3, #5
 800890e:	dc18      	bgt.n	8008942 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008910:	f7ff fdb4 	bl	800847c <xTaskGetSchedulerState>
 8008914:	4603      	mov	r3, r0
 8008916:	2b02      	cmp	r3, #2
 8008918:	d109      	bne.n	800892e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800891a:	4b11      	ldr	r3, [pc, #68]	; (8008960 <xTimerGenericCommand+0x98>)
 800891c:	6818      	ldr	r0, [r3, #0]
 800891e:	f107 0110 	add.w	r1, r7, #16
 8008922:	2300      	movs	r3, #0
 8008924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008926:	f7fe f8fb 	bl	8006b20 <xQueueGenericSend>
 800892a:	6278      	str	r0, [r7, #36]	; 0x24
 800892c:	e012      	b.n	8008954 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800892e:	4b0c      	ldr	r3, [pc, #48]	; (8008960 <xTimerGenericCommand+0x98>)
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	f107 0110 	add.w	r1, r7, #16
 8008936:	2300      	movs	r3, #0
 8008938:	2200      	movs	r2, #0
 800893a:	f7fe f8f1 	bl	8006b20 <xQueueGenericSend>
 800893e:	6278      	str	r0, [r7, #36]	; 0x24
 8008940:	e008      	b.n	8008954 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008942:	4b07      	ldr	r3, [pc, #28]	; (8008960 <xTimerGenericCommand+0x98>)
 8008944:	6818      	ldr	r0, [r3, #0]
 8008946:	f107 0110 	add.w	r1, r7, #16
 800894a:	2300      	movs	r3, #0
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	f7fe f9e5 	bl	8006d1c <xQueueGenericSendFromISR>
 8008952:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008956:	4618      	mov	r0, r3
 8008958:	3728      	adds	r7, #40	; 0x28
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	2000167c 	.word	0x2000167c

08008964 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b088      	sub	sp, #32
 8008968:	af02      	add	r7, sp, #8
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800896e:	4b22      	ldr	r3, [pc, #136]	; (80089f8 <prvProcessExpiredTimer+0x94>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	3304      	adds	r3, #4
 800897c:	4618      	mov	r0, r3
 800897e:	f7fd fefd 	bl	800677c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008988:	f003 0304 	and.w	r3, r3, #4
 800898c:	2b00      	cmp	r3, #0
 800898e:	d022      	beq.n	80089d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	699a      	ldr	r2, [r3, #24]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	18d1      	adds	r1, r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	6978      	ldr	r0, [r7, #20]
 800899e:	f000 f8d1 	bl	8008b44 <prvInsertTimerInActiveList>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d01f      	beq.n	80089e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089a8:	2300      	movs	r3, #0
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	2300      	movs	r3, #0
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	2100      	movs	r1, #0
 80089b2:	6978      	ldr	r0, [r7, #20]
 80089b4:	f7ff ff88 	bl	80088c8 <xTimerGenericCommand>
 80089b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d113      	bne.n	80089e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	60fb      	str	r3, [r7, #12]
}
 80089d2:	bf00      	nop
 80089d4:	e7fe      	b.n	80089d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089dc:	f023 0301 	bic.w	r3, r3, #1
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	6978      	ldr	r0, [r7, #20]
 80089ee:	4798      	blx	r3
}
 80089f0:	bf00      	nop
 80089f2:	3718      	adds	r7, #24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20001674 	.word	0x20001674

080089fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a04:	f107 0308 	add.w	r3, r7, #8
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 f857 	bl	8008abc <prvGetNextExpireTime>
 8008a0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	4619      	mov	r1, r3
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 f803 	bl	8008a20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008a1a:	f000 f8d5 	bl	8008bc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a1e:	e7f1      	b.n	8008a04 <prvTimerTask+0x8>

08008a20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008a2a:	f7ff f93b 	bl	8007ca4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a2e:	f107 0308 	add.w	r3, r7, #8
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 f866 	bl	8008b04 <prvSampleTimeNow>
 8008a38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d130      	bne.n	8008aa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10a      	bne.n	8008a5c <prvProcessTimerOrBlockTask+0x3c>
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d806      	bhi.n	8008a5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008a4e:	f7ff f937 	bl	8007cc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008a52:	68f9      	ldr	r1, [r7, #12]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff ff85 	bl	8008964 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008a5a:	e024      	b.n	8008aa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d008      	beq.n	8008a74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a62:	4b13      	ldr	r3, [pc, #76]	; (8008ab0 <prvProcessTimerOrBlockTask+0x90>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d101      	bne.n	8008a70 <prvProcessTimerOrBlockTask+0x50>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e000      	b.n	8008a72 <prvProcessTimerOrBlockTask+0x52>
 8008a70:	2300      	movs	r3, #0
 8008a72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a74:	4b0f      	ldr	r3, [pc, #60]	; (8008ab4 <prvProcessTimerOrBlockTask+0x94>)
 8008a76:	6818      	ldr	r0, [r3, #0]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	4619      	mov	r1, r3
 8008a82:	f7fe fe7f 	bl	8007784 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a86:	f7ff f91b 	bl	8007cc0 <xTaskResumeAll>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10a      	bne.n	8008aa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a90:	4b09      	ldr	r3, [pc, #36]	; (8008ab8 <prvProcessTimerOrBlockTask+0x98>)
 8008a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	f3bf 8f6f 	isb	sy
}
 8008aa0:	e001      	b.n	8008aa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008aa2:	f7ff f90d 	bl	8007cc0 <xTaskResumeAll>
}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	20001678 	.word	0x20001678
 8008ab4:	2000167c 	.word	0x2000167c
 8008ab8:	e000ed04 	.word	0xe000ed04

08008abc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ac4:	4b0e      	ldr	r3, [pc, #56]	; (8008b00 <prvGetNextExpireTime+0x44>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <prvGetNextExpireTime+0x16>
 8008ace:	2201      	movs	r2, #1
 8008ad0:	e000      	b.n	8008ad4 <prvGetNextExpireTime+0x18>
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d105      	bne.n	8008aec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ae0:	4b07      	ldr	r3, [pc, #28]	; (8008b00 <prvGetNextExpireTime+0x44>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	e001      	b.n	8008af0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008aec:	2300      	movs	r3, #0
 8008aee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008af0:	68fb      	ldr	r3, [r7, #12]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3714      	adds	r7, #20
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	20001674 	.word	0x20001674

08008b04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008b0c:	f7ff f976 	bl	8007dfc <xTaskGetTickCount>
 8008b10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008b12:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <prvSampleTimeNow+0x3c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d205      	bcs.n	8008b28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008b1c:	f000 f936 	bl	8008d8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	e002      	b.n	8008b2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008b2e:	4a04      	ldr	r2, [pc, #16]	; (8008b40 <prvSampleTimeNow+0x3c>)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008b34:	68fb      	ldr	r3, [r7, #12]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	20001684 	.word	0x20001684

08008b44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
 8008b50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008b52:	2300      	movs	r3, #0
 8008b54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d812      	bhi.n	8008b90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	1ad2      	subs	r2, r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	699b      	ldr	r3, [r3, #24]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d302      	bcc.n	8008b7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	617b      	str	r3, [r7, #20]
 8008b7c:	e01b      	b.n	8008bb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b7e:	4b10      	ldr	r3, [pc, #64]	; (8008bc0 <prvInsertTimerInActiveList+0x7c>)
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3304      	adds	r3, #4
 8008b86:	4619      	mov	r1, r3
 8008b88:	4610      	mov	r0, r2
 8008b8a:	f7fd fdbe 	bl	800670a <vListInsert>
 8008b8e:	e012      	b.n	8008bb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d206      	bcs.n	8008ba6 <prvInsertTimerInActiveList+0x62>
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d302      	bcc.n	8008ba6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	617b      	str	r3, [r7, #20]
 8008ba4:	e007      	b.n	8008bb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ba6:	4b07      	ldr	r3, [pc, #28]	; (8008bc4 <prvInsertTimerInActiveList+0x80>)
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3304      	adds	r3, #4
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	f7fd fdaa 	bl	800670a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008bb6:	697b      	ldr	r3, [r7, #20]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3718      	adds	r7, #24
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	20001678 	.word	0x20001678
 8008bc4:	20001674 	.word	0x20001674

08008bc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b08e      	sub	sp, #56	; 0x38
 8008bcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008bce:	e0ca      	b.n	8008d66 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	da18      	bge.n	8008c08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008bd6:	1d3b      	adds	r3, r7, #4
 8008bd8:	3304      	adds	r3, #4
 8008bda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10a      	bne.n	8008bf8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	61fb      	str	r3, [r7, #28]
}
 8008bf4:	bf00      	nop
 8008bf6:	e7fe      	b.n	8008bf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bfe:	6850      	ldr	r0, [r2, #4]
 8008c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c02:	6892      	ldr	r2, [r2, #8]
 8008c04:	4611      	mov	r1, r2
 8008c06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f2c0 80aa 	blt.w	8008d64 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d004      	beq.n	8008c26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	3304      	adds	r3, #4
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fd fdab 	bl	800677c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c26:	463b      	mov	r3, r7
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7ff ff6b 	bl	8008b04 <prvSampleTimeNow>
 8008c2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b09      	cmp	r3, #9
 8008c34:	f200 8097 	bhi.w	8008d66 <prvProcessReceivedCommands+0x19e>
 8008c38:	a201      	add	r2, pc, #4	; (adr r2, 8008c40 <prvProcessReceivedCommands+0x78>)
 8008c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3e:	bf00      	nop
 8008c40:	08008c69 	.word	0x08008c69
 8008c44:	08008c69 	.word	0x08008c69
 8008c48:	08008c69 	.word	0x08008c69
 8008c4c:	08008cdd 	.word	0x08008cdd
 8008c50:	08008cf1 	.word	0x08008cf1
 8008c54:	08008d3b 	.word	0x08008d3b
 8008c58:	08008c69 	.word	0x08008c69
 8008c5c:	08008c69 	.word	0x08008c69
 8008c60:	08008cdd 	.word	0x08008cdd
 8008c64:	08008cf1 	.word	0x08008cf1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c6e:	f043 0301 	orr.w	r3, r3, #1
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	18d1      	adds	r1, r2, r3
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c88:	f7ff ff5c 	bl	8008b44 <prvInsertTimerInActiveList>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d069      	beq.n	8008d66 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c94:	6a1b      	ldr	r3, [r3, #32]
 8008c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ca0:	f003 0304 	and.w	r3, r3, #4
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d05e      	beq.n	8008d66 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	441a      	add	r2, r3
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cba:	f7ff fe05 	bl	80088c8 <xTimerGenericCommand>
 8008cbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d14f      	bne.n	8008d66 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cca:	f383 8811 	msr	BASEPRI, r3
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	61bb      	str	r3, [r7, #24]
}
 8008cd8:	bf00      	nop
 8008cda:	e7fe      	b.n	8008cda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ce2:	f023 0301 	bic.w	r3, r3, #1
 8008ce6:	b2da      	uxtb	r2, r3
 8008ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008cee:	e03a      	b.n	8008d66 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cf6:	f043 0301 	orr.w	r3, r3, #1
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	617b      	str	r3, [r7, #20]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d28:	699a      	ldr	r2, [r3, #24]
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	18d1      	adds	r1, r2, r3
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d34:	f7ff ff06 	bl	8008b44 <prvInsertTimerInActiveList>
					break;
 8008d38:	e015      	b.n	8008d66 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d40:	f003 0302 	and.w	r3, r3, #2
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d103      	bne.n	8008d50 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d4a:	f000 fbe1 	bl	8009510 <vPortFree>
 8008d4e:	e00a      	b.n	8008d66 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d56:	f023 0301 	bic.w	r3, r3, #1
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d62:	e000      	b.n	8008d66 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008d64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d66:	4b08      	ldr	r3, [pc, #32]	; (8008d88 <prvProcessReceivedCommands+0x1c0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	1d39      	adds	r1, r7, #4
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe f8fc 	bl	8006f6c <xQueueReceive>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f47f af2a 	bne.w	8008bd0 <prvProcessReceivedCommands+0x8>
	}
}
 8008d7c:	bf00      	nop
 8008d7e:	bf00      	nop
 8008d80:	3730      	adds	r7, #48	; 0x30
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	2000167c 	.word	0x2000167c

08008d8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d92:	e048      	b.n	8008e26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d94:	4b2d      	ldr	r3, [pc, #180]	; (8008e4c <prvSwitchTimerLists+0xc0>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d9e:	4b2b      	ldr	r3, [pc, #172]	; (8008e4c <prvSwitchTimerLists+0xc0>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	3304      	adds	r3, #4
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fd fce5 	bl	800677c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dc0:	f003 0304 	and.w	r3, r3, #4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d02e      	beq.n	8008e26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	4413      	add	r3, r2
 8008dd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d90e      	bls.n	8008df8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008de6:	4b19      	ldr	r3, [pc, #100]	; (8008e4c <prvSwitchTimerLists+0xc0>)
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3304      	adds	r3, #4
 8008dee:	4619      	mov	r1, r3
 8008df0:	4610      	mov	r0, r2
 8008df2:	f7fd fc8a 	bl	800670a <vListInsert>
 8008df6:	e016      	b.n	8008e26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008df8:	2300      	movs	r3, #0
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	2100      	movs	r1, #0
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f7ff fd60 	bl	80088c8 <xTimerGenericCommand>
 8008e08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10a      	bne.n	8008e26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	603b      	str	r3, [r7, #0]
}
 8008e22:	bf00      	nop
 8008e24:	e7fe      	b.n	8008e24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e26:	4b09      	ldr	r3, [pc, #36]	; (8008e4c <prvSwitchTimerLists+0xc0>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1b1      	bne.n	8008d94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008e30:	4b06      	ldr	r3, [pc, #24]	; (8008e4c <prvSwitchTimerLists+0xc0>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008e36:	4b06      	ldr	r3, [pc, #24]	; (8008e50 <prvSwitchTimerLists+0xc4>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a04      	ldr	r2, [pc, #16]	; (8008e4c <prvSwitchTimerLists+0xc0>)
 8008e3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008e3e:	4a04      	ldr	r2, [pc, #16]	; (8008e50 <prvSwitchTimerLists+0xc4>)
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	6013      	str	r3, [r2, #0]
}
 8008e44:	bf00      	nop
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	20001674 	.word	0x20001674
 8008e50:	20001678 	.word	0x20001678

08008e54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e5a:	f000 f96b 	bl	8009134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e5e:	4b15      	ldr	r3, [pc, #84]	; (8008eb4 <prvCheckForValidListAndQueue+0x60>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d120      	bne.n	8008ea8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e66:	4814      	ldr	r0, [pc, #80]	; (8008eb8 <prvCheckForValidListAndQueue+0x64>)
 8008e68:	f7fd fbfe 	bl	8006668 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e6c:	4813      	ldr	r0, [pc, #76]	; (8008ebc <prvCheckForValidListAndQueue+0x68>)
 8008e6e:	f7fd fbfb 	bl	8006668 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e72:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <prvCheckForValidListAndQueue+0x6c>)
 8008e74:	4a10      	ldr	r2, [pc, #64]	; (8008eb8 <prvCheckForValidListAndQueue+0x64>)
 8008e76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e78:	4b12      	ldr	r3, [pc, #72]	; (8008ec4 <prvCheckForValidListAndQueue+0x70>)
 8008e7a:	4a10      	ldr	r2, [pc, #64]	; (8008ebc <prvCheckForValidListAndQueue+0x68>)
 8008e7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e7e:	2300      	movs	r3, #0
 8008e80:	9300      	str	r3, [sp, #0]
 8008e82:	4b11      	ldr	r3, [pc, #68]	; (8008ec8 <prvCheckForValidListAndQueue+0x74>)
 8008e84:	4a11      	ldr	r2, [pc, #68]	; (8008ecc <prvCheckForValidListAndQueue+0x78>)
 8008e86:	2110      	movs	r1, #16
 8008e88:	200a      	movs	r0, #10
 8008e8a:	f7fd fd09 	bl	80068a0 <xQueueGenericCreateStatic>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	4a08      	ldr	r2, [pc, #32]	; (8008eb4 <prvCheckForValidListAndQueue+0x60>)
 8008e92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e94:	4b07      	ldr	r3, [pc, #28]	; (8008eb4 <prvCheckForValidListAndQueue+0x60>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e9c:	4b05      	ldr	r3, [pc, #20]	; (8008eb4 <prvCheckForValidListAndQueue+0x60>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	490b      	ldr	r1, [pc, #44]	; (8008ed0 <prvCheckForValidListAndQueue+0x7c>)
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fe fc1a 	bl	80076dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ea8:	f000 f974 	bl	8009194 <vPortExitCritical>
}
 8008eac:	bf00      	nop
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	2000167c 	.word	0x2000167c
 8008eb8:	2000164c 	.word	0x2000164c
 8008ebc:	20001660 	.word	0x20001660
 8008ec0:	20001674 	.word	0x20001674
 8008ec4:	20001678 	.word	0x20001678
 8008ec8:	20001728 	.word	0x20001728
 8008ecc:	20001688 	.word	0x20001688
 8008ed0:	08027cf8 	.word	0x08027cf8

08008ed4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	3b04      	subs	r3, #4
 8008ee4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008eec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3b04      	subs	r3, #4
 8008ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f023 0201 	bic.w	r2, r3, #1
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3b04      	subs	r3, #4
 8008f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f04:	4a0c      	ldr	r2, [pc, #48]	; (8008f38 <pxPortInitialiseStack+0x64>)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	3b14      	subs	r3, #20
 8008f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3b04      	subs	r3, #4
 8008f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f06f 0202 	mvn.w	r2, #2
 8008f22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	3b20      	subs	r3, #32
 8008f28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	08008f3d 	.word	0x08008f3d

08008f3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f46:	4b12      	ldr	r3, [pc, #72]	; (8008f90 <prvTaskExitError+0x54>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4e:	d00a      	beq.n	8008f66 <prvTaskExitError+0x2a>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	60fb      	str	r3, [r7, #12]
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <prvTaskExitError+0x28>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60bb      	str	r3, [r7, #8]
}
 8008f78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f7a:	bf00      	nop
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d0fc      	beq.n	8008f7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f82:	bf00      	nop
 8008f84:	bf00      	nop
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	20000010 	.word	0x20000010
	...

08008fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008fa0:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <pxCurrentTCBConst2>)
 8008fa2:	6819      	ldr	r1, [r3, #0]
 8008fa4:	6808      	ldr	r0, [r1, #0]
 8008fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008faa:	f380 8809 	msr	PSP, r0
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f04f 0000 	mov.w	r0, #0
 8008fb6:	f380 8811 	msr	BASEPRI, r0
 8008fba:	4770      	bx	lr
 8008fbc:	f3af 8000 	nop.w

08008fc0 <pxCurrentTCBConst2>:
 8008fc0:	2000114c 	.word	0x2000114c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008fc4:	bf00      	nop
 8008fc6:	bf00      	nop

08008fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008fc8:	4808      	ldr	r0, [pc, #32]	; (8008fec <prvPortStartFirstTask+0x24>)
 8008fca:	6800      	ldr	r0, [r0, #0]
 8008fcc:	6800      	ldr	r0, [r0, #0]
 8008fce:	f380 8808 	msr	MSP, r0
 8008fd2:	f04f 0000 	mov.w	r0, #0
 8008fd6:	f380 8814 	msr	CONTROL, r0
 8008fda:	b662      	cpsie	i
 8008fdc:	b661      	cpsie	f
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	df00      	svc	0
 8008fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008fea:	bf00      	nop
 8008fec:	e000ed08 	.word	0xe000ed08

08008ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ff6:	4b46      	ldr	r3, [pc, #280]	; (8009110 <xPortStartScheduler+0x120>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a46      	ldr	r2, [pc, #280]	; (8009114 <xPortStartScheduler+0x124>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d10a      	bne.n	8009016 <xPortStartScheduler+0x26>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	613b      	str	r3, [r7, #16]
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009016:	4b3e      	ldr	r3, [pc, #248]	; (8009110 <xPortStartScheduler+0x120>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a3f      	ldr	r2, [pc, #252]	; (8009118 <xPortStartScheduler+0x128>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d10a      	bne.n	8009036 <xPortStartScheduler+0x46>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	60fb      	str	r3, [r7, #12]
}
 8009032:	bf00      	nop
 8009034:	e7fe      	b.n	8009034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009036:	4b39      	ldr	r3, [pc, #228]	; (800911c <xPortStartScheduler+0x12c>)
 8009038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	b2db      	uxtb	r3, r3
 8009040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	22ff      	movs	r2, #255	; 0xff
 8009046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009050:	78fb      	ldrb	r3, [r7, #3]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009058:	b2da      	uxtb	r2, r3
 800905a:	4b31      	ldr	r3, [pc, #196]	; (8009120 <xPortStartScheduler+0x130>)
 800905c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800905e:	4b31      	ldr	r3, [pc, #196]	; (8009124 <xPortStartScheduler+0x134>)
 8009060:	2207      	movs	r2, #7
 8009062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009064:	e009      	b.n	800907a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009066:	4b2f      	ldr	r3, [pc, #188]	; (8009124 <xPortStartScheduler+0x134>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3b01      	subs	r3, #1
 800906c:	4a2d      	ldr	r2, [pc, #180]	; (8009124 <xPortStartScheduler+0x134>)
 800906e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	b2db      	uxtb	r3, r3
 8009074:	005b      	lsls	r3, r3, #1
 8009076:	b2db      	uxtb	r3, r3
 8009078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800907a:	78fb      	ldrb	r3, [r7, #3]
 800907c:	b2db      	uxtb	r3, r3
 800907e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009082:	2b80      	cmp	r3, #128	; 0x80
 8009084:	d0ef      	beq.n	8009066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009086:	4b27      	ldr	r3, [pc, #156]	; (8009124 <xPortStartScheduler+0x134>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f1c3 0307 	rsb	r3, r3, #7
 800908e:	2b04      	cmp	r3, #4
 8009090:	d00a      	beq.n	80090a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009096:	f383 8811 	msr	BASEPRI, r3
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	60bb      	str	r3, [r7, #8]
}
 80090a4:	bf00      	nop
 80090a6:	e7fe      	b.n	80090a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80090a8:	4b1e      	ldr	r3, [pc, #120]	; (8009124 <xPortStartScheduler+0x134>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	021b      	lsls	r3, r3, #8
 80090ae:	4a1d      	ldr	r2, [pc, #116]	; (8009124 <xPortStartScheduler+0x134>)
 80090b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80090b2:	4b1c      	ldr	r3, [pc, #112]	; (8009124 <xPortStartScheduler+0x134>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090ba:	4a1a      	ldr	r2, [pc, #104]	; (8009124 <xPortStartScheduler+0x134>)
 80090bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80090c6:	4b18      	ldr	r3, [pc, #96]	; (8009128 <xPortStartScheduler+0x138>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a17      	ldr	r2, [pc, #92]	; (8009128 <xPortStartScheduler+0x138>)
 80090cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80090d2:	4b15      	ldr	r3, [pc, #84]	; (8009128 <xPortStartScheduler+0x138>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a14      	ldr	r2, [pc, #80]	; (8009128 <xPortStartScheduler+0x138>)
 80090d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80090dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80090de:	f000 f8dd 	bl	800929c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090e2:	4b12      	ldr	r3, [pc, #72]	; (800912c <xPortStartScheduler+0x13c>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80090e8:	f000 f8fc 	bl	80092e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80090ec:	4b10      	ldr	r3, [pc, #64]	; (8009130 <xPortStartScheduler+0x140>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a0f      	ldr	r2, [pc, #60]	; (8009130 <xPortStartScheduler+0x140>)
 80090f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80090f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80090f8:	f7ff ff66 	bl	8008fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80090fc:	f7fe ff48 	bl	8007f90 <vTaskSwitchContext>
	prvTaskExitError();
 8009100:	f7ff ff1c 	bl	8008f3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	e000ed00 	.word	0xe000ed00
 8009114:	410fc271 	.word	0x410fc271
 8009118:	410fc270 	.word	0x410fc270
 800911c:	e000e400 	.word	0xe000e400
 8009120:	20001778 	.word	0x20001778
 8009124:	2000177c 	.word	0x2000177c
 8009128:	e000ed20 	.word	0xe000ed20
 800912c:	20000010 	.word	0x20000010
 8009130:	e000ef34 	.word	0xe000ef34

08009134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
	__asm volatile
 800913a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	607b      	str	r3, [r7, #4]
}
 800914c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800914e:	4b0f      	ldr	r3, [pc, #60]	; (800918c <vPortEnterCritical+0x58>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3301      	adds	r3, #1
 8009154:	4a0d      	ldr	r2, [pc, #52]	; (800918c <vPortEnterCritical+0x58>)
 8009156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009158:	4b0c      	ldr	r3, [pc, #48]	; (800918c <vPortEnterCritical+0x58>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d10f      	bne.n	8009180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009160:	4b0b      	ldr	r3, [pc, #44]	; (8009190 <vPortEnterCritical+0x5c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00a      	beq.n	8009180 <vPortEnterCritical+0x4c>
	__asm volatile
 800916a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	603b      	str	r3, [r7, #0]
}
 800917c:	bf00      	nop
 800917e:	e7fe      	b.n	800917e <vPortEnterCritical+0x4a>
	}
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr
 800918c:	20000010 	.word	0x20000010
 8009190:	e000ed04 	.word	0xe000ed04

08009194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800919a:	4b12      	ldr	r3, [pc, #72]	; (80091e4 <vPortExitCritical+0x50>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10a      	bne.n	80091b8 <vPortExitCritical+0x24>
	__asm volatile
 80091a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a6:	f383 8811 	msr	BASEPRI, r3
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	607b      	str	r3, [r7, #4]
}
 80091b4:	bf00      	nop
 80091b6:	e7fe      	b.n	80091b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80091b8:	4b0a      	ldr	r3, [pc, #40]	; (80091e4 <vPortExitCritical+0x50>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3b01      	subs	r3, #1
 80091be:	4a09      	ldr	r2, [pc, #36]	; (80091e4 <vPortExitCritical+0x50>)
 80091c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80091c2:	4b08      	ldr	r3, [pc, #32]	; (80091e4 <vPortExitCritical+0x50>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d105      	bne.n	80091d6 <vPortExitCritical+0x42>
 80091ca:	2300      	movs	r3, #0
 80091cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	f383 8811 	msr	BASEPRI, r3
}
 80091d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80091d6:	bf00      	nop
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	20000010 	.word	0x20000010
	...

080091f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80091f0:	f3ef 8009 	mrs	r0, PSP
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	4b15      	ldr	r3, [pc, #84]	; (8009250 <pxCurrentTCBConst>)
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	f01e 0f10 	tst.w	lr, #16
 8009200:	bf08      	it	eq
 8009202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920a:	6010      	str	r0, [r2, #0]
 800920c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009214:	f380 8811 	msr	BASEPRI, r0
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f7fe feb6 	bl	8007f90 <vTaskSwitchContext>
 8009224:	f04f 0000 	mov.w	r0, #0
 8009228:	f380 8811 	msr	BASEPRI, r0
 800922c:	bc09      	pop	{r0, r3}
 800922e:	6819      	ldr	r1, [r3, #0]
 8009230:	6808      	ldr	r0, [r1, #0]
 8009232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009236:	f01e 0f10 	tst.w	lr, #16
 800923a:	bf08      	it	eq
 800923c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009240:	f380 8809 	msr	PSP, r0
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	f3af 8000 	nop.w

08009250 <pxCurrentTCBConst>:
 8009250:	2000114c 	.word	0x2000114c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009254:	bf00      	nop
 8009256:	bf00      	nop

08009258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
	__asm volatile
 800925e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	607b      	str	r3, [r7, #4]
}
 8009270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009272:	f7fe fdd3 	bl	8007e1c <xTaskIncrementTick>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <xPortSysTickHandler+0x40>)
 800927e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	2300      	movs	r3, #0
 8009286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	f383 8811 	msr	BASEPRI, r3
}
 800928e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009290:	bf00      	nop
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	e000ed04 	.word	0xe000ed04

0800929c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800929c:	b480      	push	{r7}
 800929e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092a0:	4b0b      	ldr	r3, [pc, #44]	; (80092d0 <vPortSetupTimerInterrupt+0x34>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092a6:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <vPortSetupTimerInterrupt+0x38>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092ac:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <vPortSetupTimerInterrupt+0x3c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a0a      	ldr	r2, [pc, #40]	; (80092dc <vPortSetupTimerInterrupt+0x40>)
 80092b2:	fba2 2303 	umull	r2, r3, r2, r3
 80092b6:	099b      	lsrs	r3, r3, #6
 80092b8:	4a09      	ldr	r2, [pc, #36]	; (80092e0 <vPortSetupTimerInterrupt+0x44>)
 80092ba:	3b01      	subs	r3, #1
 80092bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80092be:	4b04      	ldr	r3, [pc, #16]	; (80092d0 <vPortSetupTimerInterrupt+0x34>)
 80092c0:	2207      	movs	r2, #7
 80092c2:	601a      	str	r2, [r3, #0]
}
 80092c4:	bf00      	nop
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	e000e010 	.word	0xe000e010
 80092d4:	e000e018 	.word	0xe000e018
 80092d8:	20000004 	.word	0x20000004
 80092dc:	10624dd3 	.word	0x10624dd3
 80092e0:	e000e014 	.word	0xe000e014

080092e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80092e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80092f4 <vPortEnableVFP+0x10>
 80092e8:	6801      	ldr	r1, [r0, #0]
 80092ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80092ee:	6001      	str	r1, [r0, #0]
 80092f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80092f2:	bf00      	nop
 80092f4:	e000ed88 	.word	0xe000ed88

080092f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80092fe:	f3ef 8305 	mrs	r3, IPSR
 8009302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b0f      	cmp	r3, #15
 8009308:	d914      	bls.n	8009334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800930a:	4a17      	ldr	r2, [pc, #92]	; (8009368 <vPortValidateInterruptPriority+0x70>)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4413      	add	r3, r2
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009314:	4b15      	ldr	r3, [pc, #84]	; (800936c <vPortValidateInterruptPriority+0x74>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	7afa      	ldrb	r2, [r7, #11]
 800931a:	429a      	cmp	r2, r3
 800931c:	d20a      	bcs.n	8009334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	607b      	str	r3, [r7, #4]
}
 8009330:	bf00      	nop
 8009332:	e7fe      	b.n	8009332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009334:	4b0e      	ldr	r3, [pc, #56]	; (8009370 <vPortValidateInterruptPriority+0x78>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800933c:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <vPortValidateInterruptPriority+0x7c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	429a      	cmp	r2, r3
 8009342:	d90a      	bls.n	800935a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	603b      	str	r3, [r7, #0]
}
 8009356:	bf00      	nop
 8009358:	e7fe      	b.n	8009358 <vPortValidateInterruptPriority+0x60>
	}
 800935a:	bf00      	nop
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	e000e3f0 	.word	0xe000e3f0
 800936c:	20001778 	.word	0x20001778
 8009370:	e000ed0c 	.word	0xe000ed0c
 8009374:	2000177c 	.word	0x2000177c

08009378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b08a      	sub	sp, #40	; 0x28
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009380:	2300      	movs	r3, #0
 8009382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009384:	f7fe fc8e 	bl	8007ca4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009388:	4b5b      	ldr	r3, [pc, #364]	; (80094f8 <pvPortMalloc+0x180>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d101      	bne.n	8009394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009390:	f000 f920 	bl	80095d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009394:	4b59      	ldr	r3, [pc, #356]	; (80094fc <pvPortMalloc+0x184>)
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4013      	ands	r3, r2
 800939c:	2b00      	cmp	r3, #0
 800939e:	f040 8093 	bne.w	80094c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d01d      	beq.n	80093e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80093a8:	2208      	movs	r2, #8
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4413      	add	r3, r2
 80093ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f003 0307 	and.w	r3, r3, #7
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d014      	beq.n	80093e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f023 0307 	bic.w	r3, r3, #7
 80093c0:	3308      	adds	r3, #8
 80093c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f003 0307 	and.w	r3, r3, #7
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00a      	beq.n	80093e4 <pvPortMalloc+0x6c>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	617b      	str	r3, [r7, #20]
}
 80093e0:	bf00      	nop
 80093e2:	e7fe      	b.n	80093e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d06e      	beq.n	80094c8 <pvPortMalloc+0x150>
 80093ea:	4b45      	ldr	r3, [pc, #276]	; (8009500 <pvPortMalloc+0x188>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d869      	bhi.n	80094c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093f4:	4b43      	ldr	r3, [pc, #268]	; (8009504 <pvPortMalloc+0x18c>)
 80093f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093f8:	4b42      	ldr	r3, [pc, #264]	; (8009504 <pvPortMalloc+0x18c>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093fe:	e004      	b.n	800940a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	429a      	cmp	r2, r3
 8009412:	d903      	bls.n	800941c <pvPortMalloc+0xa4>
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1f1      	bne.n	8009400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800941c:	4b36      	ldr	r3, [pc, #216]	; (80094f8 <pvPortMalloc+0x180>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009422:	429a      	cmp	r2, r3
 8009424:	d050      	beq.n	80094c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2208      	movs	r2, #8
 800942c:	4413      	add	r3, r2
 800942e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	1ad2      	subs	r2, r2, r3
 8009440:	2308      	movs	r3, #8
 8009442:	005b      	lsls	r3, r3, #1
 8009444:	429a      	cmp	r2, r3
 8009446:	d91f      	bls.n	8009488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4413      	add	r3, r2
 800944e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	f003 0307 	and.w	r3, r3, #7
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00a      	beq.n	8009470 <pvPortMalloc+0xf8>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	613b      	str	r3, [r7, #16]
}
 800946c:	bf00      	nop
 800946e:	e7fe      	b.n	800946e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	1ad2      	subs	r2, r2, r3
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009482:	69b8      	ldr	r0, [r7, #24]
 8009484:	f000 f908 	bl	8009698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009488:	4b1d      	ldr	r3, [pc, #116]	; (8009500 <pvPortMalloc+0x188>)
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	4a1b      	ldr	r2, [pc, #108]	; (8009500 <pvPortMalloc+0x188>)
 8009494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009496:	4b1a      	ldr	r3, [pc, #104]	; (8009500 <pvPortMalloc+0x188>)
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	4b1b      	ldr	r3, [pc, #108]	; (8009508 <pvPortMalloc+0x190>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d203      	bcs.n	80094aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094a2:	4b17      	ldr	r3, [pc, #92]	; (8009500 <pvPortMalloc+0x188>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a18      	ldr	r2, [pc, #96]	; (8009508 <pvPortMalloc+0x190>)
 80094a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	4b13      	ldr	r3, [pc, #76]	; (80094fc <pvPortMalloc+0x184>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	431a      	orrs	r2, r3
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	2200      	movs	r2, #0
 80094bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80094be:	4b13      	ldr	r3, [pc, #76]	; (800950c <pvPortMalloc+0x194>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3301      	adds	r3, #1
 80094c4:	4a11      	ldr	r2, [pc, #68]	; (800950c <pvPortMalloc+0x194>)
 80094c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80094c8:	f7fe fbfa 	bl	8007cc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	f003 0307 	and.w	r3, r3, #7
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00a      	beq.n	80094ec <pvPortMalloc+0x174>
	__asm volatile
 80094d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094da:	f383 8811 	msr	BASEPRI, r3
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	60fb      	str	r3, [r7, #12]
}
 80094e8:	bf00      	nop
 80094ea:	e7fe      	b.n	80094ea <pvPortMalloc+0x172>
	return pvReturn;
 80094ec:	69fb      	ldr	r3, [r7, #28]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3728      	adds	r7, #40	; 0x28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20005388 	.word	0x20005388
 80094fc:	2000539c 	.word	0x2000539c
 8009500:	2000538c 	.word	0x2000538c
 8009504:	20005380 	.word	0x20005380
 8009508:	20005390 	.word	0x20005390
 800950c:	20005394 	.word	0x20005394

08009510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d04d      	beq.n	80095be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009522:	2308      	movs	r3, #8
 8009524:	425b      	negs	r3, r3
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	4413      	add	r3, r2
 800952a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	685a      	ldr	r2, [r3, #4]
 8009534:	4b24      	ldr	r3, [pc, #144]	; (80095c8 <vPortFree+0xb8>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4013      	ands	r3, r2
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10a      	bne.n	8009554 <vPortFree+0x44>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	60fb      	str	r3, [r7, #12]
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00a      	beq.n	8009572 <vPortFree+0x62>
	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	60bb      	str	r3, [r7, #8]
}
 800956e:	bf00      	nop
 8009570:	e7fe      	b.n	8009570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	4b14      	ldr	r3, [pc, #80]	; (80095c8 <vPortFree+0xb8>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4013      	ands	r3, r2
 800957c:	2b00      	cmp	r3, #0
 800957e:	d01e      	beq.n	80095be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d11a      	bne.n	80095be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	4b0e      	ldr	r3, [pc, #56]	; (80095c8 <vPortFree+0xb8>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	43db      	mvns	r3, r3
 8009592:	401a      	ands	r2, r3
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009598:	f7fe fb84 	bl	8007ca4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	4b0a      	ldr	r3, [pc, #40]	; (80095cc <vPortFree+0xbc>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4413      	add	r3, r2
 80095a6:	4a09      	ldr	r2, [pc, #36]	; (80095cc <vPortFree+0xbc>)
 80095a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80095aa:	6938      	ldr	r0, [r7, #16]
 80095ac:	f000 f874 	bl	8009698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80095b0:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <vPortFree+0xc0>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3301      	adds	r3, #1
 80095b6:	4a06      	ldr	r2, [pc, #24]	; (80095d0 <vPortFree+0xc0>)
 80095b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80095ba:	f7fe fb81 	bl	8007cc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80095be:	bf00      	nop
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	2000539c 	.word	0x2000539c
 80095cc:	2000538c 	.word	0x2000538c
 80095d0:	20005398 	.word	0x20005398

080095d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80095da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80095de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095e0:	4b27      	ldr	r3, [pc, #156]	; (8009680 <prvHeapInit+0xac>)
 80095e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f003 0307 	and.w	r3, r3, #7
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00c      	beq.n	8009608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3307      	adds	r3, #7
 80095f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 0307 	bic.w	r3, r3, #7
 80095fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	4a1f      	ldr	r2, [pc, #124]	; (8009680 <prvHeapInit+0xac>)
 8009604:	4413      	add	r3, r2
 8009606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800960c:	4a1d      	ldr	r2, [pc, #116]	; (8009684 <prvHeapInit+0xb0>)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009612:	4b1c      	ldr	r3, [pc, #112]	; (8009684 <prvHeapInit+0xb0>)
 8009614:	2200      	movs	r2, #0
 8009616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	4413      	add	r3, r2
 800961e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009620:	2208      	movs	r2, #8
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	1a9b      	subs	r3, r3, r2
 8009626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f023 0307 	bic.w	r3, r3, #7
 800962e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4a15      	ldr	r2, [pc, #84]	; (8009688 <prvHeapInit+0xb4>)
 8009634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009636:	4b14      	ldr	r3, [pc, #80]	; (8009688 <prvHeapInit+0xb4>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2200      	movs	r2, #0
 800963c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800963e:	4b12      	ldr	r3, [pc, #72]	; (8009688 <prvHeapInit+0xb4>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	1ad2      	subs	r2, r2, r3
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009654:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <prvHeapInit+0xb4>)
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	4a0a      	ldr	r2, [pc, #40]	; (800968c <prvHeapInit+0xb8>)
 8009662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	4a09      	ldr	r2, [pc, #36]	; (8009690 <prvHeapInit+0xbc>)
 800966a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800966c:	4b09      	ldr	r3, [pc, #36]	; (8009694 <prvHeapInit+0xc0>)
 800966e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009672:	601a      	str	r2, [r3, #0]
}
 8009674:	bf00      	nop
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	20001780 	.word	0x20001780
 8009684:	20005380 	.word	0x20005380
 8009688:	20005388 	.word	0x20005388
 800968c:	20005390 	.word	0x20005390
 8009690:	2000538c 	.word	0x2000538c
 8009694:	2000539c 	.word	0x2000539c

08009698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80096a0:	4b28      	ldr	r3, [pc, #160]	; (8009744 <prvInsertBlockIntoFreeList+0xac>)
 80096a2:	60fb      	str	r3, [r7, #12]
 80096a4:	e002      	b.n	80096ac <prvInsertBlockIntoFreeList+0x14>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d8f7      	bhi.n	80096a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	4413      	add	r3, r2
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d108      	bne.n	80096da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	441a      	add	r2, r3
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	441a      	add	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d118      	bne.n	8009720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	4b15      	ldr	r3, [pc, #84]	; (8009748 <prvInsertBlockIntoFreeList+0xb0>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d00d      	beq.n	8009716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	441a      	add	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	e008      	b.n	8009728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009716:	4b0c      	ldr	r3, [pc, #48]	; (8009748 <prvInsertBlockIntoFreeList+0xb0>)
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	601a      	str	r2, [r3, #0]
 800971e:	e003      	b.n	8009728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	429a      	cmp	r2, r3
 800972e:	d002      	beq.n	8009736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009736:	bf00      	nop
 8009738:	3714      	adds	r7, #20
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	20005380 	.word	0x20005380
 8009748:	20005388 	.word	0x20005388

0800974c <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
}
 8009750:	bf00      	nop
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800975e:	f006 fd6d 	bl	801023c <touchgfx_init>
}
 8009762:	bf00      	nop
 8009764:	bd80      	pop	{r7, pc}

08009766 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800976a:	f006 fd91 	bl	8010290 <touchgfx_taskEntry>
}
 800976e:	bf00      	nop
 8009770:	bd80      	pop	{r7, pc}
	...

08009774 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
    {
 800977c:	4a04      	ldr	r2, [pc, #16]	; (8009790 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	601a      	str	r2, [r3, #0]
    }
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4618      	mov	r0, r3
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	080294a4 	.word	0x080294a4

08009794 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
    }
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f7ff ffe9 	bl	8009774 <_ZN8touchgfx12FontProviderD1Ev>
 80097a2:	2104      	movs	r1, #4
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f01c fb6d 	bl	8025e84 <_ZdlPvj>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80097c0:	887b      	ldrh	r3, [r7, #2]
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d010      	beq.n	80097e8 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	dc13      	bgt.n	80097f2 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d002      	beq.n	80097d4 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d005      	beq.n	80097de <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 80097d2:	e00e      	b.n	80097f2 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80097d4:	f005 f946 	bl	800ea64 <_ZN17TypedTextDatabase8getFontsEv>
 80097d8:	4603      	mov	r3, r0
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	e00a      	b.n	80097f4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80097de:	f005 f941 	bl	800ea64 <_ZN17TypedTextDatabase8getFontsEv>
 80097e2:	4603      	mov	r3, r0
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	e005      	b.n	80097f4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80097e8:	f005 f93c 	bl	800ea64 <_ZN17TypedTextDatabase8getFontsEv>
 80097ec:	4603      	mov	r3, r0
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	e000      	b.n	80097f4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 80097f2:	2300      	movs	r3, #0
    }
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	4a05      	ldr	r2, [pc, #20]	; (800981c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	601a      	str	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4618      	mov	r0, r3
 800980e:	f7ff ffb1 	bl	8009774 <_ZN8touchgfx12FontProviderD1Ev>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4618      	mov	r0, r3
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	08029490 	.word	0x08029490

08009820 <_ZN23ApplicationFontProviderD0Ev>:
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff ffe7 	bl	80097fc <_ZN23ApplicationFontProviderD1Ev>
 800982e:	2104      	movs	r1, #4
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f01c fb27 	bl	8025e84 <_ZdlPvj>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4618      	mov	r0, r3
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
    {
 8009848:	4a04      	ldr	r2, [pc, #16]	; (800985c <_ZN8touchgfx4FontD1Ev+0x1c>)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	601a      	str	r2, [r3, #0]
    }
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4618      	mov	r0, r3
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	08029e50 	.word	0x08029e50

08009860 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
    }
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7ff ffe9 	bl	8009840 <_ZN8touchgfx4FontD1Ev>
 800986e:	2110      	movs	r1, #16
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f01c fb07 	bl	8025e84 <_ZdlPvj>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4618      	mov	r0, r3
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8009880:	b590      	push	{r4, r7, lr}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	460b      	mov	r3, r1
 800988a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800988c:	887b      	ldrh	r3, [r7, #2]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d101      	bne.n	8009896 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8009892:	2300      	movs	r3, #0
 8009894:	e010      	b.n	80098b8 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8009896:	2300      	movs	r3, #0
 8009898:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3308      	adds	r3, #8
 80098a4:	681c      	ldr	r4, [r3, #0]
 80098a6:	f107 030f 	add.w	r3, r7, #15
 80098aa:	f107 0210 	add.w	r2, r7, #16
 80098ae:	8879      	ldrh	r1, [r7, #2]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	47a0      	blx	r4
 80098b4:	6178      	str	r0, [r7, #20]
        return glyph;
 80098b6:	697b      	ldr	r3, [r7, #20]
    }
 80098b8:	4618      	mov	r0, r3
 80098ba:	371c      	adds	r7, #28
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd90      	pop	{r4, r7, pc}

080098c0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	895b      	ldrh	r3, [r3, #10]
    }
 80098cc:	4618      	mov	r0, r3
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	899b      	ldrh	r3, [r3, #12]
    }
 80098e4:	4618      	mov	r0, r3
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	889b      	ldrh	r3, [r3, #4]
    }
 80098fc:	4618      	mov	r0, r3
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	889a      	ldrh	r2, [r3, #4]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	799b      	ldrb	r3, [r3, #6]
 8009918:	b29b      	uxth	r3, r3
 800991a:	4413      	add	r3, r2
 800991c:	b29b      	uxth	r3, r3
    }
 800991e:	4618      	mov	r0, r3
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800992a:	b480      	push	{r7}
 800992c:	b083      	sub	sp, #12
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	79db      	ldrb	r3, [r3, #7]
 8009936:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800993a:	b2db      	uxtb	r3, r3
    }
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	79db      	ldrb	r3, [r3, #7]
 8009954:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009958:	b2db      	uxtb	r3, r3
    }
 800995a:	4618      	mov	r0, r3
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
	...

08009968 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	4a05      	ldr	r2, [pc, #20]	; (8009988 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff ff61 	bl	8009840 <_ZN8touchgfx4FontD1Ev>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4618      	mov	r0, r3
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	0802afd0 	.word	0x0802afd0

0800998c <_ZN8touchgfx9ConstFontD0Ev>:
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7ff ffe7 	bl	8009968 <_ZN8touchgfx9ConstFontD1Ev>
 800999a:	2118      	movs	r1, #24
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f01c fa71 	bl	8025e84 <_ZdlPvj>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	4a05      	ldr	r2, [pc, #20]	; (80099cc <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4618      	mov	r0, r3
 80099be:	f7ff ffd3 	bl	8009968 <_ZN8touchgfx9ConstFontD1Ev>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4618      	mov	r0, r3
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	080294c8 	.word	0x080294c8

080099d0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7ff ffe7 	bl	80099ac <_ZN8touchgfx13GeneratedFontD1Ev>
 80099de:	2128      	movs	r1, #40	; 0x28
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f01c fa4f 	bl	8025e84 <_ZdlPvj>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4618      	mov	r0, r3
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
    {
 80099f8:	4a04      	ldr	r2, [pc, #16]	; (8009a0c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	601a      	str	r2, [r3, #0]
    }
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4618      	mov	r0, r3
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	080294b8 	.word	0x080294b8

08009a10 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
    }
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7ff ffe9 	bl	80099f0 <_ZN8touchgfx9TypedTextD1Ev>
 8009a1e:	2108      	movs	r1, #8
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f01c fa2f 	bl	8025e84 <_ZdlPvj>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a1b      	ldr	r3, [r3, #32]
    }
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8009a54:	4618      	mov	r0, r3
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b08c      	sub	sp, #48	; 0x30
 8009a64:	af08      	add	r7, sp, #32
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	460b      	mov	r3, r1
 8009a70:	80fb      	strh	r3, [r7, #6]
 8009a72:	4613      	mov	r3, r2
 8009a74:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	88b9      	ldrh	r1, [r7, #4]
 8009a7a:	88fa      	ldrh	r2, [r7, #6]
 8009a7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009a7e:	9306      	str	r3, [sp, #24]
 8009a80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009a82:	9305      	str	r3, [sp, #20]
 8009a84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a88:	9304      	str	r3, [sp, #16]
 8009a8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a8e:	9303      	str	r3, [sp, #12]
 8009a90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a94:	9302      	str	r3, [sp, #8]
 8009a96:	7f3b      	ldrb	r3, [r7, #28]
 8009a98:	9301      	str	r3, [sp, #4]
 8009a9a:	7e3b      	ldrb	r3, [r7, #24]
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	68b9      	ldr	r1, [r7, #8]
 8009aa2:	f00e f913 	bl	8017ccc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8009aa6:	4a0a      	ldr	r2, [pc, #40]	; (8009ad0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ab0:	619a      	str	r2, [r3, #24]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ab6:	61da      	str	r2, [r3, #28]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009abc:	621a      	str	r2, [r3, #32]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ac2:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	080294c8 	.word	0x080294c8

08009ad4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	889b      	ldrh	r3, [r3, #4]
 8009ae8:	0adb      	lsrs	r3, r3, #11
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	4413      	add	r3, r2
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4413      	add	r3, r2
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr

08009b06 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8009b06:	b480      	push	{r7}
 8009b08:	b089      	sub	sp, #36	; 0x24
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	60f8      	str	r0, [r7, #12]
 8009b0e:	460b      	mov	r3, r1
 8009b10:	607a      	str	r2, [r7, #4]
 8009b12:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	7b1b      	ldrb	r3, [r3, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d101      	bne.n	8009b26 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	e030      	b.n	8009b88 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	69da      	ldr	r2, [r3, #28]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	7b5b      	ldrb	r3, [r3, #13]
 8009b32:	021b      	lsls	r3, r3, #8
 8009b34:	b21b      	sxth	r3, r3
 8009b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b3a:	b219      	sxth	r1, r3
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	7adb      	ldrb	r3, [r3, #11]
 8009b40:	b21b      	sxth	r3, r3
 8009b42:	430b      	orrs	r3, r1
 8009b44:	b21b      	sxth	r3, r3
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	7b1b      	ldrb	r3, [r3, #12]
 8009b52:	837b      	strh	r3, [r7, #26]
 8009b54:	8b7b      	ldrh	r3, [r7, #26]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d015      	beq.n	8009b86 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	897a      	ldrh	r2, [r7, #10]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d103      	bne.n	8009b6c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8009b6a:	e00d      	b.n	8009b88 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	897a      	ldrh	r2, [r7, #10]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d306      	bcc.n	8009b84 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8009b76:	8b7b      	ldrh	r3, [r7, #26]
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	837b      	strh	r3, [r7, #26]
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	61fb      	str	r3, [r7, #28]
 8009b82:	e7e7      	b.n	8009b54 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8009b84:	bf00      	nop
        }
    }
    return 0;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3724      	adds	r7, #36	; 0x24
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 15, 10, 2, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	4801      	ldr	r0, [pc, #4]	; (8009ba0 <__tcf_0+0xc>)
 8009b9a:	f7ff ff07 	bl	80099ac <_ZN8touchgfx13GeneratedFontD1Ev>
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	200053a0 	.word	0x200053a0

08009ba4 <_Z23getFont_verdana_10_4bppv>:
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b08c      	sub	sp, #48	; 0x30
 8009ba8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 15, 10, 2, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8009baa:	4b1f      	ldr	r3, [pc, #124]	; (8009c28 <_Z23getFont_verdana_10_4bppv+0x84>)
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	f3bf 8f5b 	dmb	ish
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 0301 	and.w	r3, r3, #1
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	bf0c      	ite	eq
 8009bbc:	2301      	moveq	r3, #1
 8009bbe:	2300      	movne	r3, #0
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d02c      	beq.n	8009c20 <_Z23getFont_verdana_10_4bppv+0x7c>
 8009bc6:	4818      	ldr	r0, [pc, #96]	; (8009c28 <_Z23getFont_verdana_10_4bppv+0x84>)
 8009bc8:	f01c f95e 	bl	8025e88 <__cxa_guard_acquire>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	bf14      	ite	ne
 8009bd2:	2301      	movne	r3, #1
 8009bd4:	2300      	moveq	r3, #0
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d021      	beq.n	8009c20 <_Z23getFont_verdana_10_4bppv+0x7c>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	930a      	str	r3, [sp, #40]	; 0x28
 8009be0:	2300      	movs	r3, #0
 8009be2:	9309      	str	r3, [sp, #36]	; 0x24
 8009be4:	2300      	movs	r3, #0
 8009be6:	9308      	str	r3, [sp, #32]
 8009be8:	233f      	movs	r3, #63	; 0x3f
 8009bea:	9307      	str	r3, [sp, #28]
 8009bec:	4b0f      	ldr	r3, [pc, #60]	; (8009c2c <_Z23getFont_verdana_10_4bppv+0x88>)
 8009bee:	9306      	str	r3, [sp, #24]
 8009bf0:	4b0f      	ldr	r3, [pc, #60]	; (8009c30 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8009bf2:	9305      	str	r3, [sp, #20]
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	9304      	str	r3, [sp, #16]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	9303      	str	r3, [sp, #12]
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	9302      	str	r3, [sp, #8]
 8009c00:	2304      	movs	r3, #4
 8009c02:	9301      	str	r3, [sp, #4]
 8009c04:	2302      	movs	r3, #2
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	230a      	movs	r3, #10
 8009c0a:	220f      	movs	r2, #15
 8009c0c:	4909      	ldr	r1, [pc, #36]	; (8009c34 <_Z23getFont_verdana_10_4bppv+0x90>)
 8009c0e:	480a      	ldr	r0, [pc, #40]	; (8009c38 <_Z23getFont_verdana_10_4bppv+0x94>)
 8009c10:	f7ff ff26 	bl	8009a60 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009c14:	4809      	ldr	r0, [pc, #36]	; (8009c3c <_Z23getFont_verdana_10_4bppv+0x98>)
 8009c16:	f01c fedf 	bl	80269d8 <atexit>
 8009c1a:	4803      	ldr	r0, [pc, #12]	; (8009c28 <_Z23getFont_verdana_10_4bppv+0x84>)
 8009c1c:	f01c f940 	bl	8025ea0 <__cxa_guard_release>
    return verdana_10_4bpp;
 8009c20:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	200053c8 	.word	0x200053c8
 8009c2c:	0802bf60 	.word	0x0802bf60
 8009c30:	0802bf6c 	.word	0x0802bf6c
 8009c34:	0802bde0 	.word	0x0802bde0
 8009c38:	200053a0 	.word	0x200053a0
 8009c3c:	08009b95 	.word	0x08009b95

08009c40 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 11, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	4801      	ldr	r0, [pc, #4]	; (8009c4c <__tcf_0+0xc>)
 8009c46:	f7ff feb1 	bl	80099ac <_ZN8touchgfx13GeneratedFontD1Ev>
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	200053cc 	.word	0x200053cc

08009c50 <_Z23getFont_verdana_20_4bppv>:
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b08c      	sub	sp, #48	; 0x30
 8009c54:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 11, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009c56:	4b1f      	ldr	r3, [pc, #124]	; (8009cd4 <_Z23getFont_verdana_20_4bppv+0x84>)
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	f3bf 8f5b 	dmb	ish
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	f003 0301 	and.w	r3, r3, #1
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bf0c      	ite	eq
 8009c68:	2301      	moveq	r3, #1
 8009c6a:	2300      	movne	r3, #0
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d02c      	beq.n	8009ccc <_Z23getFont_verdana_20_4bppv+0x7c>
 8009c72:	4818      	ldr	r0, [pc, #96]	; (8009cd4 <_Z23getFont_verdana_20_4bppv+0x84>)
 8009c74:	f01c f908 	bl	8025e88 <__cxa_guard_acquire>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	bf14      	ite	ne
 8009c7e:	2301      	movne	r3, #1
 8009c80:	2300      	moveq	r3, #0
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d021      	beq.n	8009ccc <_Z23getFont_verdana_20_4bppv+0x7c>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c90:	2300      	movs	r3, #0
 8009c92:	9308      	str	r3, [sp, #32]
 8009c94:	233f      	movs	r3, #63	; 0x3f
 8009c96:	9307      	str	r3, [sp, #28]
 8009c98:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <_Z23getFont_verdana_20_4bppv+0x88>)
 8009c9a:	9306      	str	r3, [sp, #24]
 8009c9c:	4b0f      	ldr	r3, [pc, #60]	; (8009cdc <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009c9e:	9305      	str	r3, [sp, #20]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	9304      	str	r3, [sp, #16]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	9303      	str	r3, [sp, #12]
 8009ca8:	2301      	movs	r3, #1
 8009caa:	9302      	str	r3, [sp, #8]
 8009cac:	2304      	movs	r3, #4
 8009cae:	9301      	str	r3, [sp, #4]
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	2314      	movs	r3, #20
 8009cb6:	220b      	movs	r2, #11
 8009cb8:	4909      	ldr	r1, [pc, #36]	; (8009ce0 <_Z23getFont_verdana_20_4bppv+0x90>)
 8009cba:	480a      	ldr	r0, [pc, #40]	; (8009ce4 <_Z23getFont_verdana_20_4bppv+0x94>)
 8009cbc:	f7ff fed0 	bl	8009a60 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009cc0:	4809      	ldr	r0, [pc, #36]	; (8009ce8 <_Z23getFont_verdana_20_4bppv+0x98>)
 8009cc2:	f01c fe89 	bl	80269d8 <atexit>
 8009cc6:	4803      	ldr	r0, [pc, #12]	; (8009cd4 <_Z23getFont_verdana_20_4bppv+0x84>)
 8009cc8:	f01c f8ea 	bl	8025ea0 <__cxa_guard_release>
    return verdana_20_4bpp;
 8009ccc:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	200053f4 	.word	0x200053f4
 8009cd8:	0802bf64 	.word	0x0802bf64
 8009cdc:	0802bf70 	.word	0x0802bf70
 8009ce0:	0802beb4 	.word	0x0802beb4
 8009ce4:	200053cc 	.word	0x200053cc
 8009ce8:	08009c41 	.word	0x08009c41

08009cec <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009cec:	b580      	push	{r7, lr}
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	4801      	ldr	r0, [pc, #4]	; (8009cf8 <__tcf_0+0xc>)
 8009cf2:	f7ff fe5b 	bl	80099ac <_ZN8touchgfx13GeneratedFontD1Ev>
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	200053f8 	.word	0x200053f8

08009cfc <_Z23getFont_verdana_40_4bppv>:
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08c      	sub	sp, #48	; 0x30
 8009d00:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009d02:	4b1f      	ldr	r3, [pc, #124]	; (8009d80 <_Z23getFont_verdana_40_4bppv+0x84>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	f3bf 8f5b 	dmb	ish
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	bf0c      	ite	eq
 8009d14:	2301      	moveq	r3, #1
 8009d16:	2300      	movne	r3, #0
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d02c      	beq.n	8009d78 <_Z23getFont_verdana_40_4bppv+0x7c>
 8009d1e:	4818      	ldr	r0, [pc, #96]	; (8009d80 <_Z23getFont_verdana_40_4bppv+0x84>)
 8009d20:	f01c f8b2 	bl	8025e88 <__cxa_guard_acquire>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	bf14      	ite	ne
 8009d2a:	2301      	movne	r3, #1
 8009d2c:	2300      	moveq	r3, #0
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d021      	beq.n	8009d78 <_Z23getFont_verdana_40_4bppv+0x7c>
 8009d34:	2300      	movs	r3, #0
 8009d36:	930a      	str	r3, [sp, #40]	; 0x28
 8009d38:	2300      	movs	r3, #0
 8009d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	9308      	str	r3, [sp, #32]
 8009d40:	233f      	movs	r3, #63	; 0x3f
 8009d42:	9307      	str	r3, [sp, #28]
 8009d44:	4b0f      	ldr	r3, [pc, #60]	; (8009d84 <_Z23getFont_verdana_40_4bppv+0x88>)
 8009d46:	9306      	str	r3, [sp, #24]
 8009d48:	4b0f      	ldr	r3, [pc, #60]	; (8009d88 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009d4a:	9305      	str	r3, [sp, #20]
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	9304      	str	r3, [sp, #16]
 8009d50:	2300      	movs	r3, #0
 8009d52:	9303      	str	r3, [sp, #12]
 8009d54:	2301      	movs	r3, #1
 8009d56:	9302      	str	r3, [sp, #8]
 8009d58:	2304      	movs	r3, #4
 8009d5a:	9301      	str	r3, [sp, #4]
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	9300      	str	r3, [sp, #0]
 8009d60:	2328      	movs	r3, #40	; 0x28
 8009d62:	2201      	movs	r2, #1
 8009d64:	4909      	ldr	r1, [pc, #36]	; (8009d8c <_Z23getFont_verdana_40_4bppv+0x90>)
 8009d66:	480a      	ldr	r0, [pc, #40]	; (8009d90 <_Z23getFont_verdana_40_4bppv+0x94>)
 8009d68:	f7ff fe7a 	bl	8009a60 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009d6c:	4809      	ldr	r0, [pc, #36]	; (8009d94 <_Z23getFont_verdana_40_4bppv+0x98>)
 8009d6e:	f01c fe33 	bl	80269d8 <atexit>
 8009d72:	4803      	ldr	r0, [pc, #12]	; (8009d80 <_Z23getFont_verdana_40_4bppv+0x84>)
 8009d74:	f01c f894 	bl	8025ea0 <__cxa_guard_release>
    return verdana_40_4bpp;
 8009d78:	4b05      	ldr	r3, [pc, #20]	; (8009d90 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	20005420 	.word	0x20005420
 8009d84:	0802bf68 	.word	0x0802bf68
 8009d88:	0802bf74 	.word	0x0802bf74
 8009d8c:	0802bf50 	.word	0x0802bf50
 8009d90:	200053f8 	.word	0x200053f8
 8009d94:	08009ced 	.word	0x08009ced

08009d98 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	4618      	mov	r0, r3
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8009dba:	bf00      	nop
 8009dbc:	370c      	adds	r7, #12
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8009dc6:	b480      	push	{r7}
 8009dc8:	b083      	sub	sp, #12
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
 8009dce:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8009de6:	bf00      	nop
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8009df2:	b480      	push	{r7}
 8009df4:	b083      	sub	sp, #12
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8009dfe:	bf00      	nop
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8009e0a:	b480      	push	{r7}
 8009e0c:	b083      	sub	sp, #12
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
    {
    }
 8009e12:	bf00      	nop
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8009e1e:	b480      	push	{r7}
 8009e20:	b083      	sub	sp, #12
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
    {
    }
 8009e26:	bf00      	nop
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
	...

08009e34 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
    {
 8009e3c:	4a04      	ldr	r2, [pc, #16]	; (8009e50 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	601a      	str	r2, [r3, #0]
    }
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4618      	mov	r0, r3
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	08029630 	.word	0x08029630

08009e54 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
    }
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff ffe9 	bl	8009e34 <_ZN8touchgfx15UIEventListenerD1Ev>
 8009e62:	2104      	movs	r1, #4
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f01c f80d 	bl	8025e84 <_ZdlPvj>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
    {
    }
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	460b      	mov	r3, r1
 8009e92:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8009eb2:	6810      	ldr	r0, [r2, #0]
 8009eb4:	6851      	ldr	r1, [r2, #4]
 8009eb6:	c303      	stmia	r3!, {r0, r1}
    }
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
    {
 8009ecc:	4a04      	ldr	r2, [pc, #16]	; (8009ee0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	601a      	str	r2, [r3, #0]
    }
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr
 8009ee0:	08029618 	.word	0x08029618

08009ee4 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
    }
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff ffe9 	bl	8009ec4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8009ef2:	2104      	movs	r1, #4
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f01b ffc5 	bl	8025e84 <_ZdlPvj>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4618      	mov	r0, r3
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8009f04:	b480      	push	{r7}
 8009f06:	af00      	add	r7, sp, #0
    {
        return instance;
 8009f08:	4b03      	ldr	r3, [pc, #12]	; (8009f18 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
    }
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	20008808 	.word	0x20008808

08009f1c <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8009f1c:	b480      	push	{r7}
 8009f1e:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8009f20:	4b0b      	ldr	r3, [pc, #44]	; (8009f50 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d008      	beq.n	8009f3e <_ZN8touchgfx3HAL3lcdEv+0x22>
 8009f2c:	4b08      	ldr	r3, [pc, #32]	; (8009f50 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d003      	beq.n	8009f3e <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8009f36:	4b06      	ldr	r3, [pc, #24]	; (8009f50 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f3c:	e002      	b.n	8009f44 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 8009f3e:	4b04      	ldr	r3, [pc, #16]	; (8009f50 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689b      	ldr	r3, [r3, #8]
    }
 8009f44:	4618      	mov	r0, r3
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	20008808 	.word	0x20008808

08009f54 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8009f5c:	4a07      	ldr	r2, [pc, #28]	; (8009f7c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	601a      	str	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	605a      	str	r2, [r3, #4]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	721a      	strb	r2, [r3, #8]
    {
    }
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4618      	mov	r0, r3
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	080295f4 	.word	0x080295f4

08009f80 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
    {
 8009f88:	4a04      	ldr	r2, [pc, #16]	; (8009f9c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	601a      	str	r2, [r3, #0]
    }
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4618      	mov	r0, r3
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr
 8009f9c:	080295f4 	.word	0x080295f4

08009fa0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
    }
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7ff ffe9 	bl	8009f80 <_ZN8touchgfx10TransitionD1Ev>
 8009fae:	210c      	movs	r1, #12
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f01b ff67 	bl	8025e84 <_ZdlPvj>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
    {
    }
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
    {
    }
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
    {
    }
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800a004:	f00c fe1e 	bl	8016c44 <_ZN8touchgfx11Application11getInstanceEv>
 800a008:	4603      	mov	r3, r0
 800a00a:	4618      	mov	r0, r3
 800a00c:	f00d f9be 	bl	801738c <_ZN8touchgfx11Application10invalidateEv>
    }
 800a010:	bf00      	nop
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	605a      	str	r2, [r3, #4]
    }
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	4a05      	ldr	r2, [pc, #20]	; (800a054 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff fef5 	bl	8009e34 <_ZN8touchgfx15UIEventListenerD1Ev>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4618      	mov	r0, r3
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	0802af1c 	.word	0x0802af1c

0800a058 <_ZN8touchgfx11ApplicationD0Ev>:
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7ff ffe7 	bl	800a034 <_ZN8touchgfx11ApplicationD1Ev>
 800a066:	f44f 719c 	mov.w	r1, #312	; 0x138
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f01b ff0a 	bl	8025e84 <_ZdlPvj>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4618      	mov	r0, r3
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
	...

0800a07c <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4618      	mov	r0, r3
 800a088:	f00c fdfc 	bl	8016c84 <_ZN8touchgfx11ApplicationC1Ev>
 800a08c:	4a09      	ldr	r2, [pc, #36]	; (800a0b4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a04      	ldr	r2, [pc, #16]	; (800a0b8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800a0a6:	6013      	str	r3, [r2, #0]
    }
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	080295a8 	.word	0x080295a8
 800a0b8:	2000885c 	.word	0x2000885c

0800a0bc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 f804 	bl	800a0d2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800a0ca:	bf00      	nop
 800a0cc:	3708      	adds	r7, #8
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b082      	sub	sp, #8
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00f      	beq.n	800a104 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	330c      	adds	r3, #12
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	4798      	blx	r3
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800a100:	2301      	movs	r3, #1
 800a102:	e000      	b.n	800a106 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800a104:	2300      	movs	r3, #0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00e      	beq.n	800a128 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	3308      	adds	r3, #8
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4610      	mov	r0, r2
 800a11e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800a128:	bf00      	nop
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	601a      	str	r2, [r3, #0]
    }
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	4a05      	ldr	r2, [pc, #20]	; (800a16c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	601a      	str	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7ff ff69 	bl	800a034 <_ZN8touchgfx11ApplicationD1Ev>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4618      	mov	r0, r3
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	080295a8 	.word	0x080295a8

0800a170 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7ff ffe7 	bl	800a14c <_ZN8touchgfx14MVPApplicationD1Ev>
 800a17e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f01b fe7e 	bl	8025e84 <_ZdlPvj>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4618      	mov	r0, r3
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
	...

0800a194 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	4a08      	ldr	r2, [pc, #32]	; (800a1c0 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	601a      	str	r2, [r3, #0]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 facb 	bl	800a744 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7ff ffcb 	bl	800a14c <_ZN8touchgfx14MVPApplicationD1Ev>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	08029544 	.word	0x08029544

0800a1c4 <_ZN23FrontendApplicationBaseD0Ev>:
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f7ff ffe1 	bl	800a194 <_ZN23FrontendApplicationBaseD1Ev>
 800a1d2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f01b fe54 	bl	8025e84 <_ZdlPvj>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b082      	sub	sp, #8
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f87c 	bl	800a2ec <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	721a      	strb	r2, [r3, #8]
    }
 800a20a:	bf00      	nop
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800a216:	b480      	push	{r7}
 800a218:	b083      	sub	sp, #12
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	605a      	str	r2, [r3, #4]
    }
 800a226:	bf00      	nop
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
	...

0800a234 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff ff1a 	bl	800a07c <_ZN8touchgfx14MVPApplicationC1Ev>
 800a248:	4a13      	ldr	r2, [pc, #76]	; (800a298 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	601a      	str	r2, [r3, #0]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a254:	4618      	mov	r0, r3
 800a256:	f000 f89f 	bl	800a398 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800a26a:	f7ff fe4b 	bl	8009f04 <_ZN8touchgfx3HAL11getInstanceEv>
 800a26e:	4603      	mov	r3, r0
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	3208      	adds	r2, #8
 800a274:	6812      	ldr	r2, [r2, #0]
 800a276:	2100      	movs	r1, #0
 800a278:	4618      	mov	r0, r3
 800a27a:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800a27c:	2000      	movs	r0, #0
 800a27e:	f004 fb79 	bl	800e974 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800a282:	f7ff fe4b 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 800a286:	4603      	mov	r3, r0
 800a288:	4618      	mov	r0, r3
 800a28a:	f014 fbec 	bl	801ea66 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	08029544 	.word	0x08029544

0800a29c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	4611      	mov	r1, r2
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7ff ffe9 	bl	800a29c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	605a      	str	r2, [r3, #4]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	3308      	adds	r3, #8
 800a2d8:	3208      	adds	r2, #8
 800a2da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a2de:	e883 0003 	stmia.w	r3, {r0, r1}
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800a2ec:	b590      	push	{r4, r7, lr}
 800a2ee:	b089      	sub	sp, #36	; 0x24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800a2fa:	4b10      	ldr	r3, [pc, #64]	; (800a33c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800a2fc:	61bb      	str	r3, [r7, #24]
 800a2fe:	2300      	movs	r3, #0
 800a300:	61fb      	str	r3, [r7, #28]
 800a302:	f107 0008 	add.w	r0, r7, #8
 800a306:	f107 0318 	add.w	r3, r7, #24
 800a30a:	cb0c      	ldmia	r3, {r2, r3}
 800a30c:	6879      	ldr	r1, [r7, #4]
 800a30e:	f000 f85f 	bl	800a3d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a312:	f107 0308 	add.w	r3, r7, #8
 800a316:	4619      	mov	r1, r3
 800a318:	4620      	mov	r0, r4
 800a31a:	f7ff ffcb 	bl	800a2b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a31e:	f107 0308 	add.w	r3, r7, #8
 800a322:	4618      	mov	r0, r3
 800a324:	f000 fa0e 	bl	800a744 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800a334:	bf00      	nop
 800a336:	3724      	adds	r7, #36	; 0x24
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd90      	pop	{r4, r7, pc}
 800a33c:	0800a341 	.word	0x0800a341

0800a340 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af02      	add	r7, sp, #8
 800a346:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800a354:	461a      	mov	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	4b04      	ldr	r3, [pc, #16]	; (800a370 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800a360:	4804      	ldr	r0, [pc, #16]	; (800a374 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800a362:	f000 f867 	bl	800a434 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a366:	bf00      	nop
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	20008850 	.word	0x20008850
 800a374:	2000884c 	.word	0x2000884c

0800a378 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	4a04      	ldr	r2, [pc, #16]	; (800a394 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	08029618 	.word	0x08029618

0800a398 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7ff ffe8 	bl	800a378 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800a3a8:	4a08      	ldr	r2, [pc, #32]	; (800a3cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	605a      	str	r2, [r3, #4]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	609a      	str	r2, [r3, #8]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	60da      	str	r2, [r3, #12]
    {
    }
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	08029590 	.word	0x08029590

0800a3d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	4639      	mov	r1, r7
 800a3dc:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7ff ffc8 	bl	800a378 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800a3e8:	4a08      	ldr	r2, [pc, #32]	; (800a40c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	605a      	str	r2, [r3, #4]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	3308      	adds	r3, #8
 800a3f8:	463a      	mov	r2, r7
 800a3fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a3fe:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	4618      	mov	r0, r3
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	08029590 	.word	0x08029590

0800a410 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7ff fd9a 	bl	8009f54 <_ZN8touchgfx10TransitionC1Ev>
 800a420:	4a03      	ldr	r2, [pc, #12]	; (800a430 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	601a      	str	r2, [r3, #0]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4618      	mov	r0, r3
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	08029520 	.word	0x08029520

0800a434 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800a434:	b590      	push	{r4, r7, lr}
 800a436:	b08f      	sub	sp, #60	; 0x3c
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689a      	ldr	r2, [r3, #8]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3320      	adds	r3, #32
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4610      	mov	r0, r2
 800a452:	4798      	blx	r3
 800a454:	4603      	mov	r3, r0
 800a456:	f641 12c3 	movw	r2, #6595	; 0x19c3
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d805      	bhi.n	800a46a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800a45e:	4b7f      	ldr	r3, [pc, #508]	; (800a65c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800a460:	4a7f      	ldr	r2, [pc, #508]	; (800a660 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800a462:	21a3      	movs	r1, #163	; 0xa3
 800a464:	487f      	ldr	r0, [pc, #508]	; (800a664 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800a466:	f01c fa99 	bl	802699c <__assert_func>
 800a46a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685a      	ldr	r2, [r3, #4]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3320      	adds	r3, #32
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4610      	mov	r0, r2
 800a47c:	4798      	blx	r3
 800a47e:	4603      	mov	r3, r0
 800a480:	2b0f      	cmp	r3, #15
 800a482:	d805      	bhi.n	800a490 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800a484:	4b78      	ldr	r3, [pc, #480]	; (800a668 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800a486:	4a76      	ldr	r2, [pc, #472]	; (800a660 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800a488:	21a4      	movs	r1, #164	; 0xa4
 800a48a:	4876      	ldr	r0, [pc, #472]	; (800a664 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800a48c:	f01c fa86 	bl	802699c <__assert_func>
 800a490:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68da      	ldr	r2, [r3, #12]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3320      	adds	r3, #32
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	4798      	blx	r3
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b0b      	cmp	r3, #11
 800a4a8:	d805      	bhi.n	800a4b6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800a4aa:	4b70      	ldr	r3, [pc, #448]	; (800a66c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800a4ac:	4a6c      	ldr	r2, [pc, #432]	; (800a660 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800a4ae:	21a5      	movs	r1, #165	; 0xa5
 800a4b0:	486c      	ldr	r0, [pc, #432]	; (800a664 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800a4b2:	f01c fa73 	bl	802699c <__assert_func>
 800a4b6:	bf00      	nop
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	627b      	str	r3, [r7, #36]	; 0x24
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800a4c4:	f00c fbbe 	bl	8016c44 <_ZN8touchgfx11Application11getInstanceEv>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f00c fbc0 	bl	8016c50 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800a4d0:	6a3b      	ldr	r3, [r7, #32]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d008      	beq.n	800a4ea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	6a3b      	ldr	r3, [r7, #32]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	330c      	adds	r3, #12
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	4798      	blx	r3
    if (*currentTrans)
 800a4ea:	6a3b      	ldr	r3, [r7, #32]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d007      	beq.n	800a502 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800a4f2:	6a3b      	ldr	r3, [r7, #32]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	6a3b      	ldr	r3, [r7, #32]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4610      	mov	r0, r2
 800a500:	4798      	blx	r3
    if (*currentScreen)
 800a502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d008      	beq.n	800a51c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800a50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3314      	adds	r3, #20
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4610      	mov	r0, r2
 800a51a:	4798      	blx	r3
    if (*currentPresenter)
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d008      	beq.n	800a536 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3304      	adds	r3, #4
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4610      	mov	r0, r2
 800a534:	4798      	blx	r3
    if (*currentScreen)
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d007      	beq.n	800a54e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800a53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4610      	mov	r0, r2
 800a54c:	4798      	blx	r3
    if (*currentPresenter)
 800a54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d008      	beq.n	800a568 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800a556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3308      	adds	r3, #8
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4610      	mov	r0, r2
 800a566:	4798      	blx	r3
}
 800a568:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	2100      	movs	r1, #0
 800a570:	4618      	mov	r0, r3
 800a572:	f000 f87d 	bl	800a670 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800a576:	4603      	mov	r3, r0
 800a578:	4619      	mov	r1, r3
 800a57a:	200c      	movs	r0, #12
 800a57c:	f7ff fc0c 	bl	8009d98 <_ZnwjPv>
 800a580:	4604      	mov	r4, r0
 800a582:	4620      	mov	r0, r4
 800a584:	f7ff ff44 	bl	800a410 <_ZN8touchgfx12NoTransitionC1Ev>
 800a588:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	2100      	movs	r1, #0
 800a590:	4618      	mov	r0, r3
 800a592:	f000 f880 	bl	800a696 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800a596:	4603      	mov	r3, r0
 800a598:	4619      	mov	r1, r3
 800a59a:	f641 10c4 	movw	r0, #6596	; 0x19c4
 800a59e:	f7ff fbfb 	bl	8009d98 <_ZnwjPv>
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f004 fc63 	bl	800ee70 <_ZN11Screen1ViewC1Ev>
 800a5aa:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 f882 	bl	800a6bc <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	2010      	movs	r0, #16
 800a5be:	f7ff fbeb 	bl	8009d98 <_ZnwjPv>
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f004 fbe2 	bl	800ed90 <_ZN16Screen1PresenterC1ER11Screen1View>
 800a5cc:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5d2:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5d8:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5de:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800a5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d002      	beq.n	800a5ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800a5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	e000      	b.n	800a5ee <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a5f2:	f7ff fd9d 	bl	800a130 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800a5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7ff fe0a 	bl	800a216 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a606:	4618      	mov	r0, r3
 800a608:	f000 f86b 	bl	800a6e2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800a60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60e:	61fb      	str	r3, [r7, #28]
 800a610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a612:	61bb      	str	r3, [r7, #24]
 800a614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a616:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	330c      	adds	r3, #12
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	69f8      	ldr	r0, [r7, #28]
 800a622:	4798      	blx	r3
    newPresenter->activate();
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	69b8      	ldr	r0, [r7, #24]
 800a62c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800a62e:	6979      	ldr	r1, [r7, #20]
 800a630:	69f8      	ldr	r0, [r7, #28]
 800a632:	f00d ffad 	bl	8018590 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3310      	adds	r3, #16
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6978      	ldr	r0, [r7, #20]
 800a640:	4798      	blx	r3
    newTransition->invalidate();
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	3314      	adds	r3, #20
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6978      	ldr	r0, [r7, #20]
 800a64c:	4798      	blx	r3
}
 800a64e:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800a650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a652:	4618      	mov	r0, r3
 800a654:	373c      	adds	r7, #60	; 0x3c
 800a656:	46bd      	mov	sp, r7
 800a658:	bd90      	pop	{r4, r7, pc}
 800a65a:	bf00      	nop
 800a65c:	08027d00 	.word	0x08027d00
 800a660:	08027d90 	.word	0x08027d90
 800a664:	08027e94 	.word	0x08027e94
 800a668:	08027ed8 	.word	0x08027ed8
 800a66c:	08027f7c 	.word	0x08027f7c

0800a670 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	3324      	adds	r3, #36	; 0x24
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	887a      	ldrh	r2, [r7, #2]
 800a686:	4611      	mov	r1, r2
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	4798      	blx	r3
 800a68c:	4603      	mov	r3, r0
    }
 800a68e:	4618      	mov	r0, r3
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800a696:	b580      	push	{r7, lr}
 800a698:	b082      	sub	sp, #8
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	460b      	mov	r3, r1
 800a6a0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	3324      	adds	r3, #36	; 0x24
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	887a      	ldrh	r2, [r7, #2]
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	4798      	blx	r3
 800a6b2:	4603      	mov	r3, r0
    }
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3324      	adds	r3, #36	; 0x24
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	887a      	ldrh	r2, [r7, #2]
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	4798      	blx	r3
 800a6d8:	4603      	mov	r3, r0
    }
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800a6e2:	b480      	push	{r7}
 800a6e4:	b083      	sub	sp, #12
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800a6f2:	bf00      	nop
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
	...

0800a700 <_ZN8touchgfx12NoTransitionD1Ev>:
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	4a05      	ldr	r2, [pc, #20]	; (800a720 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4618      	mov	r0, r3
 800a712:	f7ff fc35 	bl	8009f80 <_ZN8touchgfx10TransitionD1Ev>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4618      	mov	r0, r3
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	08029520 	.word	0x08029520

0800a724 <_ZN8touchgfx12NoTransitionD0Ev>:
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff ffe7 	bl	800a700 <_ZN8touchgfx12NoTransitionD1Ev>
 800a732:	210c      	movs	r1, #12
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f01b fba5 	bl	8025e84 <_ZdlPvj>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4618      	mov	r0, r3
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	4a05      	ldr	r2, [pc, #20]	; (800a764 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4618      	mov	r0, r3
 800a756:	f7ff fbb5 	bl	8009ec4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4618      	mov	r0, r3
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	08029590 	.word	0x08029590

0800a768 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f7ff ffe7 	bl	800a744 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800a776:	2110      	movs	r1, #16
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f01b fb83 	bl	8025e84 <_ZdlPvj>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4618      	mov	r0, r3
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	68d2      	ldr	r2, [r2, #12]
 800a798:	1052      	asrs	r2, r2, #1
 800a79a:	1899      	adds	r1, r3, r2
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	f003 0301 	and.w	r3, r3, #1
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d102      	bne.n	800a7ae <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	e00a      	b.n	800a7c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	68d2      	ldr	r2, [r2, #12]
 800a7b6:	1052      	asrs	r2, r2, #1
 800a7b8:	4413      	add	r3, r2
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	6892      	ldr	r2, [r2, #8]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	4798      	blx	r3
    }
 800a7c8:	bf00      	nop
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d010      	beq.n	800a802 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d107      	bne.n	800a7f8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d101      	bne.n	800a7f8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e000      	b.n	800a7fa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d001      	beq.n	800a802 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800a7fe:	2301      	movs	r3, #1
 800a800:	e000      	b.n	800a804 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800a802:	2300      	movs	r3, #0
    }
 800a804:	4618      	mov	r0, r3
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
        : color(0)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	601a      	str	r2, [r3, #0]
    {
    }
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
        : color(col)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	601a      	str	r2, [r3, #0]
    {
    }
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4618      	mov	r0, r3
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr

0800a84a <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 800a84a:	b480      	push	{r7}
 800a84c:	b083      	sub	sp, #12
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
    {
        return color;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
    }
 800a856:	4618      	mov	r0, r3
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	801a      	strh	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	805a      	strh	r2, [r3, #2]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	809a      	strh	r2, [r3, #4]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	80da      	strh	r2, [r3, #6]
    {
    }
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4618      	mov	r0, r3
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	4608      	mov	r0, r1
 800a89a:	4611      	mov	r1, r2
 800a89c:	461a      	mov	r2, r3
 800a89e:	4603      	mov	r3, r0
 800a8a0:	817b      	strh	r3, [r7, #10]
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	813b      	strh	r3, [r7, #8]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	897a      	ldrh	r2, [r7, #10]
 800a8ae:	801a      	strh	r2, [r3, #0]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	893a      	ldrh	r2, [r7, #8]
 800a8b4:	805a      	strh	r2, [r3, #2]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	88fa      	ldrh	r2, [r7, #6]
 800a8ba:	809a      	strh	r2, [r3, #4]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	8b3a      	ldrh	r2, [r7, #24]
 800a8c0:	80da      	strh	r2, [r3, #6]
    {
    }
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
    /**
     * Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
    {
        return clickEventType;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	791b      	ldrb	r3, [r3, #4]
    }
 800a8dc:	4618      	mov	r0, r3
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	887a      	ldrh	r2, [r7, #2]
 800a8f8:	801a      	strh	r2, [r3, #0]
    {
    }
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800a910:	4a14      	ldr	r2, [pc, #80]	; (800a964 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	601a      	str	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3304      	adds	r3, #4
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7ff ffa1 	bl	800a862 <_ZN8touchgfx4RectC1Ev>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	330c      	adds	r3, #12
 800a924:	4618      	mov	r0, r3
 800a926:	f7ff ff9c 	bl	800a862 <_ZN8touchgfx4RectC1Ev>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	615a      	str	r2, [r3, #20]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	619a      	str	r2, [r3, #24]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	61da      	str	r2, [r3, #28]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	841a      	strh	r2, [r3, #32]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	845a      	strh	r2, [r3, #34]	; 0x22
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4618      	mov	r0, r3
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	0802af68 	.word	0x0802af68

0800a968 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
    {
 800a970:	4a04      	ldr	r2, [pc, #16]	; (800a984 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	601a      	str	r2, [r3, #0]
    }
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4618      	mov	r0, r3
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	0802af68 	.word	0x0802af68

0800a988 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
    }
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff ffe9 	bl	800a968 <_ZN8touchgfx8DrawableD1Ev>
 800a996:	2128      	movs	r1, #40	; 0x28
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f01b fa73 	bl	8025e84 <_ZdlPvj>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3708      	adds	r7, #8
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d005      	beq.n	800a9c6 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	3314      	adds	r3, #20
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	4798      	blx	r3
        }
    }
 800a9c6:	bf00      	nop
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800a9ce:	b480      	push	{r7}
 800a9d0:	b083      	sub	sp, #12
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800a9d6:	2300      	movs	r3, #0
    }
 800a9d8:	4618      	mov	r0, r3
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	4608      	mov	r0, r1
 800a9ee:	4611      	mov	r1, r2
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	817b      	strh	r3, [r7, #10]
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	813b      	strh	r3, [r7, #8]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800a9fe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800aa02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aa06:	4619      	mov	r1, r3
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f000 f844 	bl	800aa96 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800aa0e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800aa12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa16:	4619      	mov	r1, r3
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f000 f898 	bl	800ab4e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800aa1e:	bf00      	nop
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 800aa26:	b480      	push	{r7}
 800aa28:	b083      	sub	sp, #12
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800aa34:	4618      	mov	r0, r3
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800aa4e:	4618      	mov	r0, r3
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800aa5a:	b480      	push	{r7}
 800aa5c:	b083      	sub	sp, #12
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	460b      	mov	r3, r1
 800aa64:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	887a      	ldrh	r2, [r7, #2]
 800aa6a:	809a      	strh	r2, [r3, #4]
    }
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	460b      	mov	r3, r1
 800aa82:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	887a      	ldrh	r2, [r7, #2]
 800aa88:	80da      	strh	r2, [r3, #6]
    }
 800aa8a:	bf00      	nop
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	807b      	strh	r3, [r7, #2]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3330      	adds	r3, #48	; 0x30
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800aab2:	4611      	mov	r1, r2
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	4798      	blx	r3
        setY(y);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	3334      	adds	r3, #52	; 0x34
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f9b7 2000 	ldrsh.w	r2, [r7]
 800aac4:	4611      	mov	r1, r2
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	4798      	blx	r3
    }
 800aaca:	bf00      	nop
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800aad2:	b480      	push	{r7}
 800aad4:	b083      	sub	sp, #12
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	460b      	mov	r3, r1
 800aadc:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	887a      	ldrh	r2, [r7, #2]
 800aae2:	811a      	strh	r2, [r3, #8]
    }
 800aae4:	bf00      	nop
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	887a      	ldrh	r2, [r7, #2]
 800ab00:	815a      	strh	r2, [r3, #10]
    }
 800ab02:	bf00      	nop
 800ab04:	370c      	adds	r7, #12
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr

0800ab0e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800ab0e:	b480      	push	{r7}
 800ab10:	b083      	sub	sp, #12
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
    {
    }
 800ab16:	bf00      	nop
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800ab22:	b480      	push	{r7}
 800ab24:	b083      	sub	sp, #12
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ab2c:	bf00      	nop
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ab42:	bf00      	nop
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b082      	sub	sp, #8
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
 800ab56:	460b      	mov	r3, r1
 800ab58:	807b      	strh	r3, [r7, #2]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	3338      	adds	r3, #56	; 0x38
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ab6a:	4611      	mov	r1, r2
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	4798      	blx	r3
        setHeight(height);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	333c      	adds	r3, #60	; 0x3c
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	4798      	blx	r3
    }
 800ab82:	bf00      	nop
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800ab8a:	b480      	push	{r7}
 800ab8c:	b083      	sub	sp, #12
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
    {
    }
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	460b      	mov	r3, r1
 800abbe:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	78fa      	ldrb	r2, [r7, #3]
 800abc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800abe2:	4618      	mov	r0, r3
 800abe4:	370c      	adds	r7, #12
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800abee:	b480      	push	{r7}
 800abf0:	b083      	sub	sp, #12
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800abfc:	4618      	mov	r0, r3
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	460b      	mov	r3, r1
 800ac12:	807b      	strh	r3, [r7, #2]
 800ac14:	4613      	mov	r3, r2
 800ac16:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	3354      	adds	r3, #84	; 0x54
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	8879      	ldrh	r1, [r7, #2]
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ac28:	b292      	uxth	r2, r2
 800ac2a:	1a8a      	subs	r2, r1, r2
 800ac2c:	b292      	uxth	r2, r2
 800ac2e:	b210      	sxth	r0, r2
 800ac30:	8839      	ldrh	r1, [r7, #0]
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ac38:	b292      	uxth	r2, r2
 800ac3a:	1a8a      	subs	r2, r1, r2
 800ac3c:	b292      	uxth	r2, r2
 800ac3e:	b212      	sxth	r2, r2
 800ac40:	4601      	mov	r1, r0
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	4798      	blx	r3
    }
 800ac46:	bf00      	nop
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800ac4e:	b480      	push	{r7}
 800ac50:	b083      	sub	sp, #12
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac5c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac64:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac6c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800ac6e:	bf00      	nop
 800ac70:	370c      	adds	r7, #12
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b084      	sub	sp, #16
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	60f8      	str	r0, [r7, #12]
 800ac82:	60b9      	str	r1, [r7, #8]
 800ac84:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f7ff ffe1 	bl	800ac4e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	601a      	str	r2, [r3, #0]
    }
 800ac9a:	bf00      	nop
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4618      	mov	r0, r3
 800acb0:	f7ff fe2a 	bl	800a908 <_ZN8touchgfx8DrawableC1Ev>
 800acb4:	4a05      	ldr	r2, [pc, #20]	; (800accc <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	601a      	str	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4618      	mov	r0, r3
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	0802a340 	.word	0x0802a340

0800acd0 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800acdc:	4618      	mov	r0, r3
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 800acf4:	4618      	mov	r0, r3
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
    {
 800ad08:	4a06      	ldr	r2, [pc, #24]	; (800ad24 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	601a      	str	r2, [r3, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3304      	adds	r3, #4
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 ff06 	bl	800bb24 <_ZN8touchgfx9ContainerD1Ev>
    }
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	0802b064 	.word	0x0802b064

0800ad28 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
    }
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7ff ffe5 	bl	800ad00 <_ZN8touchgfx6ScreenD1Ev>
 800ad36:	213c      	movs	r1, #60	; 0x3c
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f01b f8a3 	bl	8025e84 <_ZdlPvj>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4618      	mov	r0, r3
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
    {
    }
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
    {
    }
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
    {
    }
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
    {
    }
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	460b      	mov	r3, r1
 800ada2:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800ada4:	bf00      	nop
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3304      	adds	r3, #4
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f006 f969 	bl	8011098 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800adc6:	bf00      	nop
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800adce:	b580      	push	{r7, lr}
 800add0:	b084      	sub	sp, #16
 800add2:	af00      	add	r7, sp, #0
 800add4:	60f8      	str	r0, [r7, #12]
 800add6:	607b      	str	r3, [r7, #4]
 800add8:	460b      	mov	r3, r1
 800adda:	817b      	strh	r3, [r7, #10]
 800addc:	4613      	mov	r3, r2
 800adde:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7ff fef6 	bl	800abd4 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d008      	beq.n	800ae00 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7ff fefc 	bl	800abee <_ZNK8touchgfx8Drawable11isTouchableEv>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d001      	beq.n	800ae00 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800adfc:	2301      	movs	r3, #1
 800adfe:	e000      	b.n	800ae02 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800ae00:	2300      	movs	r3, #0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d002      	beq.n	800ae0c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	601a      	str	r2, [r3, #0]
        }
    }
 800ae0c:	bf00      	nop
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7ff fd72 	bl	800a908 <_ZN8touchgfx8DrawableC1Ev>
 800ae24:	4a03      	ldr	r2, [pc, #12]	; (800ae34 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	601a      	str	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	08029dc0 	.word	0x08029dc0

0800ae38 <_ZN8touchgfx6WidgetD1Ev>:
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	4a05      	ldr	r2, [pc, #20]	; (800ae58 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	601a      	str	r2, [r3, #0]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7ff fd8d 	bl	800a968 <_ZN8touchgfx8DrawableD1Ev>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4618      	mov	r0, r3
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	08029dc0 	.word	0x08029dc0

0800ae5c <_ZN8touchgfx6WidgetD0Ev>:
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7ff ffe7 	bl	800ae38 <_ZN8touchgfx6WidgetD1Ev>
 800ae6a:	2128      	movs	r1, #40	; 0x28
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f01b f809 	bl	8025e84 <_ZdlPvj>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4618      	mov	r0, r3
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4618      	mov	r0, r3
 800ae88:	2326      	movs	r3, #38	; 0x26
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	f01b ff0b 	bl	8026ca8 <memset>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7ff ffbd 	bl	800ae14 <_ZN8touchgfx6WidgetC1Ev>
 800ae9a:	4a09      	ldr	r2, [pc, #36]	; (800aec0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	601a      	str	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	22ff      	movs	r2, #255	; 0xff
 800aea4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	3328      	adds	r3, #40	; 0x28
 800aeac:	2100      	movs	r1, #0
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7ff fcbc 	bl	800a82c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	0802ad50 	.word	0x0802ad50

0800aec4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	683a      	ldr	r2, [r7, #0]
 800aed2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800aed4:	bf00      	nop
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <_ZN8touchgfx3Box8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	460b      	mov	r3, r1
 800aeea:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	78fa      	ldrb	r2, [r7, #3]
 800aef0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 800af08:	4a06      	ldr	r2, [pc, #24]	; (800af24 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	601a      	str	r2, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	809a      	strh	r2, [r3, #4]
    {
    }
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4618      	mov	r0, r3
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	08029da0 	.word	0x08029da0

0800af28 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
    {
 800af30:	4a04      	ldr	r2, [pc, #16]	; (800af44 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	601a      	str	r2, [r3, #0]
    }
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4618      	mov	r0, r3
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	08029da0 	.word	0x08029da0

0800af48 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
    }
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7ff ffe9 	bl	800af28 <_ZN8touchgfx15AbstractPainterD1Ev>
 800af56:	2108      	movs	r1, #8
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f01a ff93 	bl	8025e84 <_ZdlPvj>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4618      	mov	r0, r3
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 800af70:	2300      	movs	r3, #0
    }
 800af72:	4618      	mov	r0, r3
 800af74:	370c      	adds	r7, #12
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr

0800af7e <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 800af7e:	b480      	push	{r7}
 800af80:	b083      	sub	sp, #12
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	809a      	strh	r2, [r3, #4]
        return true;
 800af92:	2301      	movs	r3, #1
    }
 800af94:	4618      	mov	r0, r3
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
    {
        return;
 800afa8:	bf00      	nop
    }
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
            : v(i)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	601a      	str	r2, [r3, #0]
        {
        }
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4618      	mov	r0, r3
 800afc8:	370c      	adds	r7, #12
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr

0800afd2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800afd2:	b480      	push	{r7}
 800afd4:	b083      	sub	sp, #12
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
        {
            return v;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
        }
 800afde:	4618      	mov	r0, r3
 800afe0:	370c      	adds	r7, #12
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr

0800afea <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>:
         *
         * @param  q5 The Q5 to add to this.
         *
         * @return The result of the operation.
         */
        Q5 operator+(const Q5& q5) const
 800afea:	b580      	push	{r7, lr}
 800afec:	b084      	sub	sp, #16
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
 800aff2:	6039      	str	r1, [r7, #0]
        {
            return Q5(v + q5.v);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	441a      	add	r2, r3
 800affe:	f107 030c 	add.w	r3, r7, #12
 800b002:	4611      	mov	r1, r2
 800b004:	4618      	mov	r0, r3
 800b006:	f7ff ffd5 	bl	800afb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800b00a:	68fb      	ldr	r3, [r7, #12]
        }
 800b00c:	4618      	mov	r0, r3
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>:
         *
         * @param  q5 The Q5 to subtract from this.
         *
         * @return The result of the operation.
         */
        Q5 operator-(const Q5& q5) const
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
        {
            return Q5(v - q5.v);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	1ad2      	subs	r2, r2, r3
 800b028:	f107 030c 	add.w	r3, r7, #12
 800b02c:	4611      	mov	r1, r2
 800b02e:	4618      	mov	r0, r3
 800b030:	f7ff ffc0 	bl	800afb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800b034:	68fb      	ldr	r3, [r7, #12]
        }
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor.
     */
    static Q5 muldivQ5(Q5 factor1, Q5 factor2, Q5 divisor)
 800b03e:	b5b0      	push	{r4, r5, r7, lr}
 800b040:	b086      	sub	sp, #24
 800b042:	af00      	add	r7, sp, #0
 800b044:	60f8      	str	r0, [r7, #12]
 800b046:	60b9      	str	r1, [r7, #8]
 800b048:	607a      	str	r2, [r7, #4]
    {
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 800b04a:	f107 030c 	add.w	r3, r7, #12
 800b04e:	4618      	mov	r0, r3
 800b050:	f7ff ffbf 	bl	800afd2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800b054:	4604      	mov	r4, r0
 800b056:	f107 0308 	add.w	r3, r7, #8
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7ff ffb9 	bl	800afd2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800b060:	4605      	mov	r5, r0
 800b062:	1d3b      	adds	r3, r7, #4
 800b064:	4618      	mov	r0, r3
 800b066:	f7ff ffb4 	bl	800afd2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800b06a:	4603      	mov	r3, r0
 800b06c:	461a      	mov	r2, r3
 800b06e:	4629      	mov	r1, r5
 800b070:	4620      	mov	r0, r4
 800b072:	f00c ff3f 	bl	8017ef4 <_ZN8touchgfx6muldivElll>
 800b076:	4602      	mov	r2, r0
 800b078:	f107 0314 	add.w	r3, r7, #20
 800b07c:	4611      	mov	r1, r2
 800b07e:	4618      	mov	r0, r3
 800b080:	f7ff ff98 	bl	800afb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800b084:	697b      	ldr	r3, [r7, #20]
    }
 800b086:	4618      	mov	r0, r3
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bdb0      	pop	{r4, r5, r7, pc}

0800b08e <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800b08e:	b580      	push	{r7, lr}
 800b090:	b094      	sub	sp, #80	; 0x50
 800b092:	af00      	add	r7, sp, #0
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	60b9      	str	r1, [r7, #8]
 800b098:	607a      	str	r2, [r7, #4]
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800b09a:	f107 0310 	add.w	r3, r7, #16
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	68b9      	ldr	r1, [r7, #8]
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f00c ff07 	bl	8017eb6 <_ZN8touchgfx6muldivElllRl>
 800b0a8:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (result >= 0)
 800b0aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	db2f      	blt.n	800b110 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x82>
 800b0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0b2:	64bb      	str	r3, [r7, #72]	; 0x48
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800b0b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b0bc:	4611      	mov	r1, r2
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7ff ff78 	bl	800afb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800b0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
 800b0c6:	617b      	str	r3, [r7, #20]
 800b0c8:	f107 031c 	add.w	r3, r7, #28
 800b0cc:	2120      	movs	r1, #32
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7ff ff70 	bl	800afb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	f107 0320 	add.w	r3, r7, #32
 800b0da:	4611      	mov	r1, r2
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7ff ff69 	bl	800afb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800b0e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0e6:	6879      	ldr	r1, [r7, #4]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7ff ff63 	bl	800afb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800b0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f0:	6a39      	ldr	r1, [r7, #32]
 800b0f2:	69f8      	ldr	r0, [r7, #28]
 800b0f4:	f7ff ffa3 	bl	800b03e <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	61bb      	str	r3, [r7, #24]
 800b0fc:	f107 0218 	add.w	r2, r7, #24
 800b100:	f107 0314 	add.w	r3, r7, #20
 800b104:	4611      	mov	r1, r2
 800b106:	4618      	mov	r0, r3
 800b108:	f7ff ff6f 	bl	800afea <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>
 800b10c:	4603      	mov	r3, r0
 800b10e:	e02e      	b.n	800b16e <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0xe0>
 800b110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b112:	647b      	str	r3, [r7, #68]	; 0x44
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800b114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b11c:	4611      	mov	r1, r2
 800b11e:	4618      	mov	r0, r3
 800b120:	f7ff ff48 	bl	800afb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800b124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
 800b126:	62bb      	str	r3, [r7, #40]	; 0x28
 800b128:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b12c:	2120      	movs	r1, #32
 800b12e:	4618      	mov	r0, r3
 800b130:	f7ff ff40 	bl	800afb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b13a:	4611      	mov	r1, r2
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7ff ff39 	bl	800afb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800b142:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b146:	6879      	ldr	r1, [r7, #4]
 800b148:	4618      	mov	r0, r3
 800b14a:	f7ff ff33 	bl	800afb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800b14e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b150:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b154:	f7ff ff73 	bl	800b03e <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>
 800b158:	4603      	mov	r3, r0
 800b15a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b15c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b160:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b164:	4611      	mov	r1, r2
 800b166:	4618      	mov	r0, r3
 800b168:	f7ff ff54 	bl	800b014 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 800b16c:	4603      	mov	r3, r0
    }
 800b16e:	4618      	mov	r0, r3
 800b170:	3750      	adds	r7, #80	; 0x50
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
     *
     * @return The scaling factor.
     *
     * @see setScaleX, setScaleY, getScaleY
     */
    virtual int getScaleX() const
 800b176:	b480      	push	{r7}
 800b178:	b083      	sub	sp, #12
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
    {
        return xScale;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }
 800b182:	4618      	mov	r0, r3
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
     *
     * @return The scaling factor.
     *
     * @see setScaleY, setScaleX, getScaleX
     */
    virtual int getScaleY() const
 800b18e:	b480      	push	{r7}
 800b190:	b083      	sub	sp, #12
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
    {
        return yScale;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 800b19a:	4618      	mov	r0, r3
 800b19c:	370c      	adds	r7, #12
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha()
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
 800b1a6:	b480      	push	{r7}
 800b1a8:	b083      	sub	sp, #12
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	78fa      	ldrb	r2, [r7, #3]
 800b1b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }
 800b1ba:	bf00      	nop
 800b1bc:	370c      	adds	r7, #12
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b08c      	sub	sp, #48	; 0x30
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	60b9      	str	r1, [r7, #8]
 800b1d0:	607a      	str	r2, [r7, #4]
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	33a4      	adds	r3, #164	; 0xa4
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	61fa      	str	r2, [r7, #28]
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	61ba      	str	r2, [r7, #24]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 800b1e2:	69fa      	ldr	r2, [r7, #28]
 800b1e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b1e6:	69b9      	ldr	r1, [r7, #24]
 800b1e8:	6179      	str	r1, [r7, #20]
 800b1ea:	613a      	str	r2, [r7, #16]
        return i * scale;
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	6939      	ldr	r1, [r7, #16]
 800b1f0:	fb01 f002 	mul.w	r0, r1, r2
        return int2scaled(i, xScale);
 800b1f4:	bf00      	nop
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	62ba      	str	r2, [r7, #40]	; 0x28
 800b1fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b200:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b204:	6279      	str	r1, [r7, #36]	; 0x24
 800b206:	623a      	str	r2, [r7, #32]
        return i * scale;
 800b208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b20a:	6a39      	ldr	r1, [r7, #32]
 800b20c:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800b210:	bf00      	nop
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 800b212:	4601      	mov	r1, r0
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	4798      	blx	r3
    }
 800b218:	bf00      	nop
 800b21a:	3730      	adds	r7, #48	; 0x30
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
    virtual void setGraphRangeX(float min, float max)
 800b220:	b580      	push	{r7, lr}
 800b222:	b08e      	sub	sp, #56	; 0x38
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	ed87 0a02 	vstr	s0, [r7, #8]
 800b22c:	edc7 0a01 	vstr	s1, [r7, #4]
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	33a4      	adds	r3, #164	; 0xa4
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	623a      	str	r2, [r7, #32]
 800b23c:	68ba      	ldr	r2, [r7, #8]
 800b23e:	61fa      	str	r2, [r7, #28]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int float2scaledX(float f) const
    {
        return float2scaled(f, xScale);
 800b240:	6a3a      	ldr	r2, [r7, #32]
 800b242:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b244:	69f9      	ldr	r1, [r7, #28]
 800b246:	61b9      	str	r1, [r7, #24]
 800b248:	617a      	str	r2, [r7, #20]
        const float fs = f * (float)scale;
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	ee07 2a90 	vmov	s15, r2
 800b250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b254:	ed97 7a06 	vldr	s14, [r7, #24]
 800b258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b25c:	edc7 7a04 	vstr	s15, [r7, #16]
        if (fs >= 0)
 800b260:	edd7 7a04 	vldr	s15, [r7, #16]
 800b264:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b26c:	db0a      	blt.n	800b284 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x64>
            return (int)(fs + 0.5f);
 800b26e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b272:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b276:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b27a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b27e:	ee17 0a90 	vmov	r0, s15
 800b282:	e019      	b.n	800b2b8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800b284:	edd7 7a04 	vldr	s15, [r7, #16]
 800b288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b28c:	ee17 2a90 	vmov	r2, s15
 800b290:	3a01      	subs	r2, #1
 800b292:	edd7 7a04 	vldr	s15, [r7, #16]
 800b296:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b29a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b29e:	ed97 7a04 	vldr	s14, [r7, #16]
 800b2a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2a6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800b2aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b2b2:	ee17 1a90 	vmov	r1, s15
 800b2b6:	1850      	adds	r0, r2, r1
        return float2scaled(f, xScale);
 800b2b8:	bf00      	nop
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	637a      	str	r2, [r7, #52]	; 0x34
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	633a      	str	r2, [r7, #48]	; 0x30
 800b2c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b2c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b2ca:	62ba      	str	r2, [r7, #40]	; 0x28
        const float fs = f * (float)scale;
 800b2cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2ce:	ee07 2a90 	vmov	s15, r2
 800b2d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2d6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b2da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        if (fs >= 0)
 800b2e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b2e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ee:	db0a      	blt.n	800b306 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0xe6>
            return (int)(fs + 0.5f);
 800b2f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b2f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b2f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b300:	ee17 2a90 	vmov	r2, s15
 800b304:	e019      	b.n	800b33a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x11a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800b306:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b30a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b30e:	ee17 2a90 	vmov	r2, s15
 800b312:	3a01      	subs	r2, #1
 800b314:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b31c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b320:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b324:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b328:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800b32c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b334:	ee17 1a90 	vmov	r1, s15
 800b338:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800b33a:	bf00      	nop
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800b33c:	4601      	mov	r1, r0
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	4798      	blx	r3
    }
 800b342:	bf00      	nop
 800b344:	3738      	adds	r7, #56	; 0x38
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b088      	sub	sp, #32
 800b34e:	af00      	add	r7, sp, #0
 800b350:	60f8      	str	r0, [r7, #12]
 800b352:	460b      	mov	r3, r1
 800b354:	607a      	str	r2, [r7, #4]
 800b356:	72fb      	strb	r3, [r7, #11]
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	33b0      	adds	r3, #176	; 0xb0
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	61fa      	str	r2, [r7, #28]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, xScale);
 800b368:	69fa      	ldr	r2, [r7, #28]
 800b36a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b36c:	69b9      	ldr	r1, [r7, #24]
 800b36e:	6179      	str	r1, [r7, #20]
 800b370:	613a      	str	r2, [r7, #16]
        return i * scale;
 800b372:	697a      	ldr	r2, [r7, #20]
 800b374:	6939      	ldr	r1, [r7, #16]
 800b376:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800b37a:	bf00      	nop
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800b37c:	7af9      	ldrb	r1, [r7, #11]
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	4798      	blx	r3
    }
 800b382:	bf00      	nop
 800b384:	3720      	adds	r7, #32
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b08a      	sub	sp, #40	; 0x28
 800b38e:	af00      	add	r7, sp, #0
 800b390:	60f8      	str	r0, [r7, #12]
 800b392:	460b      	mov	r3, r1
 800b394:	ed87 0a01 	vstr	s0, [r7, #4]
 800b398:	72fb      	strb	r3, [r7, #11]
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	33b0      	adds	r3, #176	; 0xb0
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	627a      	str	r2, [r7, #36]	; 0x24
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	623a      	str	r2, [r7, #32]
        return float2scaled(f, xScale);
 800b3aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b3ae:	6a39      	ldr	r1, [r7, #32]
 800b3b0:	61f9      	str	r1, [r7, #28]
 800b3b2:	61ba      	str	r2, [r7, #24]
        const float fs = f * (float)scale;
 800b3b4:	69ba      	ldr	r2, [r7, #24]
 800b3b6:	ee07 2a90 	vmov	s15, r2
 800b3ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3be:	ed97 7a07 	vldr	s14, [r7, #28]
 800b3c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3c6:	edc7 7a05 	vstr	s15, [r7, #20]
        if (fs >= 0)
 800b3ca:	edd7 7a05 	vldr	s15, [r7, #20]
 800b3ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d6:	db0a      	blt.n	800b3ee <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x64>
            return (int)(fs + 0.5f);
 800b3d8:	edd7 7a05 	vldr	s15, [r7, #20]
 800b3dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b3e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b3e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3e8:	ee17 2a90 	vmov	r2, s15
 800b3ec:	e019      	b.n	800b422 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800b3ee:	edd7 7a05 	vldr	s15, [r7, #20]
 800b3f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3f6:	ee17 2a90 	vmov	r2, s15
 800b3fa:	3a01      	subs	r2, #1
 800b3fc:	edd7 7a05 	vldr	s15, [r7, #20]
 800b400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b408:	ed97 7a05 	vldr	s14, [r7, #20]
 800b40c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b410:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800b414:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b41c:	ee17 1a90 	vmov	r1, s15
 800b420:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800b422:	bf00      	nop
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800b424:	7af9      	ldrb	r1, [r7, #11]
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	4798      	blx	r3
    }
 800b42a:	bf00      	nop
 800b42c:	3728      	adds	r7, #40	; 0x28
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 800b432:	b580      	push	{r7, lr}
 800b434:	b08c      	sub	sp, #48	; 0x30
 800b436:	af00      	add	r7, sp, #0
 800b438:	60f8      	str	r0, [r7, #12]
 800b43a:	60b9      	str	r1, [r7, #8]
 800b43c:	607a      	str	r2, [r7, #4]
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	33bc      	adds	r3, #188	; 0xbc
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	61fa      	str	r2, [r7, #28]
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, yScale);
 800b44e:	69fa      	ldr	r2, [r7, #28]
 800b450:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b452:	69b9      	ldr	r1, [r7, #24]
 800b454:	6179      	str	r1, [r7, #20]
 800b456:	613a      	str	r2, [r7, #16]
        return i * scale;
 800b458:	697a      	ldr	r2, [r7, #20]
 800b45a:	6939      	ldr	r1, [r7, #16]
 800b45c:	fb01 f002 	mul.w	r0, r1, r2
        return int2scaled(i, yScale);
 800b460:	bf00      	nop
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	62ba      	str	r2, [r7, #40]	; 0x28
 800b46a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b46c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b46e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b470:	6279      	str	r1, [r7, #36]	; 0x24
 800b472:	623a      	str	r2, [r7, #32]
        return i * scale;
 800b474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b476:	6a39      	ldr	r1, [r7, #32]
 800b478:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, yScale);
 800b47c:	bf00      	nop
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800b47e:	4601      	mov	r1, r0
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	4798      	blx	r3
    }
 800b484:	bf00      	nop
 800b486:	3730      	adds	r7, #48	; 0x30
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
    virtual void setGraphRangeY(float min, float max)
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b08e      	sub	sp, #56	; 0x38
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	ed87 0a02 	vstr	s0, [r7, #8]
 800b498:	edc7 0a01 	vstr	s1, [r7, #4]
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	33bc      	adds	r3, #188	; 0xbc
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	623a      	str	r2, [r7, #32]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	61fa      	str	r2, [r7, #28]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int float2scaledY(float f) const
    {
        return float2scaled(f, yScale);
 800b4ac:	6a3a      	ldr	r2, [r7, #32]
 800b4ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b4b0:	69f9      	ldr	r1, [r7, #28]
 800b4b2:	61b9      	str	r1, [r7, #24]
 800b4b4:	617a      	str	r2, [r7, #20]
        const float fs = f * (float)scale;
 800b4b6:	697a      	ldr	r2, [r7, #20]
 800b4b8:	ee07 2a90 	vmov	s15, r2
 800b4bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4c0:	ed97 7a06 	vldr	s14, [r7, #24]
 800b4c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4c8:	edc7 7a04 	vstr	s15, [r7, #16]
        if (fs >= 0)
 800b4cc:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d8:	db0a      	blt.n	800b4f0 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x64>
            return (int)(fs + 0.5f);
 800b4da:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b4e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b4e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4ea:	ee17 0a90 	vmov	r0, s15
 800b4ee:	e019      	b.n	800b524 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800b4f0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4f8:	ee17 2a90 	vmov	r2, s15
 800b4fc:	3a01      	subs	r2, #1
 800b4fe:	edd7 7a04 	vldr	s15, [r7, #16]
 800b502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b50a:	ed97 7a04 	vldr	s14, [r7, #16]
 800b50e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b512:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800b516:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b51a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b51e:	ee17 1a90 	vmov	r1, s15
 800b522:	1850      	adds	r0, r2, r1
        return float2scaled(f, yScale);
 800b524:	bf00      	nop
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	637a      	str	r2, [r7, #52]	; 0x34
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	633a      	str	r2, [r7, #48]	; 0x30
 800b52e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b530:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b534:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b536:	62ba      	str	r2, [r7, #40]	; 0x28
        const float fs = f * (float)scale;
 800b538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b53a:	ee07 2a90 	vmov	s15, r2
 800b53e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b542:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b54a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        if (fs >= 0)
 800b54e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b552:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b55a:	db0a      	blt.n	800b572 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0xe6>
            return (int)(fs + 0.5f);
 800b55c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b560:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b564:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b56c:	ee17 2a90 	vmov	r2, s15
 800b570:	e019      	b.n	800b5a6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x11a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800b572:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b576:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b57a:	ee17 2a90 	vmov	r2, s15
 800b57e:	3a01      	subs	r2, #1
 800b580:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b58c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b590:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b594:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800b598:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b59c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5a0:	ee17 1a90 	vmov	r1, s15
 800b5a4:	440a      	add	r2, r1
        return float2scaled(f, yScale);
 800b5a6:	bf00      	nop
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800b5a8:	4601      	mov	r1, r0
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	4798      	blx	r3
    }
 800b5ae:	bf00      	nop
 800b5b0:	3738      	adds	r7, #56	; 0x38
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b088      	sub	sp, #32
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	60f8      	str	r0, [r7, #12]
 800b5be:	460b      	mov	r3, r1
 800b5c0:	607a      	str	r2, [r7, #4]
 800b5c2:	72fb      	strb	r3, [r7, #11]
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	33c0      	adds	r3, #192	; 0xc0
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	61fa      	str	r2, [r7, #28]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, yScale);
 800b5d4:	69fa      	ldr	r2, [r7, #28]
 800b5d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b5d8:	69b9      	ldr	r1, [r7, #24]
 800b5da:	6179      	str	r1, [r7, #20]
 800b5dc:	613a      	str	r2, [r7, #16]
        return i * scale;
 800b5de:	697a      	ldr	r2, [r7, #20]
 800b5e0:	6939      	ldr	r1, [r7, #16]
 800b5e2:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, yScale);
 800b5e6:	bf00      	nop
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800b5e8:	7af9      	ldrb	r1, [r7, #11]
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	4798      	blx	r3
    }
 800b5ee:	bf00      	nop
 800b5f0:	3720      	adds	r7, #32
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b08a      	sub	sp, #40	; 0x28
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	60f8      	str	r0, [r7, #12]
 800b5fe:	460b      	mov	r3, r1
 800b600:	ed87 0a01 	vstr	s0, [r7, #4]
 800b604:	72fb      	strb	r3, [r7, #11]
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	33c0      	adds	r3, #192	; 0xc0
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	627a      	str	r2, [r7, #36]	; 0x24
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	623a      	str	r2, [r7, #32]
        return float2scaled(f, yScale);
 800b616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b618:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b61a:	6a39      	ldr	r1, [r7, #32]
 800b61c:	61f9      	str	r1, [r7, #28]
 800b61e:	61ba      	str	r2, [r7, #24]
        const float fs = f * (float)scale;
 800b620:	69ba      	ldr	r2, [r7, #24]
 800b622:	ee07 2a90 	vmov	s15, r2
 800b626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b62a:	ed97 7a07 	vldr	s14, [r7, #28]
 800b62e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b632:	edc7 7a05 	vstr	s15, [r7, #20]
        if (fs >= 0)
 800b636:	edd7 7a05 	vldr	s15, [r7, #20]
 800b63a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b642:	db0a      	blt.n	800b65a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x64>
            return (int)(fs + 0.5f);
 800b644:	edd7 7a05 	vldr	s15, [r7, #20]
 800b648:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b64c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b654:	ee17 2a90 	vmov	r2, s15
 800b658:	e019      	b.n	800b68e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800b65a:	edd7 7a05 	vldr	s15, [r7, #20]
 800b65e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b662:	ee17 2a90 	vmov	r2, s15
 800b666:	3a01      	subs	r2, #1
 800b668:	edd7 7a05 	vldr	s15, [r7, #20]
 800b66c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b674:	ed97 7a05 	vldr	s14, [r7, #20]
 800b678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b67c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800b680:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b688:	ee17 1a90 	vmov	r1, s15
 800b68c:	440a      	add	r2, r1
        return float2scaled(f, yScale);
 800b68e:	bf00      	nop
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 800b690:	7af9      	ldrb	r1, [r7, #11]
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	4798      	blx	r3
    }
 800b696:	bf00      	nop
 800b698:	3728      	adds	r7, #40	; 0x28
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
    virtual int getGraphRangeXMinAsInt() const
 800b69e:	b480      	push	{r7}
 800b6a0:	b087      	sub	sp, #28
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
        return scaled2intX(graphRangeMinX);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	617a      	str	r2, [r7, #20]
 800b6b0:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	60fa      	str	r2, [r7, #12]
 800b6ba:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	db0a      	blt.n	800b6d8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	005a      	lsls	r2, r3, #1
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	441a      	add	r2, r3
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	fb92 f3f3 	sdiv	r3, r2, r3
 800b6d0:	0fda      	lsrs	r2, r3, #31
 800b6d2:	4413      	add	r3, r2
 800b6d4:	105b      	asrs	r3, r3, #1
 800b6d6:	e00f      	b.n	800b6f8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	07db      	lsls	r3, r3, #31
 800b6de:	1a9b      	subs	r3, r3, r2
 800b6e0:	005b      	lsls	r3, r3, #1
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	1e5a      	subs	r2, r3, #1
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	fb92 f3f3 	sdiv	r3, r2, r3
 800b6f0:	0fda      	lsrs	r2, r3, #31
 800b6f2:	4413      	add	r3, r2
 800b6f4:	105b      	asrs	r3, r3, #1
 800b6f6:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800b6f8:	bf00      	nop
    }
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	371c      	adds	r7, #28
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
    virtual float getGraphRangeXMinAsFloat() const
 800b706:	b480      	push	{r7}
 800b708:	b087      	sub	sp, #28
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
        return scaled2floatX(graphRangeMinX);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	617a      	str	r2, [r7, #20]
 800b718:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION float scaled2floatX(int i) const
    {
        return scaled2float(i, xScale);
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	60fa      	str	r2, [r7, #12]
 800b722:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	ee07 3a90 	vmov	s15, r3
 800b72a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	ee07 3a90 	vmov	s15, r3
 800b734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b738:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800b73c:	bf00      	nop
        return scaled2floatX(graphRangeMinX);
 800b73e:	eef0 7a66 	vmov.f32	s15, s13
    }
 800b742:	eeb0 0a67 	vmov.f32	s0, s15
 800b746:	371c      	adds	r7, #28
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    virtual int getGraphRangeXMinScaled() const
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
        return graphRangeMinX;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
    }
 800b75e:	4618      	mov	r0, r3
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
    virtual int getGraphRangeXMaxAsInt() const
 800b76a:	b480      	push	{r7}
 800b76c:	b087      	sub	sp, #28
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
        return scaled2intX(graphRangeMaxX);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	617a      	str	r2, [r7, #20]
 800b77c:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b782:	693a      	ldr	r2, [r7, #16]
 800b784:	60fa      	str	r2, [r7, #12]
 800b786:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	db0a      	blt.n	800b7a4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	005a      	lsls	r2, r3, #1
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	441a      	add	r2, r3
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	fb92 f3f3 	sdiv	r3, r2, r3
 800b79c:	0fda      	lsrs	r2, r3, #31
 800b79e:	4413      	add	r3, r2
 800b7a0:	105b      	asrs	r3, r3, #1
 800b7a2:	e00f      	b.n	800b7c4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	07db      	lsls	r3, r3, #31
 800b7aa:	1a9b      	subs	r3, r3, r2
 800b7ac:	005b      	lsls	r3, r3, #1
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	1e5a      	subs	r2, r3, #1
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	fb92 f3f3 	sdiv	r3, r2, r3
 800b7bc:	0fda      	lsrs	r2, r3, #31
 800b7be:	4413      	add	r3, r2
 800b7c0:	105b      	asrs	r3, r3, #1
 800b7c2:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800b7c4:	bf00      	nop
    }
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	371c      	adds	r7, #28
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr

0800b7d2 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
    virtual float getGraphRangeXMaxAsFloat() const
 800b7d2:	b480      	push	{r7}
 800b7d4:	b087      	sub	sp, #28
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
        return scaled2floatX(graphRangeMaxX);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	617a      	str	r2, [r7, #20]
 800b7e4:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ea:	693a      	ldr	r2, [r7, #16]
 800b7ec:	60fa      	str	r2, [r7, #12]
 800b7ee:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	ee07 3a90 	vmov	s15, r3
 800b7f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	ee07 3a90 	vmov	s15, r3
 800b800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b804:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800b808:	bf00      	nop
        return scaled2floatX(graphRangeMaxX);
 800b80a:	eef0 7a66 	vmov.f32	s15, s13
    }
 800b80e:	eeb0 0a67 	vmov.f32	s0, s15
 800b812:	371c      	adds	r7, #28
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    virtual int getGraphRangeXMaxScaled() const
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
        return graphRangeMaxX;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    }
 800b82a:	4618      	mov	r0, r3
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
    virtual int getGraphRangeYMinAsInt() const
 800b836:	b480      	push	{r7}
 800b838:	b087      	sub	sp, #28
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
        return scaled2intY(graphRangeMinY);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	617a      	str	r2, [r7, #20]
 800b848:	613b      	str	r3, [r7, #16]
        return scaled2int(i, yScale);
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84e:	693a      	ldr	r2, [r7, #16]
 800b850:	60fa      	str	r2, [r7, #12]
 800b852:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	db0a      	blt.n	800b870 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	005a      	lsls	r2, r3, #1
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	441a      	add	r2, r3
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	fb92 f3f3 	sdiv	r3, r2, r3
 800b868:	0fda      	lsrs	r2, r3, #31
 800b86a:	4413      	add	r3, r2
 800b86c:	105b      	asrs	r3, r3, #1
 800b86e:	e00f      	b.n	800b890 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	4613      	mov	r3, r2
 800b874:	07db      	lsls	r3, r3, #31
 800b876:	1a9b      	subs	r3, r3, r2
 800b878:	005b      	lsls	r3, r3, #1
 800b87a:	461a      	mov	r2, r3
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	4413      	add	r3, r2
 800b880:	1e5a      	subs	r2, r3, #1
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	fb92 f3f3 	sdiv	r3, r2, r3
 800b888:	0fda      	lsrs	r2, r3, #31
 800b88a:	4413      	add	r3, r2
 800b88c:	105b      	asrs	r3, r3, #1
 800b88e:	425b      	negs	r3, r3
        return scaled2int(i, yScale);
 800b890:	bf00      	nop
    }
 800b892:	4618      	mov	r0, r3
 800b894:	371c      	adds	r7, #28
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr

0800b89e <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
    virtual float getGraphRangeYMinAsFloat() const
 800b89e:	b480      	push	{r7}
 800b8a0:	b087      	sub	sp, #28
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
        return scaled2floatY(graphRangeMinY);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	617a      	str	r2, [r7, #20]
 800b8b0:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION float scaled2floatY(int i) const
    {
        return scaled2float(i, yScale);
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	60fa      	str	r2, [r7, #12]
 800b8ba:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	ee07 3a90 	vmov	s15, r3
 800b8c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	ee07 3a90 	vmov	s15, r3
 800b8cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, yScale);
 800b8d4:	bf00      	nop
        return scaled2floatY(graphRangeMinY);
 800b8d6:	eef0 7a66 	vmov.f32	s15, s13
    }
 800b8da:	eeb0 0a67 	vmov.f32	s0, s15
 800b8de:	371c      	adds	r7, #28
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    virtual int getGraphRangeYMinScaled() const
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
        return graphRangeMinY;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    }
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	370c      	adds	r7, #12
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
    virtual int getGraphRangeYMaxAsInt() const
 800b902:	b480      	push	{r7}
 800b904:	b087      	sub	sp, #28
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
        return scaled2intY(graphRangeMaxY);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	617a      	str	r2, [r7, #20]
 800b914:	613b      	str	r3, [r7, #16]
        return scaled2int(i, yScale);
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b91a:	693a      	ldr	r2, [r7, #16]
 800b91c:	60fa      	str	r2, [r7, #12]
 800b91e:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	db0a      	blt.n	800b93c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	005a      	lsls	r2, r3, #1
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	441a      	add	r2, r3
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	fb92 f3f3 	sdiv	r3, r2, r3
 800b934:	0fda      	lsrs	r2, r3, #31
 800b936:	4413      	add	r3, r2
 800b938:	105b      	asrs	r3, r3, #1
 800b93a:	e00f      	b.n	800b95c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	4613      	mov	r3, r2
 800b940:	07db      	lsls	r3, r3, #31
 800b942:	1a9b      	subs	r3, r3, r2
 800b944:	005b      	lsls	r3, r3, #1
 800b946:	461a      	mov	r2, r3
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	4413      	add	r3, r2
 800b94c:	1e5a      	subs	r2, r3, #1
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	fb92 f3f3 	sdiv	r3, r2, r3
 800b954:	0fda      	lsrs	r2, r3, #31
 800b956:	4413      	add	r3, r2
 800b958:	105b      	asrs	r3, r3, #1
 800b95a:	425b      	negs	r3, r3
        return scaled2int(i, yScale);
 800b95c:	bf00      	nop
    }
 800b95e:	4618      	mov	r0, r3
 800b960:	371c      	adds	r7, #28
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr

0800b96a <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
    virtual float getGraphRangeYMaxAsFloat() const
 800b96a:	b480      	push	{r7}
 800b96c:	b087      	sub	sp, #28
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
        return scaled2floatY(graphRangeMaxY);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	617a      	str	r2, [r7, #20]
 800b97c:	613b      	str	r3, [r7, #16]
        return scaled2float(i, yScale);
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b982:	693a      	ldr	r2, [r7, #16]
 800b984:	60fa      	str	r2, [r7, #12]
 800b986:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	ee07 3a90 	vmov	s15, r3
 800b98e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	ee07 3a90 	vmov	s15, r3
 800b998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b99c:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, yScale);
 800b9a0:	bf00      	nop
        return scaled2floatY(graphRangeMaxY);
 800b9a2:	eef0 7a66 	vmov.f32	s15, s13
    }
 800b9a6:	eeb0 0a67 	vmov.f32	s0, s15
 800b9aa:	371c      	adds	r7, #28
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    virtual int getGraphRangeYMaxScaled() const
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
        return graphRangeMaxY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
    }
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	370c      	adds	r7, #12
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
     * @return The given data converted to a new scale.
     */
    static int convertToNewScale(int value, int oldScale, int newScale);

    /** Invalidate content. */
    virtual void invalidateContent() const
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b082      	sub	sp, #8
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
    {
        if (alpha > 0)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d003      	beq.n	800b9e8 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0x1a>
        {
            Container::invalidateContent();
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f005 fb91 	bl	801110a <_ZNK8touchgfx9Container17invalidateContentEv>
        }
    }
 800b9e8:	bf00      	nop
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
     *
     * @param  x The x value.
     *
     * @return The screen x coordinate for the given value.
     */
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 800b9f0:	b590      	push	{r4, r7, lr}
 800b9f2:	b089      	sub	sp, #36	; 0x24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
    {
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	1ad4      	subs	r4, r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	61bb      	str	r3, [r7, #24]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	3338      	adds	r3, #56	; 0x38
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7ff f80a 	bl	800aa26 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ba12:	4603      	mov	r3, r0
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	; 0x116
 800ba1c:	b299      	uxth	r1, r3
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	; 0x118
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	440b      	add	r3, r1
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	b21b      	sxth	r3, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 800ba30:	1e59      	subs	r1, r3, #1
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	461a      	mov	r2, r3
 800ba42:	4620      	mov	r0, r4
 800ba44:	f7ff fb23 	bl	800b08e <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	60fb      	str	r3, [r7, #12]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	; 0x116
 800ba52:	83fb      	strh	r3, [r7, #30]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800ba54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ba58:	015a      	lsls	r2, r3, #5
 800ba5a:	f107 0314 	add.w	r3, r7, #20
 800ba5e:	4611      	mov	r1, r2
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7ff faa7 	bl	800afb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	613b      	str	r3, [r7, #16]
 800ba6a:	f107 0210 	add.w	r2, r7, #16
 800ba6e:	f107 030c 	add.w	r3, r7, #12
 800ba72:	4611      	mov	r1, r2
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7ff fab8 	bl	800afea <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>
 800ba7a:	4603      	mov	r3, r0
    }
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3724      	adds	r7, #36	; 0x24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd90      	pop	{r4, r7, pc}

0800ba84 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
     *
     * @param  y The y value.
     *
     * @return The screen y coordinate for the given value.
     */
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b088      	sub	sp, #32
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	617b      	str	r3, [r7, #20]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	3338      	adds	r3, #56	; 0x38
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7fe ffd2 	bl	800aa40 <_ZNK8touchgfx8Drawable9getHeightEv>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 800baa6:	b299      	uxth	r1, r3
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	; 0x11a
 800baae:	b29b      	uxth	r3, r3
 800bab0:	440b      	add	r3, r1
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	b21b      	sxth	r3, r3
    {
        const int16_t graphAreaHeight = getGraphAreaHeight();
 800baba:	83fb      	strh	r3, [r7, #30]
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 800babc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	f9b2 2114 	ldrsh.w	r2, [r2, #276]	; 0x114
 800bac6:	4413      	add	r3, r2
 800bac8:	3b01      	subs	r3, #1
 800baca:	61bb      	str	r3, [r7, #24]
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	015a      	lsls	r2, r3, #5
 800bad0:	f107 0310 	add.w	r3, r7, #16
 800bad4:	4611      	mov	r1, r2
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7ff fa6c 	bl	800afb4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	60bb      	str	r3, [r7, #8]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	1ad0      	subs	r0, r2, r3
 800baea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800baee:	1e59      	subs	r1, r3, #1
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	461a      	mov	r2, r3
 800bb00:	f7ff fac5 	bl	800b08e <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 800bb04:	4603      	mov	r3, r0
 800bb06:	60fb      	str	r3, [r7, #12]
 800bb08:	f107 020c 	add.w	r2, r7, #12
 800bb0c:	f107 0308 	add.w	r3, r7, #8
 800bb10:	4611      	mov	r1, r2
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7ff fa7e 	bl	800b014 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 800bb18:	4603      	mov	r3, r0
    }
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3720      	adds	r7, #32
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
	...

0800bb24 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	4a05      	ldr	r2, [pc, #20]	; (800bb44 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	601a      	str	r2, [r3, #0]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7fe ff17 	bl	800a968 <_ZN8touchgfx8DrawableD1Ev>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	0802a340 	.word	0x0802a340

0800bb48 <_ZN8touchgfx9ContainerD0Ev>:
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f7ff ffe7 	bl	800bb24 <_ZN8touchgfx9ContainerD1Ev>
 800bb56:	212c      	movs	r1, #44	; 0x2c
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f01a f993 	bl	8025e84 <_ZdlPvj>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4618      	mov	r0, r3
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <_ZN8touchgfx17AbstractDataGraphD1Ev>:
class AbstractDataGraph : public Container
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	4a12      	ldr	r2, [pc, #72]	; (800bbbc <_ZN8touchgfx17AbstractDataGraphD1Ev+0x54>)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	601a      	str	r2, [r3, #0]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	33e8      	adds	r3, #232	; 0xe8
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7ff ffd2 	bl	800bb24 <_ZN8touchgfx9ContainerD1Ev>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	33bc      	adds	r3, #188	; 0xbc
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7ff ffcd 	bl	800bb24 <_ZN8touchgfx9ContainerD1Ev>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	3390      	adds	r3, #144	; 0x90
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7ff ffc8 	bl	800bb24 <_ZN8touchgfx9ContainerD1Ev>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	3364      	adds	r3, #100	; 0x64
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7ff ffc3 	bl	800bb24 <_ZN8touchgfx9ContainerD1Ev>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	3338      	adds	r3, #56	; 0x38
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7ff ffbe 	bl	800bb24 <_ZN8touchgfx9ContainerD1Ev>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7ff ffba 	bl	800bb24 <_ZN8touchgfx9ContainerD1Ev>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	0802a770 	.word	0x0802a770

0800bbc0 <_ZN8touchgfx17AbstractDataGraphD0Ev>:
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f7ff ffcd 	bl	800bb68 <_ZN8touchgfx17AbstractDataGraphD1Ev>
 800bbce:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f01a f956 	bl	8025e84 <_ZdlPvj>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
	...

0800bbe4 <_ZN8touchgfx16DynamicDataGraphC1EsPi>:
     * Initializes a new instance of the AbstractDataGraphWithY class.
     *
     * @param      capacity The capacity.
     * @param [in] values   Address where to store the y values of the graph.
     */
    DynamicDataGraph(int16_t capacity, int* values)
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	460b      	mov	r3, r1
 800bbee:	607a      	str	r2, [r7, #4]
 800bbf0:	817b      	strh	r3, [r7, #10]
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f007 f81a 	bl	8012c34 <_ZN8touchgfx17AbstractDataGraphC1Es>
 800bc00:	4a0f      	ldr	r2, [pc, #60]	; (800bc40 <_ZN8touchgfx16DynamicDataGraphC1EsPi+0x5c>)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	601a      	str	r2, [r3, #0]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    {
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	461a      	mov	r2, r3
 800bc30:	2100      	movs	r1, #0
 800bc32:	f7ff fac8 	bl	800b1c6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    }
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	0802a5d8 	.word	0x0802a5d8

0800bc44 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @see getScale
     *
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	4613      	mov	r3, r2
 800bc50:	71fb      	strb	r3, [r7, #7]
    {
        setScaleX(scale, updateData);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	3388      	adds	r3, #136	; 0x88
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	79fa      	ldrb	r2, [r7, #7]
 800bc5c:	68b9      	ldr	r1, [r7, #8]
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	4798      	blx	r3
        setScaleY(scale, updateData);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	3390      	adds	r3, #144	; 0x90
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	79fa      	ldrb	r2, [r7, #7]
 800bc6c:	68b9      	ldr	r1, [r7, #8]
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	4798      	blx	r3
    }
 800bc72:	bf00      	nop
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @return The scaling factor.
     *
     * @see setScale
     */
    virtual int getScale() const
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b082      	sub	sp, #8
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
    {
        return getScaleY();
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	3394      	adds	r3, #148	; 0x94
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	4798      	blx	r3
 800bc8e:	4603      	mov	r3, r0
    }
 800bc90:	4618      	mov	r0, r3
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
    /**
     * Gets the minimum x coordinate for the graph.
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
    {
        return getGraphRangeXMinScaled();
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	33d4      	adds	r3, #212	; 0xd4
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4610      	mov	r0, r2
 800bcac:	4798      	blx	r3
 800bcae:	4603      	mov	r3, r0
    }
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
    /**
     * Gets the maximum x coordinate for the graph.
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
    {
        return getGraphRangeXMaxScaled();
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	33e0      	adds	r3, #224	; 0xe0
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4610      	mov	r0, r2
 800bccc:	4798      	blx	r3
 800bcce:	4603      	mov	r3, r0
    }
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 800bcd8:	b5b0      	push	{r4, r5, r7, lr}
 800bcda:	b08c      	sub	sp, #48	; 0x30
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	460b      	mov	r3, r1
 800bce2:	607a      	str	r2, [r7, #4]
 800bce4:	72fb      	strb	r3, [r7, #11]
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	33a4      	adds	r3, #164	; 0xa4
 800bcee:	681c      	ldr	r4, [r3, #0]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	61fb      	str	r3, [r7, #28]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	61bb      	str	r3, [r7, #24]
        return scaled2int(i, xScale);
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfc:	69ba      	ldr	r2, [r7, #24]
 800bcfe:	617a      	str	r2, [r7, #20]
 800bd00:	613b      	str	r3, [r7, #16]
        if (i >= 0)
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	db0a      	blt.n	800bd1e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x46>
            return ((i * 2 + scale) / scale) / 2;
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	005a      	lsls	r2, r3, #1
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	441a      	add	r2, r3
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	fb92 f3f3 	sdiv	r3, r2, r3
 800bd16:	0fda      	lsrs	r2, r3, #31
 800bd18:	4413      	add	r3, r2
 800bd1a:	105b      	asrs	r3, r3, #1
 800bd1c:	e00f      	b.n	800bd3e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x66>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800bd1e:	697a      	ldr	r2, [r7, #20]
 800bd20:	4613      	mov	r3, r2
 800bd22:	07db      	lsls	r3, r3, #31
 800bd24:	1a9b      	subs	r3, r3, r2
 800bd26:	005b      	lsls	r3, r3, #1
 800bd28:	461a      	mov	r2, r3
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	1e5a      	subs	r2, r3, #1
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	fb92 f3f3 	sdiv	r3, r2, r3
 800bd36:	0fda      	lsrs	r2, r3, #31
 800bd38:	4413      	add	r3, r2
 800bd3a:	105b      	asrs	r3, r3, #1
 800bd3c:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800bd3e:	bf00      	nop
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800bd40:	425d      	negs	r5, r3
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	; 0x11e
 800bd48:	1e59      	subs	r1, r3, #1
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	62bb      	str	r3, [r7, #40]	; 0x28
        return scaled2int(i, xScale);
 800bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd58:	627a      	str	r2, [r7, #36]	; 0x24
 800bd5a:	623b      	str	r3, [r7, #32]
        if (i >= 0)
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	db0a      	blt.n	800bd78 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xa0>
            return ((i * 2 + scale) / scale) / 2;
 800bd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd64:	005a      	lsls	r2, r3, #1
 800bd66:	6a3b      	ldr	r3, [r7, #32]
 800bd68:	441a      	add	r2, r3
 800bd6a:	6a3b      	ldr	r3, [r7, #32]
 800bd6c:	fb92 f3f3 	sdiv	r3, r2, r3
 800bd70:	0fda      	lsrs	r2, r3, #31
 800bd72:	4413      	add	r3, r2
 800bd74:	105b      	asrs	r3, r3, #1
 800bd76:	e00f      	b.n	800bd98 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xc0>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800bd78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	07db      	lsls	r3, r3, #31
 800bd7e:	1a9b      	subs	r3, r3, r2
 800bd80:	005b      	lsls	r3, r3, #1
 800bd82:	461a      	mov	r2, r3
 800bd84:	6a3b      	ldr	r3, [r7, #32]
 800bd86:	4413      	add	r3, r2
 800bd88:	1e5a      	subs	r2, r3, #1
 800bd8a:	6a3b      	ldr	r3, [r7, #32]
 800bd8c:	fb92 f3f3 	sdiv	r3, r2, r3
 800bd90:	0fda      	lsrs	r2, r3, #31
 800bd92:	4413      	add	r3, r2
 800bd94:	105b      	asrs	r3, r3, #1
 800bd96:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800bd98:	bf00      	nop
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800bd9a:	440b      	add	r3, r1
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	4629      	mov	r1, r5
 800bda0:	47a0      	blx	r4
    }
 800bda2:	bf00      	nop
 800bda4:	3730      	adds	r7, #48	; 0x30
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bdb0      	pop	{r4, r5, r7, pc}

0800bdaa <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b082      	sub	sp, #8
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
 800bdb2:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactor(scale);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	4798      	blx	r3
    }
 800bdc4:	bf00      	nop
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
     * Set x coordinate axis factor value. This is the real x value increment between two data
     * points added to the graph.
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactorScaled(int2scaledX(factor));
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	617a      	str	r2, [r7, #20]
 800bde4:	683a      	ldr	r2, [r7, #0]
 800bde6:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bdec:	6939      	ldr	r1, [r7, #16]
 800bdee:	60f9      	str	r1, [r7, #12]
 800bdf0:	60ba      	str	r2, [r7, #8]
        return i * scale;
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	68b9      	ldr	r1, [r7, #8]
 800bdf6:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800bdfa:	bf00      	nop
        setXAxisFactorScaled(int2scaledX(factor));
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	4798      	blx	r3
    }
 800be02:	bf00      	nop
 800be04:	3718      	adds	r7, #24
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b082      	sub	sp, #8
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisFactor(scale);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	ed97 0a00 	vldr	s0, [r7]
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	4798      	blx	r3
    }
 800be28:	bf00      	nop
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
 800be30:	b580      	push	{r7, lr}
 800be32:	b088      	sub	sp, #32
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisFactorScaled(float2scaledX(factor));
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	61fa      	str	r2, [r7, #28]
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	61ba      	str	r2, [r7, #24]
        return float2scaled(f, xScale);
 800be4e:	69fa      	ldr	r2, [r7, #28]
 800be50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800be52:	69b9      	ldr	r1, [r7, #24]
 800be54:	6179      	str	r1, [r7, #20]
 800be56:	613a      	str	r2, [r7, #16]
        const float fs = f * (float)scale;
 800be58:	693a      	ldr	r2, [r7, #16]
 800be5a:	ee07 2a90 	vmov	s15, r2
 800be5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be62:	ed97 7a05 	vldr	s14, [r7, #20]
 800be66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be6a:	edc7 7a03 	vstr	s15, [r7, #12]
        if (fs >= 0)
 800be6e:	edd7 7a03 	vldr	s15, [r7, #12]
 800be72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800be76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be7a:	db0a      	blt.n	800be92 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x62>
            return (int)(fs + 0.5f);
 800be7c:	edd7 7a03 	vldr	s15, [r7, #12]
 800be80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800be84:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be8c:	ee17 2a90 	vmov	r2, s15
 800be90:	e019      	b.n	800bec6 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x96>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800be92:	edd7 7a03 	vldr	s15, [r7, #12]
 800be96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be9a:	ee17 2a90 	vmov	r2, s15
 800be9e:	3a01      	subs	r2, #1
 800bea0:	edd7 7a03 	vldr	s15, [r7, #12]
 800bea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800beac:	ed97 7a03 	vldr	s14, [r7, #12]
 800beb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beb4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800beb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bec0:	ee17 1a90 	vmov	r1, s15
 800bec4:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800bec6:	bf00      	nop
        setXAxisFactorScaled(float2scaledX(factor));
 800bec8:	4611      	mov	r1, r2
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	4798      	blx	r3
    }
 800bece:	bf00      	nop
 800bed0:	3720      	adds	r7, #32
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @param  factor The x axis factor.
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
 800bed6:	b480      	push	{r7}
 800bed8:	b083      	sub	sp, #12
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
 800bede:	6039      	str	r1, [r7, #0]
    {
        xAxisFactor = factor;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	683a      	ldr	r2, [r7, #0]
 800bee4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    }
 800bee8:	bf00      	nop
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorAsInt();
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	4798      	blx	r3
 800bf0a:	4603      	mov	r3, r0
    }
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     * Get x coordinate axis factor value. This is the real x value increment between two data
     * points added to the graph.
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
 800bf14:	b590      	push	{r4, r7, lr}
 800bf16:	b087      	sub	sp, #28
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
    {
        return scaled2intX(getXAxisFactorScaled());
 800bf1c:	687c      	ldr	r4, [r7, #4]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	4798      	blx	r3
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	617c      	str	r4, [r7, #20]
 800bf30:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	60fa      	str	r2, [r7, #12]
 800bf3a:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	db0a      	blt.n	800bf58 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x44>
            return ((i * 2 + scale) / scale) / 2;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	005a      	lsls	r2, r3, #1
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	441a      	add	r2, r3
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	fb92 f3f3 	sdiv	r3, r2, r3
 800bf50:	0fda      	lsrs	r2, r3, #31
 800bf52:	4413      	add	r3, r2
 800bf54:	105b      	asrs	r3, r3, #1
 800bf56:	e00f      	b.n	800bf78 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x64>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	07db      	lsls	r3, r3, #31
 800bf5e:	1a9b      	subs	r3, r3, r2
 800bf60:	005b      	lsls	r3, r3, #1
 800bf62:	461a      	mov	r2, r3
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	4413      	add	r3, r2
 800bf68:	1e5a      	subs	r2, r3, #1
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	fb92 f3f3 	sdiv	r3, r2, r3
 800bf70:	0fda      	lsrs	r2, r3, #31
 800bf72:	4413      	add	r3, r2
 800bf74:	105b      	asrs	r3, r3, #1
 800bf76:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800bf78:	bf00      	nop
    }
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	371c      	adds	r7, #28
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd90      	pop	{r4, r7, pc}

0800bf82 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b082      	sub	sp, #8
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorAsFloat();
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	4798      	blx	r3
 800bf98:	eef0 7a40 	vmov.f32	s15, s0
    }
 800bf9c:	eeb0 0a67 	vmov.f32	s0, s15
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
 800bfa6:	b590      	push	{r4, r7, lr}
 800bfa8:	b087      	sub	sp, #28
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
    {
        return scaled2floatX(getXAxisFactorScaled());
 800bfae:	687c      	ldr	r4, [r7, #4]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	4798      	blx	r3
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	617c      	str	r4, [r7, #20]
 800bfc2:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc8:	693a      	ldr	r2, [r7, #16]
 800bfca:	60fa      	str	r2, [r7, #12]
 800bfcc:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	ee07 3a90 	vmov	s15, r3
 800bfd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	ee07 3a90 	vmov	s15, r3
 800bfde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfe2:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800bfe6:	bf00      	nop
        return scaled2floatX(getXAxisFactorScaled());
 800bfe8:	eef0 7a66 	vmov.f32	s15, s13
    }
 800bfec:	eeb0 0a67 	vmov.f32	s0, s15
 800bff0:	371c      	adds	r7, #28
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd90      	pop	{r4, r7, pc}

0800bff6 <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     *
     * @return The x axis factor (scaled).
     *
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
 800bff6:	b480      	push	{r7}
 800bff8:	b083      	sub	sp, #12
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
    {
        return xAxisFactor;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    }
 800c004:	4618      	mov	r0, r3
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
     * Set x coordinate axis offset value. This is the real x value of the first data point
     * added to the graph (i.e. the data point at index 0).
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	617a      	str	r2, [r7, #20]
 800c028:	683a      	ldr	r2, [r7, #0]
 800c02a:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 800c02c:	697a      	ldr	r2, [r7, #20]
 800c02e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c030:	6939      	ldr	r1, [r7, #16]
 800c032:	60f9      	str	r1, [r7, #12]
 800c034:	60ba      	str	r2, [r7, #8]
        return i * scale;
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	68b9      	ldr	r1, [r7, #8]
 800c03a:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800c03e:	bf00      	nop
        setXAxisOffsetScaled(int2scaledX(offset));
 800c040:	4611      	mov	r1, r2
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	4798      	blx	r3
    }
 800c046:	bf00      	nop
 800c048:	3718      	adds	r7, #24
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
 800c04e:	b580      	push	{r7, lr}
 800c050:	b088      	sub	sp, #32
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	61fa      	str	r2, [r7, #28]
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	61ba      	str	r2, [r7, #24]
        return float2scaled(f, xScale);
 800c06c:	69fa      	ldr	r2, [r7, #28]
 800c06e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c070:	69b9      	ldr	r1, [r7, #24]
 800c072:	6179      	str	r1, [r7, #20]
 800c074:	613a      	str	r2, [r7, #16]
        const float fs = f * (float)scale;
 800c076:	693a      	ldr	r2, [r7, #16]
 800c078:	ee07 2a90 	vmov	s15, r2
 800c07c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c080:	ed97 7a05 	vldr	s14, [r7, #20]
 800c084:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c088:	edc7 7a03 	vstr	s15, [r7, #12]
        if (fs >= 0)
 800c08c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c090:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c098:	db0a      	blt.n	800c0b0 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x62>
            return (int)(fs + 0.5f);
 800c09a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c09e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c0a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c0a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0aa:	ee17 2a90 	vmov	r2, s15
 800c0ae:	e019      	b.n	800c0e4 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x96>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800c0b0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c0b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0b8:	ee17 2a90 	vmov	r2, s15
 800c0bc:	3a01      	subs	r2, #1
 800c0be:	edd7 7a03 	vldr	s15, [r7, #12]
 800c0c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0ca:	ed97 7a03 	vldr	s14, [r7, #12]
 800c0ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0d2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800c0d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c0da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0de:	ee17 1a90 	vmov	r1, s15
 800c0e2:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800c0e4:	bf00      	nop
        setXAxisOffsetScaled(float2scaledX(offset));
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	4798      	blx	r3
    }
 800c0ec:	bf00      	nop
 800c0ee:	3720      	adds	r7, #32
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
    {
        xAxisOffset = offset;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	683a      	ldr	r2, [r7, #0]
 800c102:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    }
 800c106:	bf00      	nop
 800c108:	370c      	adds	r7, #12
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr

0800c112 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     * Get x coordinate axis offset value. This is the real x value of the first data point
     * added to the graph (i.e. the data point at index 0).
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
 800c112:	b590      	push	{r4, r7, lr}
 800c114:	b087      	sub	sp, #28
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
    {
        return scaled2intX(getXAxisOffsetScaled());
 800c11a:	687c      	ldr	r4, [r7, #4]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	4798      	blx	r3
 800c12a:	4603      	mov	r3, r0
 800c12c:	617c      	str	r4, [r7, #20]
 800c12e:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	60fa      	str	r2, [r7, #12]
 800c138:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	db0a      	blt.n	800c156 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x44>
            return ((i * 2 + scale) / scale) / 2;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	005a      	lsls	r2, r3, #1
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	441a      	add	r2, r3
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	fb92 f3f3 	sdiv	r3, r2, r3
 800c14e:	0fda      	lsrs	r2, r3, #31
 800c150:	4413      	add	r3, r2
 800c152:	105b      	asrs	r3, r3, #1
 800c154:	e00f      	b.n	800c176 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x64>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	4613      	mov	r3, r2
 800c15a:	07db      	lsls	r3, r3, #31
 800c15c:	1a9b      	subs	r3, r3, r2
 800c15e:	005b      	lsls	r3, r3, #1
 800c160:	461a      	mov	r2, r3
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	4413      	add	r3, r2
 800c166:	1e5a      	subs	r2, r3, #1
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	fb92 f3f3 	sdiv	r3, r2, r3
 800c16e:	0fda      	lsrs	r2, r3, #31
 800c170:	4413      	add	r3, r2
 800c172:	105b      	asrs	r3, r3, #1
 800c174:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800c176:	bf00      	nop
    }
 800c178:	4618      	mov	r0, r3
 800c17a:	371c      	adds	r7, #28
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd90      	pop	{r4, r7, pc}

0800c180 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
 800c180:	b590      	push	{r4, r7, lr}
 800c182:	b087      	sub	sp, #28
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
    {
        return scaled2floatX(getXAxisOffsetScaled());
 800c188:	687c      	ldr	r4, [r7, #4]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	4798      	blx	r3
 800c198:	4603      	mov	r3, r0
 800c19a:	617c      	str	r4, [r7, #20]
 800c19c:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	60fa      	str	r2, [r7, #12]
 800c1a6:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	ee07 3a90 	vmov	s15, r3
 800c1ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	ee07 3a90 	vmov	s15, r3
 800c1b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800c1c0:	bf00      	nop
        return scaled2floatX(getXAxisOffsetScaled());
 800c1c2:	eef0 7a66 	vmov.f32	s15, s13
    }
 800c1c6:	eeb0 0a67 	vmov.f32	s0, s15
 800c1ca:	371c      	adds	r7, #28
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd90      	pop	{r4, r7, pc}

0800c1d0 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     *
     * @return The x axis offset (scaled).
     *
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
    {
        return xAxisOffset;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    }
 800c1de:	4618      	mov	r0, r3
 800c1e0:	370c      	adds	r7, #12
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr
	...

0800c1ec <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:

    virtual int indexToDataPointXScaled(int16_t index) const
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	807b      	strh	r3, [r7, #2]
    {
        assert(index >= 0 && index < usedCapacity);
 800c1f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	db06      	blt.n	800c20e <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x22>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	; 0x11e
 800c206:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	db06      	blt.n	800c21c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>
 800c20e:	4b0f      	ldr	r3, [pc, #60]	; (800c24c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x60>)
 800c210:	4a0f      	ldr	r2, [pc, #60]	; (800c250 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x64>)
 800c212:	f240 612d 	movw	r1, #1581	; 0x62d
 800c216:	480f      	ldr	r0, [pc, #60]	; (800c254 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x68>)
 800c218:	f01a fbc0 	bl	802699c <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c22a:	4611      	mov	r1, r2
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	4798      	blx	r3
 800c230:	4602      	mov	r2, r0
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c238:	fb03 f202 	mul.w	r2, r3, r2
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c242:	4413      	add	r3, r2
    }
 800c244:	4618      	mov	r0, r3
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	08028020 	.word	0x08028020
 800c250:	08028044 	.word	0x08028044
 800c254:	08028094 	.word	0x08028094

0800c258 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:

    virtual int indexToDataPointYScaled(int16_t index) const
 800c258:	b590      	push	{r4, r7, lr}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	460b      	mov	r3, r1
 800c262:	807b      	strh	r3, [r7, #2]
    {
        assert(index >= 0 && index < usedCapacity);
 800c264:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	db06      	blt.n	800c27a <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x22>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	; 0x11e
 800c272:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c276:	429a      	cmp	r2, r3
 800c278:	db06      	blt.n	800c288 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>
 800c27a:	4b0e      	ldr	r3, [pc, #56]	; (800c2b4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x5c>)
 800c27c:	4a0e      	ldr	r2, [pc, #56]	; (800c2b8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x60>)
 800c27e:	f240 6133 	movw	r1, #1587	; 0x633
 800c282:	480e      	ldr	r0, [pc, #56]	; (800c2bc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x64>)
 800c284:	f01a fb8a 	bl	802699c <__assert_func>
        return yValues[dataIndex(index)];
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c29c:	4611      	mov	r1, r2
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	4798      	blx	r3
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	4423      	add	r3, r4
 800c2a8:	681b      	ldr	r3, [r3, #0]
    }
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	370c      	adds	r7, #12
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd90      	pop	{r4, r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	08028020 	.word	0x08028020
 800c2b8:	080280f0 	.word	0x080280f0
 800c2bc:	08028094 	.word	0x08028094

0800c2c0 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
     *
     * @param  screenIndex Zero-based screen index.
     *
     * @return The index in the yValues array.
     */
    virtual int16_t dataIndex(int16_t screenIndex) const
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	807b      	strh	r3, [r7, #2]
    {
        return screenIndex;
 800c2cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    }
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	370c      	adds	r7, #12
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    virtual int32_t indexToGlobalIndex(int16_t index) const
    {
        return (int32_t)index;
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 800c2dc:	b590      	push	{r4, r7, lr}
 800c2de:	b089      	sub	sp, #36	; 0x24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c2f0:	681c      	ldr	r4, [r3, #0]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	61fb      	str	r3, [r7, #28]
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	61bb      	str	r3, [r7, #24]
        return scaled2int(i, xScale);
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2fe:	69ba      	ldr	r2, [r7, #24]
 800c300:	617a      	str	r2, [r7, #20]
 800c302:	613b      	str	r3, [r7, #16]
        if (i >= 0)
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	2b00      	cmp	r3, #0
 800c308:	db0a      	blt.n	800c320 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x44>
            return ((i * 2 + scale) / scale) / 2;
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	005a      	lsls	r2, r3, #1
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	441a      	add	r2, r3
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	fb92 f3f3 	sdiv	r3, r2, r3
 800c318:	0fda      	lsrs	r2, r3, #31
 800c31a:	4413      	add	r3, r2
 800c31c:	105b      	asrs	r3, r3, #1
 800c31e:	e00f      	b.n	800c340 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x64>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	4613      	mov	r3, r2
 800c324:	07db      	lsls	r3, r3, #31
 800c326:	1a9b      	subs	r3, r3, r2
 800c328:	005b      	lsls	r3, r3, #1
 800c32a:	461a      	mov	r2, r3
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	4413      	add	r3, r2
 800c330:	1e5a      	subs	r2, r3, #1
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	fb92 f3f3 	sdiv	r3, r2, r3
 800c338:	0fda      	lsrs	r2, r3, #31
 800c33a:	4413      	add	r3, r2
 800c33c:	105b      	asrs	r3, r3, #1
 800c33e:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800c340:	bf00      	nop
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800c342:	b21b      	sxth	r3, r3
 800c344:	4619      	mov	r1, r3
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	47a0      	blx	r4
 800c34a:	4602      	mov	r2, r0
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c352:	fb03 f202 	mul.w	r2, r3, r2
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c35c:	4413      	add	r3, r2
    }
 800c35e:	4618      	mov	r0, r3
 800c360:	3724      	adds	r7, #36	; 0x24
 800c362:	46bd      	mov	sp, r7
 800c364:	bd90      	pop	{r4, r7, pc}

0800c366 <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:

    virtual bool xScreenRangeToIndexRange(int16_t xMin, int16_t xMax, int16_t& indexMin, int16_t& indexMax) const;

    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
 800c366:	b580      	push	{r7, lr}
 800c368:	b082      	sub	sp, #8
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
    {
        return AbstractDataGraph::getScaleX();
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	4618      	mov	r0, r3
 800c372:	f7fe ff00 	bl	800b176 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>
 800c376:	4603      	mov	r3, r0
    }
 800c378:	4618      	mov	r0, r3
 800c37a:	3708      	adds	r7, #8
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:

    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
    {
        return AbstractDataGraph::getScaleY();
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7fe feff 	bl	800b18e <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>
 800c390:	4603      	mov	r3, r0
    }
 800c392:	4618      	mov	r0, r3
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b082      	sub	sp, #8
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
 800c3a2:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactorScaled(scale);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	6839      	ldr	r1, [r7, #0]
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	4798      	blx	r3
    }
 800c3b4:	bf00      	nop
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorScaled();
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	4798      	blx	r3
 800c3d2:	4603      	mov	r3, r0
    }
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b086      	sub	sp, #24
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	807b      	strh	r3, [r7, #2]
    {
        return valueToScreenXQ5(int2scaledX(index));
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	6879      	ldr	r1, [r7, #4]
 800c3f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c3fa:	6179      	str	r1, [r7, #20]
 800c3fc:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 800c3fe:	697a      	ldr	r2, [r7, #20]
 800c400:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c402:	6939      	ldr	r1, [r7, #16]
 800c404:	60f9      	str	r1, [r7, #12]
 800c406:	60ba      	str	r2, [r7, #8]
        return i * scale;
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	68b9      	ldr	r1, [r7, #8]
 800c40c:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800c410:	bf00      	nop
        return valueToScreenXQ5(int2scaledX(index));
 800c412:	4611      	mov	r1, r2
 800c414:	4798      	blx	r3
 800c416:	4603      	mov	r3, r0
    }
 800c418:	4618      	mov	r0, r3
 800c41a:	3718      	adds	r7, #24
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 800c420:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	460b      	mov	r3, r1
 800c42a:	807b      	strh	r3, [r7, #2]
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 800c42c:	687e      	ldr	r6, [r7, #4]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800c436:	681c      	ldr	r4, [r3, #0]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c44c:	4611      	mov	r1, r2
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	4798      	blx	r3
 800c452:	4603      	mov	r3, r0
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	442b      	add	r3, r5
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4619      	mov	r1, r3
 800c45c:	4630      	mov	r0, r6
 800c45e:	47a0      	blx	r4
 800c460:	4603      	mov	r3, r0
    }
 800c462:	4618      	mov	r0, r3
 800c464:	370c      	adds	r7, #12
 800c466:	46bd      	mov	sp, r7
 800c468:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800c46c <_ZN8touchgfx16DynamicDataGraphD1Ev>:
class DynamicDataGraph : public AbstractDataGraph
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	4a05      	ldr	r2, [pc, #20]	; (800c48c <_ZN8touchgfx16DynamicDataGraphD1Ev+0x20>)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	601a      	str	r2, [r3, #0]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7ff fb73 	bl	800bb68 <_ZN8touchgfx17AbstractDataGraphD1Ev>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4618      	mov	r0, r3
 800c486:	3708      	adds	r7, #8
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	0802a5d8 	.word	0x0802a5d8

0800c490 <_ZN8touchgfx16DynamicDataGraphD0Ev>:
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f7ff ffe7 	bl	800c46c <_ZN8touchgfx16DynamicDataGraphD1Ev>
 800c49e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f019 fcee 	bl	8025e84 <_ZdlPvj>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
	...

0800c4b4 <_ZN8touchgfx21GraphWrapAndClearDataC1EsPi>:
     * Initializes a new instance of the GraphWrapAndOverwriteData class.
     *
     * @param      capacity The capacity.
     * @param [in] values   Pointer to memory with room for capacity elements of type T.
     */
    GraphWrapAndClearData(int16_t capacity, int* values)
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	60f8      	str	r0, [r7, #12]
 800c4bc:	460b      	mov	r3, r1
 800c4be:	607a      	str	r2, [r7, #4]
 800c4c0:	817b      	strh	r3, [r7, #10]
        : DynamicDataGraph(capacity, values)
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7ff fb8a 	bl	800bbe4 <_ZN8touchgfx16DynamicDataGraphC1EsPi>
 800c4d0:	4a03      	ldr	r2, [pc, #12]	; (800c4e0 <_ZN8touchgfx21GraphWrapAndClearDataC1EsPi+0x2c>)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	601a      	str	r2, [r3, #0]
    {
    }
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	0802ab28 	.word	0x0802ab28

0800c4e4 <_ZNK8touchgfx21GraphWrapAndClearData18indexToGlobalIndexEs>:

    virtual void clear();

    virtual int32_t indexToGlobalIndex(int16_t index) const
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	807b      	strh	r3, [r7, #2]
    {
        return (this->dataCounter - this->usedCapacity) + index;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	f9b2 211e 	ldrsh.w	r2, [r2, #286]	; 0x11e
 800c4fc:	1a9a      	subs	r2, r3, r2
 800c4fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c502:	4413      	add	r3, r2
    }
 800c504:	4618      	mov	r0, r3
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	683a      	ldr	r2, [r7, #0]
 800c51e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	460b      	mov	r3, r1
 800c536:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	78fa      	ldrb	r2, [r7, #3]
 800c53c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 800c540:	bf00      	nop
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    }
 800c55a:	4618      	mov	r0, r3
 800c55c:	370c      	adds	r7, #12
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr

0800c566 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800c566:	b590      	push	{r4, r7, lr}
 800c568:	b085      	sub	sp, #20
 800c56a:	af02      	add	r7, sp, #8
 800c56c:	6078      	str	r0, [r7, #4]
 800c56e:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	4618      	mov	r0, r3
 800c574:	f7fe fa57 	bl	800aa26 <_ZNK8touchgfx8Drawable8getWidthEv>
 800c578:	4603      	mov	r3, r0
 800c57a:	461c      	mov	r4, r3
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	4618      	mov	r0, r3
 800c580:	f7fe fa5e 	bl	800aa40 <_ZNK8touchgfx8Drawable9getHeightEv>
 800c584:	4603      	mov	r3, r0
 800c586:	9300      	str	r3, [sp, #0]
 800c588:	4623      	mov	r3, r4
 800c58a:	2200      	movs	r2, #0
 800c58c:	2100      	movs	r1, #0
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7fe f97e 	bl	800a890 <_ZN8touchgfx4RectC1Essss>
    }
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	370c      	adds	r7, #12
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd90      	pop	{r4, r7, pc}

0800c59c <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f7fe f95b 	bl	800a862 <_ZN8touchgfx4RectC1Ev>
    }
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	4a05      	ldr	r2, [pc, #20]	; (800c5d4 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	601a      	str	r2, [r3, #0]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7fe fc37 	bl	800ae38 <_ZN8touchgfx6WidgetD1Ev>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	0802a560 	.word	0x0802a560

0800c5d8 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f7ff ffe7 	bl	800c5b4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800c5e6:	212c      	movs	r1, #44	; 0x2c
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f019 fc4b 	bl	8025e84 <_ZdlPvj>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <_ZN8touchgfx20AbstractGraphElementC1Ev>:
 */
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
        : CanvasWidget()
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4618      	mov	r0, r3
 800c604:	f005 ff94 	bl	8012530 <_ZN8touchgfx12CanvasWidgetC1Ev>
 800c608:	4a03      	ldr	r2, [pc, #12]	; (800c618 <_ZN8touchgfx20AbstractGraphElementC1Ev+0x20>)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	601a      	str	r2, [r3, #0]
    {
    }
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	4618      	mov	r0, r3
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	08029d0c 	.word	0x08029d0c

0800c61c <_ZN8touchgfx20AbstractGraphElementD1Ev>:
class AbstractGraphElement : public CanvasWidget
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	4a05      	ldr	r2, [pc, #20]	; (800c63c <_ZN8touchgfx20AbstractGraphElementD1Ev+0x20>)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	601a      	str	r2, [r3, #0]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7ff ffc1 	bl	800c5b4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4618      	mov	r0, r3
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	08029d0c 	.word	0x08029d0c

0800c640 <_ZN8touchgfx20AbstractGraphElementD0Ev>:
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7ff ffe7 	bl	800c61c <_ZN8touchgfx20AbstractGraphElementD1Ev>
 800c64e:	212c      	movs	r1, #44	; 0x2c
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f019 fc17 	bl	8025e84 <_ZdlPvj>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4618      	mov	r0, r3
 800c65a:	3708      	adds	r7, #8
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>:
 * not use CWR (Canvas Widget Renderer).
 */
class AbstractGraphElementNoCWR : public AbstractGraphElement
{
public:
    AbstractGraphElementNoCWR()
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
        : color(0)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7ff ffc4 	bl	800c5f8 <_ZN8touchgfx20AbstractGraphElementC1Ev>
 800c670:	4a06      	ldr	r2, [pc, #24]	; (800c68c <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev+0x2c>)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	601a      	str	r2, [r3, #0]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	332c      	adds	r3, #44	; 0x2c
 800c67a:	2100      	movs	r1, #0
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fe f8d5 	bl	800a82c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	08029c84 	.word	0x08029c84

0800c690 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @param  newColor The new color.
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	683a      	ldr	r2, [r7, #0]
 800c69e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800c6a0:	bf00      	nop
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     *
     * @return The color.
     *
     * @see setColor
     */
    virtual colortype getColor() const
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
    {
        return color;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
    {
        return true;
 800c6ce:	2301      	movs	r3, #1
    }
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
     * @param [in,out] r The rectangle.
     */
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
    {
    }
 800c6e6:	bf00      	nop
 800c6e8:	370c      	adds	r7, #12
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
	...

0800c6f4 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>:
class AbstractGraphElementNoCWR : public AbstractGraphElement
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	4a05      	ldr	r2, [pc, #20]	; (800c714 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev+0x20>)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	601a      	str	r2, [r3, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4618      	mov	r0, r3
 800c706:	f7ff ff89 	bl	800c61c <_ZN8touchgfx20AbstractGraphElementD1Ev>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4618      	mov	r0, r3
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	08029c84 	.word	0x08029c84

0800c718 <_ZN8touchgfx25AbstractGraphElementNoCWRD0Ev>:
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7ff ffe7 	bl	800c6f4 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 800c726:	2130      	movs	r1, #48	; 0x30
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f019 fbab 	bl	8025e84 <_ZdlPvj>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4618      	mov	r0, r3
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <_ZN8touchgfx20GraphElementGridBaseC1Ev>:
 */
class GraphElementGridBase : public AbstractGraphElementNoCWR
{
public:
    /** Default constructor. */
    GraphElementGridBase()
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4618      	mov	r0, r3
 800c744:	f7ff ff8c 	bl	800c660 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>
 800c748:	4a0a      	ldr	r2, [pc, #40]	; (800c774 <_ZN8touchgfx20GraphElementGridBaseC1Ev+0x3c>)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	601a      	str	r2, [r3, #0]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2201      	movs	r2, #1
 800c752:	631a      	str	r2, [r3, #48]	; 0x30
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	220a      	movs	r2, #10
 800c758:	635a      	str	r2, [r3, #52]	; 0x34
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2201      	movs	r2, #1
 800c75e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4618      	mov	r0, r3
 800c76c:	3708      	adds	r7, #8
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	0802a92c 	.word	0x0802a92c

0800c778 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
    FORCE_INLINE_FUNCTION uint8_t getLineWidth() const
    {
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	460b      	mov	r3, r1
 800c782:	807b      	strh	r3, [r7, #2]
    {
    }
 800c784:	bf00      	nop
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @param  graph The graph.
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00b      	beq.n	800c7ba <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0x2a>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	3380      	adds	r3, #128	; 0x80
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	6839      	ldr	r1, [r7, #0]
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	4798      	blx	r3
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	e000      	b.n	800c7bc <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0x2c>
 800c7ba:	2300      	movs	r3, #0
    }
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
 * @note The grid lines are drawn using LCD::fillRect for higher performance.
 */
class GraphElementGridY : public GraphElementGridBase
{
public:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b086      	sub	sp, #24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 800c7ce:	6879      	ldr	r1, [r7, #4]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d8:	6179      	str	r1, [r7, #20]
 800c7da:	6839      	ldr	r1, [r7, #0]
 800c7dc:	6139      	str	r1, [r7, #16]
 800c7de:	60fa      	str	r2, [r7, #12]
 800c7e0:	60bb      	str	r3, [r7, #8]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	3394      	adds	r3, #148	; 0x94
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	6938      	ldr	r0, [r7, #16]
 800c7ec:	4798      	blx	r3
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	68b9      	ldr	r1, [r7, #8]
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	f006 fa81 	bl	8012cfc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	bf00      	nop
    }
 800c7fe:	4618      	mov	r0, r3
 800c800:	3718      	adds	r7, #24
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 800c806:	b5b0      	push	{r4, r5, r7, lr}
 800c808:	b08a      	sub	sp, #40	; 0x28
 800c80a:	af02      	add	r7, sp, #8
 800c80c:	60f8      	str	r0, [r7, #12]
 800c80e:	60b9      	str	r1, [r7, #8]
 800c810:	607a      	str	r2, [r7, #4]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	617b      	str	r3, [r7, #20]
        return leftPadding;
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	f9b3 4116 	ldrsh.w	r4, [r3, #278]	; 0x116
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	61bb      	str	r3, [r7, #24]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	3338      	adds	r3, #56	; 0x38
 800c824:	4618      	mov	r0, r3
 800c826:	f7fe f8fe 	bl	800aa26 <_ZNK8touchgfx8Drawable8getWidthEv>
 800c82a:	4603      	mov	r3, r0
 800c82c:	b29a      	uxth	r2, r3
 800c82e:	69bb      	ldr	r3, [r7, #24]
 800c830:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	; 0x116
 800c834:	b299      	uxth	r1, r3
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	; 0x118
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	440b      	add	r3, r1
 800c840:	b29b      	uxth	r3, r3
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	b29b      	uxth	r3, r3
 800c846:	b21d      	sxth	r5, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	61fb      	str	r3, [r7, #28]
        return graphArea.getHeight();
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	3338      	adds	r3, #56	; 0x38
 800c850:	4618      	mov	r0, r3
 800c852:	f7fe f8f5 	bl	800aa40 <_ZNK8touchgfx8Drawable9getHeightEv>
 800c856:	4603      	mov	r3, r0
 800c858:	bf00      	nop
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
 800c85a:	9300      	str	r3, [sp, #0]
 800c85c:	462b      	mov	r3, r5
 800c85e:	2200      	movs	r2, #0
 800c860:	4621      	mov	r1, r4
 800c862:	68f8      	ldr	r0, [r7, #12]
 800c864:	f7fe f814 	bl	800a890 <_ZN8touchgfx4RectC1Essss>
    }
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	3720      	adds	r7, #32
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bdb0      	pop	{r4, r5, r7, pc}

0800c870 <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 800c870:	b580      	push	{r7, lr}
 800c872:	b086      	sub	sp, #24
 800c874:	af02      	add	r7, sp, #8
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	4611      	mov	r1, r2
 800c87c:	461a      	mov	r2, r3
 800c87e:	460b      	mov	r3, r1
 800c880:	80fb      	strh	r3, [r7, #6]
 800c882:	4613      	mov	r3, r2
 800c884:	80bb      	strh	r3, [r7, #4]
    {
        return Rect(start, pos, length, width);
 800c886:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800c88a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800c88e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800c892:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	4603      	mov	r3, r0
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f7fd fff8 	bl	800a890 <_ZN8touchgfx4RectC1Essss>
    }
 800c8a0:	68f8      	ldr	r0, [r7, #12]
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeYMinScaled();
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	33ec      	adds	r3, #236	; 0xec
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	6838      	ldr	r0, [r7, #0]
 800c8bc:	4798      	blx	r3
 800c8be:	4603      	mov	r3, r0
    }
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeYMaxScaled();
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	33f8      	adds	r3, #248	; 0xf8
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	6838      	ldr	r0, [r7, #0]
 800c8dc:	4798      	blx	r3
 800c8de:	4603      	mov	r3, r0
    }
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	60fb      	str	r3, [r7, #12]
        return leftPadding;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	; 0x116
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3714      	adds	r7, #20
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	60fb      	str	r3, [r7, #12]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	3338      	adds	r3, #56	; 0x38
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fe f883 	bl	800aa26 <_ZNK8touchgfx8Drawable8getWidthEv>
 800c920:	4603      	mov	r3, r0
 800c922:	b29a      	uxth	r2, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	; 0x116
 800c92a:	b299      	uxth	r1, r3
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	; 0x118
 800c932:	b29b      	uxth	r3, r3
 800c934:	440b      	add	r3, r1
 800c936:	b29b      	uxth	r3, r3
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaWidth();
    }
 800c93e:	4618      	mov	r0, r3
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
 800c946:	b480      	push	{r7}
 800c948:	b085      	sub	sp, #20
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
 800c94e:	6039      	str	r1, [r7, #0]
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	60fb      	str	r3, [r7, #12]
        return topPadding;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
    {
        return graph->getGraphAreaPaddingTop();
    }
 800c95a:	4618      	mov	r0, r3
 800c95c:	3714      	adds	r7, #20
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr

0800c966 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
 800c966:	b580      	push	{r7, lr}
 800c968:	b084      	sub	sp, #16
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	6039      	str	r1, [r7, #0]
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	60fb      	str	r3, [r7, #12]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	3338      	adds	r3, #56	; 0x38
 800c978:	4618      	mov	r0, r3
 800c97a:	f7fe f861 	bl	800aa40 <_ZNK8touchgfx8Drawable9getHeightEv>
 800c97e:	4603      	mov	r3, r0
 800c980:	b29a      	uxth	r2, r3
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 800c988:	b299      	uxth	r1, r3
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	; 0x11a
 800c990:	b29b      	uxth	r3, r3
 800c992:	440b      	add	r3, r1
 800c994:	b29b      	uxth	r3, r3
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	b29b      	uxth	r3, r3
 800c99a:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaHeight();
    }
 800c99c:	4618      	mov	r0, r3
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b088      	sub	sp, #32
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
    {
        return valueToScreenYQ5(graph, value);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	61fb      	str	r3, [r7, #28]
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	61bb      	str	r3, [r7, #24]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	617b      	str	r3, [r7, #20]
        return graph->valueToScreenYQ5(y);
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6979      	ldr	r1, [r7, #20]
 800c9c8:	69b8      	ldr	r0, [r7, #24]
 800c9ca:	4798      	blx	r3
 800c9cc:	4603      	mov	r3, r0
    }
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3720      	adds	r7, #32
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
	...

0800c9d8 <_ZN8touchgfx16GraphElementLineC1Ev>:
 *       graphics.
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
        : lineWidth(2)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7ff fe08 	bl	800c5f8 <_ZN8touchgfx20AbstractGraphElementC1Ev>
 800c9e8:	4a05      	ldr	r2, [pc, #20]	; (800ca00 <_ZN8touchgfx16GraphElementLineC1Ev+0x28>)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	601a      	str	r2, [r3, #0]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2202      	movs	r2, #2
 800c9f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	0802a8b0 	.word	0x0802a8b0

0800ca04 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
    {
 800ca0e:	4a08      	ldr	r2, [pc, #32]	; (800ca30 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	601a      	str	r2, [r3, #0]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	3304      	adds	r3, #4
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7fd fef9 	bl	800a810 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 800ca1e:	6839      	ldr	r1, [r7, #0]
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 f827 	bl	800ca74 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	08029bb8 	.word	0x08029bb8

0800ca34 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
    {
 800ca3c:	4a04      	ldr	r2, [pc, #16]	; (800ca50 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	601a      	str	r2, [r3, #0]
    }
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4618      	mov	r0, r3
 800ca46:	370c      	adds	r7, #12
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr
 800ca50:	08029bb8 	.word	0x08029bb8

0800ca54 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
    }
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f7ff ffe9 	bl	800ca34 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800ca62:	2108      	movs	r1, #8
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f019 fa0d 	bl	8025e84 <_ZdlPvj>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	683a      	ldr	r2, [r7, #0]
 800ca82:	605a      	str	r2, [r3, #4]
    }
 800ca84:	bf00      	nop
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7fe fa30 	bl	800af00 <_ZN8touchgfx15AbstractPainterC1Ev>
 800caa0:	4a26      	ldr	r2, [pc, #152]	; (800cb3c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	601a      	str	r2, [r3, #0]
 800caa6:	2300      	movs	r3, #0
 800caa8:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800caaa:	f7fd fa37 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 800caae:	4603      	mov	r3, r0
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	322c      	adds	r2, #44	; 0x2c
 800cab4:	6812      	ldr	r2, [r2, #0]
 800cab6:	4618      	mov	r0, r3
 800cab8:	4790      	blx	r2
 800caba:	4603      	mov	r3, r0
 800cabc:	461a      	mov	r2, r3
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
 800cac0:	4293      	cmp	r3, r2
 800cac2:	bf0c      	ite	eq
 800cac4:	2301      	moveq	r3, #1
 800cac6:	2300      	movne	r3, #0
 800cac8:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 800caca:	f7fd fa1b 	bl	8009f04 <_ZN8touchgfx3HAL11getInstanceEv>
 800cace:	4603      	mov	r3, r0
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7fe f909 	bl	800ace8 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	bf14      	ite	ne
 800cadc:	2301      	movne	r3, #1
 800cade:	2300      	moveq	r3, #0
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d01b      	beq.n	800cb1e <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800cae6:	f7fd fa0d 	bl	8009f04 <_ZN8touchgfx3HAL11getInstanceEv>
 800caea:	4603      	mov	r3, r0
 800caec:	4618      	mov	r0, r3
 800caee:	f7fe f8fb 	bl	800ace8 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800caf2:	4603      	mov	r3, r0
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	322c      	adds	r2, #44	; 0x2c
 800caf8:	6812      	ldr	r2, [r2, #0]
 800cafa:	4618      	mov	r0, r3
 800cafc:	4790      	blx	r2
 800cafe:	4603      	mov	r3, r0
 800cb00:	461a      	mov	r2, r3
 800cb02:	7bfb      	ldrb	r3, [r7, #15]
 800cb04:	4293      	cmp	r3, r2
 800cb06:	bf0c      	ite	eq
 800cb08:	2301      	moveq	r3, #1
 800cb0a:	2300      	movne	r3, #0
 800cb0c:	b2da      	uxtb	r2, r3
 800cb0e:	7bbb      	ldrb	r3, [r7, #14]
 800cb10:	4313      	orrs	r3, r2
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	bf14      	ite	ne
 800cb18:	2301      	movne	r3, #1
 800cb1a:	2300      	moveq	r3, #0
 800cb1c:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800cb1e:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d105      	bne.n	800cb30 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 800cb24:	4b06      	ldr	r3, [pc, #24]	; (800cb40 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 800cb26:	4a07      	ldr	r2, [pc, #28]	; (800cb44 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 800cb28:	212c      	movs	r1, #44	; 0x2c
 800cb2a:	4807      	ldr	r0, [pc, #28]	; (800cb48 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 800cb2c:	f019 ff36 	bl	802699c <__assert_func>
 800cb30:	bf00      	nop
    }
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4618      	mov	r0, r3
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	08029b98 	.word	0x08029b98
 800cb40:	08028140 	.word	0x08028140
 800cb44:	080281a0 	.word	0x080281a0
 800cb48:	080281dc 	.word	0x080281dc

0800cb4c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	4a05      	ldr	r2, [pc, #20]	; (800cb6c <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	601a      	str	r2, [r3, #0]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fe f9e3 	bl	800af28 <_ZN8touchgfx15AbstractPainterD1Ev>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	4618      	mov	r0, r3
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	08029b98 	.word	0x08029b98

0800cb70 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7ff ffe7 	bl	800cb4c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 800cb7e:	2108      	movs	r1, #8
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f019 f97f 	bl	8025e84 <_ZdlPvj>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7ff ff77 	bl	800ca90 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	3308      	adds	r3, #8
 800cba6:	6839      	ldr	r1, [r7, #0]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7ff ff2b 	bl	800ca04 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 800cbae:	4a05      	ldr	r2, [pc, #20]	; (800cbc4 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	601a      	str	r2, [r3, #0]
 800cbb4:	4a04      	ldr	r2, [pc, #16]	; (800cbc8 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	609a      	str	r2, [r3, #8]
    {
    }
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	0802a528 	.word	0x0802a528
 800cbc8:	0802a54c 	.word	0x0802a54c

0800cbcc <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 800cbcc:	b590      	push	{r4, r7, lr}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	3308      	adds	r3, #8
 800cbda:	6839      	ldr	r1, [r7, #0]
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7ff ff49 	bl	800ca74 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	60fb      	str	r3, [r7, #12]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static uint16_t getNativeColor(colortype color)
    {
        return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 800cbe8:	f107 030c 	add.w	r3, r7, #12
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7fd fe2c 	bl	800a84a <_ZNK8touchgfx9colortypecvmEv>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	0a1b      	lsrs	r3, r3, #8
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cbfc:	f023 0307 	bic.w	r3, r3, #7
 800cc00:	b29c      	uxth	r4, r3
 800cc02:	f107 030c 	add.w	r3, r7, #12
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7fd fe1f 	bl	800a84a <_ZNK8touchgfx9colortypecvmEv>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	095b      	lsrs	r3, r3, #5
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	4323      	orrs	r3, r4
 800cc1a:	b29c      	uxth	r4, r3
 800cc1c:	f107 030c 	add.w	r3, r7, #12
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fd fe12 	bl	800a84a <_ZNK8touchgfx9colortypecvmEv>
 800cc26:	4603      	mov	r3, r0
 800cc28:	08db      	lsrs	r3, r3, #3
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	f003 031f 	and.w	r3, r3, #31
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	4323      	orrs	r3, r4
 800cc34:	b29a      	uxth	r2, r3
        color565 = LCD16bpp::getNativeColor(painterColor);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	821a      	strh	r2, [r3, #16]
    }
 800cc3a:	bf00      	nop
 800cc3c:	3714      	adds	r7, #20
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd90      	pop	{r4, r7, pc}

0800cc42 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 800cc42:	f1a0 0008 	sub.w	r0, r0, #8
 800cc46:	e7c1      	b.n	800cbcc <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>

0800cc48 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	460b      	mov	r3, r1
 800cc52:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800cc54:	4a06      	ldr	r2, [pc, #24]	; (800cc70 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	601a      	str	r2, [r3, #0]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	887a      	ldrh	r2, [r7, #2]
 800cc5e:	809a      	strh	r2, [r3, #4]
    }
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	4618      	mov	r0, r3
 800cc64:	370c      	adds	r7, #12
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	080294b8 	.word	0x080294b8

0800cc74 <_ZN8touchgfx23AbstractGraphDecorationC1Ev>:
#include <touchgfx/widgets/graph/GraphElements.hpp>

namespace touchgfx
{
/** Helper class used for adding labels around the graph. Currently empty. */
class AbstractGraphDecoration : public AbstractGraphElementNoCWR
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7ff fcee 	bl	800c660 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>
 800cc84:	4a03      	ldr	r2, [pc, #12]	; (800cc94 <_ZN8touchgfx23AbstractGraphDecorationC1Ev+0x20>)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	601a      	str	r2, [r3, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	08029b10 	.word	0x08029b10

0800cc98 <_ZN8touchgfx23AbstractGraphDecorationD1Ev>:
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	4a05      	ldr	r2, [pc, #20]	; (800ccb8 <_ZN8touchgfx23AbstractGraphDecorationD1Ev+0x20>)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	601a      	str	r2, [r3, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7ff fd23 	bl	800c6f4 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3708      	adds	r7, #8
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	08029b10 	.word	0x08029b10

0800ccbc <_ZN8touchgfx23AbstractGraphDecorationD0Ev>:
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f7ff ffe7 	bl	800cc98 <_ZN8touchgfx23AbstractGraphDecorationD1Ev>
 800ccca:	2130      	movs	r1, #48	; 0x30
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f019 f8d9 	bl	8025e84 <_ZdlPvj>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <_ZN8touchgfx15GraphLabelsBaseC1Ev>:
 * @see GraphLabelsX, GraphLabelsY
 */
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4618      	mov	r0, r3
 800cce8:	2330      	movs	r3, #48	; 0x30
 800ccea:	461a      	mov	r2, r3
 800ccec:	2100      	movs	r1, #0
 800ccee:	f019 ffdb 	bl	8026ca8 <memset>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7ff ffbd 	bl	800cc74 <_ZN8touchgfx23AbstractGraphDecorationC1Ev>
 800ccfa:	4a12      	ldr	r2, [pc, #72]	; (800cd44 <_ZN8touchgfx15GraphLabelsBaseC1Ev+0x68>)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	601a      	str	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2201      	movs	r2, #1
 800cd04:	631a      	str	r2, [r3, #48]	; 0x30
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	635a      	str	r2, [r3, #52]	; 0x34
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	3338      	adds	r3, #56	; 0x38
 800cd10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7ff ff97 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	222e      	movs	r2, #46	; 0x2e
 800cd2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2200      	movs	r2, #0
 800cd36:	649a      	str	r2, [r3, #72]	; 0x48
    {
    }
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	0802aa88 	.word	0x0802aa88

0800cd48 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	889a      	ldrh	r2, [r3, #4]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	809a      	strh	r2, [r3, #4]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4618      	mov	r0, r3
 800cd74:	2326      	movs	r3, #38	; 0x26
 800cd76:	461a      	mov	r2, r3
 800cd78:	2100      	movs	r1, #0
 800cd7a:	f019 ff95 	bl	8026ca8 <memset>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7fe f847 	bl	800ae14 <_ZN8touchgfx6WidgetC1Ev>
 800cd86:	4a16      	ldr	r2, [pc, #88]	; (800cde0 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	601a      	str	r2, [r3, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	3328      	adds	r3, #40	; 0x28
 800cd90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7ff ff57 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	3330      	adds	r3, #48	; 0x30
 800cd9e:	2100      	movs	r1, #0
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7fd fd43 	bl	800a82c <_ZN8touchgfx9colortypeC1Em>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	869a      	strh	r2, [r3, #52]	; 0x34
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	22ff      	movs	r2, #255	; 0xff
 800cdb0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	333c      	adds	r3, #60	; 0x3c
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f000 f8f2 	bl	800cfba <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	0802acc0 	.word	0x0802acc0

0800cde4 <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 800cde4:	b590      	push	{r4, r7, lr}
 800cde6:	b087      	sub	sp, #28
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6178      	str	r0, [r7, #20]
 800cdec:	460b      	mov	r3, r1
 800cdee:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800cdf6:	4611      	mov	r1, r2
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fd fe6a 	bl	800aad2 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	3384      	adds	r3, #132	; 0x84
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	697c      	ldr	r4, [r7, #20]
 800ce08:	463a      	mov	r2, r7
 800ce0a:	6979      	ldr	r1, [r7, #20]
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	4798      	blx	r3
 800ce10:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800ce14:	463a      	mov	r2, r7
 800ce16:	ca07      	ldmia	r2, {r0, r1, r2}
 800ce18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800ce1c:	bf00      	nop
 800ce1e:	371c      	adds	r7, #28
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd90      	pop	{r4, r7, pc}

0800ce24 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800ce24:	b590      	push	{r4, r7, lr}
 800ce26:	b087      	sub	sp, #28
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6178      	str	r0, [r7, #20]
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800ce36:	4611      	mov	r1, r2
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7fd fe59 	bl	800aaf0 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	3384      	adds	r3, #132	; 0x84
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	697c      	ldr	r4, [r7, #20]
 800ce48:	463a      	mov	r2, r7
 800ce4a:	6979      	ldr	r1, [r7, #20]
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	4798      	blx	r3
 800ce50:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800ce54:	463a      	mov	r2, r7
 800ce56:	ca07      	ldmia	r2, {r0, r1, r2}
 800ce58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800ce5c:	bf00      	nop
 800ce5e:	371c      	adds	r7, #28
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd90      	pop	{r4, r7, pc}

0800ce64 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f7fd fcf7 	bl	800a862 <_ZN8touchgfx4RectC1Ev>
    }
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	460b      	mov	r3, r1
 800ce86:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	78fa      	ldrb	r2, [r7, #3]
 800ce8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 800ce90:	bf00      	nop
 800ce92:	370c      	adds	r7, #12
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800ce9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce9e:	b085      	sub	sp, #20
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800cea8:	687e      	ldr	r6, [r7, #4]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	3334      	adds	r3, #52	; 0x34
 800ceb0:	681c      	ldr	r4, [r3, #0]
 800ceb2:	887d      	ldrh	r5, [r7, #2]
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f000 f869 	bl	800cf8c <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800ceba:	4603      	mov	r3, r0
 800cebc:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800cebe:	4b1d      	ldr	r3, [pc, #116]	; (800cf34 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d105      	bne.n	800ced2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800cec6:	4b1c      	ldr	r3, [pc, #112]	; (800cf38 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800cec8:	4a1c      	ldr	r2, [pc, #112]	; (800cf3c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800ceca:	216c      	movs	r1, #108	; 0x6c
 800cecc:	481c      	ldr	r0, [pc, #112]	; (800cf40 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800cece:	f019 fd65 	bl	802699c <__assert_func>
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	889a      	ldrh	r2, [r3, #4]
 800ceda:	4b1a      	ldr	r3, [pc, #104]	; (800cf44 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800cedc:	881b      	ldrh	r3, [r3, #0]
 800cede:	429a      	cmp	r2, r3
 800cee0:	bf34      	ite	cc
 800cee2:	2301      	movcc	r3, #1
 800cee4:	2300      	movcs	r3, #0
 800cee6:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d105      	bne.n	800cef8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800ceec:	4b16      	ldr	r3, [pc, #88]	; (800cf48 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800ceee:	4a13      	ldr	r2, [pc, #76]	; (800cf3c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800cef0:	216d      	movs	r1, #109	; 0x6d
 800cef2:	4813      	ldr	r0, [pc, #76]	; (800cf40 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800cef4:	f019 fd52 	bl	802699c <__assert_func>
 800cef8:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 800cefa:	4b14      	ldr	r3, [pc, #80]	; (800cf4c <_ZN8touchgfx8TextArea12setBaselineYEs+0xb0>)
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	4b0d      	ldr	r3, [pc, #52]	; (800cf34 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800cf00:	6819      	ldr	r1, [r3, #0]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	889b      	ldrh	r3, [r3, #4]
 800cf06:	005b      	lsls	r3, r3, #1
 800cf08:	440b      	add	r3, r1
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	4413      	add	r3, r2
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	322c      	adds	r2, #44	; 0x2c
 800cf16:	6812      	ldr	r2, [r2, #0]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	4790      	blx	r2
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	1aeb      	subs	r3, r5, r3
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	b21b      	sxth	r3, r3
 800cf24:	4619      	mov	r1, r3
 800cf26:	4630      	mov	r0, r6
 800cf28:	47a0      	blx	r4
    }
 800cf2a:	bf00      	nop
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf32:	bf00      	nop
 800cf34:	20008860 	.word	0x20008860
 800cf38:	0802823c 	.word	0x0802823c
 800cf3c:	08028280 	.word	0x08028280
 800cf40:	080282bc 	.word	0x080282bc
 800cf44:	20008864 	.word	0x20008864
 800cf48:	08028300 	.word	0x08028300
 800cf4c:	20008868 	.word	0x20008868

0800cf50 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	460b      	mov	r3, r1
 800cf5a:	807b      	strh	r3, [r7, #2]
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	3330      	adds	r3, #48	; 0x30
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800cf6e:	4610      	mov	r0, r2
 800cf70:	4798      	blx	r3
        setBaselineY(baselineY);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	3364      	adds	r3, #100	; 0x64
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800cf7e:	4611      	mov	r1, r2
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	4798      	blx	r3
    }
 800cf84:	bf00      	nop
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	3328      	adds	r3, #40	; 0x28
    }
 800cf98:	4618      	mov	r0, r3
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr

0800cfa4 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800cfac:	2300      	movs	r3, #0
    }
 800cfae:	4618      	mov	r0, r3
 800cfb0:	370c      	adds	r7, #12
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr

0800cfba <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b084      	sub	sp, #16
 800cfbe:	af02      	add	r7, sp, #8
 800cfc0:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	f04f 33ff 	mov.w	r3, #4294967295
 800cfce:	2200      	movs	r2, #0
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	f7fd fc5d 	bl	800a890 <_ZN8touchgfx4RectC1Essss>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	609a      	str	r2, [r3, #8]
        {
        }
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3708      	adds	r7, #8
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
	...

0800cfe8 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	4a08      	ldr	r2, [pc, #32]	; (800d014 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	601a      	str	r2, [r3, #0]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	3328      	adds	r3, #40	; 0x28
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fc fcf8 	bl	80099f0 <_ZN8touchgfx9TypedTextD1Ev>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4618      	mov	r0, r3
 800d004:	f7fd ff18 	bl	800ae38 <_ZN8touchgfx6WidgetD1Ev>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4618      	mov	r0, r3
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	0802acc0 	.word	0x0802acc0

0800d018 <_ZN8touchgfx8TextAreaD0Ev>:
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7ff ffe1 	bl	800cfe8 <_ZN8touchgfx8TextAreaD1Ev>
 800d026:	2148      	movs	r1, #72	; 0x48
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f018 ff2b 	bl	8025e84 <_ZdlPvj>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4618      	mov	r0, r3
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
        : TextArea()
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4618      	mov	r0, r3
 800d044:	f7ff fe90 	bl	800cd68 <_ZN8touchgfx8TextAreaC1Ev>
 800d048:	4a03      	ldr	r2, [pc, #12]	; (800d058 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	601a      	str	r2, [r3, #0]
    {
    }
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4618      	mov	r0, r3
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	0802adb8 	.word	0x0802adb8

0800d05c <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const;

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7ff ffa7 	bl	800cfba <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	4a05      	ldr	r2, [pc, #20]	; (800d094 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	601a      	str	r2, [r3, #0]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	4618      	mov	r0, r3
 800d086:	f7ff ffaf 	bl	800cfe8 <_ZN8touchgfx8TextAreaD1Ev>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4618      	mov	r0, r3
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	0802adb8 	.word	0x0802adb8

0800d098 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f7ff ffe7 	bl	800d074 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800d0a6:	2148      	movs	r1, #72	; 0x48
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f018 feeb 	bl	8025e84 <_ZdlPvj>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7ff ffb8 	bl	800d038 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800d0c8:	4a05      	ldr	r2, [pc, #20]	; (800d0e0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	601a      	str	r2, [r3, #0]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	649a      	str	r2, [r3, #72]	; 0x48
    {
    }
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3708      	adds	r7, #8
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	08029a80 	.word	0x08029a80

0800d0e4 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard1(const Unicode::UnicodeChar* value)
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
    {
        wc1 = value;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	683a      	ldr	r2, [r7, #0]
 800d0f2:	649a      	str	r2, [r3, #72]	; 0x48
    }
 800d0f4:	bf00      	nop
 800d0f6:	370c      	adds	r7, #12
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr

0800d100 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 800d10c:	4618      	mov	r0, r3
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7ff ffdd 	bl	800d0e4 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 800d12a:	bf00      	nop
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
	...

0800d134 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
 * @see ClickButtonTrigger, RepeatButtonTrigger, ToggleButtonTrigger, TouchButtonTrigger
 */
class AbstractButtonContainer : public Container
{
public:
    AbstractButtonContainer()
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
        : pressed(false), alpha(255), action(0)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fd fdb0 	bl	800aca4 <_ZN8touchgfx9ContainerC1Ev>
 800d144:	4a0b      	ldr	r2, [pc, #44]	; (800d174 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	601a      	str	r2, [r3, #0]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	22ff      	movs	r2, #255	; 0xff
 800d156:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2101      	movs	r1, #1
 800d164:	4618      	mov	r0, r3
 800d166:	f7fd fd25 	bl	800abb4 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4618      	mov	r0, r3
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	080299e4 	.word	0x080299e4

0800d178 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @param  isPressed True if is pressed, false if not.
     *
     * @see getPressed, handlePressedUpdated
     */
    void setPressed(bool isPressed)
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	460b      	mov	r3, r1
 800d182:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	78fa      	ldrb	r2, [r7, #3]
 800d188:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	338c      	adds	r3, #140	; 0x8c
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	4798      	blx	r3
    }
 800d198:	bf00      	nop
 800d19a:	3708      	adds	r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @return True if it succeeds, false if it fails.
     *
     * @see setPressed
     */
    bool getPressed()
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	370c      	adds	r7, #12
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr

0800d1ba <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>:

    /** @copydoc Image::setAlpha() */
    void setAlpha(uint8_t newAlpha)
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b082      	sub	sp, #8
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	78fa      	ldrb	r2, [r7, #3]
 800d1ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        handleAlphaUpdated();
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	3390      	adds	r3, #144	; 0x90
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	4798      	blx	r3
    }
 800d1da:	bf00      	nop
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
 800d1e2:	b480      	push	{r7}
 800d1e4:	b083      	sub	sp, #12
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @param  callback The callback.
     *
     * @see executeAction
     */
    void setAction(GenericCallback<const AbstractButtonContainer&>& callback)
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800d20c:	bf00      	nop
 800d20e:	370c      	adds	r7, #12
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr

0800d218 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
    {
        if (action && action->isValid())
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d224:	2b00      	cmp	r3, #0
 800d226:	d00d      	beq.n	800d244 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	330c      	adds	r3, #12
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	4610      	mov	r0, r2
 800d238:	4798      	blx	r3
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d001      	beq.n	800d244 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 800d240:	2301      	movs	r3, #1
 800d242:	e000      	b.n	800d246 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2e>
 800d244:	2300      	movs	r3, #0
 800d246:	2b00      	cmp	r3, #0
 800d248:	d009      	beq.n	800d25e <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x46>
        {
            action->execute(*this);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	3308      	adds	r3, #8
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	6879      	ldr	r1, [r7, #4]
 800d25a:	4610      	mov	r0, r2
 800d25c:	4798      	blx	r3
        }
    }
 800d25e:	bf00      	nop
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    uint8_t alpha; ///< The current alpha value. 255 denotes solid, 0 denotes completely invisible.

    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
 800d266:	b480      	push	{r7}
 800d268:	b083      	sub	sp, #12
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
    {
    }
 800d26e:	bf00      	nop
 800d270:	370c      	adds	r7, #12
 800d272:	46bd      	mov	sp, r7
 800d274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d278:	4770      	bx	lr

0800d27a <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
 800d27a:	b480      	push	{r7}
 800d27c:	b083      	sub	sp, #12
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
    {
    }
 800d282:	bf00      	nop
 800d284:	370c      	adds	r7, #12
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
	...

0800d290 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	4618      	mov	r0, r3
 800d29e:	2326      	movs	r3, #38	; 0x26
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	f019 fd00 	bl	8026ca8 <memset>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7fd fdb2 	bl	800ae14 <_ZN8touchgfx6WidgetC1Ev>
 800d2b0:	4a09      	ldr	r2, [pc, #36]	; (800d2d8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	601a      	str	r2, [r3, #0]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	683a      	ldr	r2, [r7, #0]
 800d2ba:	8812      	ldrh	r2, [r2, #0]
 800d2bc:	84da      	strh	r2, [r3, #38]	; 0x26
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	22ff      	movs	r2, #255	; 0xff
 800d2c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 800d2c6:	6839      	ldr	r1, [r7, #0]
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f007 f8ff 	bl	80144cc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3708      	adds	r7, #8
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	0802ae48 	.word	0x0802ae48

0800d2dc <_ZN8touchgfx5Image8setAlphaEh>:
     *
     * @see getAlpha
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	78fa      	ldrb	r2, [r7, #3]
 800d2ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
 800d2f0:	bf00      	nop
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	4a05      	ldr	r2, [pc, #20]	; (800d31c <_ZN8touchgfx5ImageD1Ev+0x20>)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7fd fd93 	bl	800ae38 <_ZN8touchgfx6WidgetD1Ev>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4618      	mov	r0, r3
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	0802ae48 	.word	0x0802ae48

0800d320 <_ZN8touchgfx5ImageD0Ev>:
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f7ff ffe7 	bl	800d2fc <_ZN8touchgfx5ImageD1Ev>
 800d32e:	212c      	movs	r1, #44	; 0x2c
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f018 fda7 	bl	8025e84 <_ZdlPvj>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4618      	mov	r0, r3
 800d33a:	3708      	adds	r7, #8
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	4a05      	ldr	r2, [pc, #20]	; (800d360 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	601a      	str	r2, [r3, #0]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4618      	mov	r0, r3
 800d352:	f7fd fd71 	bl	800ae38 <_ZN8touchgfx6WidgetD1Ev>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	4618      	mov	r0, r3
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	0802ad50 	.word	0x0802ad50

0800d364 <_ZN8touchgfx3BoxD0Ev>:
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f7ff ffe7 	bl	800d340 <_ZN8touchgfx3BoxD1Ev>
 800d372:	212c      	movs	r1, #44	; 0x2c
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f018 fd85 	bl	8025e84 <_ZdlPvj>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	4618      	mov	r0, r3
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	4618      	mov	r0, r3
 800d392:	f7ff ff05 	bl	800d1a0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800d396:	4603      	mov	r3, r0
 800d398:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 800d39a:	6838      	ldr	r0, [r7, #0]
 800d39c:	f7fd fa98 	bl	800a8d0 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	bf0c      	ite	eq
 800d3a6:	2301      	moveq	r3, #1
 800d3a8:	2300      	movne	r3, #0
 800d3aa:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 800d3ac:	7bbb      	ldrb	r3, [r7, #14]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d005      	beq.n	800d3be <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 800d3b2:	7bfb      	ldrb	r3, [r7, #15]
 800d3b4:	f083 0301 	eor.w	r3, r3, #1
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d108      	bne.n	800d3d0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 800d3be:	7bbb      	ldrb	r3, [r7, #14]
 800d3c0:	f083 0301 	eor.w	r3, r3, #1
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00f      	beq.n	800d3ea <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 800d3ca:	7bfb      	ldrb	r3, [r7, #15]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d00c      	beq.n	800d3ea <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	7bba      	ldrb	r2, [r7, #14]
 800d3d4:	4611      	mov	r1, r2
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7ff fece 	bl	800d178 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	3314      	adds	r3, #20
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4610      	mov	r0, r2
 800d3e8:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 800d3ea:	7bfb      	ldrb	r3, [r7, #15]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d007      	beq.n	800d400 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800d3f0:	6838      	ldr	r0, [r7, #0]
 800d3f2:	f7fd fa6d 	bl	800a8d0 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d101      	bne.n	800d400 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	e000      	b.n	800d402 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7e>
 800d400:	2300      	movs	r3, #0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d006      	beq.n	800d414 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x90>
        {
            executeAction();
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	3388      	adds	r3, #136	; 0x88
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4610      	mov	r0, r2
 800d412:	4798      	blx	r3
        }
    }
 800d414:	bf00      	nop
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	4a05      	ldr	r2, [pc, #20]	; (800d43c <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	601a      	str	r2, [r3, #0]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7fe fb79 	bl	800bb24 <_ZN8touchgfx9ContainerD1Ev>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4618      	mov	r0, r3
 800d436:	3708      	adds	r7, #8
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	080299e4 	.word	0x080299e4

0800d440 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f7ff ffe7 	bl	800d41c <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800d44e:	2134      	movs	r1, #52	; 0x34
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f018 fd17 	bl	8025e84 <_ZdlPvj>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4618      	mov	r0, r3
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	4a05      	ldr	r2, [pc, #20]	; (800d480 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	601a      	str	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4618      	mov	r0, r3
 800d472:	f7fd fc45 	bl	800ad00 <_ZN8touchgfx6ScreenD1Ev>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4618      	mov	r0, r3
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	080298fc 	.word	0x080298fc

0800d484 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f7ff ffe7 	bl	800d460 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800d492:	2140      	movs	r1, #64	; 0x40
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f018 fcf5 	bl	8025e84 <_ZdlPvj>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4618      	mov	r0, r3
 800d49e:	3708      	adds	r7, #8
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	4a2a      	ldr	r2, [pc, #168]	; (800d558 <_ZN15Screen1ViewBaseD1Ev+0xb4>)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	601a      	str	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f000 ff1d 	bl	800e2f8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvED1Ev>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f000 ff39 	bl	800e33c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f000 ff55 	bl	800e380 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7ff ff2f 	bl	800d340 <_ZN8touchgfx3BoxD1Ev>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f000 ff95 	bl	800e418 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f203 5364 	addw	r3, r3, #1380	; 0x564
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f001 f829 	bl	800e54c <_ZN8touchgfx12GraphLabelsYD1Ev>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800d500:	4618      	mov	r0, r3
 800d502:	f000 ffab 	bl	800e45c <_ZN8touchgfx17GraphElementGridYD1Ev>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800d50c:	4618      	mov	r0, r3
 800d50e:	f000 ffe9 	bl	800e4e4 <_ZN8touchgfx13PainterRGB565D1Ev>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 800d518:	4618      	mov	r0, r3
 800d51a:	f000 ffc1 	bl	800e4a0 <_ZN8touchgfx16GraphElementLineD1Ev>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	33c4      	adds	r3, #196	; 0xc4
 800d522:	4618      	mov	r0, r3
 800d524:	f000 ff54 	bl	800e3d0 <_ZN8touchgfx17GraphWrapAndClearILs180EED1Ev>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	3398      	adds	r3, #152	; 0x98
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7ff ff07 	bl	800d340 <_ZN8touchgfx3BoxD1Ev>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	336c      	adds	r3, #108	; 0x6c
 800d536:	4618      	mov	r0, r3
 800d538:	f7ff ff02 	bl	800d340 <_ZN8touchgfx3BoxD1Ev>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	3340      	adds	r3, #64	; 0x40
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff fefd 	bl	800d340 <_ZN8touchgfx3BoxD1Ev>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	4618      	mov	r0, r3
 800d54a:	f7ff ff89 	bl	800d460 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	4618      	mov	r0, r3
 800d552:	3708      	adds	r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	08029658 	.word	0x08029658

0800d55c <_ZN15Screen1ViewBaseD0Ev>:
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7ff ff9d 	bl	800d4a4 <_ZN15Screen1ViewBaseD1Ev>
 800d56a:	f44f 51cc 	mov.w	r1, #6528	; 0x1980
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f018 fc88 	bl	8025e84 <_ZdlPvj>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	4618      	mov	r0, r3
 800d578:	3708      	adds	r7, #8
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <_ZN15Screen1ViewBase12graphClickedEN8touchgfx17AbstractDataGraph15GraphClickEventE>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void graphClicked(AbstractDataGraph::GraphClickEvent value)
 800d57e:	b480      	push	{r7}
 800d580:	b085      	sub	sp, #20
 800d582:	af00      	add	r7, sp, #0
 800d584:	60f8      	str	r0, [r7, #12]
 800d586:	1d3b      	adds	r3, r7, #4
 800d588:	e883 0006 	stmia.w	r3, {r1, r2}
    {
        // Override and implement this function in Screen1
    }
 800d58c:	bf00      	nop
 800d58e:	3714      	adds	r7, #20
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr

0800d598 <_ZN15Screen1ViewBase10graphPauseEv>:

    virtual void graphPause()
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 800d5a0:	bf00      	nop
 800d5a2:	370c      	adds	r7, #12
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <_ZN8touchgfx20GraphElementGridBaseD1Ev>:
class GraphElementGridBase : public AbstractGraphElementNoCWR
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	4a05      	ldr	r2, [pc, #20]	; (800d5cc <_ZN8touchgfx20GraphElementGridBaseD1Ev+0x20>)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	601a      	str	r2, [r3, #0]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7ff f899 	bl	800c6f4 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	0802a92c 	.word	0x0802a92c

0800d5d0 <_ZN8touchgfx20GraphElementGridBaseD0Ev>:
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f7ff ffe7 	bl	800d5ac <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 800d5de:	2140      	movs	r1, #64	; 0x40
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f018 fc4f 	bl	8025e84 <_ZdlPvj>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3708      	adds	r7, #8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <_ZN8touchgfx17GraphElementGridYC1Ev>:
class GraphElementGridY : public GraphElementGridBase
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7ff f89c 	bl	800c738 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 800d600:	4a03      	ldr	r2, [pc, #12]	; (800d610 <_ZN8touchgfx17GraphElementGridYC1Ev+0x20>)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	601a      	str	r2, [r3, #0]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4618      	mov	r0, r3
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	08029bcc 	.word	0x08029bcc

0800d614 <_ZN8touchgfx15GraphLabelsBaseD1Ev>:
class GraphLabelsBase : public AbstractGraphDecoration
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	4a08      	ldr	r2, [pc, #32]	; (800d640 <_ZN8touchgfx15GraphLabelsBaseD1Ev+0x2c>)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	601a      	str	r2, [r3, #0]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	3338      	adds	r3, #56	; 0x38
 800d626:	4618      	mov	r0, r3
 800d628:	f7fc f9e2 	bl	80099f0 <_ZN8touchgfx9TypedTextD1Ev>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4618      	mov	r0, r3
 800d630:	f7ff fb32 	bl	800cc98 <_ZN8touchgfx23AbstractGraphDecorationD1Ev>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4618      	mov	r0, r3
 800d638:	3708      	adds	r7, #8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	0802aa88 	.word	0x0802aa88

0800d644 <_ZN8touchgfx15GraphLabelsBaseD0Ev>:
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f7ff ffe1 	bl	800d614 <_ZN8touchgfx15GraphLabelsBaseD1Ev>
 800d652:	214c      	movs	r1, #76	; 0x4c
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f018 fc15 	bl	8025e84 <_ZdlPvj>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4618      	mov	r0, r3
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <_ZN8touchgfx12GraphLabelsYC1Ev>:

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	4618      	mov	r0, r3
 800d670:	f7ff fb34 	bl	800ccdc <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 800d674:	4a03      	ldr	r2, [pc, #12]	; (800d684 <_ZN8touchgfx12GraphLabelsYC1Ev+0x20>)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	601a      	str	r2, [r3, #0]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4618      	mov	r0, r3
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	0802a9e8 	.word	0x0802a9e8

0800d688 <_ZN15Screen1ViewBaseC1Ev>:
#include <texts/TextKeysAndLanguages.hpp>
#include <BitmapDatabase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen1ViewBase::Screen1ViewBase() :
 800d688:	b590      	push	{r4, r7, lr}
 800d68a:	b0bd      	sub	sp, #244	; 0xf4
 800d68c:	af02      	add	r7, sp, #8
 800d68e:	6178      	str	r0, [r7, #20]
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler),
    graphClickedCallback(this, &Screen1ViewBase::graphClickedCallbackHandler)
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	4618      	mov	r0, r3
 800d694:	f000 fc26 	bl	800dee4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800d698:	4aab      	ldr	r2, [pc, #684]	; (800d948 <_ZN15Screen1ViewBaseC1Ev+0x2c0>)
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	601a      	str	r2, [r3, #0]
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	3340      	adds	r3, #64	; 0x40
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7fd fbea 	bl	800ae7c <_ZN8touchgfx3BoxC1Ev>
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	336c      	adds	r3, #108	; 0x6c
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7fd fbe5 	bl	800ae7c <_ZN8touchgfx3BoxC1Ev>
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	3398      	adds	r3, #152	; 0x98
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7fd fbe0 	bl	800ae7c <_ZN8touchgfx3BoxC1Ev>
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	33c4      	adds	r3, #196	; 0xc4
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f000 fc49 	bl	800df58 <_ZN8touchgfx17GraphWrapAndClearILs180EEC1Ev>
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7ff f983 	bl	800c9d8 <_ZN8touchgfx16GraphElementLineC1Ev>
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	f503 64a2 	add.w	r4, r3, #1296	; 0x510
 800d6d8:	f107 0320 	add.w	r3, r7, #32
 800d6dc:	2100      	movs	r1, #0
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fd f8a4 	bl	800a82c <_ZN8touchgfx9colortypeC1Em>
 800d6e4:	6a39      	ldr	r1, [r7, #32]
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f7ff fa52 	bl	800cb90 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7ff ff7c 	bl	800d5f0 <_ZN8touchgfx17GraphElementGridYC1Ev>
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	f203 5364 	addw	r3, r3, #1380	; 0x564
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7ff ffb0 	bl	800d664 <_ZN8touchgfx12GraphLabelsYC1Ev>
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7ff fcd4 	bl	800d0b8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 800d716:	4618      	mov	r0, r3
 800d718:	f7fd fbb0 	bl	800ae7c <_ZN8touchgfx3BoxC1Ev>
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800d722:	4618      	mov	r0, r3
 800d724:	f000 fc62 	bl	800dfec <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	f503 60d4 	add.w	r0, r3, #1696	; 0x6a0
 800d72e:	4b87      	ldr	r3, [pc, #540]	; (800d94c <_ZN15Screen1ViewBaseC1Ev+0x2c4>)
 800d730:	627b      	str	r3, [r7, #36]	; 0x24
 800d732:	2300      	movs	r3, #0
 800d734:	62bb      	str	r3, [r7, #40]	; 0x28
 800d736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d73a:	cb0c      	ldmia	r3, {r2, r3}
 800d73c:	6979      	ldr	r1, [r7, #20]
 800d73e:	f000 fca3 	bl	800e088 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	f503 60d6 	add.w	r0, r3, #1712	; 0x6b0
 800d748:	4b81      	ldr	r3, [pc, #516]	; (800d950 <_ZN15Screen1ViewBaseC1Ev+0x2c8>)
 800d74a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d74c:	2300      	movs	r3, #0
 800d74e:	633b      	str	r3, [r7, #48]	; 0x30
 800d750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d754:	cb0c      	ldmia	r3, {r2, r3}
 800d756:	6979      	ldr	r1, [r7, #20]
 800d758:	f000 fcc6 	bl	800e0e8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvEC1EPS1_MS1_FvS4_S7_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 800d762:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 800d766:	4618      	mov	r0, r3
 800d768:	f007 fdb4 	bl	80152d4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 320, 240);
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d772:	23f0      	movs	r3, #240	; 0xf0
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800d77a:	2200      	movs	r2, #0
 800d77c:	2100      	movs	r1, #0
 800d77e:	f7fd f931 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d788:	2300      	movs	r3, #0
 800d78a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 800d78e:	2300      	movs	r3, #0
 800d790:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 800d794:	2300      	movs	r3, #0
 800d796:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800d79a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800d79e:	041b      	lsls	r3, r3, #16
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800d7a6:	021b      	lsls	r3, r3, #8
 800d7a8:	431a      	orrs	r2, r3
 800d7aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800d7b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d7b8:	4611      	mov	r1, r2
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7fd f836 	bl	800a82c <_ZN8touchgfx9colortypeC1Em>
 800d7c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	f7fd fb7d 	bl	800aec4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 320, 240);
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800d7d0:	23f0      	movs	r3, #240	; 0xf0
 800d7d2:	9300      	str	r3, [sp, #0]
 800d7d4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800d7d8:	2200      	movs	r2, #0
 800d7da:	2100      	movs	r1, #0
 800d7dc:	f7fd f902 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(10, 17, 99));
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800d7e6:	230a      	movs	r3, #10
 800d7e8:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 800d7ec:	2311      	movs	r3, #17
 800d7ee:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800d7f2:	2363      	movs	r3, #99	; 0x63
 800d7f4:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 800d7f8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d7fc:	041b      	lsls	r3, r3, #16
 800d7fe:	461a      	mov	r2, r3
 800d800:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d804:	021b      	lsls	r3, r3, #8
 800d806:	431a      	orrs	r2, r3
 800d808:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800d80c:	4313      	orrs	r3, r2
 800d80e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800d812:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d816:	4611      	mov	r1, r2
 800d818:	4618      	mov	r0, r3
 800d81a:	f7fd f807 	bl	800a82c <_ZN8touchgfx9colortypeC1Em>
 800d81e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d820:	4619      	mov	r1, r3
 800d822:	4620      	mov	r0, r4
 800d824:	f7fd fb4e 	bl	800aec4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box2.setPosition(5, 5, 310, 230);
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d82e:	23e6      	movs	r3, #230	; 0xe6
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	f44f 739b 	mov.w	r3, #310	; 0x136
 800d836:	2205      	movs	r2, #5
 800d838:	2105      	movs	r1, #5
 800d83a:	f7fd f8d3 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800d844:	23ff      	movs	r3, #255	; 0xff
 800d846:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800d84a:	23ff      	movs	r3, #255	; 0xff
 800d84c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800d850:	23ff      	movs	r3, #255	; 0xff
 800d852:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 800d856:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d85a:	041b      	lsls	r3, r3, #16
 800d85c:	461a      	mov	r2, r3
 800d85e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d862:	021b      	lsls	r3, r3, #8
 800d864:	431a      	orrs	r2, r3
 800d866:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800d86a:	4313      	orrs	r3, r2
 800d86c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800d870:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d874:	4611      	mov	r1, r2
 800d876:	4618      	mov	r0, r3
 800d878:	f7fc ffd8 	bl	800a82c <_ZN8touchgfx9colortypeC1Em>
 800d87c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d87e:	4619      	mov	r1, r3
 800d880:	4620      	mov	r0, r4
 800d882:	f7fd fb1f 	bl	800aec4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    dynamicGraph1.setScale(1);
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	33c4      	adds	r3, #196	; 0xc4
 800d88a:	2200      	movs	r2, #0
 800d88c:	2101      	movs	r1, #1
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fe f9d8 	bl	800bc44 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphRangeX(0, 180);
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	33c4      	adds	r3, #196	; 0xc4
 800d898:	22b4      	movs	r2, #180	; 0xb4
 800d89a:	2100      	movs	r1, #0
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7fd fc92 	bl	800b1c6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    dynamicGraph1.setXAxisFactor(4);
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	33c4      	adds	r3, #196	; 0xc4
 800d8a6:	2104      	movs	r1, #4
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7fe fa8f 	bl	800bdcc <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>
    dynamicGraph1.setXAxisOffset(0);
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	33c4      	adds	r3, #196	; 0xc4
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7fe fbab 	bl	800c010 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>
    dynamicGraph1.setPosition(5, 5, 310, 230);
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800d8c0:	23e6      	movs	r3, #230	; 0xe6
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	f44f 739b 	mov.w	r3, #310	; 0x136
 800d8c8:	2205      	movs	r2, #5
 800d8ca:	2105      	movs	r1, #5
 800d8cc:	f7fd f88a 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setGraphAreaMargin(10, 20, 10, 10);
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800d8d6:	230a      	movs	r3, #10
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	230a      	movs	r3, #10
 800d8dc:	2214      	movs	r2, #20
 800d8de:	210a      	movs	r1, #10
 800d8e0:	f005 f95a 	bl	8012b98 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 1, 0, 1);
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	9300      	str	r3, [sp, #0]
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	f005 f865 	bl	80129c2 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	33c4      	adds	r3, #196	; 0xc4
 800d8fc:	2264      	movs	r2, #100	; 0x64
 800d8fe:	2100      	movs	r1, #0
 800d900:	4618      	mov	r0, r3
 800d902:	f7fd fd96 	bl	800b432 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
    dynamicGraph1.setClickAction(graphClickedCallback);
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 800d912:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d914:	67bb      	str	r3, [r7, #120]	; 0x78
        clickAction = &callback;
 800d916:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d918:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d91a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    }
 800d91e:	bf00      	nop

    dynamicGraph1MajorYAxisGrid.setScale(1);
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800d926:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d92a:	2301      	movs	r3, #1
 800d92c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        assert(scale != 0);
 800d930:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d934:	2b00      	cmp	r3, #0
 800d936:	d113      	bne.n	800d960 <_ZN15Screen1ViewBaseC1Ev+0x2d8>
 800d938:	4b06      	ldr	r3, [pc, #24]	; (800d954 <_ZN15Screen1ViewBaseC1Ev+0x2cc>)
 800d93a:	4a07      	ldr	r2, [pc, #28]	; (800d958 <_ZN15Screen1ViewBaseC1Ev+0x2d0>)
 800d93c:	f240 112f 	movw	r1, #303	; 0x12f
 800d940:	4806      	ldr	r0, [pc, #24]	; (800d95c <_ZN15Screen1ViewBaseC1Ev+0x2d4>)
 800d942:	f019 f82b 	bl	802699c <__assert_func>
 800d946:	bf00      	nop
 800d948:	08029658 	.word	0x08029658
 800d94c:	0800de71 	.word	0x0800de71
 800d950:	0800de9b 	.word	0x0800de9b
 800d954:	08028340 	.word	0x08028340
 800d958:	0802834c 	.word	0x0802834c
 800d95c:	08028380 	.word	0x08028380
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 800d960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d964:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d966:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d96c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d970:	4619      	mov	r1, r3
 800d972:	f005 f9c3 	bl	8012cfc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800d976:	4602      	mov	r2, r0
 800d978:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d97c:	635a      	str	r2, [r3, #52]	; 0x34
        dataScale = scale;
 800d97e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d982:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d986:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800d988:	bf00      	nop
    dynamicGraph1MajorYAxisGrid.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	f203 5424 	addw	r4, r3, #1316	; 0x524
 800d990:	2314      	movs	r3, #20
 800d992:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800d996:	2397      	movs	r3, #151	; 0x97
 800d998:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 800d99c:	23c5      	movs	r3, #197	; 0xc5
 800d99e:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800d9a2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800d9a6:	041b      	lsls	r3, r3, #16
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800d9ae:	021b      	lsls	r3, r3, #8
 800d9b0:	431a      	orrs	r2, r3
 800d9b2:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800d9bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d9c0:	4611      	mov	r1, r2
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fc ff32 	bl	800a82c <_ZN8touchgfx9colortypeC1Em>
 800d9c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f7fe fe5f 	bl	800c690 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1MajorYAxisGrid.setInterval(25);
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800d9d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d9dc:	2319      	movs	r3, #25
 800d9de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        setIntervalScaled(abs(interval) * dataScale);
 800d9e2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d9e6:	f000 fa6f 	bl	800dec8 <_ZN8touchgfx3absIiEET_S1_>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9f2:	fb02 f303 	mul.w	r3, r2, r3
 800d9f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d9fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d9fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        gridInterval = abs(interval);
 800da02:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800da06:	f000 fa5f 	bl	800dec8 <_ZN8touchgfx3absIiEET_S1_>
 800da0a:	4602      	mov	r2, r0
 800da0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da10:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800da12:	bf00      	nop
    }
 800da14:	bf00      	nop
    dynamicGraph1MajorYAxisGrid.setLineWidth(1);
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800da1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800da20:	2301      	movs	r3, #1
 800da22:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        lineWidth = width;
 800da26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da2a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800da2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
 800da32:	bf00      	nop
    dynamicGraph1MajorYAxisGrid.setAlpha(30);
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800da3a:	211e      	movs	r1, #30
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fe fd75 	bl	800c52c <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800da4e:	4619      	mov	r1, r3
 800da50:	4610      	mov	r0, r2
 800da52:	f004 ffc1 	bl	80129d8 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph1MajorYAxisLabel.setScale(1);
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	f203 5364 	addw	r3, r3, #1380	; 0x564
 800da5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800da60:	2301      	movs	r3, #1
 800da62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        assert(scale != 0);
 800da66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d10c      	bne.n	800da88 <_ZN15Screen1ViewBaseC1Ev+0x400>
 800da6e:	4b03      	ldr	r3, [pc, #12]	; (800da7c <_ZN15Screen1ViewBaseC1Ev+0x3f4>)
 800da70:	4a03      	ldr	r2, [pc, #12]	; (800da80 <_ZN15Screen1ViewBaseC1Ev+0x3f8>)
 800da72:	213e      	movs	r1, #62	; 0x3e
 800da74:	4803      	ldr	r0, [pc, #12]	; (800da84 <_ZN15Screen1ViewBaseC1Ev+0x3fc>)
 800da76:	f018 ff91 	bl	802699c <__assert_func>
 800da7a:	bf00      	nop
 800da7c:	08028340 	.word	0x08028340
 800da80:	080283d8 	.word	0x080283d8
 800da84:	08028408 	.word	0x08028408
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 800da88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da8c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800da8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da94:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800da98:	4619      	mov	r1, r3
 800da9a:	f005 f92f 	bl	8012cfc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800da9e:	4602      	mov	r2, r0
 800daa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800daa4:	635a      	str	r2, [r3, #52]	; 0x34
        dataScale = scale;
 800daa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800daaa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800daae:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800dab0:	bf00      	nop
    dynamicGraph1MajorYAxisLabel.setInterval(25);
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	f203 5364 	addw	r3, r3, #1380	; 0x564
 800dab8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dabc:	2319      	movs	r3, #25
 800dabe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 800dac2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dac8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800dacc:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800dad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        return i * scale;
 800dad4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dad8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dadc:	fb02 f303 	mul.w	r3, r2, r3
 800dae0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800dae4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800dae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        labelInterval = abs(interval);
 800daec:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800daf0:	f000 f9ea 	bl	800dec8 <_ZN8touchgfx3absIiEET_S1_>
 800daf4:	4602      	mov	r2, r0
 800daf6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dafa:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800dafc:	bf00      	nop
    }
 800dafe:	bf00      	nop
    dynamicGraph1MajorYAxisLabel.setLabelTypedText(touchgfx::TypedText(T_DYNAMICGRAPH1Y));
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	f203 5464 	addw	r4, r3, #1380	; 0x564
 800db06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800db0a:	2101      	movs	r1, #1
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7ff f89b 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800db12:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
        labelTypedText = typedText;
 800db16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800db1a:	3338      	adds	r3, #56	; 0x38
 800db1c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800db20:	4611      	mov	r1, r2
 800db22:	4618      	mov	r0, r3
 800db24:	f7ff f910 	bl	800cd48 <_ZN8touchgfx9TypedTextaSERKS0_>
    }
 800db28:	bf00      	nop
 800db2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fb ff5e 	bl	80099f0 <_ZN8touchgfx9TypedTextD1Ev>
    dynamicGraph1MajorYAxisLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	f203 5464 	addw	r4, r3, #1380	; 0x564
 800db3a:	2300      	movs	r3, #0
 800db3c:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 800db40:	2300      	movs	r3, #0
 800db42:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 800db46:	2300      	movs	r3, #0
 800db48:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
 800db4c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800db50:	041b      	lsls	r3, r3, #16
 800db52:	461a      	mov	r2, r3
 800db54:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800db58:	021b      	lsls	r3, r3, #8
 800db5a:	431a      	orrs	r2, r3
 800db5c:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 800db60:	4313      	orrs	r3, r2
 800db62:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800db66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800db6a:	4611      	mov	r1, r2
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7fc fe5d 	bl	800a82c <_ZN8touchgfx9colortypeC1Em>
 800db72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db74:	4619      	mov	r1, r3
 800db76:	4620      	mov	r0, r4
 800db78:	f7fe fd8a 	bl	800c690 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1.addLeftElement(dynamicGraph1MajorYAxisLabel);
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	f203 5364 	addw	r3, r3, #1380	; 0x564
 800db88:	4619      	mov	r1, r3
 800db8a:	4610      	mov	r0, r2
 800db8c:	f004 ff36 	bl	80129fc <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>

    dynamicGraph1Line1Painter.setColor(touchgfx::Color::getColorFromRGB(32, 36, 158));
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	f503 64a2 	add.w	r4, r3, #1296	; 0x510
 800db96:	2320      	movs	r3, #32
 800db98:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 800db9c:	2324      	movs	r3, #36	; 0x24
 800db9e:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
 800dba2:	239e      	movs	r3, #158	; 0x9e
 800dba4:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 800dba8:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800dbac:	041b      	lsls	r3, r3, #16
 800dbae:	461a      	mov	r2, r3
 800dbb0:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800dbb4:	021b      	lsls	r3, r3, #8
 800dbb6:	431a      	orrs	r2, r3
 800dbb8:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800dbc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dbc6:	4611      	mov	r1, r2
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7fc fe2f 	bl	800a82c <_ZN8touchgfx9colortypeC1Em>
 800dbce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f7fe fffa 	bl	800cbcc <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    dynamicGraph1Line1.setPainter(dynamicGraph1Line1Painter);
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	f503 629c 	add.w	r2, r3, #1248	; 0x4e0
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	4610      	mov	r0, r2
 800dbe8:	f7fe fc92 	bl	800c510 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    dynamicGraph1Line1.setLineWidth(2);
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 800dbf2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dbf6:	2302      	movs	r3, #2
 800dbf8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 800dbfc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800dc00:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
 800dc04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }
 800dc08:	bf00      	nop
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 800dc16:	4619      	mov	r1, r3
 800dc18:	4610      	mov	r0, r2
 800dc1a:	f004 fedd 	bl	80129d8 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    textArea1.setPosition(265, 5, 50, 30);
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	f503 60b6 	add.w	r0, r3, #1456	; 0x5b0
 800dc24:	231e      	movs	r3, #30
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	2332      	movs	r3, #50	; 0x32
 800dc2a:	2205      	movs	r2, #5
 800dc2c:	f240 1109 	movw	r1, #265	; 0x109
 800dc30:	f7fc fed8 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	f503 64b6 	add.w	r4, r3, #1456	; 0x5b0
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800dc40:	2300      	movs	r3, #0
 800dc42:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 800dc46:	2300      	movs	r3, #0
 800dc48:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 800dc4c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800dc50:	041b      	lsls	r3, r3, #16
 800dc52:	461a      	mov	r2, r3
 800dc54:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800dc58:	021b      	lsls	r3, r3, #8
 800dc5a:	431a      	orrs	r2, r3
 800dc5c:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 800dc60:	4313      	orrs	r3, r2
 800dc62:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800dc66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dc6a:	4611      	mov	r1, r2
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7fc fddd 	bl	800a82c <_ZN8touchgfx9colortypeC1Em>
 800dc72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc74:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800dc78:	61fb      	str	r3, [r7, #28]
        color = newColor;
 800dc7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dc7e:	69fa      	ldr	r2, [r7, #28]
 800dc80:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800dc82:	bf00      	nop
    textArea1.setLinespacing(0);
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 800dc8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dc8e:	2300      	movs	r3, #0
 800dc90:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
        linespace = space;
 800dc94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc98:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 800dc9c:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800dc9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	3384      	adds	r3, #132	; 0x84
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800dcac:	463a      	mov	r2, r7
 800dcae:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800dcb2:	4610      	mov	r0, r2
 800dcb4:	4798      	blx	r3
 800dcb6:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800dcba:	463a      	mov	r2, r7
 800dcbc:	ca07      	ldmia	r2, {r0, r1, r2}
 800dcbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800dcc2:	bf00      	nop
    textArea1Buffer[0] = 0;
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f8a3 268c 	strh.w	r2, [r3, #1676]	; 0x68c
    textArea1.setWildcard(textArea1Buffer);
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	f503 62b6 	add.w	r2, r3, #1456	; 0x5b0
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 800dcd8:	4619      	mov	r1, r3
 800dcda:	4610      	mov	r0, r2
 800dcdc:	f7ff fa1c 	bl	800d118 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea1.setTypedText(touchgfx::TypedText(T_TEXTAREA1));
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	f503 64b6 	add.w	r4, r3, #1456	; 0x5b0
 800dce6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dcea:	2100      	movs	r1, #0
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7fe ffab 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800dcf2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	4620      	mov	r0, r4
 800dcfa:	f006 fab9 	bl	8014270 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800dcfe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7fb fe74 	bl	80099f0 <_ZN8touchgfx9TypedTextD1Ev>

    box3.setPosition(265, 5, 50, 30);
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	f203 50fc 	addw	r0, r3, #1532	; 0x5fc
 800dd0e:	231e      	movs	r3, #30
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	2332      	movs	r3, #50	; 0x32
 800dd14:	2205      	movs	r2, #5
 800dd16:	f240 1109 	movw	r1, #265	; 0x109
 800dd1a:	f7fc fe63 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box3.setColor(touchgfx::Color::getColorFromRGB(20, 151, 196));
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	f203 54fc 	addw	r4, r3, #1532	; 0x5fc
 800dd24:	2314      	movs	r3, #20
 800dd26:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800dd2a:	2397      	movs	r3, #151	; 0x97
 800dd2c:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 800dd30:	23c4      	movs	r3, #196	; 0xc4
 800dd32:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
 800dd36:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800dd3a:	041b      	lsls	r3, r3, #16
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 800dd42:	021b      	lsls	r3, r3, #8
 800dd44:	431a      	orrs	r2, r3
 800dd46:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800dd50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd54:	4611      	mov	r1, r2
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7fc fd68 	bl	800a82c <_ZN8touchgfx9colortypeC1Em>
 800dd5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd5e:	4619      	mov	r1, r3
 800dd60:	4620      	mov	r0, r4
 800dd62:	f7fd f8af 	bl	800aec4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    box3.setAlpha(128);
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 800dd6c:	2180      	movs	r1, #128	; 0x80
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fd f8b6 	bl	800aee0 <_ZN8touchgfx3Box8setAlphaEh>

    flexButton1.setIconBitmaps(Bitmap(BITMAP_DARK_ICONS_PAUSE_32_ID), Bitmap(BITMAP_DARK_ICONS_PAUSE_32_ID));
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	f503 64c5 	add.w	r4, r3, #1576	; 0x628
 800dd7a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dd7e:	2100      	movs	r1, #0
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fc fdb1 	bl	800a8e8 <_ZN8touchgfx6BitmapC1Et>
 800dd86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dd8a:	2100      	movs	r1, #0
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7fc fdab 	bl	800a8e8 <_ZN8touchgfx6BitmapC1Et>
 800dd92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dd96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	f000 f9c3 	bl	800e128 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>
    flexButton1.setIconXY(0, 0);
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800dda8:	2200      	movs	r2, #0
 800ddaa:	2100      	movs	r1, #0
 800ddac:	4618      	mov	r0, r3
 800ddae:	f000 fa07 	bl	800e1c0 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE9setIconXYEss>
    flexButton1.setPosition(153, 98, 32, 32);
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	f503 60c5 	add.w	r0, r3, #1576	; 0x628
 800ddb8:	2320      	movs	r3, #32
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	2320      	movs	r3, #32
 800ddbe:	2262      	movs	r2, #98	; 0x62
 800ddc0:	2199      	movs	r1, #153	; 0x99
 800ddc2:	f7fc fe0f 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
    flexButton1.setAlpha(128);
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800ddcc:	2180      	movs	r1, #128	; 0x80
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7ff f9f3 	bl	800d1ba <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    flexButton1.setAction(flexButtonCallback);
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	f503 62c5 	add.w	r2, r3, #1576	; 0x628
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800dde0:	4619      	mov	r1, r3
 800dde2:	4610      	mov	r0, r2
 800dde4:	f7ff fa0a 	bl	800d1fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 800dde8:	697a      	ldr	r2, [r7, #20]
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	3340      	adds	r3, #64	; 0x40
 800ddee:	4619      	mov	r1, r3
 800ddf0:	4610      	mov	r0, r2
 800ddf2:	f7fc ffdd 	bl	800adb0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 800ddf6:	697a      	ldr	r2, [r7, #20]
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	336c      	adds	r3, #108	; 0x6c
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	4610      	mov	r0, r2
 800de00:	f7fc ffd6 	bl	800adb0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box2);
 800de04:	697a      	ldr	r2, [r7, #20]
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	3398      	adds	r3, #152	; 0x98
 800de0a:	4619      	mov	r1, r3
 800de0c:	4610      	mov	r0, r2
 800de0e:	f7fc ffcf 	bl	800adb0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(dynamicGraph1);
 800de12:	697a      	ldr	r2, [r7, #20]
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	33c4      	adds	r3, #196	; 0xc4
 800de18:	4619      	mov	r1, r3
 800de1a:	4610      	mov	r0, r2
 800de1c:	f7fc ffc8 	bl	800adb0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800de20:	697a      	ldr	r2, [r7, #20]
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 800de28:	4619      	mov	r1, r3
 800de2a:	4610      	mov	r0, r2
 800de2c:	f7fc ffc0 	bl	800adb0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box3);
 800de30:	697a      	ldr	r2, [r7, #20]
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 800de38:	4619      	mov	r1, r3
 800de3a:	4610      	mov	r0, r2
 800de3c:	f7fc ffb8 	bl	800adb0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(flexButton1);
 800de40:	697a      	ldr	r2, [r7, #20]
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800de48:	4619      	mov	r1, r3
 800de4a:	4610      	mov	r0, r2
 800de4c:	f7fc ffb0 	bl	800adb0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	4618      	mov	r0, r3
 800de54:	37ec      	adds	r7, #236	; 0xec
 800de56:	46bd      	mov	sp, r7
 800de58:	bd90      	pop	{r4, r7, pc}
 800de5a:	bf00      	nop

0800de5c <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800de5c:	b480      	push	{r7}
 800de5e:	b083      	sub	sp, #12
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]

}
 800de64:	bf00      	nop
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
    if (&src == &flexButton1)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800de80:	683a      	ldr	r2, [r7, #0]
 800de82:	429a      	cmp	r2, r3
 800de84:	d105      	bne.n	800de92 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x22>
    {
        //Interaction2
        //When flexButton1 clicked call virtual function
        //Call graphPause
        graphPause();
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	3330      	adds	r3, #48	; 0x30
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	4798      	blx	r3
    }
}
 800de92:	bf00      	nop
 800de94:	3708      	adds	r7, #8
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <_ZN15Screen1ViewBase27graphClickedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_15GraphClickEventE>:

void Screen1ViewBase::graphClickedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphClickEvent& value)
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b084      	sub	sp, #16
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	60f8      	str	r0, [r7, #12]
 800dea2:	60b9      	str	r1, [r7, #8]
 800dea4:	607a      	str	r2, [r7, #4]
    if (&src == &dynamicGraph1)
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	33c4      	adds	r3, #196	; 0xc4
 800deaa:	68ba      	ldr	r2, [r7, #8]
 800deac:	429a      	cmp	r2, r3
 800deae:	d107      	bne.n	800dec0 <_ZN15Screen1ViewBase27graphClickedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_15GraphClickEventE+0x26>
    {
        //Interaction1
        //When dynamicGraph1 clicked call virtual function
        //Call graphClicked
        graphClicked(value);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	332c      	adds	r3, #44	; 0x2c
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	ca06      	ldmia	r2, {r1, r2}
 800debc:	68f8      	ldr	r0, [r7, #12]
 800debe:	4798      	blx	r3
    }
}
 800dec0:	bf00      	nop
 800dec2:	3710      	adds	r7, #16
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <_ZN8touchgfx3absIiEET_S1_>:
 * @param  d The entity on which to perform the abs.
 *
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
 800dec8:	b480      	push	{r7}
 800deca:	b083      	sub	sp, #12
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
{
    return (d < 0) ? -d : d;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	bfb8      	it	lt
 800ded6:	425b      	neglt	r3, r3
}
 800ded8:	4618      	mov	r0, r3
 800deda:	370c      	adds	r7, #12
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr

0800dee4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4618      	mov	r0, r3
 800def0:	f00a f9a2 	bl	8018238 <_ZN8touchgfx6ScreenC1Ev>
 800def4:	4a05      	ldr	r2, [pc, #20]	; (800df0c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	601a      	str	r2, [r3, #0]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	4618      	mov	r0, r3
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	080298fc 	.word	0x080298fc

0800df10 <_ZN8touchgfx21GraphWrapAndClearDataD1Ev>:
class GraphWrapAndClearData : public DynamicDataGraph
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	4a05      	ldr	r2, [pc, #20]	; (800df30 <_ZN8touchgfx21GraphWrapAndClearDataD1Ev+0x20>)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	601a      	str	r2, [r3, #0]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	4618      	mov	r0, r3
 800df22:	f7fe faa3 	bl	800c46c <_ZN8touchgfx16DynamicDataGraphD1Ev>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	4618      	mov	r0, r3
 800df2a:	3708      	adds	r7, #8
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	0802ab28 	.word	0x0802ab28

0800df34 <_ZN8touchgfx21GraphWrapAndClearDataD0Ev>:
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f7ff ffe7 	bl	800df10 <_ZN8touchgfx21GraphWrapAndClearDataD1Ev>
 800df42:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f017 ff9c 	bl	8025e84 <_ZdlPvj>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	4618      	mov	r0, r3
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
	...

0800df58 <_ZN8touchgfx17GraphWrapAndClearILs180EEC1Ev>:
 */
template <int16_t CAPACITY>
class GraphWrapAndClear : public GraphWrapAndClearData
{
public:
    GraphWrapAndClear()
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
        : GraphWrapAndClearData(CAPACITY, y)
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800df68:	461a      	mov	r2, r3
 800df6a:	21b4      	movs	r1, #180	; 0xb4
 800df6c:	f7fe faa2 	bl	800c4b4 <_ZN8touchgfx21GraphWrapAndClearDataC1EsPi>
 800df70:	4a03      	ldr	r2, [pc, #12]	; (800df80 <_ZN8touchgfx17GraphWrapAndClearILs180EEC1Ev+0x28>)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	601a      	str	r2, [r3, #0]
    {
    }
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	4618      	mov	r0, r3
 800df7a:	3708      	adds	r7, #8
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	08029764 	.word	0x08029764

0800df84 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
class ClickButtonTrigger : public AbstractButtonContainer
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4618      	mov	r0, r3
 800df90:	f7ff f8d0 	bl	800d134 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 800df94:	4a03      	ldr	r2, [pc, #12]	; (800dfa4 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	601a      	str	r2, [r3, #0]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	4618      	mov	r0, r3
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	08029930 	.word	0x08029930

0800dfa8 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	4a05      	ldr	r2, [pc, #20]	; (800dfc8 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	601a      	str	r2, [r3, #0]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7ff fa2f 	bl	800d41c <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	08029930 	.word	0x08029930

0800dfcc <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f7ff ffe7 	bl	800dfa8 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800dfda:	2134      	movs	r1, #52	; 0x34
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f017 ff51 	bl	8025e84 <_ZdlPvj>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
 */
template <class T>
class IconButtonStyle : public T
{
public:
    IconButtonStyle()
 800dfec:	b590      	push	{r4, r7, lr}
 800dfee:	b085      	sub	sp, #20
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
        : T()
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4618      	mov	r0, r3
 800dff8:	2334      	movs	r3, #52	; 0x34
 800dffa:	461a      	mov	r2, r3
 800dffc:	2100      	movs	r1, #0
 800dffe:	f018 fe53 	bl	8026ca8 <memset>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4618      	mov	r0, r3
 800e006:	f7ff ffbd 	bl	800df84 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 800e00a:	4a16      	ldr	r2, [pc, #88]	; (800e064 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x78>)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	601a      	str	r2, [r3, #0]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	3334      	adds	r3, #52	; 0x34
 800e014:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e018:	4618      	mov	r0, r3
 800e01a:	f7fc fc65 	bl	800a8e8 <_ZN8touchgfx6BitmapC1Et>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	3336      	adds	r3, #54	; 0x36
 800e022:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e026:	4618      	mov	r0, r3
 800e028:	f7fc fc5e 	bl	800a8e8 <_ZN8touchgfx6BitmapC1Et>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800e032:	f107 030c 	add.w	r3, r7, #12
 800e036:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7fc fc54 	bl	800a8e8 <_ZN8touchgfx6BitmapC1Et>
 800e040:	f107 030c 	add.w	r3, r7, #12
 800e044:	4619      	mov	r1, r3
 800e046:	4620      	mov	r0, r4
 800e048:	f7ff f922 	bl	800d290 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
    {
        T::add(iconImage);
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	3338      	adds	r3, #56	; 0x38
 800e052:	4619      	mov	r1, r3
 800e054:	4610      	mov	r0, r2
 800e056:	f003 f81f 	bl	8011098 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	4618      	mov	r0, r3
 800e05e:	3714      	adds	r7, #20
 800e060:	46bd      	mov	sp, r7
 800e062:	bd90      	pop	{r4, r7, pc}
 800e064:	080296c4 	.word	0x080296c4

0800e068 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800e068:	b480      	push	{r7}
 800e06a:	b083      	sub	sp, #12
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	4a04      	ldr	r2, [pc, #16]	; (800e084 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	601a      	str	r2, [r3, #0]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	4618      	mov	r0, r3
 800e07a:	370c      	adds	r7, #12
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr
 800e084:	080299cc 	.word	0x080299cc

0800e088 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	4639      	mov	r1, r7
 800e094:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7ff ffe4 	bl	800e068 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 800e0a0:	4a08      	ldr	r2, [pc, #32]	; (800e0c4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	601a      	str	r2, [r3, #0]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	68ba      	ldr	r2, [r7, #8]
 800e0aa:	605a      	str	r2, [r3, #4]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	3308      	adds	r3, #8
 800e0b0:	463a      	mov	r2, r7
 800e0b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e0b6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3710      	adds	r7, #16
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	080296ac 	.word	0x080296ac

0800e0c8 <_ZN8touchgfx15GenericCallbackIRKNS_17AbstractDataGraphERKNS1_15GraphClickEventEvEC1Ev>:
class GenericCallback<T1, T2, void>
 800e0c8:	b480      	push	{r7}
 800e0ca:	b083      	sub	sp, #12
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	4a04      	ldr	r2, [pc, #16]	; (800e0e4 <_ZN8touchgfx15GenericCallbackIRKNS_17AbstractDataGraphERKNS1_15GraphClickEventEvEC1Ev+0x1c>)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	601a      	str	r2, [r3, #0]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	370c      	adds	r7, #12
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr
 800e0e4:	08029d88 	.word	0x08029d88

0800e0e8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvEC1EPS1_MS1_FvS4_S7_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_2)(T1, T2))
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	4639      	mov	r1, r7
 800e0f4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_2)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7ff ffe4 	bl	800e0c8 <_ZN8touchgfx15GenericCallbackIRKNS_17AbstractDataGraphERKNS1_15GraphClickEventEvEC1Ev>
 800e100:	4a08      	ldr	r2, [pc, #32]	; (800e124 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvEC1EPS1_MS1_FvS4_S7_E+0x3c>)
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	601a      	str	r2, [r3, #0]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	68ba      	ldr	r2, [r7, #8]
 800e10a:	605a      	str	r2, [r3, #4]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	3308      	adds	r3, #8
 800e110:	463a      	mov	r2, r7
 800e112:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e116:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	4618      	mov	r0, r3
 800e11e:	3710      	adds	r7, #16
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}
 800e124:	08029694 	.word	0x08029694

0800e128 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>:
     * Sets icon bitmaps.
     *
     * @param  newIconReleased The new icon released.
     * @param  newIconPressed  The new icon pressed.
     */
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 800e128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e12a:	b085      	sub	sp, #20
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	607a      	str	r2, [r7, #4]
    {
        iconReleased = newIconReleased;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	68ba      	ldr	r2, [r7, #8]
 800e138:	8812      	ldrh	r2, [r2, #0]
 800e13a:	869a      	strh	r2, [r3, #52]	; 0x34
        iconPressed = newIconPressed;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	8812      	ldrh	r2, [r2, #0]
 800e142:	86da      	strh	r2, [r3, #54]	; 0x36

        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f103 0538 	add.w	r5, r3, #56	; 0x38
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fc fc6a 	bl	800aa26 <_ZNK8touchgfx8Drawable8getWidthEv>
 800e152:	4603      	mov	r3, r0
 800e154:	0fda      	lsrs	r2, r3, #31
 800e156:	4413      	add	r3, r2
 800e158:	105b      	asrs	r3, r3, #1
 800e15a:	b21b      	sxth	r3, r3
 800e15c:	b29c      	uxth	r4, r3
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f00b fdae 	bl	8019cc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e164:	4603      	mov	r3, r0
 800e166:	0fda      	lsrs	r2, r3, #31
 800e168:	4413      	add	r3, r2
 800e16a:	105b      	asrs	r3, r3, #1
 800e16c:	b21b      	sxth	r3, r3
 800e16e:	b29b      	uxth	r3, r3
 800e170:	1ae3      	subs	r3, r4, r3
 800e172:	b29b      	uxth	r3, r3
 800e174:	b21e      	sxth	r6, r3
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	4618      	mov	r0, r3
 800e17a:	f7fc fc61 	bl	800aa40 <_ZNK8touchgfx8Drawable9getHeightEv>
 800e17e:	4603      	mov	r3, r0
 800e180:	0fda      	lsrs	r2, r3, #31
 800e182:	4413      	add	r3, r2
 800e184:	105b      	asrs	r3, r3, #1
 800e186:	b21b      	sxth	r3, r3
 800e188:	b29c      	uxth	r4, r3
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f00b fdcc 	bl	8019d28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e190:	4603      	mov	r3, r0
 800e192:	0fda      	lsrs	r2, r3, #31
 800e194:	4413      	add	r3, r2
 800e196:	105b      	asrs	r3, r3, #1
 800e198:	b21b      	sxth	r3, r3
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	1ae3      	subs	r3, r4, r3
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	b21b      	sxth	r3, r3
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	4631      	mov	r1, r6
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f7fc fc75 	bl	800aa96 <_ZN8touchgfx8Drawable5setXYEss>

        handlePressedUpdated();
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	338c      	adds	r3, #140	; 0x8c
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	68f8      	ldr	r0, [r7, #12]
 800e1b6:	4798      	blx	r3
    }
 800e1b8:	bf00      	nop
 800e1ba:	3714      	adds	r7, #20
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e1c0 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE9setIconXYEss>:
     * Sets the position of the icon.
     *
     * @param  x The x coordinate.
     * @param  y The y coordinate.
     */
    void setIconXY(int16_t x, int16_t y)
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	807b      	strh	r3, [r7, #2]
 800e1cc:	4613      	mov	r3, r2
 800e1ce:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 800e1d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 f869 	bl	800e2ae <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE8setIconXEs>
        setIconY(y);
 800e1dc:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 f875 	bl	800e2d2 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE8setIconYEs>
    }
 800e1e8:	bf00      	nop
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 800e1f0:	b480      	push	{r7}
 800e1f2:	b083      	sub	sp, #12
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
    }
 800e1f8:	4a04      	ldr	r2, [pc, #16]	; (800e20c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	601a      	str	r2, [r3, #0]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4618      	mov	r0, r3
 800e202:	370c      	adds	r7, #12
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr
 800e20c:	080299cc 	.word	0x080299cc

0800e210 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
    }
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7ff ffe9 	bl	800e1f0 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 800e21e:	2104      	movs	r1, #4
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f017 fe2f 	bl	8025e84 <_ZdlPvj>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	4618      	mov	r0, r3
 800e22a:	3708      	adds	r7, #8
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <_ZN8touchgfx15GenericCallbackIRKNS_17AbstractDataGraphERKNS1_15GraphClickEventEvED1Ev>:
    virtual ~GenericCallback()
 800e230:	b480      	push	{r7}
 800e232:	b083      	sub	sp, #12
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
    }
 800e238:	4a04      	ldr	r2, [pc, #16]	; (800e24c <_ZN8touchgfx15GenericCallbackIRKNS_17AbstractDataGraphERKNS1_15GraphClickEventEvED1Ev+0x1c>)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	601a      	str	r2, [r3, #0]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4618      	mov	r0, r3
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr
 800e24c:	08029d88 	.word	0x08029d88

0800e250 <_ZN8touchgfx15GenericCallbackIRKNS_17AbstractDataGraphERKNS1_15GraphClickEventEvED0Ev>:
    virtual ~GenericCallback()
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
    }
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f7ff ffe9 	bl	800e230 <_ZN8touchgfx15GenericCallbackIRKNS_17AbstractDataGraphERKNS1_15GraphClickEventEvED1Ev>
 800e25e:	2104      	movs	r1, #4
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f017 fe0f 	bl	8025e84 <_ZdlPvj>
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	4618      	mov	r0, r3
 800e26a:	3708      	adds	r7, #8
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    Bitmap iconReleased; ///< Icon to display when button is not pressed.
    Bitmap iconPressed;  ///< Icon to display when button is pressed.
    Image iconImage;     ///< The icon image

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 800e270:	b590      	push	{r4, r7, lr}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
    {
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	4618      	mov	r0, r3
 800e282:	f7fe ff8d 	bl	800d1a0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800e286:	4603      	mov	r3, r0
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d002      	beq.n	800e292 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	3336      	adds	r3, #54	; 0x36
 800e290:	e001      	b.n	800e296 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	3334      	adds	r3, #52	; 0x34
 800e296:	4619      	mov	r1, r3
 800e298:	4620      	mov	r0, r4
 800e29a:	f006 f917 	bl	80144cc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::handlePressedUpdated();
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f7fe ffe0 	bl	800d266 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 800e2a6:	bf00      	nop
 800e2a8:	370c      	adds	r7, #12
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd90      	pop	{r4, r7, pc}

0800e2ae <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE8setIconXEs>:
    void setIconX(int16_t x)
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b082      	sub	sp, #8
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	807b      	strh	r3, [r7, #2]
        iconImage.setX(x);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	3338      	adds	r3, #56	; 0x38
 800e2be:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e2c2:	4611      	mov	r1, r2
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7fc fbc8 	bl	800aa5a <_ZN8touchgfx8Drawable4setXEs>
    }
 800e2ca:	bf00      	nop
 800e2cc:	3708      	adds	r7, #8
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}

0800e2d2 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE8setIconYEs>:
    void setIconY(int16_t y)
 800e2d2:	b580      	push	{r7, lr}
 800e2d4:	b082      	sub	sp, #8
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	6078      	str	r0, [r7, #4]
 800e2da:	460b      	mov	r3, r1
 800e2dc:	807b      	strh	r3, [r7, #2]
        iconImage.setY(y);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	3338      	adds	r3, #56	; 0x38
 800e2e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e2e6:	4611      	mov	r1, r2
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7fc fbc5 	bl	800aa78 <_ZN8touchgfx8Drawable4setYEs>
    }
 800e2ee:	bf00      	nop
 800e2f0:	3708      	adds	r7, #8
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
	...

0800e2f8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	4a05      	ldr	r2, [pc, #20]	; (800e318 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvED1Ev+0x20>)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	601a      	str	r2, [r3, #0]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	4618      	mov	r0, r3
 800e30a:	f7ff ff91 	bl	800e230 <_ZN8touchgfx15GenericCallbackIRKNS_17AbstractDataGraphERKNS1_15GraphClickEventEvED1Ev>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	4618      	mov	r0, r3
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	08029694 	.word	0x08029694

0800e31c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvED0Ev>:
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f7ff ffe7 	bl	800e2f8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvED1Ev>
 800e32a:	2110      	movs	r1, #16
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f017 fda9 	bl	8025e84 <_ZdlPvj>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	4618      	mov	r0, r3
 800e336:	3708      	adds	r7, #8
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	4a05      	ldr	r2, [pc, #20]	; (800e35c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	601a      	str	r2, [r3, #0]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7ff ff4f 	bl	800e1f0 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4618      	mov	r0, r3
 800e356:	3708      	adds	r7, #8
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	080296ac 	.word	0x080296ac

0800e360 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7ff ffe7 	bl	800e33c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 800e36e:	2110      	movs	r1, #16
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f017 fd87 	bl	8025e84 <_ZdlPvj>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	4618      	mov	r0, r3
 800e37a:	3708      	adds	r7, #8
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class IconButtonStyle : public T
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	4a08      	ldr	r2, [pc, #32]	; (800e3ac <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	601a      	str	r2, [r3, #0]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	3338      	adds	r3, #56	; 0x38
 800e392:	4618      	mov	r0, r3
 800e394:	f7fe ffb2 	bl	800d2fc <_ZN8touchgfx5ImageD1Ev>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7ff fe04 	bl	800dfa8 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	080296c4 	.word	0x080296c4

0800e3b0 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f7ff ffe1 	bl	800e380 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800e3be:	2164      	movs	r1, #100	; 0x64
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f017 fd5f 	bl	8025e84 <_ZdlPvj>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3708      	adds	r7, #8
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <_ZN8touchgfx17GraphWrapAndClearILs180EED1Ev>:
class GraphWrapAndClear : public GraphWrapAndClearData
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	4a05      	ldr	r2, [pc, #20]	; (800e3f0 <_ZN8touchgfx17GraphWrapAndClearILs180EED1Ev+0x20>)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	601a      	str	r2, [r3, #0]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7ff fd95 	bl	800df10 <_ZN8touchgfx21GraphWrapAndClearDataD1Ev>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3708      	adds	r7, #8
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	08029764 	.word	0x08029764

0800e3f4 <_ZN8touchgfx17GraphWrapAndClearILs180EED0Ev>:
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f7ff ffe7 	bl	800e3d0 <_ZN8touchgfx17GraphWrapAndClearILs180EED1Ev>
 800e402:	f240 411c 	movw	r1, #1052	; 0x41c
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f017 fd3c 	bl	8025e84 <_ZdlPvj>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	4618      	mov	r0, r3
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
	...

0800e418 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	4a05      	ldr	r2, [pc, #20]	; (800e438 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	601a      	str	r2, [r3, #0]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	4618      	mov	r0, r3
 800e42a:	f7fe fe23 	bl	800d074 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	4618      	mov	r0, r3
 800e432:	3708      	adds	r7, #8
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	08029a80 	.word	0x08029a80

0800e43c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7ff ffe7 	bl	800e418 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800e44a:	214c      	movs	r1, #76	; 0x4c
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f017 fd19 	bl	8025e84 <_ZdlPvj>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	4618      	mov	r0, r3
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	4a05      	ldr	r2, [pc, #20]	; (800e47c <_ZN8touchgfx17GraphElementGridYD1Ev+0x20>)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	601a      	str	r2, [r3, #0]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7ff f89d 	bl	800d5ac <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	4618      	mov	r0, r3
 800e476:	3708      	adds	r7, #8
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	08029bcc 	.word	0x08029bcc

0800e480 <_ZN8touchgfx17GraphElementGridYD0Ev>:
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f7ff ffe7 	bl	800e45c <_ZN8touchgfx17GraphElementGridYD1Ev>
 800e48e:	2140      	movs	r1, #64	; 0x40
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f017 fcf7 	bl	8025e84 <_ZdlPvj>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	4618      	mov	r0, r3
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <_ZN8touchgfx16GraphElementLineD1Ev>:
class GraphElementLine : public AbstractGraphElement
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	4a05      	ldr	r2, [pc, #20]	; (800e4c0 <_ZN8touchgfx16GraphElementLineD1Ev+0x20>)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	601a      	str	r2, [r3, #0]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7fe f8b3 	bl	800c61c <_ZN8touchgfx20AbstractGraphElementD1Ev>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	0802a8b0 	.word	0x0802a8b0

0800e4c4 <_ZN8touchgfx16GraphElementLineD0Ev>:
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f7ff ffe7 	bl	800e4a0 <_ZN8touchgfx16GraphElementLineD1Ev>
 800e4d2:	2130      	movs	r1, #48	; 0x30
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f017 fcd5 	bl	8025e84 <_ZdlPvj>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	4a09      	ldr	r2, [pc, #36]	; (800e514 <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	601a      	str	r2, [r3, #0]
 800e4f2:	4a09      	ldr	r2, [pc, #36]	; (800e518 <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	609a      	str	r2, [r3, #8]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	3308      	adds	r3, #8
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fe fa99 	bl	800ca34 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	4618      	mov	r0, r3
 800e506:	f7fe fb21 	bl	800cb4c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	4618      	mov	r0, r3
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	0802a528 	.word	0x0802a528
 800e518:	0802a54c 	.word	0x0802a54c

0800e51c <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 800e51c:	f1a0 0008 	sub.w	r0, r0, #8
 800e520:	e7e0      	b.n	800e4e4 <_ZN8touchgfx13PainterRGB565D1Ev>
 800e522:	bf00      	nop

0800e524 <_ZN8touchgfx13PainterRGB565D0Ev>:
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f7ff ffd9 	bl	800e4e4 <_ZN8touchgfx13PainterRGB565D1Ev>
 800e532:	2114      	movs	r1, #20
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f017 fca5 	bl	8025e84 <_ZdlPvj>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4618      	mov	r0, r3
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 800e544:	f1a0 0008 	sub.w	r0, r0, #8
 800e548:	e7ec      	b.n	800e524 <_ZN8touchgfx13PainterRGB565D0Ev>
	...

0800e54c <_ZN8touchgfx12GraphLabelsYD1Ev>:
class GraphLabelsY : public GraphLabelsBase
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	4a05      	ldr	r2, [pc, #20]	; (800e56c <_ZN8touchgfx12GraphLabelsYD1Ev+0x20>)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	601a      	str	r2, [r3, #0]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7ff f859 	bl	800d614 <_ZN8touchgfx15GraphLabelsBaseD1Ev>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4618      	mov	r0, r3
 800e566:	3708      	adds	r7, #8
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	0802a9e8 	.word	0x0802a9e8

0800e570 <_ZN8touchgfx12GraphLabelsYD0Ev>:
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f7ff ffe7 	bl	800e54c <_ZN8touchgfx12GraphLabelsYD1Ev>
 800e57e:	214c      	movs	r1, #76	; 0x4c
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f017 fc7f 	bl	8025e84 <_ZdlPvj>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4618      	mov	r0, r3
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7executeES4_S7_>:
    virtual void execute(T1 t1, T2 t2)
 800e590:	b580      	push	{r7, lr}
 800e592:	b084      	sub	sp, #16
 800e594:	af00      	add	r7, sp, #0
 800e596:	60f8      	str	r0, [r7, #12]
 800e598:	60b9      	str	r1, [r7, #8]
 800e59a:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun)(t1, t2);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	68fa      	ldr	r2, [r7, #12]
 800e5a2:	68d2      	ldr	r2, [r2, #12]
 800e5a4:	1052      	asrs	r2, r2, #1
 800e5a6:	1898      	adds	r0, r3, r2
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	68db      	ldr	r3, [r3, #12]
 800e5ac:	f003 0301 	and.w	r3, r3, #1
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d102      	bne.n	800e5ba <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7executeES4_S7_+0x2a>
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	689b      	ldr	r3, [r3, #8]
 800e5b8:	e00a      	b.n	800e5d0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7executeES4_S7_+0x40>
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	68fa      	ldr	r2, [r7, #12]
 800e5c0:	68d2      	ldr	r2, [r2, #12]
 800e5c2:	1052      	asrs	r2, r2, #1
 800e5c4:	4413      	add	r3, r2
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	68fa      	ldr	r2, [r7, #12]
 800e5ca:	6892      	ldr	r2, [r2, #8]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	68b9      	ldr	r1, [r7, #8]
 800e5d4:	4798      	blx	r3
    }
 800e5d6:	bf00      	nop
 800e5d8:	3710      	adds	r7, #16
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}

0800e5de <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv>:
    virtual bool isValid() const
 800e5de:	b480      	push	{r7}
 800e5e0:	b083      	sub	sp, #12
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d010      	beq.n	800e610 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x32>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	689b      	ldr	r3, [r3, #8]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d107      	bne.n	800e606 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x28>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	68db      	ldr	r3, [r3, #12]
 800e5fa:	f003 0301 	and.w	r3, r3, #1
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d101      	bne.n	800e606 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x28>
 800e602:	2301      	movs	r3, #1
 800e604:	e000      	b.n	800e608 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x2a>
 800e606:	2300      	movs	r3, #0
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d001      	beq.n	800e610 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x32>
 800e60c:	2301      	movs	r3, #1
 800e60e:	e000      	b.n	800e612 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x34>
 800e610:	2300      	movs	r3, #0
    }
 800e612:	4618      	mov	r0, r3
 800e614:	370c      	adds	r7, #12
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr

0800e61e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800e61e:	b580      	push	{r7, lr}
 800e620:	b082      	sub	sp, #8
 800e622:	af00      	add	r7, sp, #0
 800e624:	6078      	str	r0, [r7, #4]
 800e626:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	68d2      	ldr	r2, [r2, #12]
 800e630:	1052      	asrs	r2, r2, #1
 800e632:	1898      	adds	r0, r3, r2
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	f003 0301 	and.w	r3, r3, #1
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d102      	bne.n	800e646 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	e00a      	b.n	800e65c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	68d2      	ldr	r2, [r2, #12]
 800e64e:	1052      	asrs	r2, r2, #1
 800e650:	4413      	add	r3, r2
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	687a      	ldr	r2, [r7, #4]
 800e656:	6892      	ldr	r2, [r2, #8]
 800e658:	4413      	add	r3, r2
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	6839      	ldr	r1, [r7, #0]
 800e65e:	4798      	blx	r3
    }
 800e660:	bf00      	nop
 800e662:	3708      	adds	r7, #8
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}

0800e668 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 800e668:	b480      	push	{r7}
 800e66a:	b083      	sub	sp, #12
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d010      	beq.n	800e69a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	689b      	ldr	r3, [r3, #8]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d107      	bne.n	800e690 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	68db      	ldr	r3, [r3, #12]
 800e684:	f003 0301 	and.w	r3, r3, #1
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d101      	bne.n	800e690 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 800e68c:	2301      	movs	r3, #1
 800e68e:	e000      	b.n	800e692 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 800e690:	2300      	movs	r3, #0
 800e692:	2b01      	cmp	r3, #1
 800e694:	d001      	beq.n	800e69a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 800e696:	2301      	movs	r3, #1
 800e698:	e000      	b.n	800e69c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 800e69a:	2300      	movs	r3, #0
    }
 800e69c:	4618      	mov	r0, r3
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 800e6a8:	b590      	push	{r4, r7, lr}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
    {
        iconImage.setAlpha(T::getAlpha());
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fe fd92 	bl	800d1e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	f7fe fe0a 	bl	800d2dc <_ZN8touchgfx5Image8setAlphaEh>
        T::handleAlphaUpdated();
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7fe fdd5 	bl	800d27a <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 800e6d0:	bf00      	nop
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd90      	pop	{r4, r7, pc}

0800e6d8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800e6d8:	b480      	push	{r7}
 800e6da:	af00      	add	r7, sp, #0
    return bitmap_database;
 800e6dc:	4b02      	ldr	r3, [pc, #8]	; (800e6e8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr
 800e6e8:	08029e20 	.word	0x08029e20

0800e6ec <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800e6f0:	2302      	movs	r3, #2
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr

0800e6fc <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800e6fc:	b480      	push	{r7}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	460b      	mov	r3, r1
 800e706:	607a      	str	r2, [r7, #4]
 800e708:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800e70a:	2300      	movs	r3, #0
    }
 800e70c:	4618      	mov	r0, r3
 800e70e:	3714      	adds	r7, #20
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e720:	2300      	movs	r3, #0
    }
 800e722:	4618      	mov	r0, r3
 800e724:	370c      	adds	r7, #12
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr

0800e72e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800e72e:	b480      	push	{r7}
 800e730:	b083      	sub	sp, #12
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e736:	2300      	movs	r3, #0
    }
 800e738:	4618      	mov	r0, r3
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800e744:	b480      	push	{r7}
 800e746:	b085      	sub	sp, #20
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	4613      	mov	r3, r2
 800e750:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800e752:	4a07      	ldr	r2, [pc, #28]	; (800e770 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6013      	str	r3, [r2, #0]
        fonts = f;
 800e758:	4a06      	ldr	r2, [pc, #24]	; (800e774 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800e75e:	4a06      	ldr	r2, [pc, #24]	; (800e778 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800e760:	88fb      	ldrh	r3, [r7, #6]
 800e762:	8013      	strh	r3, [r2, #0]
    }
 800e764:	bf00      	nop
 800e766:	3714      	adds	r7, #20
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr
 800e770:	20008860 	.word	0x20008860
 800e774:	20008868 	.word	0x20008868
 800e778:	20008864 	.word	0x20008864

0800e77c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e77c:	b40e      	push	{r1, r2, r3}
 800e77e:	b580      	push	{r7, lr}
 800e780:	b085      	sub	sp, #20
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800e786:	f107 0320 	add.w	r3, r7, #32
 800e78a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	69fa      	ldr	r2, [r7, #28]
 800e790:	2100      	movs	r1, #0
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f009 f8cc 	bl	8017930 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e798:	4603      	mov	r3, r0
 800e79a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e79c:	89fb      	ldrh	r3, [r7, #14]
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3714      	adds	r7, #20
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e7a8:	b003      	add	sp, #12
 800e7aa:	4770      	bx	lr

0800e7ac <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e7ac:	b40c      	push	{r2, r3}
 800e7ae:	b580      	push	{r7, lr}
 800e7b0:	b084      	sub	sp, #16
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800e7ba:	f107 031c 	add.w	r3, r7, #28
 800e7be:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800e7c0:	78f9      	ldrb	r1, [r7, #3]
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	69ba      	ldr	r2, [r7, #24]
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f009 f8b2 	bl	8017930 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e7d0:	89fb      	ldrh	r3, [r7, #14]
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e7dc:	b002      	add	sp, #8
 800e7de:	4770      	bx	lr

0800e7e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b08a      	sub	sp, #40	; 0x28
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d016      	beq.n	800e822 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	3322      	adds	r3, #34	; 0x22
 800e7f8:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800e7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fc:	8adb      	ldrh	r3, [r3, #22]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d105      	bne.n	800e80e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800e802:	4b43      	ldr	r3, [pc, #268]	; (800e910 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e804:	4a43      	ldr	r2, [pc, #268]	; (800e914 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e806:	21c0      	movs	r1, #192	; 0xc0
 800e808:	4843      	ldr	r0, [pc, #268]	; (800e918 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e80a:	f018 f8c7 	bl	802699c <__assert_func>
            return buffer[pos];
 800e80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e810:	8a9b      	ldrh	r3, [r3, #20]
 800e812:	461a      	mov	r2, r3
 800e814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e816:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d001      	beq.n	800e822 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e81e:	2301      	movs	r3, #1
 800e820:	e000      	b.n	800e824 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800e822:	2300      	movs	r3, #0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d06a      	beq.n	800e8fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f00a fbe0 	bl	8018fee <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	3322      	adds	r3, #34	; 0x22
 800e832:	623b      	str	r3, [r7, #32]
 800e834:	2301      	movs	r3, #1
 800e836:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800e838:	6a3b      	ldr	r3, [r7, #32]
 800e83a:	8adb      	ldrh	r3, [r3, #22]
 800e83c:	8bfa      	ldrh	r2, [r7, #30]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d305      	bcc.n	800e84e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800e842:	4b36      	ldr	r3, [pc, #216]	; (800e91c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800e844:	4a36      	ldr	r2, [pc, #216]	; (800e920 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800e846:	21c5      	movs	r1, #197	; 0xc5
 800e848:	4833      	ldr	r0, [pc, #204]	; (800e918 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e84a:	f018 f8a7 	bl	802699c <__assert_func>
            const uint16_t index = pos + offset;
 800e84e:	6a3b      	ldr	r3, [r7, #32]
 800e850:	8a9a      	ldrh	r2, [r3, #20]
 800e852:	8bfb      	ldrh	r3, [r7, #30]
 800e854:	4413      	add	r3, r2
 800e856:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800e858:	8bbb      	ldrh	r3, [r7, #28]
 800e85a:	2b09      	cmp	r3, #9
 800e85c:	d801      	bhi.n	800e862 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800e85e:	8bbb      	ldrh	r3, [r7, #28]
 800e860:	e001      	b.n	800e866 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800e862:	8bbb      	ldrh	r3, [r7, #28]
 800e864:	3b0a      	subs	r3, #10
 800e866:	6a3a      	ldr	r2, [r7, #32]
 800e868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e86c:	f640 123f 	movw	r2, #2367	; 0x93f
 800e870:	4293      	cmp	r3, r2
 800e872:	bf0c      	ite	eq
 800e874:	2301      	moveq	r3, #1
 800e876:	2300      	movne	r3, #0
 800e878:	b2db      	uxtb	r3, r3
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d03f      	beq.n	800e8fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	3322      	adds	r3, #34	; 0x22
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	3222      	adds	r2, #34	; 0x22
 800e886:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800e888:	68ba      	ldr	r2, [r7, #8]
 800e88a:	8ad2      	ldrh	r2, [r2, #22]
 800e88c:	2a00      	cmp	r2, #0
 800e88e:	d105      	bne.n	800e89c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800e890:	4b1f      	ldr	r3, [pc, #124]	; (800e910 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e892:	4a20      	ldr	r2, [pc, #128]	; (800e914 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e894:	21c0      	movs	r1, #192	; 0xc0
 800e896:	4820      	ldr	r0, [pc, #128]	; (800e918 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e898:	f018 f880 	bl	802699c <__assert_func>
            return buffer[pos];
 800e89c:	68ba      	ldr	r2, [r7, #8]
 800e89e:	8a92      	ldrh	r2, [r2, #20]
 800e8a0:	4611      	mov	r1, r2
 800e8a2:	68ba      	ldr	r2, [r7, #8]
 800e8a4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800e8a8:	613b      	str	r3, [r7, #16]
 800e8aa:	4613      	mov	r3, r2
 800e8ac:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	8adb      	ldrh	r3, [r3, #22]
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d806      	bhi.n	800e8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800e8b6:	4b1b      	ldr	r3, [pc, #108]	; (800e924 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800e8b8:	4a1b      	ldr	r2, [pc, #108]	; (800e928 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800e8ba:	f240 110d 	movw	r1, #269	; 0x10d
 800e8be:	4816      	ldr	r0, [pc, #88]	; (800e918 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e8c0:	f018 f86c 	bl	802699c <__assert_func>
            const uint16_t index = pos + 1;
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	8a9b      	ldrh	r3, [r3, #20]
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800e8cc:	89bb      	ldrh	r3, [r7, #12]
 800e8ce:	2b09      	cmp	r3, #9
 800e8d0:	d801      	bhi.n	800e8d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800e8d2:	89bb      	ldrh	r3, [r7, #12]
 800e8d4:	e000      	b.n	800e8d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	693a      	ldr	r2, [r7, #16]
 800e8da:	89f9      	ldrh	r1, [r7, #14]
 800e8dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800e8e0:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	3322      	adds	r3, #34	; 0x22
 800e8e6:	61bb      	str	r3, [r7, #24]
 800e8e8:	f640 133f 	movw	r3, #2367	; 0x93f
 800e8ec:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	8a9b      	ldrh	r3, [r3, #20]
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	8afa      	ldrh	r2, [r7, #22]
 800e8f8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800e8fc:	bf00      	nop
        }
    }
    return getNextChar();
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f00a fa78 	bl	8018df4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e904:	4603      	mov	r3, r0
}
 800e906:	4618      	mov	r0, r3
 800e908:	3728      	adds	r7, #40	; 0x28
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	0802845c 	.word	0x0802845c
 800e914:	08028468 	.word	0x08028468
 800e918:	08028514 	.word	0x08028514
 800e91c:	0802855c 	.word	0x0802855c
 800e920:	0802856c 	.word	0x0802856c
 800e924:	08028640 	.word	0x08028640
 800e928:	0802864c 	.word	0x0802864c

0800e92c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f00a fa24 	bl	8018d82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800e93a:	bf00      	nop
 800e93c:	3708      	adds	r7, #8
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800e942:	b580      	push	{r7, lr}
 800e944:	b088      	sub	sp, #32
 800e946:	af02      	add	r7, sp, #8
 800e948:	60f8      	str	r0, [r7, #12]
 800e94a:	1d38      	adds	r0, r7, #4
 800e94c:	e880 0006 	stmia.w	r0, {r1, r2}
 800e950:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800e952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e956:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800e958:	1d39      	adds	r1, r7, #4
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	9301      	str	r3, [sp, #4]
 800e95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e960:	9300      	str	r3, [sp, #0]
 800e962:	6a3b      	ldr	r3, [r7, #32]
 800e964:	683a      	ldr	r2, [r7, #0]
 800e966:	68f8      	ldr	r0, [r7, #12]
 800e968:	f007 fcf1 	bl	801634e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800e96c:	bf00      	nop
 800e96e:	3718      	adds	r7, #24
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800e974:	b590      	push	{r4, r7, lr}
 800e976:	b085      	sub	sp, #20
 800e978:	af00      	add	r7, sp, #0
 800e97a:	4603      	mov	r3, r0
 800e97c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800e97e:	2300      	movs	r3, #0
 800e980:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800e982:	88fb      	ldrh	r3, [r7, #6]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d127      	bne.n	800e9d8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800e988:	88fb      	ldrh	r3, [r7, #6]
 800e98a:	4a1e      	ldr	r2, [pc, #120]	; (800ea04 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800e98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d016      	beq.n	800e9c2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800e994:	88fb      	ldrh	r3, [r7, #6]
 800e996:	4a1b      	ldr	r2, [pc, #108]	; (800ea04 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800e998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e99c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	68ba      	ldr	r2, [r7, #8]
 800e9a4:	4413      	add	r3, r2
 800e9a6:	4a18      	ldr	r2, [pc, #96]	; (800ea08 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800e9a8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	68ba      	ldr	r2, [r7, #8]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	4a16      	ldr	r2, [pc, #88]	; (800ea0c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800e9b4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	689b      	ldr	r3, [r3, #8]
 800e9ba:	68ba      	ldr	r2, [r7, #8]
 800e9bc:	4413      	add	r3, r2
 800e9be:	60fb      	str	r3, [r7, #12]
 800e9c0:	e00a      	b.n	800e9d8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800e9c2:	4b11      	ldr	r3, [pc, #68]	; (800ea08 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800e9c4:	4a12      	ldr	r2, [pc, #72]	; (800ea10 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800e9c6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800e9c8:	4a12      	ldr	r2, [pc, #72]	; (800ea14 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800e9ca:	4b10      	ldr	r3, [pc, #64]	; (800ea0c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800e9cc:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800e9ce:	88fb      	ldrh	r3, [r7, #6]
 800e9d0:	4a11      	ldr	r2, [pc, #68]	; (800ea18 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800e9d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9d6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d00d      	beq.n	800e9fa <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800e9de:	4a0f      	ldr	r2, [pc, #60]	; (800ea1c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800e9e0:	88fb      	ldrh	r3, [r7, #6]
 800e9e2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800e9e4:	f000 f83e 	bl	800ea64 <_ZN17TypedTextDatabase8getFontsEv>
 800e9e8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800e9ea:	f000 f833 	bl	800ea54 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	4621      	mov	r1, r4
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	f7ff fea5 	bl	800e744 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800e9fa:	bf00      	nop
 800e9fc:	3714      	adds	r7, #20
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd90      	pop	{r4, r7, pc}
 800ea02:	bf00      	nop
 800ea04:	20005424 	.word	0x20005424
 800ea08:	2000542c 	.word	0x2000542c
 800ea0c:	20005430 	.word	0x20005430
 800ea10:	0802d804 	.word	0x0802d804
 800ea14:	0802d7f8 	.word	0x0802d7f8
 800ea18:	0802d810 	.word	0x0802d810
 800ea1c:	20005428 	.word	0x20005428

0800ea20 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	460b      	mov	r3, r1
 800ea2a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800ea2c:	4b07      	ldr	r3, [pc, #28]	; (800ea4c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800ea2e:	681a      	ldr	r2, [r3, #0]
 800ea30:	4b07      	ldr	r3, [pc, #28]	; (800ea50 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800ea32:	6819      	ldr	r1, [r3, #0]
 800ea34:	887b      	ldrh	r3, [r7, #2]
 800ea36:	009b      	lsls	r3, r3, #2
 800ea38:	440b      	add	r3, r1
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	005b      	lsls	r3, r3, #1
 800ea3e:	4413      	add	r3, r2
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	370c      	adds	r7, #12
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr
 800ea4c:	2000542c 	.word	0x2000542c
 800ea50:	20005430 	.word	0x20005430

0800ea54 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800ea54:	b480      	push	{r7}
 800ea56:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800ea58:	2303      	movs	r3, #3
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr

0800ea64 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800ea64:	b480      	push	{r7}
 800ea66:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800ea68:	4b02      	ldr	r3, [pc, #8]	; (800ea74 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr
 800ea74:	20005434 	.word	0x20005434

0800ea78 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d113      	bne.n	800eab0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d10e      	bne.n	800eab0 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800ea92:	f7fb f8dd 	bl	8009c50 <_Z23getFont_verdana_20_4bppv>
 800ea96:	4603      	mov	r3, r0
};
 800ea98:	4a07      	ldr	r2, [pc, #28]	; (800eab8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ea9a:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800ea9c:	f7fb f92e 	bl	8009cfc <_Z23getFont_verdana_40_4bppv>
 800eaa0:	4603      	mov	r3, r0
};
 800eaa2:	4a05      	ldr	r2, [pc, #20]	; (800eab8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800eaa4:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800eaa6:	f7fb f87d 	bl	8009ba4 <_Z23getFont_verdana_10_4bppv>
 800eaaa:	4603      	mov	r3, r0
};
 800eaac:	4a02      	ldr	r2, [pc, #8]	; (800eab8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800eaae:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800eab0:	bf00      	nop
 800eab2:	3708      	adds	r7, #8
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	20005434 	.word	0x20005434

0800eabc <_GLOBAL__sub_I_touchgfx_fonts>:
 800eabc:	b580      	push	{r7, lr}
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eac4:	2001      	movs	r0, #1
 800eac6:	f7ff ffd7 	bl	800ea78 <_Z41__static_initialization_and_destruction_0ii>
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	4a05      	ldr	r2, [pc, #20]	; (800eaec <_ZN19FrontendApplicationD1Ev+0x20>)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	601a      	str	r2, [r3, #0]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	4618      	mov	r0, r3
 800eade:	f7fb fb59 	bl	800a194 <_ZN23FrontendApplicationBaseD1Ev>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	4618      	mov	r0, r3
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}
 800eaec:	08029ea4 	.word	0x08029ea4

0800eaf0 <_ZN19FrontendApplicationD0Ev>:
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f7ff ffe7 	bl	800eacc <_ZN19FrontendApplicationD1Ev>
 800eafe:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f017 f9be 	bl	8025e84 <_ZdlPvj>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3708      	adds	r7, #8
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b082      	sub	sp, #8
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800eb20:	4618      	mov	r0, r3
 800eb22:	f000 f82f 	bl	800eb84 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f007 ff89 	bl	8016a40 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800eb2e:	bf00      	nop
 800eb30:	3708      	adds	r7, #8
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
	...

0800eb38 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	68b9      	ldr	r1, [r7, #8]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7fb fb72 	bl	800a234 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800eb50:	4a03      	ldr	r2, [pc, #12]	; (800eb60 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	601a      	str	r2, [r3, #0]
{

}
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3710      	adds	r7, #16
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	08029ea4 	.word	0x08029ea4

0800eb64 <_ZN5ModelC1Ev>:
static MSGQUEUE_WAVE_t  wave;
#endif

void shareModelInstance(Model *m);

Model::Model() : modelListener(0)
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	601a      	str	r2, [r3, #0]
{
#ifndef SIMULATOR
  shareModelInstance(this);
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 f844 	bl	800ec00 <_Z18shareModelInstanceP5Model>
#endif
}
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3708      	adds	r7, #8
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
	...

0800eb84 <_ZN5Model4tickEv>:

void Model::tick()
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
#ifndef SIMULATOR
  extern osMessageQueueId_t waveQueueHandle;

  int waveCount = 0;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	60fb      	str	r3, [r7, #12]
  while(osMessageQueueGet(waveQueueHandle, &wave, 0U, 0) == osOK){
 800eb90:	4b19      	ldr	r3, [pc, #100]	; (800ebf8 <_ZN5Model4tickEv+0x74>)
 800eb92:	6818      	ldr	r0, [r3, #0]
 800eb94:	2300      	movs	r3, #0
 800eb96:	2200      	movs	r2, #0
 800eb98:	4918      	ldr	r1, [pc, #96]	; (800ebfc <_ZN5Model4tickEv+0x78>)
 800eb9a:	f7f7 fcd3 	bl	8006544 <osMessageQueueGet>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	bf0c      	ite	eq
 800eba4:	2301      	moveq	r3, #1
 800eba6:	2300      	movne	r3, #0
 800eba8:	b2db      	uxtb	r3, r3
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d015      	beq.n	800ebda <_ZN5Model4tickEv+0x56>
    for(int i=0; i<5; i++)
 800ebae:	2300      	movs	r3, #0
 800ebb0:	60bb      	str	r3, [r7, #8]
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	2b04      	cmp	r3, #4
 800ebb6:	dceb      	bgt.n	800eb90 <_ZN5Model4tickEv+0xc>
      waveBuf[waveCount++] = wave.val[i];
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	1c5a      	adds	r2, r3, #1
 800ebbc:	60fa      	str	r2, [r7, #12]
 800ebbe:	490f      	ldr	r1, [pc, #60]	; (800ebfc <_ZN5Model4tickEv+0x78>)
 800ebc0:	68ba      	ldr	r2, [r7, #8]
 800ebc2:	0092      	lsls	r2, r2, #2
 800ebc4:	440a      	add	r2, r1
 800ebc6:	6812      	ldr	r2, [r2, #0]
 800ebc8:	6879      	ldr	r1, [r7, #4]
 800ebca:	009b      	lsls	r3, r3, #2
 800ebcc:	440b      	add	r3, r1
 800ebce:	3304      	adds	r3, #4
 800ebd0:	601a      	str	r2, [r3, #0]
    for(int i=0; i<5; i++)
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	60bb      	str	r3, [r7, #8]
 800ebd8:	e7eb      	b.n	800ebb2 <_ZN5Model4tickEv+0x2e>
      printf("[%d] = %d, ", i, (int)wave.val[i]);
    printf("\n");
#endif
  }

  modelListener->putData(waveBuf, waveCount);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6818      	ldr	r0, [r3, #0]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	3308      	adds	r3, #8
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	687a      	ldr	r2, [r7, #4]
 800ebea:	1d11      	adds	r1, r2, #4
 800ebec:	68fa      	ldr	r2, [r7, #12]
 800ebee:	4798      	blx	r3
#endif
}
 800ebf0:	bf00      	nop
 800ebf2:	3710      	adds	r7, #16
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	20000358 	.word	0x20000358
 800ebfc:	20005440 	.word	0x20005440

0800ec00 <_Z18shareModelInstanceP5Model>:
 * The below functions are not member of Model class but normal function to disclose Model instance to the public.
 */
Model *pmodel;

void shareModelInstance(Model *m)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b083      	sub	sp, #12
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  pmodel = m;
 800ec08:	4a04      	ldr	r2, [pc, #16]	; (800ec1c <_Z18shareModelInstanceP5Model+0x1c>)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6013      	str	r3, [r2, #0]
}
 800ec0e:	bf00      	nop
 800ec10:	370c      	adds	r7, #12
 800ec12:	46bd      	mov	sp, r7
 800ec14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec18:	4770      	bx	lr
 800ec1a:	bf00      	nop
 800ec1c:	20005458 	.word	0x20005458

0800ec20 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800ec20:	b480      	push	{r7}
 800ec22:	b083      	sub	sp, #12
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
    {
    }
 800ec28:	bf00      	nop
 800ec2a:	370c      	adds	r7, #12
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec32:	4770      	bx	lr

0800ec34 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
    {
    }
 800ec3c:	bf00      	nop
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr

0800ec48 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800ec48:	b480      	push	{r7}
 800ec4a:	b083      	sub	sp, #12
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
    {
 800ec50:	4a04      	ldr	r2, [pc, #16]	; (800ec64 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	601a      	str	r2, [r3, #0]
    }
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	370c      	adds	r7, #12
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr
 800ec64:	08029f34 	.word	0x08029f34

0800ec68 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
    }
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7ff ffe9 	bl	800ec48 <_ZN8touchgfx9PresenterD1Ev>
 800ec76:	2104      	movs	r1, #4
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f017 f903 	bl	8025e84 <_ZdlPvj>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	4618      	mov	r0, r3
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
    {
 800ec90:	4a04      	ldr	r2, [pc, #16]	; (800eca4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	601a      	str	r2, [r3, #0]
    }
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	4618      	mov	r0, r3
 800ec9a:	370c      	adds	r7, #12
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr
 800eca4:	08029f34 	.word	0x08029f34

0800eca8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800eca8:	b480      	push	{r7}
 800ecaa:	b083      	sub	sp, #12
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	4a06      	ldr	r2, [pc, #24]	; (800eccc <_ZN13ModelListenerC1Ev+0x24>)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	601a      	str	r2, [r3, #0]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	605a      	str	r2, [r3, #4]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	370c      	adds	r7, #12
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc8:	4770      	bx	lr
 800ecca:	bf00      	nop
 800eccc:	08029f20 	.word	0x08029f20

0800ecd0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	4a04      	ldr	r2, [pc, #16]	; (800ecec <_ZN13ModelListenerD1Ev+0x1c>)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	601a      	str	r2, [r3, #0]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4618      	mov	r0, r3
 800ece2:	370c      	adds	r7, #12
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr
 800ecec:	08029f20 	.word	0x08029f20

0800ecf0 <_ZN13ModelListenerD0Ev>:
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f7ff ffe9 	bl	800ecd0 <_ZN13ModelListenerD1Ev>
 800ecfe:	2108      	movs	r1, #8
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f017 f8bf 	bl	8025e84 <_ZdlPvj>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3708      	adds	r7, #8
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <_ZN13ModelListener7putDataEPfi>:

    virtual void putData(float* wave, int n){};
 800ed10:	b480      	push	{r7}
 800ed12:	b085      	sub	sp, #20
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	607a      	str	r2, [r7, #4]
 800ed1c:	bf00      	nop
 800ed1e:	3714      	adds	r7, #20
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	4a09      	ldr	r2, [pc, #36]	; (800ed58 <_ZN16Screen1PresenterD1Ev+0x30>)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	601a      	str	r2, [r3, #0]
 800ed36:	4a09      	ldr	r2, [pc, #36]	; (800ed5c <_ZN16Screen1PresenterD1Ev+0x34>)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	605a      	str	r2, [r3, #4]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	3304      	adds	r3, #4
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7ff ffc5 	bl	800ecd0 <_ZN13ModelListenerD1Ev>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7ff ff7d 	bl	800ec48 <_ZN8touchgfx9PresenterD1Ev>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	4618      	mov	r0, r3
 800ed52:	3708      	adds	r7, #8
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	08029ef0 	.word	0x08029ef0
 800ed5c:	08029f0c 	.word	0x08029f0c

0800ed60 <_ZThn4_N16Screen1PresenterD1Ev>:
 800ed60:	f1a0 0004 	sub.w	r0, r0, #4
 800ed64:	e7e0      	b.n	800ed28 <_ZN16Screen1PresenterD1Ev>
 800ed66:	bf00      	nop

0800ed68 <_ZN16Screen1PresenterD0Ev>:
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f7ff ffd9 	bl	800ed28 <_ZN16Screen1PresenterD1Ev>
 800ed76:	2110      	movs	r1, #16
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f017 f883 	bl	8025e84 <_ZdlPvj>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	4618      	mov	r0, r3
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <_ZThn4_N16Screen1PresenterD0Ev>:
 800ed88:	f1a0 0004 	sub.w	r0, r0, #4
 800ed8c:	e7ec      	b.n	800ed68 <_ZN16Screen1PresenterD0Ev>
	...

0800ed90 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	6039      	str	r1, [r7, #0]
    : view(v)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7ff ff73 	bl	800ec88 <_ZN8touchgfx9PresenterC1Ev>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	3304      	adds	r3, #4
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7ff ff7e 	bl	800eca8 <_ZN13ModelListenerC1Ev>
 800edac:	4a06      	ldr	r2, [pc, #24]	; (800edc8 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	601a      	str	r2, [r3, #0]
 800edb2:	4a06      	ldr	r2, [pc, #24]	; (800edcc <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	605a      	str	r2, [r3, #4]
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	683a      	ldr	r2, [r7, #0]
 800edbc:	60da      	str	r2, [r3, #12]
{

}
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4618      	mov	r0, r3
 800edc2:	3708      	adds	r7, #8
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	08029ef0 	.word	0x08029ef0
 800edcc:	08029f0c 	.word	0x08029f0c

0800edd0 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]

}
 800edd8:	bf00      	nop
 800edda:	370c      	adds	r7, #12
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr

0800ede4 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]

}
 800edec:	bf00      	nop
 800edee:	370c      	adds	r7, #12
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr

0800edf8 <_ZN16Screen1Presenter7putDataEPfi>:

void Screen1Presenter::putData(float* wave, int n)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b084      	sub	sp, #16
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	60b9      	str	r1, [r7, #8]
 800ee02:	607a      	str	r2, [r7, #4]
  view.putData(wave, n);
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	68d8      	ldr	r0, [r3, #12]
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	68db      	ldr	r3, [r3, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	3334      	adds	r3, #52	; 0x34
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	68b9      	ldr	r1, [r7, #8]
 800ee16:	4798      	blx	r3
}
 800ee18:	bf00      	nop
 800ee1a:	3710      	adds	r7, #16
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <_ZThn4_N16Screen1Presenter7putDataEPfi>:

    virtual void putData(float* wave, int n);
 800ee20:	f1a0 0004 	sub.w	r0, r0, #4
 800ee24:	f7ff bfe8 	b.w	800edf8 <_ZN16Screen1Presenter7putDataEPfi>

0800ee28 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	4a05      	ldr	r2, [pc, #20]	; (800ee48 <_ZN11Screen1ViewD1Ev+0x20>)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7fe fb33 	bl	800d4a4 <_ZN15Screen1ViewBaseD1Ev>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	4618      	mov	r0, r3
 800ee42:	3708      	adds	r7, #8
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}
 800ee48:	08029f4c 	.word	0x08029f4c

0800ee4c <_ZN11Screen1ViewD0Ev>:
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f7ff ffe7 	bl	800ee28 <_ZN11Screen1ViewD1Ev>
 800ee5a:	f641 11c4 	movw	r1, #6596	; 0x19c4
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f017 f810 	bl	8025e84 <_ZdlPvj>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	4618      	mov	r0, r3
 800ee68:	3708      	adds	r7, #8
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
	...

0800ee70 <_ZN11Screen1ViewC1Ev>:
#include "stm32f4xx_hal_tim.h"
#endif

int graphActive = 0;

Screen1View::Screen1View()
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7fe fc04 	bl	800d688 <_ZN15Screen1ViewBaseC1Ev>
 800ee80:	4a08      	ldr	r2, [pc, #32]	; (800eea4 <_ZN11Screen1ViewC1Ev+0x34>)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	601a      	str	r2, [r3, #0]
{
  ::graphActive = 1;
 800ee86:	4b08      	ldr	r3, [pc, #32]	; (800eea8 <_ZN11Screen1ViewC1Ev+0x38>)
 800ee88:	2201      	movs	r2, #1
 800ee8a:	601a      	str	r2, [r3, #0]
#ifndef SIMULATOR
  waveReady = 0;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee92:	461a      	mov	r2, r3
 800ee94:	2300      	movs	r3, #0
 800ee96:	f8c2 3980 	str.w	r3, [r2, #2432]	; 0x980
#else
  waveCount = 0;
  for(int i=0; i<360; i++)
    sin_lut[i] = sinf((float)(i) * 2.0f * 3.141592f / 360.0f * 2.0f);
#endif
}
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	08029f4c 	.word	0x08029f4c
 800eea8:	2000545c 	.word	0x2000545c

0800eeac <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7fe ffd0 	bl	800de5c <_ZN15Screen1ViewBase11setupScreenEv>
}
 800eebc:	bf00      	nop
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4618      	mov	r0, r3
 800eed0:	f7fb ff4e 	bl	800ad70 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800eed4:	bf00      	nop
 800eed6:	3708      	adds	r7, #8
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <_ZN11Screen1View12graphClickedEN8touchgfx17AbstractDataGraph15GraphClickEventE>:

void Screen1View::graphClicked(AbstractDataGraph::GraphClickEvent value)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b08c      	sub	sp, #48	; 0x30
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	1d3b      	adds	r3, r7, #4
 800eee6:	e883 0006 	stmia.w	r3, {r1, r2}
  if(value.clickEvent.getType() == ClickEvent::PRESSED){
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7fb fcef 	bl	800a8d0 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800eef2:	4603      	mov	r3, r0
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	bf0c      	ite	eq
 800eef8:	2301      	moveq	r3, #1
 800eefa:	2300      	movne	r3, #0
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d055      	beq.n	800efae <_ZN11Screen1View12graphClickedEN8touchgfx17AbstractDataGraph15GraphClickEventE+0xd2>
    int x, y;
    x = value.index;
 800ef02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ef06:	62fb      	str	r3, [r7, #44]	; 0x2c
    y = dynamicGraph1.indexToDataPointYAsInt(x);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	33c4      	adds	r3, #196	; 0xc4
 800ef0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef0e:	b212      	sxth	r2, r2
 800ef10:	627b      	str	r3, [r7, #36]	; 0x24
 800ef12:	4613      	mov	r3, r2
 800ef14:	847b      	strh	r3, [r7, #34]	; 0x22
        return scaled2intY(indexToDataPointYScaled(index));
 800ef16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800ef24:	4611      	mov	r1, r2
 800ef26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef28:	4798      	blx	r3
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2e:	61fb      	str	r3, [r7, #28]
 800ef30:	61ba      	str	r2, [r7, #24]
        return scaled2int(i, yScale);
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef36:	69ba      	ldr	r2, [r7, #24]
 800ef38:	617a      	str	r2, [r7, #20]
 800ef3a:	613b      	str	r3, [r7, #16]
        if (i >= 0)
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	db0a      	blt.n	800ef58 <_ZN11Screen1View12graphClickedEN8touchgfx17AbstractDataGraph15GraphClickEventE+0x7c>
            return ((i * 2 + scale) / scale) / 2;
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	005a      	lsls	r2, r3, #1
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	441a      	add	r2, r3
 800ef4a:	693b      	ldr	r3, [r7, #16]
 800ef4c:	fb92 f3f3 	sdiv	r3, r2, r3
 800ef50:	0fda      	lsrs	r2, r3, #31
 800ef52:	4413      	add	r3, r2
 800ef54:	105b      	asrs	r3, r3, #1
 800ef56:	e00f      	b.n	800ef78 <_ZN11Screen1View12graphClickedEN8touchgfx17AbstractDataGraph15GraphClickEventE+0x9c>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800ef58:	697a      	ldr	r2, [r7, #20]
 800ef5a:	4613      	mov	r3, r2
 800ef5c:	07db      	lsls	r3, r3, #31
 800ef5e:	1a9b      	subs	r3, r3, r2
 800ef60:	005b      	lsls	r3, r3, #1
 800ef62:	461a      	mov	r2, r3
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	4413      	add	r3, r2
 800ef68:	1e5a      	subs	r2, r3, #1
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	fb92 f3f3 	sdiv	r3, r2, r3
 800ef70:	0fda      	lsrs	r2, r3, #31
 800ef72:	4413      	add	r3, r2
 800ef74:	105b      	asrs	r3, r3, #1
 800ef76:	425b      	negs	r3, r3
        return scaled2int(i, yScale);
 800ef78:	bf00      	nop
        return scaled2intY(indexToDataPointYScaled(index));
 800ef7a:	bf00      	nop
 800ef7c:	62bb      	str	r3, [r7, #40]	; 0x28
    x *= dynamicGraph1.getXAxisFactorAsInt();
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	33c4      	adds	r3, #196	; 0xc4
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fc ffc6 	bl	800bf14 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>
 800ef88:	4602      	mov	r2, r0
 800ef8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8c:	fb02 f303 	mul.w	r3, r2, r3
 800ef90:	62fb      	str	r3, [r7, #44]	; 0x2c
    touchgfx_printf("(%d, %d)\n", x, y);
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", y);
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 800ef98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef9a:	4a07      	ldr	r2, [pc, #28]	; (800efb8 <_ZN11Screen1View12graphClickedEN8touchgfx17AbstractDataGraph15GraphClickEventE+0xdc>)
 800ef9c:	210a      	movs	r1, #10
 800ef9e:	f00a fdd5 	bl	8019b4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea1.invalidate();
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 800efa8:	4618      	mov	r0, r3
 800efaa:	f008 fde2 	bl	8017b72 <_ZNK8touchgfx8Drawable10invalidateEv>
  }
}
 800efae:	bf00      	nop
 800efb0:	3730      	adds	r7, #48	; 0x30
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	08028924 	.word	0x08028924

0800efbc <_ZN11Screen1View10graphPauseEv>:

void Screen1View::graphPause()
#ifndef SIMULATOR
{
 800efbc:	b590      	push	{r4, r7, lr}
 800efbe:	b087      	sub	sp, #28
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  extern TIM_HandleTypeDef htim3;

  __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE);
 800efc4:	4b26      	ldr	r3, [pc, #152]	; (800f060 <_ZN11Screen1View10graphPauseEv+0xa4>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	68da      	ldr	r2, [r3, #12]
 800efca:	4b25      	ldr	r3, [pc, #148]	; (800f060 <_ZN11Screen1View10graphPauseEv+0xa4>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f022 0201 	bic.w	r2, r2, #1
 800efd2:	60da      	str	r2, [r3, #12]
  ::graphActive ^= 1;
 800efd4:	4b23      	ldr	r3, [pc, #140]	; (800f064 <_ZN11Screen1View10graphPauseEv+0xa8>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f083 0301 	eor.w	r3, r3, #1
 800efdc:	4a21      	ldr	r2, [pc, #132]	; (800f064 <_ZN11Screen1View10graphPauseEv+0xa8>)
 800efde:	6013      	str	r3, [r2, #0]
  if(::graphActive == 1)
 800efe0:	4b20      	ldr	r3, [pc, #128]	; (800f064 <_ZN11Screen1View10graphPauseEv+0xa8>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d117      	bne.n	800f018 <_ZN11Screen1View10graphPauseEv+0x5c>
    flexButton1.setIconBitmaps(Bitmap(BITMAP_DARK_ICONS_PAUSE_32_ID), Bitmap(BITMAP_DARK_ICONS_PAUSE_32_ID));
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f503 64c5 	add.w	r4, r3, #1576	; 0x628
 800efee:	f107 0308 	add.w	r3, r7, #8
 800eff2:	2100      	movs	r1, #0
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7fb fc77 	bl	800a8e8 <_ZN8touchgfx6BitmapC1Et>
 800effa:	f107 030c 	add.w	r3, r7, #12
 800effe:	2100      	movs	r1, #0
 800f000:	4618      	mov	r0, r3
 800f002:	f7fb fc71 	bl	800a8e8 <_ZN8touchgfx6BitmapC1Et>
 800f006:	f107 020c 	add.w	r2, r7, #12
 800f00a:	f107 0308 	add.w	r3, r7, #8
 800f00e:	4619      	mov	r1, r3
 800f010:	4620      	mov	r0, r4
 800f012:	f7ff f889 	bl	800e128 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>
 800f016:	e016      	b.n	800f046 <_ZN11Screen1View10graphPauseEv+0x8a>
  else
    flexButton1.setIconBitmaps(Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID), Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID));
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f503 64c5 	add.w	r4, r3, #1576	; 0x628
 800f01e:	f107 0310 	add.w	r3, r7, #16
 800f022:	2101      	movs	r1, #1
 800f024:	4618      	mov	r0, r3
 800f026:	f7fb fc5f 	bl	800a8e8 <_ZN8touchgfx6BitmapC1Et>
 800f02a:	f107 0314 	add.w	r3, r7, #20
 800f02e:	2101      	movs	r1, #1
 800f030:	4618      	mov	r0, r3
 800f032:	f7fb fc59 	bl	800a8e8 <_ZN8touchgfx6BitmapC1Et>
 800f036:	f107 0214 	add.w	r2, r7, #20
 800f03a:	f107 0310 	add.w	r3, r7, #16
 800f03e:	4619      	mov	r1, r3
 800f040:	4620      	mov	r0, r4
 800f042:	f7ff f871 	bl	800e128 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 800f046:	4b06      	ldr	r3, [pc, #24]	; (800f060 <_ZN11Screen1View10graphPauseEv+0xa4>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	68da      	ldr	r2, [r3, #12]
 800f04c:	4b04      	ldr	r3, [pc, #16]	; (800f060 <_ZN11Screen1View10graphPauseEv+0xa4>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f042 0201 	orr.w	r2, r2, #1
 800f054:	60da      	str	r2, [r3, #12]
}
 800f056:	bf00      	nop
 800f058:	371c      	adds	r7, #28
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd90      	pop	{r4, r7, pc}
 800f05e:	bf00      	nop
 800f060:	2000027c 	.word	0x2000027c
 800f064:	2000545c 	.word	0x2000545c

0800f068 <_ZN11Screen1View7putDataEPfi>:
    flexButton1.setIconBitmaps(Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID), Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID));
}
#endif

void Screen1View::putData(float* wave, int n)
{
 800f068:	b480      	push	{r7}
 800f06a:	b087      	sub	sp, #28
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	607a      	str	r2, [r7, #4]
#ifndef SIMULATOR
//  extern TIM_HandleTypeDef htim3;

//  __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE);
  for(int i=0; i<n; i++)
 800f074:	2300      	movs	r3, #0
 800f076:	617b      	str	r3, [r7, #20]
 800f078:	697a      	ldr	r2, [r7, #20]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	da10      	bge.n	800f0a2 <_ZN11Screen1View7putDataEPfi+0x3a>
    temp[i] = wave[i];
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	68ba      	ldr	r2, [r7, #8]
 800f086:	4413      	add	r3, r2
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	68f9      	ldr	r1, [r7, #12]
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800f092:	009b      	lsls	r3, r3, #2
 800f094:	440b      	add	r3, r1
 800f096:	3304      	adds	r3, #4
 800f098:	601a      	str	r2, [r3, #0]
  for(int i=0; i<n; i++)
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	3301      	adds	r3, #1
 800f09e:	617b      	str	r3, [r7, #20]
 800f0a0:	e7ea      	b.n	800f078 <_ZN11Screen1View7putDataEPfi+0x10>
  tempCount = n;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8c2 39c0 	str.w	r3, [r2, #2496]	; 0x9c0
  waveReady = 1;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	f8c2 3980 	str.w	r3, [r2, #2432]	; 0x980
//  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
#endif
}
 800f0be:	bf00      	nop
 800f0c0:	371c      	adds	r7, #28
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr

0800f0ca <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b08a      	sub	sp, #40	; 0x28
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
#ifndef SIMULATOR
//  extern TIM_HandleTypeDef htim3;

//  __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE);
  if(waveReady == 1){
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0d8:	f8d3 3980 	ldr.w	r3, [r3, #2432]	; 0x980
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d167      	bne.n	800f1b0 <_ZN11Screen1View15handleTickEventEv+0xe6>
    for(int i=0; i<tempCount; i++){
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	627b      	str	r3, [r7, #36]	; 0x24
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0ea:	f8d3 39c0 	ldr.w	r3, [r3, #2496]	; 0x9c0
 800f0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	da56      	bge.n	800f1a2 <_ZN11Screen1View15handleTickEventEv+0xd8>
      dynamicGraph1.addDataPoint(temp[i]);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800f0fa:	6879      	ldr	r1, [r7, #4]
 800f0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fe:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800f102:	009b      	lsls	r3, r3, #2
 800f104:	440b      	add	r3, r1
 800f106:	3304      	adds	r3, #4
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	623a      	str	r2, [r7, #32]
 800f10c:	61fb      	str	r3, [r7, #28]
        return addDataPointScaled(float2scaledY(y));
 800f10e:	6a3b      	ldr	r3, [r7, #32]
 800f110:	61bb      	str	r3, [r7, #24]
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	617b      	str	r3, [r7, #20]
        return float2scaled(f, yScale);
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f11a:	697a      	ldr	r2, [r7, #20]
 800f11c:	613a      	str	r2, [r7, #16]
 800f11e:	60fb      	str	r3, [r7, #12]
        const float fs = f * (float)scale;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	ee07 3a90 	vmov	s15, r3
 800f126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f12a:	ed97 7a04 	vldr	s14, [r7, #16]
 800f12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f132:	edc7 7a02 	vstr	s15, [r7, #8]
        if (fs >= 0)
 800f136:	edd7 7a02 	vldr	s15, [r7, #8]
 800f13a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f142:	db0a      	blt.n	800f15a <_ZN11Screen1View15handleTickEventEv+0x90>
            return (int)(fs + 0.5f);
 800f144:	edd7 7a02 	vldr	s15, [r7, #8]
 800f148:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f14c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f154:	ee17 3a90 	vmov	r3, s15
 800f158:	e019      	b.n	800f18e <_ZN11Screen1View15handleTickEventEv+0xc4>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800f15a:	edd7 7a02 	vldr	s15, [r7, #8]
 800f15e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f162:	ee17 3a90 	vmov	r3, s15
 800f166:	3b01      	subs	r3, #1
 800f168:	edd7 7a02 	vldr	s15, [r7, #8]
 800f16c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f174:	ed97 7a02 	vldr	s14, [r7, #8]
 800f178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f17c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800f180:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f188:	ee17 2a90 	vmov	r2, s15
 800f18c:	4413      	add	r3, r2
        return float2scaled(f, yScale);
 800f18e:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 800f190:	4619      	mov	r1, r3
 800f192:	6a38      	ldr	r0, [r7, #32]
 800f194:	f003 fe0c 	bl	8012db0 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 800f198:	bf00      	nop
    for(int i=0; i<tempCount; i++){
 800f19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19c:	3301      	adds	r3, #1
 800f19e:	627b      	str	r3, [r7, #36]	; 0x24
 800f1a0:	e7a0      	b.n	800f0e4 <_ZN11Screen1View15handleTickEventEv+0x1a>
    }
    waveReady = 0;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	f8c2 3980 	str.w	r3, [r2, #2432]	; 0x980
  if(::graphActive){
    dynamicGraph1.addDataPoint((sin_lut[waveCount++] + 1.0f) * 40.0f);
    waveCount %= 360;
  }
#endif
}
 800f1b0:	bf00      	nop
 800f1b2:	3728      	adds	r7, #40	; 0x28
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800f1b8:	b480      	push	{r7}
 800f1ba:	b083      	sub	sp, #12
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
    {
 800f1c0:	4a04      	ldr	r2, [pc, #16]	; (800f1d4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	601a      	str	r2, [r3, #0]
    }
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	370c      	adds	r7, #12
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr
 800f1d4:	08029fa4 	.word	0x08029fa4

0800f1d8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
    }
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f7ff ffe9 	bl	800f1b8 <_ZN8touchgfx15TouchControllerD1Ev>
 800f1e6:	2104      	movs	r1, #4
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f016 fe4b 	bl	8025e84 <_ZdlPvj>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3708      	adds	r7, #8
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <_ZN8touchgfx3HAL18setTouchSampleRateEa>:
    void setTouchSampleRate(int8_t sampleRateInTicks)
 800f1f8:	b480      	push	{r7}
 800f1fa:	b083      	sub	sp, #12
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	460b      	mov	r3, r1
 800f202:	70fb      	strb	r3, [r7, #3]
        if (sampleRateInTicks > 0)
 800f204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	dd03      	ble.n	800f214 <_ZN8touchgfx3HAL18setTouchSampleRateEa+0x1c>
            touchSampleRate = sampleRateInTicks;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	78fa      	ldrb	r2, [r7, #3]
 800f210:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 800f214:	bf00      	nop
 800f216:	370c      	adds	r7, #12
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr

0800f220 <_ZN20STM32TouchController4initEv>:
#include <stdio.h>
#include "ili9341.h"
#include "xpt2046.h"

void STM32TouchController::init()
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
  touchgfx::HAL::getInstance()->setTouchSampleRate(1);
 800f228:	f7fa fe6c 	bl	8009f04 <_ZN8touchgfx3HAL11getInstanceEv>
 800f22c:	4603      	mov	r3, r0
 800f22e:	2101      	movs	r1, #1
 800f230:	4618      	mov	r0, r3
 800f232:	f7ff ffe1 	bl	800f1f8 <_ZN8touchgfx3HAL18setTouchSampleRateEa>
}
 800f236:	bf00      	nop
 800f238:	3708      	adds	r7, #8
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
	...

0800f240 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b088      	sub	sp, #32
 800f244:	af00      	add	r7, sp, #0
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	607a      	str	r2, [r7, #4]
  uint16_t intx, inty, convx, convy;
  int32_t intz;

//  HAL_GPIO_TogglePin(GPIOC, TickOut_Pin);     // PC3

  XPT2046_Update(&intx, &inty, &intz);
 800f24c:	f107 0214 	add.w	r2, r7, #20
 800f250:	f107 011c 	add.w	r1, r7, #28
 800f254:	f107 031e 	add.w	r3, r7, #30
 800f258:	4618      	mov	r0, r3
 800f25a:	f7f2 fec5 	bl	8001fe8 <XPT2046_Update>
  convx = intx;
 800f25e:	8bfb      	ldrh	r3, [r7, #30]
 800f260:	837b      	strh	r3, [r7, #26]
  convy = inty;
 800f262:	8bbb      	ldrh	r3, [r7, #28]
 800f264:	833b      	strh	r3, [r7, #24]

  if (XPT2046_IsReasonable(convx, convy)) {
 800f266:	8b7b      	ldrh	r3, [r7, #26]
 800f268:	8b3a      	ldrh	r2, [r7, #24]
 800f26a:	4611      	mov	r1, r2
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7f2 ff7f 	bl	8002170 <XPT2046_IsReasonable>
 800f272:	4603      	mov	r3, r0
 800f274:	2b00      	cmp	r3, #0
 800f276:	bf14      	ite	ne
 800f278:	2301      	movne	r3, #1
 800f27a:	2300      	moveq	r3, #0
 800f27c:	b2db      	uxtb	r3, r3
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d029      	beq.n	800f2d6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x96>
    XPT2046_XPTtoILI(&convx, &convy);
 800f282:	f107 0218 	add.w	r2, r7, #24
 800f286:	f107 031a 	add.w	r3, r7, #26
 800f28a:	4611      	mov	r1, r2
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7f2 ff93 	bl	80021b8 <XPT2046_XPTtoILI>
    if (convx != prevx || convy != prevy) {
 800f292:	8b7a      	ldrh	r2, [r7, #26]
 800f294:	4b12      	ldr	r3, [pc, #72]	; (800f2e0 <_ZN20STM32TouchController11sampleTouchERlS0_+0xa0>)
 800f296:	881b      	ldrh	r3, [r3, #0]
 800f298:	429a      	cmp	r2, r3
 800f29a:	d104      	bne.n	800f2a6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
 800f29c:	8b3a      	ldrh	r2, [r7, #24]
 800f29e:	4b11      	ldr	r3, [pc, #68]	; (800f2e4 <_ZN20STM32TouchController11sampleTouchERlS0_+0xa4>)
 800f2a0:	881b      	ldrh	r3, [r3, #0]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d017      	beq.n	800f2d6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x96>
      prevx = convx;
 800f2a6:	8b7a      	ldrh	r2, [r7, #26]
 800f2a8:	4b0d      	ldr	r3, [pc, #52]	; (800f2e0 <_ZN20STM32TouchController11sampleTouchERlS0_+0xa0>)
 800f2aa:	801a      	strh	r2, [r3, #0]
      prevy = convy;
 800f2ac:	8b3a      	ldrh	r2, [r7, #24]
 800f2ae:	4b0d      	ldr	r3, [pc, #52]	; (800f2e4 <_ZN20STM32TouchController11sampleTouchERlS0_+0xa4>)
 800f2b0:	801a      	strh	r2, [r3, #0]
      x = (int32_t)convx;
 800f2b2:	8b7b      	ldrh	r3, [r7, #26]
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	601a      	str	r2, [r3, #0]
      y = (int32_t)convy;
 800f2ba:	8b3b      	ldrh	r3, [r7, #24]
 800f2bc:	461a      	mov	r2, r3
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	601a      	str	r2, [r3, #0]

      printf("x=%d, y=%d, z=%d\n", (int)x, (int)y, (int)intz);
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	6819      	ldr	r1, [r3, #0]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681a      	ldr	r2, [r3, #0]
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	4806      	ldr	r0, [pc, #24]	; (800f2e8 <_ZN20STM32TouchController11sampleTouchERlS0_+0xa8>)
 800f2ce:	f018 f8c1 	bl	8027454 <iprintf>

      return true;
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	e000      	b.n	800f2d8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x98>
    }
  }

  return false;
 800f2d6:	2300      	movs	r3, #0
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3720      	adds	r7, #32
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	20000014 	.word	0x20000014
 800f2e4:	20000016 	.word	0x20000016
 800f2e8:	08028928 	.word	0x08028928

0800f2ec <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	4a05      	ldr	r2, [pc, #20]	; (800f30c <_ZN20STM32TouchControllerD1Ev+0x20>)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	601a      	str	r2, [r3, #0]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f7ff ff5b 	bl	800f1b8 <_ZN8touchgfx15TouchControllerD1Ev>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	4618      	mov	r0, r3
 800f306:	3708      	adds	r7, #8
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	08029f8c 	.word	0x08029f8c

0800f310 <_ZN20STM32TouchControllerD0Ev>:
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f7ff ffe7 	bl	800f2ec <_ZN20STM32TouchControllerD1Ev>
 800f31e:	2104      	movs	r1, #4
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f016 fdaf 	bl	8025e84 <_ZdlPvj>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4618      	mov	r0, r3
 800f32a:	3708      	adds	r7, #8
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800f330:	b480      	push	{r7}
 800f332:	b083      	sub	sp, #12
 800f334:	af00      	add	r7, sp, #0
 800f336:	4603      	mov	r3, r0
 800f338:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800f33a:	79fb      	ldrb	r3, [r7, #7]
 800f33c:	2b03      	cmp	r3, #3
 800f33e:	d80c      	bhi.n	800f35a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800f340:	a201      	add	r2, pc, #4	; (adr r2, 800f348 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800f342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f346:	bf00      	nop
 800f348:	0800f359 	.word	0x0800f359
 800f34c:	0800f359 	.word	0x0800f359
 800f350:	0800f359 	.word	0x0800f359
 800f354:	0800f359 	.word	0x0800f359
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800f358:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800f35a:	bf00      	nop
 800f35c:	370c      	adds	r7, #12
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop

0800f368 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	4603      	mov	r3, r0
 800f370:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800f372:	79fb      	ldrb	r3, [r7, #7]
 800f374:	2b03      	cmp	r3, #3
 800f376:	d80c      	bhi.n	800f392 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800f378:	a201      	add	r2, pc, #4	; (adr r2, 800f380 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800f37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f37e:	bf00      	nop
 800f380:	0800f391 	.word	0x0800f391
 800f384:	0800f391 	.word	0x0800f391
 800f388:	0800f391 	.word	0x0800f391
 800f38c:	0800f391 	.word	0x0800f391
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800f390:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 800f392:	bf00      	nop
 800f394:	370c      	adds	r7, #12
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr
 800f39e:	bf00      	nop

0800f3a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b083      	sub	sp, #12
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800f3aa:	79fb      	ldrb	r3, [r7, #7]
 800f3ac:	2b03      	cmp	r3, #3
 800f3ae:	d80c      	bhi.n	800f3ca <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800f3b0:	a201      	add	r2, pc, #4	; (adr r2, 800f3b8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800f3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3b6:	bf00      	nop
 800f3b8:	0800f3c9 	.word	0x0800f3c9
 800f3bc:	0800f3c9 	.word	0x0800f3c9
 800f3c0:	0800f3c9 	.word	0x0800f3c9
 800f3c4:	0800f3c9 	.word	0x0800f3c9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800f3c8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800f3ca:	bf00      	nop
 800f3cc:	370c      	adds	r7, #12
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr
 800f3d6:	bf00      	nop

0800f3d8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800f3d8:	b480      	push	{r7}
 800f3da:	b083      	sub	sp, #12
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
    {
 800f3e0:	4a04      	ldr	r2, [pc, #16]	; (800f3f4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	601a      	str	r2, [r3, #0]
    }
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	370c      	adds	r7, #12
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr
 800f3f4:	0802a3dc 	.word	0x0802a3dc

0800f3f8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
    }
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f7ff ffe9 	bl	800f3d8 <_ZN8touchgfx3HALD1Ev>
 800f406:	217c      	movs	r1, #124	; 0x7c
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f016 fd3b 	bl	8025e84 <_ZdlPvj>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	4618      	mov	r0, r3
 800f412:	3708      	adds	r7, #8
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	460b      	mov	r3, r1
 800f422:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	78fa      	ldrb	r2, [r7, #3]
 800f428:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2201      	movs	r2, #1
 800f430:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800f434:	bf00      	nop
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
 800f448:	460b      	mov	r3, r1
 800f44a:	807b      	strh	r3, [r7, #2]
 800f44c:	4613      	mov	r3, r2
 800f44e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800f450:	4b0c      	ldr	r3, [pc, #48]	; (800f484 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800f452:	881b      	ldrh	r3, [r3, #0]
 800f454:	887a      	ldrh	r2, [r7, #2]
 800f456:	429a      	cmp	r2, r3
 800f458:	d304      	bcc.n	800f464 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800f45a:	4b0b      	ldr	r3, [pc, #44]	; (800f488 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800f45c:	881b      	ldrh	r3, [r3, #0]
 800f45e:	883a      	ldrh	r2, [r7, #0]
 800f460:	429a      	cmp	r2, r3
 800f462:	d205      	bcs.n	800f470 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800f464:	4b09      	ldr	r3, [pc, #36]	; (800f48c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800f466:	4a0a      	ldr	r2, [pc, #40]	; (800f490 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800f468:	219e      	movs	r1, #158	; 0x9e
 800f46a:	480a      	ldr	r0, [pc, #40]	; (800f494 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800f46c:	f017 fa96 	bl	802699c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800f470:	4a09      	ldr	r2, [pc, #36]	; (800f498 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800f472:	887b      	ldrh	r3, [r7, #2]
 800f474:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800f476:	4a09      	ldr	r2, [pc, #36]	; (800f49c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800f478:	883b      	ldrh	r3, [r7, #0]
 800f47a:	8013      	strh	r3, [r2, #0]
    }
 800f47c:	bf00      	nop
 800f47e:	3708      	adds	r7, #8
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	200087fc 	.word	0x200087fc
 800f488:	200087fe 	.word	0x200087fe
 800f48c:	0802893c 	.word	0x0802893c
 800f490:	080289a0 	.word	0x080289a0
 800f494:	080289e4 	.word	0x080289e4
 800f498:	20008802 	.word	0x20008802
 800f49c:	20008804 	.word	0x20008804

0800f4a0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d009      	beq.n	800f4c6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	685a      	ldr	r2, [r3, #4]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	685b      	ldr	r3, [r3, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	4610      	mov	r0, r2
 800f4c0:	4798      	blx	r3
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	e000      	b.n	800f4c8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 800f4c6:	2300      	movs	r3, #0
    }
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3708      	adds	r7, #8
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f002 fe0f 	bl	80120fc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	33ac      	adds	r3, #172	; 0xac
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	4798      	blx	r3
    }
 800f4ea:	bf00      	nop
 800f4ec:	3708      	adds	r7, #8
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}

0800f4f2 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 800f4f2:	b480      	push	{r7}
 800f4f4:	b083      	sub	sp, #12
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	6078      	str	r0, [r7, #4]
 800f4fa:	6039      	str	r1, [r7, #0]
        return false;
 800f4fc:	2300      	movs	r3, #0
    }
 800f4fe:	4618      	mov	r0, r3
 800f500:	370c      	adds	r7, #12
 800f502:	46bd      	mov	sp, r7
 800f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f508:	4770      	bx	lr
	...

0800f50c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	607a      	str	r2, [r7, #4]
 800f518:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d106      	bne.n	800f52e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800f520:	4b0f      	ldr	r3, [pc, #60]	; (800f560 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800f522:	4a10      	ldr	r2, [pc, #64]	; (800f564 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800f524:	f240 21d2 	movw	r1, #722	; 0x2d2
 800f528:	480f      	ldr	r0, [pc, #60]	; (800f568 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800f52a:	f017 fa37 	bl	802699c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	68ba      	ldr	r2, [r7, #8]
 800f532:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	bf14      	ite	ne
 800f540:	2301      	movne	r3, #1
 800f542:	2300      	moveq	r3, #0
 800f544:	b2da      	uxtb	r2, r3
 800f546:	4b09      	ldr	r3, [pc, #36]	; (800f56c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800f548:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	338c      	adds	r3, #140	; 0x8c
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	6839      	ldr	r1, [r7, #0]
 800f554:	68f8      	ldr	r0, [r7, #12]
 800f556:	4798      	blx	r3
    }
 800f558:	bf00      	nop
 800f55a:	3710      	adds	r7, #16
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	08028a28 	.word	0x08028a28
 800f564:	08028a60 	.word	0x08028a60
 800f568:	080289e4 	.word	0x080289e4
 800f56c:	20008806 	.word	0x20008806

0800f570 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 800f570:	b480      	push	{r7}
 800f572:	b083      	sub	sp, #12
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	683a      	ldr	r2, [r7, #0]
 800f57e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	bf14      	ite	ne
 800f586:	2301      	movne	r3, #1
 800f588:	2300      	moveq	r3, #0
 800f58a:	b2da      	uxtb	r2, r3
 800f58c:	4b03      	ldr	r3, [pc, #12]	; (800f59c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800f58e:	701a      	strb	r2, [r3, #0]
    }
 800f590:	bf00      	nop
 800f592:	370c      	adds	r7, #12
 800f594:	46bd      	mov	sp, r7
 800f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59a:	4770      	bx	lr
 800f59c:	20008807 	.word	0x20008807

0800f5a0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 800f5a0:	b480      	push	{r7}
 800f5a2:	b083      	sub	sp, #12
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
        return 0;
 800f5a8:	2300      	movs	r3, #0
    }
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 800f5b6:	b580      	push	{r7, lr}
 800f5b8:	b082      	sub	sp, #8
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
 800f5be:	460b      	mov	r3, r1
 800f5c0:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d004      	beq.n	800f5d4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5ce:	887a      	ldrh	r2, [r7, #2]
 800f5d0:	4610      	mov	r0, r2
 800f5d2:	4798      	blx	r3
    }
 800f5d4:	bf00      	nop
 800f5d6:	3708      	adds	r7, #8
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}

0800f5dc <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
    virtual uint16_t getTFTCurrentLine()
 800f5dc:	b480      	push	{r7}
 800f5de:	b083      	sub	sp, #12
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
        return 0xFFFFu;
 800f5e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr

0800f5f4 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	685a      	ldr	r2, [r3, #4]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	3318      	adds	r3, #24
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	4610      	mov	r0, r2
 800f60c:	4798      	blx	r3
 800f60e:	4603      	mov	r3, r0
    }
 800f610:	4618      	mov	r0, r3
 800f612:	3708      	adds	r7, #8
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}

0800f618 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800f618:	b480      	push	{r7}
 800f61a:	b085      	sub	sp, #20
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d011      	beq.n	800f654 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800f630:	4b14      	ldr	r3, [pc, #80]	; (800f684 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d11e      	bne.n	800f676 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800f638:	4b13      	ldr	r3, [pc, #76]	; (800f688 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800f63a:	881b      	ldrh	r3, [r3, #0]
 800f63c:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800f63e:	4b13      	ldr	r3, [pc, #76]	; (800f68c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800f640:	881a      	ldrh	r2, [r3, #0]
 800f642:	4b11      	ldr	r3, [pc, #68]	; (800f688 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800f644:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800f646:	4a11      	ldr	r2, [pc, #68]	; (800f68c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800f648:	89bb      	ldrh	r3, [r7, #12]
 800f64a:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800f64c:	4b0d      	ldr	r3, [pc, #52]	; (800f684 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800f64e:	2201      	movs	r2, #1
 800f650:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800f652:	e010      	b.n	800f676 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800f654:	4b0b      	ldr	r3, [pc, #44]	; (800f684 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00c      	beq.n	800f676 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800f65c:	4b0a      	ldr	r3, [pc, #40]	; (800f688 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800f65e:	881b      	ldrh	r3, [r3, #0]
 800f660:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800f662:	4b0a      	ldr	r3, [pc, #40]	; (800f68c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800f664:	881a      	ldrh	r2, [r3, #0]
 800f666:	4b08      	ldr	r3, [pc, #32]	; (800f688 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800f668:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800f66a:	4a08      	ldr	r2, [pc, #32]	; (800f68c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800f66c:	89fb      	ldrh	r3, [r7, #14]
 800f66e:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800f670:	4b04      	ldr	r3, [pc, #16]	; (800f684 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800f672:	2200      	movs	r2, #0
 800f674:	701a      	strb	r2, [r3, #0]
    }
 800f676:	bf00      	nop
 800f678:	3714      	adds	r7, #20
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	20008800 	.word	0x20008800
 800f688:	200087fe 	.word	0x200087fe
 800f68c:	200087fc 	.word	0x200087fc

0800f690 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
    {
    }
 800f698:	bf00      	nop
 800f69a:	370c      	adds	r7, #12
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
    {
    }
 800f6ac:	bf00      	nop
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr

0800f6b8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f001 ff80 	bl	80115c8 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800f6c8:	bf00      	nop
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	4a05      	ldr	r2, [pc, #20]	; (800f6f0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	601a      	str	r2, [r3, #0]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7ff fe79 	bl	800f3d8 <_ZN8touchgfx3HALD1Ev>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}
 800f6f0:	0802a208 	.word	0x0802a208

0800f6f4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f7ff ffe7 	bl	800f6d0 <_ZN20TouchGFXGeneratedHALD1Ev>
 800f702:	217c      	movs	r1, #124	; 0x7c
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f016 fbbd 	bl	8025e84 <_ZdlPvj>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	4618      	mov	r0, r3
 800f70e:	3708      	adds	r7, #8
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	4618      	mov	r0, r3
 800f720:	f7ff ffca 	bl	800f6b8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800f724:	bf00      	nop
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <_ZN11TouchGFXHAL10initializeEv>:
 */
//#error "A user must call touchgfx::startNewTransfer(); once touchgfxDisplayDriverTransmitBlock() has succesfully sent a block."
//#error "A user must implement C-methods touchgfxDisplayDriverTransmitActive() and touchgfxDisplayDriverTransmitBlock() used by the Partial Framebuffer Strategy."

void TouchGFXHAL::initialize()
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b082      	sub	sp, #8
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	4618      	mov	r0, r3
 800f738:	f001 f8be 	bl	80108b8 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800f73c:	bf00      	nop
 800f73e:	3708      	adds	r7, #8
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	4618      	mov	r0, r3
 800f750:	f001 f922 	bl	8010998 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800f754:	4603      	mov	r3, r0
}
 800f756:	4618      	mov	r0, r3
 800f758:	3708      	adds	r7, #8
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}

0800f75e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800f75e:	b580      	push	{r7, lr}
 800f760:	b082      	sub	sp, #8
 800f762:	af00      	add	r7, sp, #0
 800f764:	6078      	str	r0, [r7, #4]
 800f766:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6839      	ldr	r1, [r7, #0]
 800f76c:	4618      	mov	r0, r3
 800f76e:	f001 f91e 	bl	80109ae <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800f772:	bf00      	nop
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}

0800f77a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800f77a:	b580      	push	{r7, lr}
 800f77c:	b082      	sub	sp, #8
 800f77e:	af00      	add	r7, sp, #0
 800f780:	6078      	str	r0, [r7, #4]
 800f782:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6839      	ldr	r1, [r7, #0]
 800f788:	4618      	mov	r0, r3
 800f78a:	f001 f91b 	bl	80109c4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800f78e:	bf00      	nop
 800f790:	3708      	adds	r7, #8
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}

0800f796 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800f796:	b580      	push	{r7, lr}
 800f798:	b084      	sub	sp, #16
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	60f8      	str	r0, [r7, #12]
 800f79e:	60b9      	str	r1, [r7, #8]
 800f7a0:	607a      	str	r2, [r7, #4]
 800f7a2:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800f7a4:	68f8      	ldr	r0, [r7, #12]
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	687a      	ldr	r2, [r7, #4]
 800f7aa:	68b9      	ldr	r1, [r7, #8]
 800f7ac:	f001 f94d 	bl	8010a4a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800f7b0:	4603      	mov	r3, r0
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3710      	adds	r7, #16
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800f7ba:	b580      	push	{r7, lr}
 800f7bc:	b082      	sub	sp, #8
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f001 f89b 	bl	8010900 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800f7ca:	bf00      	nop
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800f7d2:	b580      	push	{r7, lr}
 800f7d4:	b082      	sub	sp, #8
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f001 f899 	bl	8010914 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800f7e2:	bf00      	nop
 800f7e4:	3708      	adds	r7, #8
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}

0800f7ea <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800f7ea:	b580      	push	{r7, lr}
 800f7ec:	b082      	sub	sp, #8
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f001 f897 	bl	8010928 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800f7fa:	bf00      	nop
 800f7fc:	3708      	adds	r7, #8
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}

0800f802 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800f802:	b580      	push	{r7, lr}
 800f804:	b082      	sub	sp, #8
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	4618      	mov	r0, r3
 800f80e:	f001 f895 	bl	801093c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800f812:	bf00      	nop
 800f814:	3708      	adds	r7, #8
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}

0800f81a <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800f81a:	b580      	push	{r7, lr}
 800f81c:	b082      	sub	sp, #8
 800f81e:	af00      	add	r7, sp, #0
 800f820:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4618      	mov	r0, r3
 800f826:	f001 f893 	bl	8010950 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800f82a:	4603      	mov	r3, r0
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	4618      	mov	r0, r3
 800f840:	f001 f893 	bl	801096a <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 800f844:	bf00      	nop
 800f846:	3708      	adds	r7, #8
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	4a05      	ldr	r2, [pc, #20]	; (800f86c <_ZN11TouchGFXHALD1Ev+0x20>)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	601a      	str	r2, [r3, #0]
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7ff ff37 	bl	800f6d0 <_ZN20TouchGFXGeneratedHALD1Ev>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	4618      	mov	r0, r3
 800f866:	3708      	adds	r7, #8
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	08029fbc 	.word	0x08029fbc

0800f870 <_ZN11TouchGFXHALD0Ev>:
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f7ff ffe7 	bl	800f84c <_ZN11TouchGFXHALD1Ev>
 800f87e:	217c      	movs	r1, #124	; 0x7c
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f016 faff 	bl	8025e84 <_ZdlPvj>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4618      	mov	r0, r3
 800f88a:	3708      	adds	r7, #8
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <touchgfxDisplayDriverTransmitActive>:
extern void DisplayDriver_TransferCompleteCallback();

static uint8_t isTransmittingData = 0;

uint32_t touchgfxDisplayDriverTransmitActive(void)
{
 800f890:	b480      	push	{r7}
 800f892:	af00      	add	r7, sp, #0
  return isTransmittingData;
 800f894:	4b03      	ldr	r3, [pc, #12]	; (800f8a4 <touchgfxDisplayDriverTransmitActive+0x14>)
 800f896:	781b      	ldrb	r3, [r3, #0]
}
 800f898:	4618      	mov	r0, r3
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr
 800f8a2:	bf00      	nop
 800f8a4:	20005460 	.word	0x20005460

0800f8a8 <touchgfxDisplayDriverTransmitBlock>:

void touchgfxDisplayDriverTransmitBlock(uint8_t* pixels, uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 800f8a8:	b590      	push	{r4, r7, lr}
 800f8aa:	b085      	sub	sp, #20
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	60f8      	str	r0, [r7, #12]
 800f8b0:	4608      	mov	r0, r1
 800f8b2:	4611      	mov	r1, r2
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	817b      	strh	r3, [r7, #10]
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	813b      	strh	r3, [r7, #8]
 800f8be:	4613      	mov	r3, r2
 800f8c0:	80fb      	strh	r3, [r7, #6]
  isTransmittingData = 1;
 800f8c2:	4b0f      	ldr	r3, [pc, #60]	; (800f900 <touchgfxDisplayDriverTransmitBlock+0x58>)
 800f8c4:	2201      	movs	r2, #1
 800f8c6:	701a      	strb	r2, [r3, #0]
  ILI9341_SetWindow(x, y, x+w-1, y+h-1);
 800f8c8:	897a      	ldrh	r2, [r7, #10]
 800f8ca:	88fb      	ldrh	r3, [r7, #6]
 800f8cc:	4413      	add	r3, r2
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	3b01      	subs	r3, #1
 800f8d2:	b29c      	uxth	r4, r3
 800f8d4:	893a      	ldrh	r2, [r7, #8]
 800f8d6:	8c3b      	ldrh	r3, [r7, #32]
 800f8d8:	4413      	add	r3, r2
 800f8da:	b29b      	uxth	r3, r3
 800f8dc:	3b01      	subs	r3, #1
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	8939      	ldrh	r1, [r7, #8]
 800f8e2:	8978      	ldrh	r0, [r7, #10]
 800f8e4:	4622      	mov	r2, r4
 800f8e6:	f7f0 ff6c 	bl	80007c2 <ILI9341_SetWindow>
  ILI9341_DrawBitmap(w, h, pixels);
 800f8ea:	8c39      	ldrh	r1, [r7, #32]
 800f8ec:	88fb      	ldrh	r3, [r7, #6]
 800f8ee:	68fa      	ldr	r2, [r7, #12]
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7f0 ffd1 	bl	8000898 <ILI9341_DrawBitmap>
}
 800f8f6:	bf00      	nop
 800f8f8:	3714      	adds	r7, #20
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd90      	pop	{r4, r7, pc}
 800f8fe:	bf00      	nop
 800f900:	20005460 	.word	0x20005460

0800f904 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI3) {
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4a06      	ldr	r2, [pc, #24]	; (800f92c <HAL_SPI_TxCpltCallback+0x28>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d106      	bne.n	800f924 <HAL_SPI_TxCpltCallback+0x20>
    ILI9341_EndOfDrawBitmap();
 800f916:	f7f0 ffe7 	bl	80008e8 <ILI9341_EndOfDrawBitmap>
    isTransmittingData = 0;
 800f91a:	4b05      	ldr	r3, [pc, #20]	; (800f930 <HAL_SPI_TxCpltCallback+0x2c>)
 800f91c:	2200      	movs	r2, #0
 800f91e:	701a      	strb	r2, [r3, #0]
    DisplayDriver_TransferCompleteCallback();
 800f920:	f001 f8ee 	bl	8010b00 <DisplayDriver_TransferCompleteCallback>
  }
}
 800f924:	bf00      	nop
 800f926:	3708      	adds	r7, #8
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}
 800f92c:	40003c00 	.word	0x40003c00
 800f930:	20005460 	.word	0x20005460

0800f934 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800f934:	b580      	push	{r7, lr}
 800f936:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800f938:	2200      	movs	r2, #0
 800f93a:	2101      	movs	r1, #1
 800f93c:	2001      	movs	r0, #1
 800f93e:	f7f6 fc0e 	bl	800615e <osSemaphoreNew>
 800f942:	4603      	mov	r3, r0
 800f944:	4a0f      	ldr	r2, [pc, #60]	; (800f984 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800f946:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800f948:	4b0e      	ldr	r3, [pc, #56]	; (800f984 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d105      	bne.n	800f95c <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800f950:	4b0d      	ldr	r3, [pc, #52]	; (800f988 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800f952:	4a0e      	ldr	r2, [pc, #56]	; (800f98c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800f954:	2128      	movs	r1, #40	; 0x28
 800f956:	480e      	ldr	r0, [pc, #56]	; (800f990 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800f958:	f017 f820 	bl	802699c <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800f95c:	2200      	movs	r2, #0
 800f95e:	2104      	movs	r1, #4
 800f960:	2001      	movs	r0, #1
 800f962:	f7f6 fd1b 	bl	800639c <osMessageQueueNew>
 800f966:	4603      	mov	r3, r0
 800f968:	4a0a      	ldr	r2, [pc, #40]	; (800f994 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800f96a:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800f96c:	4b09      	ldr	r3, [pc, #36]	; (800f994 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d105      	bne.n	800f980 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800f974:	4b08      	ldr	r3, [pc, #32]	; (800f998 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800f976:	4a05      	ldr	r2, [pc, #20]	; (800f98c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800f978:	212c      	movs	r1, #44	; 0x2c
 800f97a:	4805      	ldr	r0, [pc, #20]	; (800f990 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800f97c:	f017 f80e 	bl	802699c <__assert_func>
}
 800f980:	bf00      	nop
 800f982:	bd80      	pop	{r7, pc}
 800f984:	20005464 	.word	0x20005464
 800f988:	08028ab0 	.word	0x08028ab0
 800f98c:	08028afc 	.word	0x08028afc
 800f990:	08028b2c 	.word	0x08028b2c
 800f994:	20005468 	.word	0x20005468
 800f998:	08028b58 	.word	0x08028b58

0800f99c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800f9a0:	4b04      	ldr	r3, [pc, #16]	; (800f9b4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f04f 31ff 	mov.w	r1, #4294967295
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7f6 fc61 	bl	8006270 <osSemaphoreAcquire>
}
 800f9ae:	bf00      	nop
 800f9b0:	bd80      	pop	{r7, pc}
 800f9b2:	bf00      	nop
 800f9b4:	20005464 	.word	0x20005464

0800f9b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800f9bc:	4b03      	ldr	r3, [pc, #12]	; (800f9cc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7f6 fca7 	bl	8006314 <osSemaphoreRelease>
}
 800f9c6:	bf00      	nop
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	20005464 	.word	0x20005464

0800f9d0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800f9d4:	4b03      	ldr	r3, [pc, #12]	; (800f9e4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2100      	movs	r1, #0
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7f6 fc48 	bl	8006270 <osSemaphoreAcquire>
}
 800f9e0:	bf00      	nop
 800f9e2:	bd80      	pop	{r7, pc}
 800f9e4:	20005464 	.word	0x20005464

0800f9e8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800f9ec:	4b03      	ldr	r3, [pc, #12]	; (800f9fc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7f6 fc8f 	bl	8006314 <osSemaphoreRelease>
}
 800f9f6:	bf00      	nop
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	20005464 	.word	0x20005464

0800fa00 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800fa04:	4b04      	ldr	r3, [pc, #16]	; (800fa18 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800fa06:	6818      	ldr	r0, [r3, #0]
 800fa08:	2300      	movs	r3, #0
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	4903      	ldr	r1, [pc, #12]	; (800fa1c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800fa0e:	f7f6 fd39 	bl	8006484 <osMessageQueuePut>
}
 800fa12:	bf00      	nop
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	20005468 	.word	0x20005468
 800fa1c:	20000018 	.word	0x20000018

0800fa20 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800fa26:	4b09      	ldr	r3, [pc, #36]	; (800fa4c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800fa28:	6818      	ldr	r0, [r3, #0]
 800fa2a:	1d39      	adds	r1, r7, #4
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	2200      	movs	r2, #0
 800fa30:	f7f6 fd88 	bl	8006544 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800fa34:	4b05      	ldr	r3, [pc, #20]	; (800fa4c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800fa36:	6818      	ldr	r0, [r3, #0]
 800fa38:	1d39      	adds	r1, r7, #4
 800fa3a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa3e:	2200      	movs	r2, #0
 800fa40:	f7f6 fd80 	bl	8006544 <osMessageQueueGet>
}
 800fa44:	bf00      	nop
 800fa46:	3708      	adds	r7, #8
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}
 800fa4c:	20005468 	.word	0x20005468

0800fa50 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
    {
 800fa58:	4a04      	ldr	r2, [pc, #16]	; (800fa6c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	601a      	str	r2, [r3, #0]
    }
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	4618      	mov	r0, r3
 800fa62:	370c      	adds	r7, #12
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr
 800fa6c:	0802a0e4 	.word	0x0802a0e4

0800fa70 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
    }
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f7ff ffe9 	bl	800fa50 <_ZN8touchgfx9DMA_QueueD1Ev>
 800fa7e:	2104      	movs	r1, #4
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f016 f9ff 	bl	8025e84 <_ZdlPvj>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3708      	adds	r7, #8
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}

0800fa90 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 800fa90:	b480      	push	{r7}
 800fa92:	b083      	sub	sp, #12
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
    {
    }
 800fa98:	bf00      	nop
 800fa9a:	370c      	adds	r7, #12
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr

0800faa4 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 800faa4:	b480      	push	{r7}
 800faa6:	b083      	sub	sp, #12
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800faac:	2300      	movs	r3, #0
    }
 800faae:	4618      	mov	r0, r3
 800fab0:	370c      	adds	r7, #12
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr
	...

0800fabc <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
    {
 800fac4:	4a04      	ldr	r2, [pc, #16]	; (800fad8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	601a      	str	r2, [r3, #0]
    }
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	4618      	mov	r0, r3
 800face:	370c      	adds	r7, #12
 800fad0:	46bd      	mov	sp, r7
 800fad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad6:	4770      	bx	lr
 800fad8:	0802a4b4 	.word	0x0802a4b4

0800fadc <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
    }
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f7ff ffe9 	bl	800fabc <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800faea:	210c      	movs	r1, #12
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f016 f9c9 	bl	8025e84 <_ZdlPvj>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	4618      	mov	r0, r3
 800faf6:	3708      	adds	r7, #8
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800fafc:	b480      	push	{r7}
 800fafe:	b083      	sub	sp, #12
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800fb06:	4a09      	ldr	r2, [pc, #36]	; (800fb2c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	601a      	str	r2, [r3, #0]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	683a      	ldr	r2, [r7, #0]
 800fb10:	605a      	str	r2, [r3, #4]
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2200      	movs	r2, #0
 800fb16:	721a      	strb	r2, [r3, #8]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	725a      	strb	r2, [r3, #9]
    {
    }
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	4618      	mov	r0, r3
 800fb22:	370c      	adds	r7, #12
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr
 800fb2c:	0802a4b4 	.word	0x0802a4b4

0800fb30 <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 800fb30:	b480      	push	{r7}
 800fb32:	b083      	sub	sp, #12
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
    {
    }
 800fb38:	bf00      	nop
 800fb3a:	370c      	adds	r7, #12
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr

0800fb44 <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
    {
    }
 800fb4c:	bf00      	nop
 800fb4e:	370c      	adds	r7, #12
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr

0800fb58 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	330c      	adds	r3, #12
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7fa fe53 	bl	800a810 <_ZN8touchgfx9colortypeC1Ev>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3708      	adds	r7, #8
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	330c      	adds	r3, #12
 800fb82:	4619      	mov	r1, r3
 800fb84:	4610      	mov	r0, r2
 800fb86:	f7ff ffb9 	bl	800fafc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800fb8a:	4a0b      	ldr	r2, [pc, #44]	; (800fbb8 <_ZN8STM32DMAC1Ev+0x44>)
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	601a      	str	r2, [r3, #0]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f103 000c 	add.w	r0, r3, #12
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	3320      	adds	r3, #32
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	f002 fbff 	bl	80123a0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	3320      	adds	r3, #32
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7ff ffd6 	bl	800fb58 <_ZN8touchgfx6BlitOpC1Ev>
{
}
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3708      	adds	r7, #8
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	0802a094 	.word	0x0802a094

0800fbbc <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b083      	sub	sp, #12
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 800fbc4:	2300      	movs	r3, #0
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	370c      	adds	r7, #12
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr
	...

0800fbd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 800fbde:	4b03      	ldr	r3, [pc, #12]	; (800fbec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 800fbe0:	4a03      	ldr	r2, [pc, #12]	; (800fbf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 800fbe2:	2122      	movs	r1, #34	; 0x22
 800fbe4:	4803      	ldr	r0, [pc, #12]	; (800fbf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 800fbe6:	f016 fed9 	bl	802699c <__assert_func>
 800fbea:	bf00      	nop
 800fbec:	08028b9c 	.word	0x08028b9c
 800fbf0:	08028bc0 	.word	0x08028bc0
 800fbf4:	08028c00 	.word	0x08028c00

0800fbf8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 800fc02:	4b03      	ldr	r3, [pc, #12]	; (800fc10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 800fc04:	4a03      	ldr	r2, [pc, #12]	; (800fc14 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 800fc06:	2127      	movs	r1, #39	; 0x27
 800fc08:	4803      	ldr	r0, [pc, #12]	; (800fc18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 800fc0a:	f016 fec7 	bl	802699c <__assert_func>
 800fc0e:	bf00      	nop
 800fc10:	08028b9c 	.word	0x08028b9c
 800fc14:	08028c2c 	.word	0x08028c2c
 800fc18:	08028c00 	.word	0x08028c00

0800fc1c <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	4a08      	ldr	r2, [pc, #32]	; (800fc48 <_ZN8STM32DMAD1Ev+0x2c>)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	601a      	str	r2, [r3, #0]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	330c      	adds	r3, #12
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f000 f81c 	bl	800fc6c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7ff ff40 	bl	800fabc <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3708      	adds	r7, #8
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop
 800fc48:	0802a094 	.word	0x0802a094

0800fc4c <_ZN8STM32DMAD0Ev>:
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f7ff ffe1 	bl	800fc1c <_ZN8STM32DMAD1Ev>
 800fc5a:	2144      	movs	r1, #68	; 0x44
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f016 f911 	bl	8025e84 <_ZdlPvj>
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	4618      	mov	r0, r3
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	4a05      	ldr	r2, [pc, #20]	; (800fc8c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	601a      	str	r2, [r3, #0]
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7ff fee7 	bl	800fa50 <_ZN8touchgfx9DMA_QueueD1Ev>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	4618      	mov	r0, r3
 800fc86:	3708      	adds	r7, #8
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}
 800fc8c:	0802a504 	.word	0x0802a504

0800fc90 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f7ff ffe7 	bl	800fc6c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800fc9e:	2114      	movs	r1, #20
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f016 f8ef 	bl	8025e84 <_ZdlPvj>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3708      	adds	r7, #8
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800fcb8:	4a04      	ldr	r2, [pc, #16]	; (800fccc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6013      	str	r3, [r2, #0]
    }
 800fcbe:	bf00      	nop
 800fcc0:	370c      	adds	r7, #12
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr
 800fcca:	bf00      	nop
 800fccc:	2000886c 	.word	0x2000886c

0800fcd0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800fcd0:	b480      	push	{r7}
 800fcd2:	b085      	sub	sp, #20
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	607a      	str	r2, [r7, #4]
 800fcdc:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800fcde:	4a0b      	ldr	r2, [pc, #44]	; (800fd0c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	601a      	str	r2, [r3, #0]
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	68ba      	ldr	r2, [r7, #8]
 800fce8:	605a      	str	r2, [r3, #4]
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	687a      	ldr	r2, [r7, #4]
 800fcee:	609a      	str	r2, [r3, #8]
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	683a      	ldr	r2, [r7, #0]
 800fcf4:	60da      	str	r2, [r3, #12]
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	69ba      	ldr	r2, [r7, #24]
 800fcfa:	611a      	str	r2, [r3, #16]
    {
    }
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3714      	adds	r7, #20
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr
 800fd0a:	bf00      	nop
 800fd0c:	0802a1cc 	.word	0x0802a1cc

0800fd10 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800fd10:	b480      	push	{r7}
 800fd12:	b083      	sub	sp, #12
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
    {
 800fd18:	4a04      	ldr	r2, [pc, #16]	; (800fd2c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	601a      	str	r2, [r3, #0]
    }
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	4618      	mov	r0, r3
 800fd22:	370c      	adds	r7, #12
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr
 800fd2c:	0802a1cc 	.word	0x0802a1cc

0800fd30 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
    }
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f7ff ffe9 	bl	800fd10 <_ZN8touchgfx7MVPHeapD1Ev>
 800fd3e:	2114      	movs	r1, #20
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f016 f89f 	bl	8025e84 <_ZdlPvj>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800fd50:	b480      	push	{r7}
 800fd52:	b083      	sub	sp, #12
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
    {
 800fd58:	4a04      	ldr	r2, [pc, #16]	; (800fd6c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	601a      	str	r2, [r3, #0]
    }
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	4618      	mov	r0, r3
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr
 800fd6c:	0802aec4 	.word	0x0802aec4

0800fd70 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
    }
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f7ff ffe9 	bl	800fd50 <_ZN8touchgfx3LCDD1Ev>
 800fd7e:	2108      	movs	r1, #8
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f016 f87f 	bl	8025e84 <_ZdlPvj>
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3708      	adds	r7, #8
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	801a      	strh	r2, [r3, #0]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2200      	movs	r2, #0
 800fda2:	805a      	strh	r2, [r3, #2]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2200      	movs	r2, #0
 800fda8:	809a      	strh	r2, [r3, #4]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2200      	movs	r2, #0
 800fdae:	80da      	strh	r2, [r3, #6]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	811a      	strh	r2, [r3, #8]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	815a      	strh	r2, [r3, #10]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	819a      	strh	r2, [r3, #12]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	739a      	strb	r2, [r3, #14]
        {
        }
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	370c      	adds	r7, #12
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd4:	4770      	bx	lr

0800fdd6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800fdd6:	b580      	push	{r7, lr}
 800fdd8:	b082      	sub	sp, #8
 800fdda:	af00      	add	r7, sp, #0
 800fddc:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	4618      	mov	r0, r3
 800fde2:	f7ff ffd5 	bl	800fd90 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2200      	movs	r2, #0
 800fdea:	611a      	str	r2, [r3, #16]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	829a      	strh	r2, [r3, #20]
    {
    }
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3708      	adds	r7, #8
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	60f8      	str	r0, [r7, #12]
 800fe04:	60b9      	str	r1, [r7, #8]
 800fe06:	607a      	str	r2, [r7, #4]
 800fe08:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800fe0a:	4a55      	ldr	r2, [pc, #340]	; (800ff60 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	601a      	str	r2, [r3, #0]
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	68ba      	ldr	r2, [r7, #8]
 800fe14:	605a      	str	r2, [r3, #4]
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	687a      	ldr	r2, [r7, #4]
 800fe1a:	609a      	str	r2, [r3, #8]
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	683a      	ldr	r2, [r7, #0]
 800fe20:	60da      	str	r2, [r3, #12]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	2200      	movs	r2, #0
 800fe26:	611a      	str	r2, [r3, #16]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	615a      	str	r2, [r3, #20]
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2200      	movs	r2, #0
 800fe32:	619a      	str	r2, [r3, #24]
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	331c      	adds	r3, #28
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f7ff ffcc 	bl	800fdd6 <_ZN8touchgfx8GesturesC1Ev>
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	2200      	movs	r2, #0
 800fe42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	639a      	str	r2, [r3, #56]	; 0x38
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	63da      	str	r2, [r3, #60]	; 0x3c
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	2200      	movs	r2, #0
 800fe56:	641a      	str	r2, [r3, #64]	; 0x40
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	645a      	str	r2, [r3, #68]	; 0x44
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	2200      	movs	r2, #0
 800fe62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2201      	movs	r2, #1
 800fe6a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2200      	movs	r2, #0
 800fe72:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2200      	movs	r2, #0
 800fe82:	64da      	str	r2, [r3, #76]	; 0x4c
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	3350      	adds	r3, #80	; 0x50
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f7fa fcea 	bl	800a862 <_ZN8touchgfx4RectC1Ev>
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	2200      	movs	r2, #0
 800fe92:	659a      	str	r2, [r3, #88]	; 0x58
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2200      	movs	r2, #0
 800fe98:	65da      	str	r2, [r3, #92]	; 0x5c
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	661a      	str	r2, [r3, #96]	; 0x60
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	2201      	movs	r2, #1
 800fea4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2200      	movs	r2, #0
 800feac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2200      	movs	r2, #0
 800feb4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2201      	movs	r2, #1
 800febc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	2200      	movs	r2, #0
 800fec4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	2200      	movs	r2, #0
 800fecc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	2200      	movs	r2, #0
 800fed4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	2200      	movs	r2, #0
 800fedc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2200      	movs	r2, #0
 800fee4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	2200      	movs	r2, #0
 800feec:	671a      	str	r2, [r3, #112]	; 0x70
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	2200      	movs	r2, #0
 800fef2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2200      	movs	r2, #0
 800fefa:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	2200      	movs	r2, #0
 800ff02:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2201      	movs	r2, #1
 800ff0a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	2201      	movs	r2, #1
 800ff12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 800ff16:	4a13      	ldr	r2, [pc, #76]	; (800ff64 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800ff1c:	4a12      	ldr	r2, [pc, #72]	; (800ff68 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800ff1e:	8b3b      	ldrh	r3, [r7, #24]
 800ff20:	8013      	strh	r3, [r2, #0]
 800ff22:	4b11      	ldr	r3, [pc, #68]	; (800ff68 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800ff24:	881a      	ldrh	r2, [r3, #0]
 800ff26:	4b11      	ldr	r3, [pc, #68]	; (800ff6c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800ff28:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800ff2a:	4a11      	ldr	r2, [pc, #68]	; (800ff70 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800ff2c:	8bbb      	ldrh	r3, [r7, #28]
 800ff2e:	8013      	strh	r3, [r2, #0]
 800ff30:	4b0f      	ldr	r3, [pc, #60]	; (800ff70 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800ff32:	881a      	ldrh	r2, [r3, #0]
 800ff34:	4b0f      	ldr	r3, [pc, #60]	; (800ff74 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800ff36:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800ff38:	4b0f      	ldr	r3, [pc, #60]	; (800ff78 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800ff3e:	8b3a      	ldrh	r2, [r7, #24]
 800ff40:	8bbb      	ldrh	r3, [r7, #28]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	bf34      	ite	cc
 800ff46:	2301      	movcc	r3, #1
 800ff48:	2300      	movcs	r3, #0
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	4618      	mov	r0, r3
 800ff58:	3710      	adds	r7, #16
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	0802a3dc 	.word	0x0802a3dc
 800ff64:	20008808 	.word	0x20008808
 800ff68:	200087fc 	.word	0x200087fc
 800ff6c:	20008802 	.word	0x20008802
 800ff70:	200087fe 	.word	0x200087fe
 800ff74:	20008804 	.word	0x20008804
 800ff78:	20008800 	.word	0x20008800

0800ff7c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7fa f9af 	bl	800a2ec <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800ff8e:	bf00      	nop
 800ff90:	3708      	adds	r7, #8
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}
	...

0800ff98 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b086      	sub	sp, #24
 800ff9c:	af02      	add	r7, sp, #8
 800ff9e:	60f8      	str	r0, [r7, #12]
 800ffa0:	60b9      	str	r1, [r7, #8]
 800ffa2:	607a      	str	r2, [r7, #4]
 800ffa4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800ffa6:	68f8      	ldr	r0, [r7, #12]
 800ffa8:	69bb      	ldr	r3, [r7, #24]
 800ffaa:	9300      	str	r3, [sp, #0]
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	68b9      	ldr	r1, [r7, #8]
 800ffb2:	f7ff fe8d 	bl	800fcd0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800ffb6:	4a04      	ldr	r2, [pc, #16]	; (800ffc8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	601a      	str	r2, [r3, #0]
    {

    }
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3710      	adds	r7, #16
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	0802a1b8 	.word	0x0802a1b8

0800ffcc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	4801      	ldr	r0, [pc, #4]	; (800ffd8 <__tcf_0+0xc>)
 800ffd2:	f000 f967 	bl	80102a4 <_ZN12FrontendHeapD1Ev>
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	2000546c 	.word	0x2000546c

0800ffdc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800ffe0:	4b12      	ldr	r3, [pc, #72]	; (801002c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	f3bf 8f5b 	dmb	ish
 800ffe8:	b2db      	uxtb	r3, r3
 800ffea:	f003 0301 	and.w	r3, r3, #1
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	bf0c      	ite	eq
 800fff2:	2301      	moveq	r3, #1
 800fff4:	2300      	movne	r3, #0
 800fff6:	b2db      	uxtb	r3, r3
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d013      	beq.n	8010024 <_ZN12FrontendHeap11getInstanceEv+0x48>
 800fffc:	480b      	ldr	r0, [pc, #44]	; (801002c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800fffe:	f015 ff43 	bl	8025e88 <__cxa_guard_acquire>
 8010002:	4603      	mov	r3, r0
 8010004:	2b00      	cmp	r3, #0
 8010006:	bf14      	ite	ne
 8010008:	2301      	movne	r3, #1
 801000a:	2300      	moveq	r3, #0
 801000c:	b2db      	uxtb	r3, r3
 801000e:	2b00      	cmp	r3, #0
 8010010:	d008      	beq.n	8010024 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8010012:	4807      	ldr	r0, [pc, #28]	; (8010030 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8010014:	f000 f868 	bl	80100e8 <_ZN12FrontendHeapC1Ev>
 8010018:	4806      	ldr	r0, [pc, #24]	; (8010034 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 801001a:	f016 fcdd 	bl	80269d8 <atexit>
 801001e:	4803      	ldr	r0, [pc, #12]	; (801002c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8010020:	f015 ff3e 	bl	8025ea0 <__cxa_guard_release>
        return instance;
 8010024:	4b02      	ldr	r3, [pc, #8]	; (8010030 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8010026:	4618      	mov	r0, r3
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	20007010 	.word	0x20007010
 8010030:	2000546c 	.word	0x2000546c
 8010034:	0800ffcd 	.word	0x0800ffcd

08010038 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	4a05      	ldr	r2, [pc, #20]	; (8010058 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	601a      	str	r2, [r3, #0]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4618      	mov	r0, r3
 801004a:	f7ff fe61 	bl	800fd10 <_ZN8touchgfx7MVPHeapD1Ev>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	4618      	mov	r0, r3
 8010052:	3708      	adds	r7, #8
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}
 8010058:	0802a1b8 	.word	0x0802a1b8

0801005c <_ZN16FrontendHeapBaseD0Ev>:
 801005c:	b580      	push	{r7, lr}
 801005e:	b082      	sub	sp, #8
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f7ff ffe7 	bl	8010038 <_ZN16FrontendHeapBaseD1Ev>
 801006a:	2114      	movs	r1, #20
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f015 ff09 	bl	8025e84 <_ZdlPvj>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	4618      	mov	r0, r3
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}

0801007c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	4618      	mov	r0, r3
 8010088:	f000 fff4 	bl	8011074 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801008c:	4a03      	ldr	r2, [pc, #12]	; (801009c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	601a      	str	r2, [r3, #0]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4618      	mov	r0, r3
 8010096:	3708      	adds	r7, #8
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	0802a184 	.word	0x0802a184

080100a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	4618      	mov	r0, r3
 80100ac:	f000 ffe2 	bl	8011074 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80100b0:	4a03      	ldr	r2, [pc, #12]	; (80100c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	601a      	str	r2, [r3, #0]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	4618      	mov	r0, r3
 80100ba:	3708      	adds	r7, #8
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}
 80100c0:	0802a150 	.word	0x0802a150

080100c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	4618      	mov	r0, r3
 80100d0:	f000 ffd0 	bl	8011074 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80100d4:	4a03      	ldr	r2, [pc, #12]	; (80100e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	601a      	str	r2, [r3, #0]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	4618      	mov	r0, r3
 80100de:	3708      	adds	r7, #8
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}
 80100e4:	0802a11c 	.word	0x0802a11c

080100e8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80100e8:	b590      	push	{r4, r7, lr}
 80100ea:	b085      	sub	sp, #20
 80100ec:	af02      	add	r7, sp, #8
 80100ee:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f103 0114 	add.w	r1, r3, #20
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f503 52cf 	add.w	r2, r3, #6624	; 0x19e0
 8010104:	3218      	adds	r2, #24
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f503 53d2 	add.w	r3, r3, #6720	; 0x1a40
 801010c:	330c      	adds	r3, #12
                     app(model, *this)
 801010e:	9300      	str	r3, [sp, #0]
 8010110:	4613      	mov	r3, r2
 8010112:	4622      	mov	r2, r4
 8010114:	f7ff ff40 	bl	800ff98 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8010118:	4a1a      	ldr	r2, [pc, #104]	; (8010184 <_ZN12FrontendHeapC1Ev+0x9c>)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	601a      	str	r2, [r3, #0]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	3314      	adds	r3, #20
 8010122:	4618      	mov	r0, r3
 8010124:	f7ff ffaa 	bl	801007c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	332c      	adds	r3, #44	; 0x2c
 801012c:	4618      	mov	r0, r3
 801012e:	f7ff ffb7 	bl	80100a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f503 53cf 	add.w	r3, r3, #6624	; 0x19e0
 8010138:	3318      	adds	r3, #24
 801013a:	4618      	mov	r0, r3
 801013c:	f7ff ffc2 	bl	80100c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8010146:	330c      	adds	r3, #12
 8010148:	4618      	mov	r0, r3
 801014a:	f7fe fd0b 	bl	800eb64 <_ZN5ModelC1Ev>
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f503 53d2 	add.w	r3, r3, #6720	; 0x1a40
 8010154:	330c      	adds	r3, #12
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	f502 51d0 	add.w	r1, r2, #6656	; 0x1a00
 801015c:	310c      	adds	r1, #12
 801015e:	687a      	ldr	r2, [r7, #4]
 8010160:	4618      	mov	r0, r3
 8010162:	f7fe fce9 	bl	800eb38 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8010166:	687a      	ldr	r2, [r7, #4]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f503 53d2 	add.w	r3, r3, #6720	; 0x1a40
 801016e:	330c      	adds	r3, #12
 8010170:	4619      	mov	r1, r3
 8010172:	4610      	mov	r0, r2
 8010174:	f7ff ff02 	bl	800ff7c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	4618      	mov	r0, r3
 801017c:	370c      	adds	r7, #12
 801017e:	46bd      	mov	sp, r7
 8010180:	bd90      	pop	{r4, r7, pc}
 8010182:	bf00      	nop
 8010184:	0802a108 	.word	0x0802a108

08010188 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8010188:	b580      	push	{r7, lr}
 801018a:	b086      	sub	sp, #24
 801018c:	af02      	add	r7, sp, #8
 801018e:	60f8      	str	r0, [r7, #12]
 8010190:	60b9      	str	r1, [r7, #8]
 8010192:	607a      	str	r2, [r7, #4]
 8010194:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8010196:	68f8      	ldr	r0, [r7, #12]
 8010198:	8bbb      	ldrh	r3, [r7, #28]
 801019a:	9301      	str	r3, [sp, #4]
 801019c:	8b3b      	ldrh	r3, [r7, #24]
 801019e:	9300      	str	r3, [sp, #0]
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	68b9      	ldr	r1, [r7, #8]
 80101a6:	f7ff fe29 	bl	800fdfc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80101aa:	4a04      	ldr	r2, [pc, #16]	; (80101bc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	601a      	str	r2, [r3, #0]
    }
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	4618      	mov	r0, r3
 80101b4:	3710      	adds	r7, #16
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	0802a208 	.word	0x0802a208

080101c0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b086      	sub	sp, #24
 80101c4:	af02      	add	r7, sp, #8
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	607a      	str	r2, [r7, #4]
 80101cc:	603b      	str	r3, [r7, #0]
 80101ce:	68f8      	ldr	r0, [r7, #12]
 80101d0:	8bbb      	ldrh	r3, [r7, #28]
 80101d2:	9301      	str	r3, [sp, #4]
 80101d4:	8b3b      	ldrh	r3, [r7, #24]
 80101d6:	9300      	str	r3, [sp, #0]
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	68b9      	ldr	r1, [r7, #8]
 80101de:	f7ff ffd3 	bl	8010188 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80101e2:	4a04      	ldr	r2, [pc, #16]	; (80101f4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	601a      	str	r2, [r3, #0]
    }
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	4618      	mov	r0, r3
 80101ec:	3710      	adds	r7, #16
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	08029fbc 	.word	0x08029fbc

080101f8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80101f8:	b480      	push	{r7}
 80101fa:	b083      	sub	sp, #12
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	4a04      	ldr	r2, [pc, #16]	; (8010214 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	601a      	str	r2, [r3, #0]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	4618      	mov	r0, r3
 801020a:	370c      	adds	r7, #12
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr
 8010214:	08029fa4 	.word	0x08029fa4

08010218 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController(){};
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	4618      	mov	r0, r3
 8010224:	f7ff ffe8 	bl	80101f8 <_ZN8touchgfx15TouchControllerC1Ev>
 8010228:	4a03      	ldr	r2, [pc, #12]	; (8010238 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	601a      	str	r2, [r3, #0]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	4618      	mov	r0, r3
 8010232:	3708      	adds	r7, #8
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}
 8010238:	08029f8c 	.word	0x08029f8c

0801023c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 320, 240);

void touchgfx_init()
{
 801023c:	b590      	push	{r4, r7, lr}
 801023e:	b085      	sub	sp, #20
 8010240:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8010242:	f7fe fa49 	bl	800e6d8 <_ZN14BitmapDatabase11getInstanceEv>
 8010246:	4604      	mov	r4, r0
 8010248:	f7fe fa50 	bl	800e6ec <_ZN14BitmapDatabase15getInstanceSizeEv>
 801024c:	4603      	mov	r3, r0
 801024e:	4619      	mov	r1, r3
 8010250:	2300      	movs	r3, #0
 8010252:	9300      	str	r3, [sp, #0]
 8010254:	2300      	movs	r3, #0
 8010256:	2200      	movs	r2, #0
 8010258:	4620      	mov	r0, r4
 801025a:	f009 fd1d 	bl	8019c98 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801025e:	4809      	ldr	r0, [pc, #36]	; (8010284 <touchgfx_init+0x48>)
 8010260:	f7ff fd26 	bl	800fcb0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8010264:	2000      	movs	r0, #0
 8010266:	f7fe fb85 	bl	800e974 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801026a:	4807      	ldr	r0, [pc, #28]	; (8010288 <touchgfx_init+0x4c>)
 801026c:	f009 fc7c 	bl	8019b68 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8010270:	f7ff feb4 	bl	800ffdc <_ZN12FrontendHeap11getInstanceEv>
 8010274:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8010276:	4805      	ldr	r0, [pc, #20]	; (801028c <touchgfx_init+0x50>)
 8010278:	f7ff fa58 	bl	800f72c <_ZN11TouchGFXHAL10initializeEv>
}
 801027c:	bf00      	nop
 801027e:	370c      	adds	r7, #12
 8010280:	46bd      	mov	sp, r7
 8010282:	bd90      	pop	{r4, r7, pc}
 8010284:	200070d4 	.word	0x200070d4
 8010288:	2000001c 	.word	0x2000001c
 801028c:	200070d8 	.word	0x200070d8

08010290 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 8010290:	b580      	push	{r7, lr}
 8010292:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8010294:	4802      	ldr	r0, [pc, #8]	; (80102a0 <touchgfx_taskEntry+0x10>)
 8010296:	f001 f9fe 	bl	8011696 <_ZN8touchgfx3HAL9taskEntryEv>
}
 801029a:	bf00      	nop
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	200070d8 	.word	0x200070d8

080102a4 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	4a11      	ldr	r2, [pc, #68]	; (80102f4 <_ZN12FrontendHeapD1Ev+0x50>)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	601a      	str	r2, [r3, #0]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f503 53d2 	add.w	r3, r3, #6720	; 0x1a40
 80102b8:	330c      	adds	r3, #12
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7fe fc06 	bl	800eacc <_ZN19FrontendApplicationD1Ev>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f503 53cf 	add.w	r3, r3, #6624	; 0x19e0
 80102c6:	3318      	adds	r3, #24
 80102c8:	4618      	mov	r0, r3
 80102ca:	f000 f827 	bl	801031c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	332c      	adds	r3, #44	; 0x2c
 80102d2:	4618      	mov	r0, r3
 80102d4:	f000 f844 	bl	8010360 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	3314      	adds	r3, #20
 80102dc:	4618      	mov	r0, r3
 80102de:	f000 f863 	bl	80103a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7ff fea7 	bl	8010038 <_ZN16FrontendHeapBaseD1Ev>
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4618      	mov	r0, r3
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	0802a108 	.word	0x0802a108

080102f8 <_ZN12FrontendHeapD0Ev>:
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f7ff ffcf 	bl	80102a4 <_ZN12FrontendHeapD1Ev>
 8010306:	f641 31a4 	movw	r1, #7076	; 0x1ba4
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f015 fdba 	bl	8025e84 <_ZdlPvj>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	4618      	mov	r0, r3
 8010314:	3708      	adds	r7, #8
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}
	...

0801031c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	4a05      	ldr	r2, [pc, #20]	; (801033c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	601a      	str	r2, [r3, #0]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4618      	mov	r0, r3
 801032e:	f000 fea0 	bl	8011072 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4618      	mov	r0, r3
 8010336:	3708      	adds	r7, #8
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}
 801033c:	0802a11c 	.word	0x0802a11c

08010340 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f7ff ffe7 	bl	801031c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801034e:	2114      	movs	r1, #20
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f015 fd97 	bl	8025e84 <_ZdlPvj>
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	4618      	mov	r0, r3
 801035a:	3708      	adds	r7, #8
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8010360:	b580      	push	{r7, lr}
 8010362:	b082      	sub	sp, #8
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	4a05      	ldr	r2, [pc, #20]	; (8010380 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	601a      	str	r2, [r3, #0]
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	4618      	mov	r0, r3
 8010372:	f000 fe7e 	bl	8011072 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	4618      	mov	r0, r3
 801037a:	3708      	adds	r7, #8
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}
 8010380:	0802a150 	.word	0x0802a150

08010384 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010384:	b580      	push	{r7, lr}
 8010386:	b082      	sub	sp, #8
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f7ff ffe7 	bl	8010360 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010392:	f641 11cc 	movw	r1, #6604	; 0x19cc
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f015 fd74 	bl	8025e84 <_ZdlPvj>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4618      	mov	r0, r3
 80103a0:	3708      	adds	r7, #8
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
	...

080103a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	4a05      	ldr	r2, [pc, #20]	; (80103c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	601a      	str	r2, [r3, #0]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4618      	mov	r0, r3
 80103ba:	f000 fe5a 	bl	8011072 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4618      	mov	r0, r3
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	0802a184 	.word	0x0802a184

080103cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f7ff ffe7 	bl	80103a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80103da:	2118      	movs	r1, #24
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f015 fd51 	bl	8025e84 <_ZdlPvj>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4618      	mov	r0, r3
 80103e6:	3708      	adds	r7, #8
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b082      	sub	sp, #8
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	4a05      	ldr	r2, [pc, #20]	; (801040c <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	601a      	str	r2, [r3, #0]
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7ff fca7 	bl	800fd50 <_ZN8touchgfx3LCDD1Ev>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	4618      	mov	r0, r3
 8010406:	3708      	adds	r7, #8
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}
 801040c:	0802b2c8 	.word	0x0802b2c8

08010410 <_ZN8touchgfx8LCD16bppD0Ev>:
 8010410:	b580      	push	{r7, lr}
 8010412:	b082      	sub	sp, #8
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f7ff ffe7 	bl	80103ec <_ZN8touchgfx8LCD16bppD1Ev>
 801041e:	2178      	movs	r1, #120	; 0x78
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f015 fd2f 	bl	8025e84 <_ZdlPvj>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	4618      	mov	r0, r3
 801042a:	3708      	adds	r7, #8
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}

08010430 <_Z41__static_initialization_and_destruction_0ii>:
 8010430:	b580      	push	{r7, lr}
 8010432:	b084      	sub	sp, #16
 8010434:	af02      	add	r7, sp, #8
 8010436:	6078      	str	r0, [r7, #4]
 8010438:	6039      	str	r1, [r7, #0]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2b01      	cmp	r3, #1
 801043e:	d118      	bne.n	8010472 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010446:	4293      	cmp	r3, r2
 8010448:	d113      	bne.n	8010472 <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 801044a:	4817      	ldr	r0, [pc, #92]	; (80104a8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 801044c:	f7ff fee4 	bl	8010218 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8010450:	4816      	ldr	r0, [pc, #88]	; (80104ac <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010452:	f7ff fb8f 	bl	800fb74 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8010456:	4816      	ldr	r0, [pc, #88]	; (80104b0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010458:	f00c fd1e 	bl	801ce98 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 320, 240);
 801045c:	23f0      	movs	r3, #240	; 0xf0
 801045e:	9301      	str	r3, [sp, #4]
 8010460:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010464:	9300      	str	r3, [sp, #0]
 8010466:	4b10      	ldr	r3, [pc, #64]	; (80104a8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8010468:	4a11      	ldr	r2, [pc, #68]	; (80104b0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801046a:	4910      	ldr	r1, [pc, #64]	; (80104ac <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801046c:	4811      	ldr	r0, [pc, #68]	; (80104b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801046e:	f7ff fea7 	bl	80101c0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d113      	bne.n	80104a0 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801047e:	4293      	cmp	r3, r2
 8010480:	d10e      	bne.n	80104a0 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8010482:	480c      	ldr	r0, [pc, #48]	; (80104b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8010484:	f7ff f9e2 	bl	800f84c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8010488:	480b      	ldr	r0, [pc, #44]	; (80104b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801048a:	f7f9 f9b7 	bl	80097fc <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 801048e:	4808      	ldr	r0, [pc, #32]	; (80104b0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010490:	f7ff ffac 	bl	80103ec <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8010494:	4805      	ldr	r0, [pc, #20]	; (80104ac <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010496:	f7ff fbc1 	bl	800fc1c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 801049a:	4803      	ldr	r0, [pc, #12]	; (80104a8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 801049c:	f7fe ff26 	bl	800f2ec <_ZN20STM32TouchControllerD1Ev>
}
 80104a0:	bf00      	nop
 80104a2:	3708      	adds	r7, #8
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	20007014 	.word	0x20007014
 80104ac:	20007018 	.word	0x20007018
 80104b0:	2000705c 	.word	0x2000705c
 80104b4:	200070d8 	.word	0x200070d8
 80104b8:	2000001c 	.word	0x2000001c

080104bc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80104bc:	b480      	push	{r7}
 80104be:	b083      	sub	sp, #12
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80104c4:	2301      	movs	r3, #1
    }
 80104c6:	4618      	mov	r0, r3
 80104c8:	370c      	adds	r7, #12
 80104ca:	46bd      	mov	sp, r7
 80104cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d0:	4770      	bx	lr

080104d2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80104d2:	b480      	push	{r7}
 80104d4:	b083      	sub	sp, #12
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80104da:	230c      	movs	r3, #12
    }
 80104dc:	4618      	mov	r0, r3
 80104de:	370c      	adds	r7, #12
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80104e8:	b480      	push	{r7}
 80104ea:	b083      	sub	sp, #12
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	460b      	mov	r3, r1
 80104f2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80104f4:	887a      	ldrh	r2, [r7, #2]
 80104f6:	4613      	mov	r3, r2
 80104f8:	005b      	lsls	r3, r3, #1
 80104fa:	4413      	add	r3, r2
 80104fc:	009b      	lsls	r3, r3, #2
 80104fe:	3308      	adds	r3, #8
 8010500:	687a      	ldr	r2, [r7, #4]
 8010502:	4413      	add	r3, r2
    }
 8010504:	4618      	mov	r0, r3
 8010506:	370c      	adds	r7, #12
 8010508:	46bd      	mov	sp, r7
 801050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050e:	4770      	bx	lr

08010510 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8010510:	b480      	push	{r7}
 8010512:	b083      	sub	sp, #12
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	460b      	mov	r3, r1
 801051a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801051c:	887a      	ldrh	r2, [r7, #2]
 801051e:	4613      	mov	r3, r2
 8010520:	005b      	lsls	r3, r3, #1
 8010522:	4413      	add	r3, r2
 8010524:	009b      	lsls	r3, r3, #2
 8010526:	3308      	adds	r3, #8
 8010528:	687a      	ldr	r2, [r7, #4]
 801052a:	4413      	add	r3, r2
    }
 801052c:	4618      	mov	r0, r3
 801052e:	370c      	adds	r7, #12
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr

08010538 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8010538:	b480      	push	{r7}
 801053a:	b083      	sub	sp, #12
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8010540:	2301      	movs	r3, #1
    }
 8010542:	4618      	mov	r0, r3
 8010544:	370c      	adds	r7, #12
 8010546:	46bd      	mov	sp, r7
 8010548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054c:	4770      	bx	lr

0801054e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801054e:	b480      	push	{r7}
 8010550:	b083      	sub	sp, #12
 8010552:	af00      	add	r7, sp, #0
 8010554:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8010556:	f641 13c4 	movw	r3, #6596	; 0x19c4
    }
 801055a:	4618      	mov	r0, r3
 801055c:	370c      	adds	r7, #12
 801055e:	46bd      	mov	sp, r7
 8010560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010564:	4770      	bx	lr

08010566 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8010566:	b480      	push	{r7}
 8010568:	b083      	sub	sp, #12
 801056a:	af00      	add	r7, sp, #0
 801056c:	6078      	str	r0, [r7, #4]
 801056e:	460b      	mov	r3, r1
 8010570:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010572:	887b      	ldrh	r3, [r7, #2]
 8010574:	f641 12c4 	movw	r2, #6596	; 0x19c4
 8010578:	fb02 f303 	mul.w	r3, r2, r3
 801057c:	3308      	adds	r3, #8
 801057e:	687a      	ldr	r2, [r7, #4]
 8010580:	4413      	add	r3, r2
    }
 8010582:	4618      	mov	r0, r3
 8010584:	370c      	adds	r7, #12
 8010586:	46bd      	mov	sp, r7
 8010588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058c:	4770      	bx	lr

0801058e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801058e:	b480      	push	{r7}
 8010590:	b083      	sub	sp, #12
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
 8010596:	460b      	mov	r3, r1
 8010598:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801059a:	887b      	ldrh	r3, [r7, #2]
 801059c:	f641 12c4 	movw	r2, #6596	; 0x19c4
 80105a0:	fb02 f303 	mul.w	r3, r2, r3
 80105a4:	3308      	adds	r3, #8
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	4413      	add	r3, r2
    }
 80105aa:	4618      	mov	r0, r3
 80105ac:	370c      	adds	r7, #12
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr

080105b6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80105b6:	b480      	push	{r7}
 80105b8:	b083      	sub	sp, #12
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80105be:	2301      	movs	r3, #1
    }
 80105c0:	4618      	mov	r0, r3
 80105c2:	370c      	adds	r7, #12
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr

080105cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80105d4:	2310      	movs	r3, #16
    }
 80105d6:	4618      	mov	r0, r3
 80105d8:	370c      	adds	r7, #12
 80105da:	46bd      	mov	sp, r7
 80105dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e0:	4770      	bx	lr

080105e2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80105e2:	b480      	push	{r7}
 80105e4:	b083      	sub	sp, #12
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6078      	str	r0, [r7, #4]
 80105ea:	460b      	mov	r3, r1
 80105ec:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80105ee:	887b      	ldrh	r3, [r7, #2]
 80105f0:	011b      	lsls	r3, r3, #4
 80105f2:	3308      	adds	r3, #8
 80105f4:	687a      	ldr	r2, [r7, #4]
 80105f6:	4413      	add	r3, r2
    }
 80105f8:	4618      	mov	r0, r3
 80105fa:	370c      	adds	r7, #12
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	4770      	bx	lr

08010604 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8010604:	b480      	push	{r7}
 8010606:	b083      	sub	sp, #12
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	460b      	mov	r3, r1
 801060e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010610:	887b      	ldrh	r3, [r7, #2]
 8010612:	011b      	lsls	r3, r3, #4
 8010614:	3308      	adds	r3, #8
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	4413      	add	r3, r2
    }
 801061a:	4618      	mov	r0, r3
 801061c:	370c      	adds	r7, #12
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr

08010626 <_GLOBAL__sub_I_touchgfx_init>:
 8010626:	b580      	push	{r7, lr}
 8010628:	af00      	add	r7, sp, #0
 801062a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801062e:	2001      	movs	r0, #1
 8010630:	f7ff fefe 	bl	8010430 <_Z41__static_initialization_and_destruction_0ii>
 8010634:	bd80      	pop	{r7, pc}

08010636 <_GLOBAL__sub_D_touchgfx_init>:
 8010636:	b580      	push	{r7, lr}
 8010638:	af00      	add	r7, sp, #0
 801063a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801063e:	2000      	movs	r0, #0
 8010640:	f7ff fef6 	bl	8010430 <_Z41__static_initialization_and_destruction_0ii>
 8010644:	bd80      	pop	{r7, pc}
	...

08010648 <_ZN8touchgfx20FrameBufferAllocatorD1Ev>:
     * transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer() = 0;

    /** Finalizes an instance of the FrameBufferAllocator class. */
    virtual ~FrameBufferAllocator()
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
    {
 8010650:	4a04      	ldr	r2, [pc, #16]	; (8010664 <_ZN8touchgfx20FrameBufferAllocatorD1Ev+0x1c>)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	601a      	str	r2, [r3, #0]
    }
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	4618      	mov	r0, r3
 801065a:	370c      	adds	r7, #12
 801065c:	46bd      	mov	sp, r7
 801065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010662:	4770      	bx	lr
 8010664:	0802a2e0 	.word	0x0802a2e0

08010668 <_ZN8touchgfx20FrameBufferAllocatorD0Ev>:
    virtual ~FrameBufferAllocator()
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
    }
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f7ff ffe9 	bl	8010648 <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 8010676:	2104      	movs	r1, #4
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f015 fc03 	bl	8025e84 <_ZdlPvj>
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	4618      	mov	r0, r3
 8010682:	3708      	adds	r7, #8
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}

08010688 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8010688:	b480      	push	{r7}
 801068a:	b083      	sub	sp, #12
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8010696:	3301      	adds	r3, #1
 8010698:	b2da      	uxtb	r2, r3
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80106a0:	bf00      	nop
 80106a2:	370c      	adds	r7, #12
 80106a4:	46bd      	mov	sp, r7
 80106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106aa:	4770      	bx	lr

080106ac <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>:
    void setFrameBufferAllocator(FrameBufferAllocator* allocator)
 80106ac:	b480      	push	{r7}
 80106ae:	b083      	sub	sp, #12
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
        frameBufferAllocator = allocator;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	683a      	ldr	r2, [r7, #0]
 80106ba:	619a      	str	r2, [r3, #24]
    }
 80106bc:	bf00      	nop
 80106be:	370c      	adds	r7, #12
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr

080106c8 <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>:
    FrameBufferAllocator* getFrameBufferAllocator()
 80106c8:	b480      	push	{r7}
 80106ca:	b083      	sub	sp, #12
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
        return frameBufferAllocator;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	699b      	ldr	r3, [r3, #24]
    }
 80106d4:	4618      	mov	r0, r3
 80106d6:	370c      	adds	r7, #12
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr

080106e0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	460b      	mov	r3, r1
 80106ea:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80106ec:	78fb      	ldrb	r3, [r7, #3]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d002      	beq.n	80106f8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80106f2:	78fb      	ldrb	r3, [r7, #3]
 80106f4:	2b02      	cmp	r3, #2
 80106f6:	d105      	bne.n	8010704 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	78fa      	ldrb	r2, [r7, #3]
 80106fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8010700:	2301      	movs	r3, #1
 8010702:	e027      	b.n	8010754 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8010704:	78fb      	ldrb	r3, [r7, #3]
 8010706:	2b01      	cmp	r3, #1
 8010708:	d123      	bne.n	8010752 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801070e:	2b00      	cmp	r3, #0
 8010710:	d014      	beq.n	801073c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	339c      	adds	r3, #156	; 0x9c
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	4798      	blx	r3
 801071e:	4603      	mov	r3, r0
 8010720:	461a      	mov	r2, r3
 8010722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010726:	429a      	cmp	r2, r3
 8010728:	d008      	beq.n	801073c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801072a:	4b0c      	ldr	r3, [pc, #48]	; (801075c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	f083 0301 	eor.w	r3, r3, #1
 8010732:	b2db      	uxtb	r3, r3
 8010734:	2b00      	cmp	r3, #0
 8010736:	d001      	beq.n	801073c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8010738:	2301      	movs	r3, #1
 801073a:	e000      	b.n	801073e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 801073c:	2300      	movs	r3, #0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d005      	beq.n	801074e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	78fa      	ldrb	r2, [r7, #3]
 8010746:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801074a:	2301      	movs	r3, #1
 801074c:	e002      	b.n	8010754 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 801074e:	2300      	movs	r3, #0
 8010750:	e000      	b.n	8010754 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8010752:	2300      	movs	r3, #0
    }
 8010754:	4618      	mov	r0, r3
 8010756:	3708      	adds	r7, #8
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}
 801075c:	20008806 	.word	0x20008806

08010760 <_ZN8touchgfx5paint6rgb5658tearDownEv>:
{
    blendL8CLUT = data;
}

void tearDown(void)
{
 8010760:	b480      	push	{r7}
 8010762:	af00      	add	r7, sp, #0
}
 8010764:	bf00      	nop
 8010766:	46bd      	mov	sp, r7
 8010768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076c:	4770      	bx	lr
	...

08010770 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:

void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 8010770:	b480      	push	{r7}
 8010772:	b08b      	sub	sp, #44	; 0x2c
 8010774:	af00      	add	r7, sp, #0
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	607a      	str	r2, [r7, #4]
 801077c:	70fb      	strb	r3, [r7, #3]
    uint16_t* framebuffer = ptr;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	627b      	str	r3, [r7, #36]	; 0x24
    const uint16_t* const lineEnd = framebuffer + count;
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	005b      	lsls	r3, r3, #1
 8010786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010788:	4413      	add	r3, r2
 801078a:	623b      	str	r3, [r7, #32]
    if (alpha == 0xFF)
 801078c:	78fb      	ldrb	r3, [r7, #3]
 801078e:	2bff      	cmp	r3, #255	; 0xff
 8010790:	d110      	bne.n	80107b4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>
    {
        do
        {
            *framebuffer = color565;
 8010792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010794:	b29a      	uxth	r2, r3
 8010796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010798:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < lineEnd);
 801079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079c:	3302      	adds	r3, #2
 801079e:	627b      	str	r3, [r7, #36]	; 0x24
 80107a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107a2:	6a3b      	ldr	r3, [r7, #32]
 80107a4:	429a      	cmp	r2, r3
 80107a6:	bf34      	ite	cc
 80107a8:	2301      	movcc	r3, #1
 80107aa:	2300      	movcs	r3, #0
 80107ac:	b2db      	uxtb	r3, r3
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d079      	beq.n	80108a6 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x136>
        do
 80107b2:	e7ee      	b.n	8010792 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x22>
    }
    else
    {
        do
        {
            *framebuffer = alphaBlend(color565, *framebuffer, alpha);
 80107b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b6:	b29a      	uxth	r2, r3
 80107b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ba:	881b      	ldrh	r3, [r3, #0]
 80107bc:	83fa      	strh	r2, [r7, #30]
 80107be:	83bb      	strh	r3, [r7, #28]
 80107c0:	78fb      	ldrb	r3, [r7, #3]
 80107c2:	76fb      	strb	r3, [r7, #27]
 *
 * @return The result of blending the two colors into a new color.
 */
FORCE_INLINE_FUNCTION uint16_t alphaBlend(uint16_t newpix, uint16_t bufpix, uint8_t alpha)
{
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 80107c4:	8bfb      	ldrh	r3, [r7, #30]
 80107c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80107ca:	f023 0307 	bic.w	r3, r3, #7
 80107ce:	b299      	uxth	r1, r3
 80107d0:	8bfb      	ldrh	r3, [r7, #30]
 80107d2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80107d6:	b29a      	uxth	r2, r3
 80107d8:	8bfb      	ldrh	r3, [r7, #30]
 80107da:	f003 031f 	and.w	r3, r3, #31
 80107de:	b29b      	uxth	r3, r3
 80107e0:	8339      	strh	r1, [r7, #24]
 80107e2:	82fa      	strh	r2, [r7, #22]
 80107e4:	82bb      	strh	r3, [r7, #20]
 80107e6:	8bbb      	ldrh	r3, [r7, #28]
 80107e8:	827b      	strh	r3, [r7, #18]
 80107ea:	7efb      	ldrb	r3, [r7, #27]
 80107ec:	747b      	strb	r3, [r7, #17]
    const uint8_t ialpha = 0xFF - alpha;
 80107ee:	7c7b      	ldrb	r3, [r7, #17]
 80107f0:	43db      	mvns	r3, r3
 80107f2:	743b      	strb	r3, [r7, #16]
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 80107f4:	8b3b      	ldrh	r3, [r7, #24]
 80107f6:	7c7a      	ldrb	r2, [r7, #17]
 80107f8:	fb03 f202 	mul.w	r2, r3, r2
 80107fc:	8a7b      	ldrh	r3, [r7, #18]
 80107fe:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8010802:	7c39      	ldrb	r1, [r7, #16]
 8010804:	fb01 f303 	mul.w	r3, r1, r3
 8010808:	4413      	add	r3, r2
 801080a:	4a2a      	ldr	r2, [pc, #168]	; (80108b4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x144>)
 801080c:	fb82 1203 	smull	r1, r2, r2, r3
 8010810:	441a      	add	r2, r3
 8010812:	11d2      	asrs	r2, r2, #7
 8010814:	17db      	asrs	r3, r3, #31
 8010816:	1ad3      	subs	r3, r2, r3
 8010818:	b21b      	sxth	r3, r3
 801081a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801081e:	f023 0307 	bic.w	r3, r3, #7
 8010822:	b21a      	sxth	r2, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 8010824:	8afb      	ldrh	r3, [r7, #22]
 8010826:	7c79      	ldrb	r1, [r7, #17]
 8010828:	fb03 f101 	mul.w	r1, r3, r1
 801082c:	8a7b      	ldrh	r3, [r7, #18]
 801082e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8010832:	7c38      	ldrb	r0, [r7, #16]
 8010834:	fb00 f303 	mul.w	r3, r0, r3
 8010838:	440b      	add	r3, r1
 801083a:	491e      	ldr	r1, [pc, #120]	; (80108b4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x144>)
 801083c:	fb81 0103 	smull	r0, r1, r1, r3
 8010840:	4419      	add	r1, r3
 8010842:	11c9      	asrs	r1, r1, #7
 8010844:	17db      	asrs	r3, r3, #31
 8010846:	1acb      	subs	r3, r1, r3
 8010848:	b21b      	sxth	r3, r3
 801084a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801084e:	b21b      	sxth	r3, r3
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 8010850:	4313      	orrs	r3, r2
 8010852:	b21a      	sxth	r2, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 8010854:	8abb      	ldrh	r3, [r7, #20]
 8010856:	7c79      	ldrb	r1, [r7, #17]
 8010858:	fb03 f101 	mul.w	r1, r3, r1
 801085c:	8a7b      	ldrh	r3, [r7, #18]
 801085e:	f003 031f 	and.w	r3, r3, #31
 8010862:	7c38      	ldrb	r0, [r7, #16]
 8010864:	fb00 f303 	mul.w	r3, r0, r3
 8010868:	440b      	add	r3, r1
 801086a:	4912      	ldr	r1, [pc, #72]	; (80108b4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x144>)
 801086c:	fb81 0103 	smull	r0, r1, r1, r3
 8010870:	4419      	add	r1, r3
 8010872:	11c9      	asrs	r1, r1, #7
 8010874:	17db      	asrs	r3, r3, #31
 8010876:	1acb      	subs	r3, r1, r3
 8010878:	b21b      	sxth	r3, r3
 801087a:	f003 031f 	and.w	r3, r3, #31
 801087e:	b21b      	sxth	r3, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 8010880:	4313      	orrs	r3, r2
 8010882:	b21b      	sxth	r3, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 8010884:	b29a      	uxth	r2, r3
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 8010886:	bf00      	nop
 8010888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088a:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < lineEnd);
 801088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088e:	3302      	adds	r3, #2
 8010890:	627b      	str	r3, [r7, #36]	; 0x24
 8010892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010894:	6a3b      	ldr	r3, [r7, #32]
 8010896:	429a      	cmp	r2, r3
 8010898:	bf34      	ite	cc
 801089a:	2301      	movcc	r3, #1
 801089c:	2300      	movcs	r3, #0
 801089e:	b2db      	uxtb	r3, r3
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d000      	beq.n	80108a6 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x136>
        do
 80108a4:	e786      	b.n	80107b4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>
    }
}
 80108a6:	bf00      	nop
 80108a8:	372c      	adds	r7, #44	; 0x2c
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr
 80108b2:	bf00      	nop
 80108b4:	80808081 	.word	0x80808081

080108b8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
                   3, /* number of blocks */
                   2  /* bytes per pixel */
                   > blockAllocator;

void TouchGFXGeneratedHAL::initialize()
{
 80108b8:	b5b0      	push	{r4, r5, r7, lr}
 80108ba:	b082      	sub	sp, #8
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	4618      	mov	r0, r3
 80108c4:	f000 fed5 	bl	8011672 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80108c8:	687d      	ldr	r5, [r7, #4]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	3364      	adds	r3, #100	; 0x64
 80108d0:	681c      	ldr	r4, [r3, #0]
 80108d2:	f006 f9b7 	bl	8016c44 <_ZN8touchgfx11Application11getInstanceEv>
 80108d6:	4603      	mov	r3, r0
 80108d8:	4619      	mov	r1, r3
 80108da:	4628      	mov	r0, r5
 80108dc:	47a0      	blx	r4
    // Partial framebuffer strategy
    setFrameBufferAllocator(&blockAllocator);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	4906      	ldr	r1, [pc, #24]	; (80108fc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7ff fee2 	bl	80106ac <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2102      	movs	r1, #2
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7ff fef7 	bl	80106e0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
}
 80108f2:	bf00      	nop
 80108f4:	3708      	adds	r7, #8
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bdb0      	pop	{r4, r5, r7, pc}
 80108fa:	bf00      	nop
 80108fc:	20007154 	.word	0x20007154

08010900 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8010900:	b480      	push	{r7}
 8010902:	b083      	sub	sp, #12
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
}
 8010908:	bf00      	nop
 801090a:	370c      	adds	r7, #12
 801090c:	46bd      	mov	sp, r7
 801090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010912:	4770      	bx	lr

08010914 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8010914:	b480      	push	{r7}
 8010916:	b083      	sub	sp, #12
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
}
 801091c:	bf00      	nop
 801091e:	370c      	adds	r7, #12
 8010920:	46bd      	mov	sp, r7
 8010922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010926:	4770      	bx	lr

08010928 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8010928:	b480      	push	{r7}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
}
 8010930:	bf00      	nop
 8010932:	370c      	adds	r7, #12
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr

0801093c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 801093c:	b480      	push	{r7}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
}
 8010944:	bf00      	nop
 8010946:	370c      	adds	r7, #12
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr

08010950 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	4618      	mov	r0, r3
 801095c:	f000 fe70 	bl	8011640 <_ZN8touchgfx3HAL10beginFrameEv>
 8010960:	4603      	mov	r3, r0
}
 8010962:	4618      	mov	r0, r3
 8010964:	3708      	adds	r7, #8
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}

0801096a <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 801096a:	b580      	push	{r7, lr}
 801096c:	b082      	sub	sp, #8
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
    // We must guard the next frame until we're done transferring all blocks over our display interface
    // through either a semaphore if user is running an OS or a simple variable if not
    // Wait until all blocks have been transmitted
    while(touchgfxDisplayDriverTransmitActive()){}
 8010972:	f7fe ff8d 	bl	800f890 <touchgfxDisplayDriverTransmitActive>
 8010976:	4603      	mov	r3, r0
 8010978:	2b00      	cmp	r3, #0
 801097a:	bf14      	ite	ne
 801097c:	2301      	movne	r3, #1
 801097e:	2300      	moveq	r3, #0
 8010980:	b2db      	uxtb	r3, r3
 8010982:	2b00      	cmp	r3, #0
 8010984:	d000      	beq.n	8010988 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x1e>
 8010986:	e7f4      	b.n	8010972 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x8>

    HAL::endFrame();
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	4618      	mov	r0, r3
 801098c:	f000 fe64 	bl	8011658 <_ZN8touchgfx3HAL8endFrameEv>
}
 8010990:	bf00      	nop
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}

08010998 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8010998:	b480      	push	{r7}
 801099a:	b083      	sub	sp, #12
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
    //getTFTFrameBuffer() not used for selected Frame Buffer Strategy
    return 0;
 80109a0:	2300      	movs	r3, #0
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	370c      	adds	r7, #12
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr

080109ae <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80109ae:	b480      	push	{r7}
 80109b0:	b083      	sub	sp, #12
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
 80109b6:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 80109b8:	bf00      	nop
 80109ba:	370c      	adds	r7, #12
 80109bc:	46bd      	mov	sp, r7
 80109be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c2:	4770      	bx	lr

080109c4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b088      	sub	sp, #32
 80109c8:	af02      	add	r7, sp, #8
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6839      	ldr	r1, [r7, #0]
 80109d2:	4618      	mov	r0, r3
 80109d4:	f000 fdfe 	bl	80115d4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // Once flushFrameBuffer() is called by the framework a block is already for transfer
    // Mark it ready for transfer and transmit it if user defined method isTransmittingData() does not return false
    // If data is not being transmitted, transfer the data with user defined method transmitFrameBufferBlock().
    frameBufferAllocator->markBlockReadyForTransfer();
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	699a      	ldr	r2, [r3, #24]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	699b      	ldr	r3, [r3, #24]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	3304      	adds	r3, #4
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	4610      	mov	r0, r2
 80109e8:	4798      	blx	r3
    if (!touchgfxDisplayDriverTransmitActive())
 80109ea:	f7fe ff51 	bl	800f890 <touchgfxDisplayDriverTransmitActive>
 80109ee:	4603      	mov	r3, r0
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	bf0c      	ite	eq
 80109f4:	2301      	moveq	r3, #1
 80109f6:	2300      	movne	r3, #0
 80109f8:	b2db      	uxtb	r3, r3
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d021      	beq.n	8010a42 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x7e>
    {
        touchgfx::Rect r;
 80109fe:	f107 030c 	add.w	r3, r7, #12
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7f9 ff2d 	bl	800a862 <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = frameBufferAllocator->getBlockForTransfer(r);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	699a      	ldr	r2, [r3, #24]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	699b      	ldr	r3, [r3, #24]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	330c      	adds	r3, #12
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	f107 010c 	add.w	r1, r7, #12
 8010a1a:	4610      	mov	r0, r2
 8010a1c:	4798      	blx	r3
 8010a1e:	6178      	str	r0, [r7, #20]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 8010a20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010a24:	b299      	uxth	r1, r3
 8010a26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010a2a:	b29a      	uxth	r2, r3
 8010a2c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8010a30:	b298      	uxth	r0, r3
 8010a32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	6978      	ldr	r0, [r7, #20]
 8010a3e:	f7fe ff33 	bl	800f8a8 <touchgfxDisplayDriverTransmitBlock>
    }
}
 8010a42:	bf00      	nop
 8010a44:	3718      	adds	r7, #24
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}

08010a4a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8010a4a:	b580      	push	{r7, lr}
 8010a4c:	b084      	sub	sp, #16
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	60f8      	str	r0, [r7, #12]
 8010a52:	60b9      	str	r1, [r7, #8]
 8010a54:	607a      	str	r2, [r7, #4]
 8010a56:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8010a58:	68f8      	ldr	r0, [r7, #12]
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	687a      	ldr	r2, [r7, #4]
 8010a5e:	68b9      	ldr	r1, [r7, #8]
 8010a60:	f000 ff21 	bl	80118a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8010a64:	4603      	mov	r3, r0
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}

08010a6e <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>:
/**
 * This function is called by FrameBufferAllocator if no block is
 * available.
 */
__weak void FrameBufferAllocatorWaitOnTransfer()
{
 8010a6e:	b480      	push	{r7}
 8010a70:	af00      	add	r7, sp, #0
  /* NOTE: This function should not be modified, when the fuction is needed,
   *       FrameBufferAllocatorWaitOnTransfer should be implemented in the user file
   */
}
 8010a72:	bf00      	nop
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr

08010a7c <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>:
 * Called by FrameBufferAllocator when a block is drawn and
 * therefore ready for transfer. The LCD driver should use this
 * method to start a transfer.
 */
__weak void FrameBufferAllocatorSignalBlockDrawn()
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	af00      	add	r7, sp, #0
  /* NOTE: This function should not be modified, when the fuction is needed,
   *       FrameBufferAllocatorSignalBlockDrawn should be implemented in the user file
   */
}
 8010a80:	bf00      	nop
 8010a82:	46bd      	mov	sp, r7
 8010a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a88:	4770      	bx	lr

08010a8a <_ZN8touchgfx16startNewTransferEv>:

// A user must call touchgfx::startNewTransfer(); once transmitFrameBufferBlock() has successfully sent a block.
void startNewTransfer()
{
 8010a8a:	b580      	push	{r7, lr}
 8010a8c:	b086      	sub	sp, #24
 8010a8e:	af02      	add	r7, sp, #8
    FrameBufferAllocator* fba = HAL::getInstance()->getFrameBufferAllocator();
 8010a90:	f7f9 fa38 	bl	8009f04 <_ZN8touchgfx3HAL11getInstanceEv>
 8010a94:	4603      	mov	r3, r0
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7ff fe16 	bl	80106c8 <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>
 8010a9c:	60f8      	str	r0, [r7, #12]

  // Free the previous transmitted block, marking it ready for rendering
    fba->freeBlockAfterTransfer();
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	3318      	adds	r3, #24
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	68f8      	ldr	r0, [r7, #12]
 8010aa8:	4798      	blx	r3
    if (fba->hasBlockReadyForTransfer())
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	3308      	adds	r3, #8
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	68f8      	ldr	r0, [r7, #12]
 8010ab4:	4798      	blx	r3
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d01d      	beq.n	8010af8 <_ZN8touchgfx16startNewTransferEv+0x6e>
    {
        touchgfx::Rect r;
 8010abc:	463b      	mov	r3, r7
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7f9 fecf 	bl	800a862 <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = fba->getBlockForTransfer(r);
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	330c      	adds	r3, #12
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	463a      	mov	r2, r7
 8010ace:	4611      	mov	r1, r2
 8010ad0:	68f8      	ldr	r0, [r7, #12]
 8010ad2:	4798      	blx	r3
 8010ad4:	60b8      	str	r0, [r7, #8]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 8010ad6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8010ada:	b299      	uxth	r1, r3
 8010adc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ae0:	b29a      	uxth	r2, r3
 8010ae2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010ae6:	b298      	uxth	r0, r3
 8010ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	9300      	str	r3, [sp, #0]
 8010af0:	4603      	mov	r3, r0
 8010af2:	68b8      	ldr	r0, [r7, #8]
 8010af4:	f7fe fed8 	bl	800f8a8 <touchgfxDisplayDriverTransmitBlock>
    }
}
 8010af8:	bf00      	nop
 8010afa:	3710      	adds	r7, #16
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}

08010b00 <DisplayDriver_TransferCompleteCallback>:

extern "C"
void DisplayDriver_TransferCompleteCallback()
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	af00      	add	r7, sp, #0
  // After completed transmission start new transfer if blocks are ready.
    touchgfx::startNewTransfer();
 8010b04:	f7ff ffc1 	bl	8010a8a <_ZN8touchgfx16startNewTransferEv>
}
 8010b08:	bf00      	nop
 8010b0a:	bd80      	pop	{r7, pc}

08010b0c <touchgfxSignalVSync>:
}

extern "C"
void touchgfxSignalVSync(void)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	af00      	add	r7, sp, #0
    /* VSync has occurred, increment TouchGFX engine vsync counter */
    touchgfx::HAL::getInstance()->vSync();
 8010b10:	f7f9 f9f8 	bl	8009f04 <_ZN8touchgfx3HAL11getInstanceEv>
 8010b14:	4603      	mov	r3, r0
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7ff fdb6 	bl	8010688 <_ZN8touchgfx3HAL5vSyncEv>

    /* VSync has occurred, signal TouchGFX engine */
    touchgfx::OSWrappers::signalVSync();
 8010b1c:	f7fe ff70 	bl	800fa00 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 8010b20:	bf00      	nop
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <_ZN8touchgfx20FrameBufferAllocatorC1Ev>:
class FrameBufferAllocator
 8010b24:	b480      	push	{r7}
 8010b26:	b083      	sub	sp, #12
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	4a04      	ldr	r2, [pc, #16]	; (8010b40 <_ZN8touchgfx20FrameBufferAllocatorC1Ev+0x1c>)
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	601a      	str	r2, [r3, #0]
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	4618      	mov	r0, r3
 8010b36:	370c      	adds	r7, #12
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3e:	4770      	bx	lr
 8010b40:	0802a2e0 	.word	0x0802a2e0

08010b44 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev>:
 */
template <uint32_t block_size, uint32_t blocks, uint32_t bytes_pr_pixel>
class ManyBlockAllocator : public FrameBufferAllocator
{
public:
    ManyBlockAllocator()
 8010b44:	b5b0      	push	{r4, r5, r7, lr}
 8010b46:	b084      	sub	sp, #16
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
    {
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7ff ffe8 	bl	8010b24 <_ZN8touchgfx20FrameBufferAllocatorC1Ev>
 8010b54:	4a1a      	ldr	r2, [pc, #104]	; (8010bc0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x7c>)
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	601a      	str	r2, [r3, #0]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8010b60:	3308      	adds	r3, #8
 8010b62:	2402      	movs	r4, #2
 8010b64:	461d      	mov	r5, r3
 8010b66:	2c00      	cmp	r4, #0
 8010b68:	db05      	blt.n	8010b76 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x32>
 8010b6a:	4628      	mov	r0, r5
 8010b6c:	f7f9 fe79 	bl	800a862 <_ZN8touchgfx4RectC1Ev>
 8010b70:	3508      	adds	r5, #8
 8010b72:	3c01      	subs	r4, #1
 8010b74:	e7f7      	b.n	8010b66 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x22>
        sendingBlock = -1;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b82:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
        drawingBlock = -1;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b8c:	461a      	mov	r2, r3
 8010b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b92:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
        for (uint32_t i = 0; i < blocks; i++)
 8010b96:	2300      	movs	r3, #0
 8010b98:	60fb      	str	r3, [r7, #12]
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2b02      	cmp	r3, #2
 8010b9e:	d809      	bhi.n	8010bb4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x70>
        {
            state[i] = EMPTY;
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	4413      	add	r3, r2
 8010ba6:	3304      	adds	r3, #4
 8010ba8:	2200      	movs	r2, #0
 8010baa:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < blocks; i++)
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	3301      	adds	r3, #1
 8010bb0:	60fb      	str	r3, [r7, #12]
 8010bb2:	e7f2      	b.n	8010b9a <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x56>
        }
    }
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3710      	adds	r7, #16
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	0802a1dc 	.word	0x0802a1dc

08010bc4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>:
class ManyBlockAllocator : public FrameBufferAllocator
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	4a05      	ldr	r2, [pc, #20]	; (8010be4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev+0x20>)
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	601a      	str	r2, [r3, #0]
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7ff fd37 	bl	8010648 <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3708      	adds	r7, #8
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}
 8010be4:	0802a1dc 	.word	0x0802a1dc

08010be8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED0Ev>:
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f7ff ffe7 	bl	8010bc4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>
 8010bf6:	f241 61a8 	movw	r1, #5800	; 0x16a8
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f015 f942 	bl	8025e84 <_ZdlPvj>
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	4618      	mov	r0, r3
 8010c04:	3708      	adds	r7, #8
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
	...

08010c0c <_Z41__static_initialization_and_destruction_0ii>:
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b082      	sub	sp, #8
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	6039      	str	r1, [r7, #0]
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2b01      	cmp	r3, #1
 8010c1a:	d107      	bne.n	8010c2c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c22:	4293      	cmp	r3, r2
 8010c24:	d102      	bne.n	8010c2c <_Z41__static_initialization_and_destruction_0ii+0x20>
                   > blockAllocator;
 8010c26:	4809      	ldr	r0, [pc, #36]	; (8010c4c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8010c28:	f7ff ff8c 	bl	8010b44 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev>
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d107      	bne.n	8010c42 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c38:	4293      	cmp	r3, r2
 8010c3a:	d102      	bne.n	8010c42 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8010c3c:	4803      	ldr	r0, [pc, #12]	; (8010c4c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8010c3e:	f7ff ffc1 	bl	8010bc4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>
}
 8010c42:	bf00      	nop
 8010c44:	3708      	adds	r7, #8
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	20007154 	.word	0x20007154

08010c50 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh>:
     * @param          height The height of the block.
     * @param [in,out] block  Pointer to pointer to return the block address in.
     *
     * @return The height of the allocated block.
     */
    virtual uint16_t allocateBlock(const uint16_t x, const uint16_t y, const uint16_t width, const uint16_t height, uint8_t** block)
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b086      	sub	sp, #24
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	60f8      	str	r0, [r7, #12]
 8010c58:	4608      	mov	r0, r1
 8010c5a:	4611      	mov	r1, r2
 8010c5c:	461a      	mov	r2, r3
 8010c5e:	4603      	mov	r3, r0
 8010c60:	817b      	strh	r3, [r7, #10]
 8010c62:	460b      	mov	r3, r1
 8010c64:	813b      	strh	r3, [r7, #8]
 8010c66:	4613      	mov	r3, r2
 8010c68:	80fb      	strh	r3, [r7, #6]
    {
        drawingBlock++;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c70:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8010c74:	3301      	adds	r3, #1
 8010c76:	68fa      	ldr	r2, [r7, #12]
 8010c78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010c7c:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
        if (drawingBlock == blocks)
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c86:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8010c8a:	2b03      	cmp	r3, #3
 8010c8c:	d106      	bne.n	8010c9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x4c>
        {
            drawingBlock = 0;
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c94:	461a      	mov	r2, r3
 8010c96:	2300      	movs	r3, #0
 8010c98:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
        }
        while (state[drawingBlock] != EMPTY)
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ca2:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8010ca6:	68fa      	ldr	r2, [r7, #12]
 8010ca8:	4413      	add	r3, r2
 8010caa:	791b      	ldrb	r3, [r3, #4]
 8010cac:	b2db      	uxtb	r3, r3
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	bf14      	ite	ne
 8010cb2:	2301      	movne	r3, #1
 8010cb4:	2300      	moveq	r3, #0
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d002      	beq.n	8010cc2 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x72>
        {
            FrameBufferAllocatorWaitOnTransfer();
 8010cbc:	f7ff fed7 	bl	8010a6e <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>
        while (state[drawingBlock] != EMPTY)
 8010cc0:	e7ec      	b.n	8010c9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x4c>
        }
        assert(state[drawingBlock] == EMPTY);
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cc8:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8010ccc:	68fa      	ldr	r2, [r7, #12]
 8010cce:	4413      	add	r3, r2
 8010cd0:	791b      	ldrb	r3, [r3, #4]
 8010cd2:	b2db      	uxtb	r3, r3
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d005      	beq.n	8010ce4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x94>
 8010cd8:	4b38      	ldr	r3, [pc, #224]	; (8010dbc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x16c>)
 8010cda:	4a39      	ldr	r2, [pc, #228]	; (8010dc0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x170>)
 8010cdc:	21aa      	movs	r1, #170	; 0xaa
 8010cde:	4839      	ldr	r0, [pc, #228]	; (8010dc4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x174>)
 8010ce0:	f015 fe5c 	bl	802699c <__assert_func>
        state[drawingBlock] = ALLOCATED;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cea:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8010cee:	68fa      	ldr	r2, [r7, #12]
 8010cf0:	4413      	add	r3, r2
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	711a      	strb	r2, [r3, #4]
        const int32_t stride = width * bytes_pr_pixel;
 8010cf6:	88fb      	ldrh	r3, [r7, #6]
 8010cf8:	005b      	lsls	r3, r3, #1
 8010cfa:	617b      	str	r3, [r7, #20]
        const int32_t lines = block_size / stride;
 8010cfc:	697b      	ldr	r3, [r7, #20]
 8010cfe:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8010d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d06:	613b      	str	r3, [r7, #16]
        *block = (uint8_t*)&memory[drawingBlock][0];
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d0e:	f8d3 26a4 	ldr.w	r2, [r3, #1700]	; 0x6a4
 8010d12:	4613      	mov	r3, r2
 8010d14:	011b      	lsls	r3, r3, #4
 8010d16:	1a9b      	subs	r3, r3, r2
 8010d18:	01db      	lsls	r3, r3, #7
 8010d1a:	3308      	adds	r3, #8
 8010d1c:	68fa      	ldr	r2, [r7, #12]
 8010d1e:	441a      	add	r2, r3
 8010d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d22:	601a      	str	r2, [r3, #0]
        blockRect[drawingBlock].x = x;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d2a:	f8d3 26a4 	ldr.w	r2, [r3, #1700]	; 0x6a4
 8010d2e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	f202 22d1 	addw	r2, r2, #721	; 0x2d1
 8010d38:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
        blockRect[drawingBlock].y = y;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d42:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8010d46:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8010d4a:	68fa      	ldr	r2, [r7, #12]
 8010d4c:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8010d50:	00db      	lsls	r3, r3, #3
 8010d52:	4413      	add	r3, r2
 8010d54:	460a      	mov	r2, r1
 8010d56:	805a      	strh	r2, [r3, #2]
        blockRect[drawingBlock].width = width;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d5e:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8010d62:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8010d66:	68fa      	ldr	r2, [r7, #12]
 8010d68:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8010d6c:	00db      	lsls	r3, r3, #3
 8010d6e:	4413      	add	r3, r2
 8010d70:	460a      	mov	r2, r1
 8010d72:	809a      	strh	r2, [r3, #4]
        blockRect[drawingBlock].height = MIN(height, lines);
 8010d74:	8c3a      	ldrh	r2, [r7, #32]
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	bfa8      	it	ge
 8010d7c:	461a      	movge	r2, r3
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d84:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8010d88:	b211      	sxth	r1, r2
 8010d8a:	68fa      	ldr	r2, [r7, #12]
 8010d8c:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8010d90:	00db      	lsls	r3, r3, #3
 8010d92:	4413      	add	r3, r2
 8010d94:	460a      	mov	r2, r1
 8010d96:	80da      	strh	r2, [r3, #6]
        return blockRect[drawingBlock].height;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d9e:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8010da2:	68fa      	ldr	r2, [r7, #12]
 8010da4:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8010da8:	00db      	lsls	r3, r3, #3
 8010daa:	4413      	add	r3, r2
 8010dac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010db0:	b29b      	uxth	r3, r3
    }
 8010db2:	4618      	mov	r0, r3
 8010db4:	3718      	adds	r7, #24
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	08028de0 	.word	0x08028de0
 8010dc0:	08028e00 	.word	0x08028e00
 8010dc4:	08028f34 	.word	0x08028f34

08010dc8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv>:

    /** Marks a previously allocated block as ready to be transferred to the LCD. */
    virtual void markBlockReadyForTransfer()
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b082      	sub	sp, #8
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
    {
        assert(state[drawingBlock] == ALLOCATED);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010dd6:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8010dda:	687a      	ldr	r2, [r7, #4]
 8010ddc:	4413      	add	r3, r2
 8010dde:	791b      	ldrb	r3, [r3, #4]
 8010de0:	b2db      	uxtb	r3, r3
 8010de2:	2b01      	cmp	r3, #1
 8010de4:	d005      	beq.n	8010df2 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x2a>
 8010de6:	4b0a      	ldr	r3, [pc, #40]	; (8010e10 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x48>)
 8010de8:	4a0a      	ldr	r2, [pc, #40]	; (8010e14 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x4c>)
 8010dea:	21b9      	movs	r1, #185	; 0xb9
 8010dec:	480a      	ldr	r0, [pc, #40]	; (8010e18 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x50>)
 8010dee:	f015 fdd5 	bl	802699c <__assert_func>
        state[drawingBlock] = DRAWN;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010df8:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8010dfc:	687a      	ldr	r2, [r7, #4]
 8010dfe:	4413      	add	r3, r2
 8010e00:	2202      	movs	r2, #2
 8010e02:	711a      	strb	r2, [r3, #4]
        FrameBufferAllocatorSignalBlockDrawn();
 8010e04:	f7ff fe3a 	bl	8010a7c <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>
    }
 8010e08:	bf00      	nop
 8010e0a:	3708      	adds	r7, #8
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	08028f88 	.word	0x08028f88
 8010e14:	08028fac 	.word	0x08028fac
 8010e18:	08028f34 	.word	0x08028f34

08010e1c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv>:
    /**
     * Check if a block is ready for transfer to the LCD.
     *
     * @return True if a block is ready for transfer.
     */
    virtual bool hasBlockReadyForTransfer()
 8010e1c:	b480      	push	{r7}
 8010e1e:	b085      	sub	sp, #20
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t i = 0; i < blocks; i++)
 8010e24:	2300      	movs	r3, #0
 8010e26:	60fb      	str	r3, [r7, #12]
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	2b02      	cmp	r3, #2
 8010e2c:	d812      	bhi.n	8010e54 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x38>
        {
            if (state[i] == DRAWN)
 8010e2e:	687a      	ldr	r2, [r7, #4]
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	4413      	add	r3, r2
 8010e34:	3304      	adds	r3, #4
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	b2db      	uxtb	r3, r3
 8010e3a:	2b02      	cmp	r3, #2
 8010e3c:	bf0c      	ite	eq
 8010e3e:	2301      	moveq	r3, #1
 8010e40:	2300      	movne	r3, #0
 8010e42:	b2db      	uxtb	r3, r3
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d001      	beq.n	8010e4c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x30>
            {
                return true;
 8010e48:	2301      	movs	r3, #1
 8010e4a:	e004      	b.n	8010e56 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x3a>
        for (uint32_t i = 0; i < blocks; i++)
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	3301      	adds	r3, #1
 8010e50:	60fb      	str	r3, [r7, #12]
 8010e52:	e7e9      	b.n	8010e28 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0xc>
            }
        }
        return false;
 8010e54:	2300      	movs	r3, #0
    }
 8010e56:	4618      	mov	r0, r3
 8010e58:	3714      	adds	r7, #20
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e60:	4770      	bx	lr
	...

08010e64 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE>:
     *
     * @param [in,out] rect Reference to rect to write block x, y, width, and height.
     *
     * @return Returns the address of the block ready for transfer.
     */
    virtual const uint8_t* getBlockForTransfer(Rect& rect)
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	6039      	str	r1, [r7, #0]
    {
        sendingBlock++;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e74:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8010e78:	3301      	adds	r3, #1
 8010e7a:	687a      	ldr	r2, [r7, #4]
 8010e7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010e80:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
        if (sendingBlock == blocks)
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e8a:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8010e8e:	2b03      	cmp	r3, #3
 8010e90:	d106      	bne.n	8010ea0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x3c>
        {
            sendingBlock = 0;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e98:	461a      	mov	r2, r3
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
        }
        assert(state[sendingBlock] == DRAWN);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ea6:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	4413      	add	r3, r2
 8010eae:	791b      	ldrb	r3, [r3, #4]
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	2b02      	cmp	r3, #2
 8010eb4:	d005      	beq.n	8010ec2 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x5e>
 8010eb6:	4b16      	ldr	r3, [pc, #88]	; (8010f10 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xac>)
 8010eb8:	4a16      	ldr	r2, [pc, #88]	; (8010f14 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xb0>)
 8010eba:	21dd      	movs	r1, #221	; 0xdd
 8010ebc:	4816      	ldr	r0, [pc, #88]	; (8010f18 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xb4>)
 8010ebe:	f015 fd6d 	bl	802699c <__assert_func>
        rect = blockRect[sendingBlock];
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ec8:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8010ecc:	683a      	ldr	r2, [r7, #0]
 8010ece:	6879      	ldr	r1, [r7, #4]
 8010ed0:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8010ed4:	00db      	lsls	r3, r3, #3
 8010ed6:	440b      	add	r3, r1
 8010ed8:	cb03      	ldmia	r3!, {r0, r1}
 8010eda:	6010      	str	r0, [r2, #0]
 8010edc:	6051      	str	r1, [r2, #4]
        state[sendingBlock] = SENDING;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ee4:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8010ee8:	687a      	ldr	r2, [r7, #4]
 8010eea:	4413      	add	r3, r2
 8010eec:	2203      	movs	r2, #3
 8010eee:	711a      	strb	r2, [r3, #4]
        return (const uint8_t*)&memory[sendingBlock][0];
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ef6:	f8d3 26a0 	ldr.w	r2, [r3, #1696]	; 0x6a0
 8010efa:	4613      	mov	r3, r2
 8010efc:	011b      	lsls	r3, r3, #4
 8010efe:	1a9b      	subs	r3, r3, r2
 8010f00:	01db      	lsls	r3, r3, #7
 8010f02:	3308      	adds	r3, #8
 8010f04:	687a      	ldr	r2, [r7, #4]
 8010f06:	4413      	add	r3, r2
    }
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3708      	adds	r7, #8
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}
 8010f10:	08029080 	.word	0x08029080
 8010f14:	080290a0 	.word	0x080290a0
 8010f18:	08028f34 	.word	0x08028f34

08010f1c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv>:

    virtual const Rect& peekBlockForTransfer()
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
    {
        int nextSendingBlock = sendingBlock + 1;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f2a:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8010f2e:	3301      	adds	r3, #1
 8010f30:	60fb      	str	r3, [r7, #12]
        if (nextSendingBlock == blocks)
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	2b03      	cmp	r3, #3
 8010f36:	d101      	bne.n	8010f3c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x20>
        {
            nextSendingBlock = 0;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	60fb      	str	r3, [r7, #12]
        }
        assert(state[nextSendingBlock] == DRAWN);
 8010f3c:	687a      	ldr	r2, [r7, #4]
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	4413      	add	r3, r2
 8010f42:	3304      	adds	r3, #4
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	b2db      	uxtb	r3, r3
 8010f48:	2b02      	cmp	r3, #2
 8010f4a:	d005      	beq.n	8010f58 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x3c>
 8010f4c:	4b07      	ldr	r3, [pc, #28]	; (8010f6c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x50>)
 8010f4e:	4a08      	ldr	r2, [pc, #32]	; (8010f70 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x54>)
 8010f50:	21ea      	movs	r1, #234	; 0xea
 8010f52:	4808      	ldr	r0, [pc, #32]	; (8010f74 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x58>)
 8010f54:	f015 fd22 	bl	802699c <__assert_func>
        return blockRect[nextSendingBlock];
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8010f5e:	00db      	lsls	r3, r3, #3
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	4413      	add	r3, r2
    }
 8010f64:	4618      	mov	r0, r3
 8010f66:	3710      	adds	r7, #16
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	080291a0 	.word	0x080291a0
 8010f70:	080291c4 	.word	0x080291c4
 8010f74:	08028f34 	.word	0x08028f34

08010f78 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13hasEmptyBlockEv>:

    virtual bool hasEmptyBlock()
 8010f78:	b480      	push	{r7}
 8010f7a:	b085      	sub	sp, #20
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
    {
        int nextDrawingBlock = drawingBlock + 1;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f86:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	60fb      	str	r3, [r7, #12]
        if (nextDrawingBlock == blocks)
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2b03      	cmp	r3, #3
 8010f92:	d101      	bne.n	8010f98 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13hasEmptyBlockEv+0x20>
        {
            nextDrawingBlock = 0;
 8010f94:	2300      	movs	r3, #0
 8010f96:	60fb      	str	r3, [r7, #12]
        }
        return (state[nextDrawingBlock] == EMPTY);
 8010f98:	687a      	ldr	r2, [r7, #4]
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	4413      	add	r3, r2
 8010f9e:	3304      	adds	r3, #4
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	bf0c      	ite	eq
 8010fa8:	2301      	moveq	r3, #1
 8010faa:	2300      	movne	r3, #0
 8010fac:	b2db      	uxtb	r3, r3
    }
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3714      	adds	r7, #20
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb8:	4770      	bx	lr
	...

08010fbc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv>:
    /**
     * Free a block after transfer to the LCD.
     *
     * Marks a previously allocated block as transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer()
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
    {
        assert(state[sendingBlock] == SENDING);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010fca:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8010fce:	687a      	ldr	r2, [r7, #4]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	791b      	ldrb	r3, [r3, #4]
 8010fd4:	b2db      	uxtb	r3, r3
 8010fd6:	2b03      	cmp	r3, #3
 8010fd8:	d005      	beq.n	8010fe6 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x2a>
 8010fda:	4b09      	ldr	r3, [pc, #36]	; (8011000 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x44>)
 8010fdc:	4a09      	ldr	r2, [pc, #36]	; (8011004 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x48>)
 8010fde:	21ff      	movs	r1, #255	; 0xff
 8010fe0:	4809      	ldr	r0, [pc, #36]	; (8011008 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x4c>)
 8010fe2:	f015 fcdb 	bl	802699c <__assert_func>
        state[sendingBlock] = EMPTY;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010fec:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8010ff0:	687a      	ldr	r2, [r7, #4]
 8010ff2:	4413      	add	r3, r2
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	711a      	strb	r2, [r3, #4]
    }
 8010ff8:	bf00      	nop
 8010ffa:	3708      	adds	r7, #8
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	080292a4 	.word	0x080292a4
 8011004:	080292c4 	.word	0x080292c4
 8011008:	08028f34 	.word	0x08028f34

0801100c <_GLOBAL__sub_I__ZN8touchgfx5paint6rgb56511blendL8CLUTE>:
 801100c:	b580      	push	{r7, lr}
 801100e:	af00      	add	r7, sp, #0
 8011010:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011014:	2001      	movs	r0, #1
 8011016:	f7ff fdf9 	bl	8010c0c <_Z41__static_initialization_and_destruction_0ii>
 801101a:	bd80      	pop	{r7, pc}

0801101c <_GLOBAL__sub_D__ZN8touchgfx5paint6rgb56511blendL8CLUTE>:
 801101c:	b580      	push	{r7, lr}
 801101e:	af00      	add	r7, sp, #0
 8011020:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011024:	2000      	movs	r0, #0
 8011026:	f7ff fdf1 	bl	8010c0c <_Z41__static_initialization_and_destruction_0ii>
 801102a:	bd80      	pop	{r7, pc}

0801102c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801102c:	8880      	ldrh	r0, [r0, #4]
 801102e:	4770      	bx	lr

08011030 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8011030:	b570      	push	{r4, r5, r6, lr}
 8011032:	6803      	ldr	r3, [r0, #0]
 8011034:	4605      	mov	r5, r0
 8011036:	460c      	mov	r4, r1
 8011038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801103a:	2100      	movs	r1, #0
 801103c:	4798      	blx	r3
 801103e:	682b      	ldr	r3, [r5, #0]
 8011040:	4606      	mov	r6, r0
 8011042:	6a1b      	ldr	r3, [r3, #32]
 8011044:	4628      	mov	r0, r5
 8011046:	4798      	blx	r3
 8011048:	1ba4      	subs	r4, r4, r6
 801104a:	b2a4      	uxth	r4, r4
 801104c:	fbb4 f0f0 	udiv	r0, r4, r0
 8011050:	bd70      	pop	{r4, r5, r6, pc}

08011052 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8011052:	2300      	movs	r3, #0
 8011054:	8083      	strh	r3, [r0, #4]
 8011056:	4770      	bx	lr

08011058 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8011058:	b510      	push	{r4, lr}
 801105a:	6803      	ldr	r3, [r0, #0]
 801105c:	8881      	ldrh	r1, [r0, #4]
 801105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011060:	4604      	mov	r4, r0
 8011062:	4798      	blx	r3
 8011064:	88a3      	ldrh	r3, [r4, #4]
 8011066:	3301      	adds	r3, #1
 8011068:	80a3      	strh	r3, [r4, #4]
 801106a:	bd10      	pop	{r4, pc}

0801106c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801106c:	6803      	ldr	r3, [r0, #0]
 801106e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011070:	4718      	bx	r3

08011072 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8011072:	4770      	bx	lr

08011074 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8011074:	4a02      	ldr	r2, [pc, #8]	; (8011080 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8011076:	6002      	str	r2, [r0, #0]
 8011078:	2200      	movs	r2, #0
 801107a:	8082      	strh	r2, [r0, #4]
 801107c:	4770      	bx	lr
 801107e:	bf00      	nop
 8011080:	0802a30c 	.word	0x0802a30c

08011084 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8011084:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011086:	2000      	movs	r0, #0
 8011088:	b12b      	cbz	r3, 8011096 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801108a:	b920      	cbnz	r0, 8011096 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801108c:	1a5a      	subs	r2, r3, r1
 801108e:	4250      	negs	r0, r2
 8011090:	4150      	adcs	r0, r2
 8011092:	699b      	ldr	r3, [r3, #24]
 8011094:	e7f8      	b.n	8011088 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8011096:	4770      	bx	lr

08011098 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8011098:	2300      	movs	r3, #0
 801109a:	6148      	str	r0, [r1, #20]
 801109c:	618b      	str	r3, [r1, #24]
 801109e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80110a0:	b913      	cbnz	r3, 80110a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80110a2:	6281      	str	r1, [r0, #40]	; 0x28
 80110a4:	4770      	bx	lr
 80110a6:	4613      	mov	r3, r2
 80110a8:	699a      	ldr	r2, [r3, #24]
 80110aa:	2a00      	cmp	r2, #0
 80110ac:	d1fb      	bne.n	80110a6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80110ae:	6199      	str	r1, [r3, #24]
 80110b0:	4770      	bx	lr

080110b2 <_ZN8touchgfx9Container9removeAllEv>:
 80110b2:	2200      	movs	r2, #0
 80110b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80110b6:	b123      	cbz	r3, 80110c2 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80110b8:	6999      	ldr	r1, [r3, #24]
 80110ba:	6281      	str	r1, [r0, #40]	; 0x28
 80110bc:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80110c0:	e7f8      	b.n	80110b4 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80110c2:	4770      	bx	lr

080110c4 <_ZN8touchgfx9Container6unlinkEv>:
 80110c4:	2300      	movs	r3, #0
 80110c6:	6283      	str	r3, [r0, #40]	; 0x28
 80110c8:	4770      	bx	lr

080110ca <_ZNK8touchgfx9Container12getSolidRectEv>:
 80110ca:	2200      	movs	r2, #0
 80110cc:	8002      	strh	r2, [r0, #0]
 80110ce:	8042      	strh	r2, [r0, #2]
 80110d0:	8082      	strh	r2, [r0, #4]
 80110d2:	80c2      	strh	r2, [r0, #6]
 80110d4:	4770      	bx	lr

080110d6 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80110d6:	b570      	push	{r4, r5, r6, lr}
 80110d8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80110da:	460d      	mov	r5, r1
 80110dc:	4616      	mov	r6, r2
 80110de:	b13c      	cbz	r4, 80110f0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80110e0:	6823      	ldr	r3, [r4, #0]
 80110e2:	4620      	mov	r0, r4
 80110e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110e6:	4632      	mov	r2, r6
 80110e8:	4629      	mov	r1, r5
 80110ea:	4798      	blx	r3
 80110ec:	69a4      	ldr	r4, [r4, #24]
 80110ee:	e7f6      	b.n	80110de <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80110f0:	bd70      	pop	{r4, r5, r6, pc}

080110f2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80110f2:	b538      	push	{r3, r4, r5, lr}
 80110f4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80110f6:	460d      	mov	r5, r1
 80110f8:	b134      	cbz	r4, 8011108 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80110fa:	682b      	ldr	r3, [r5, #0]
 80110fc:	4621      	mov	r1, r4
 80110fe:	689b      	ldr	r3, [r3, #8]
 8011100:	4628      	mov	r0, r5
 8011102:	4798      	blx	r3
 8011104:	69a4      	ldr	r4, [r4, #24]
 8011106:	e7f7      	b.n	80110f8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8011108:	bd38      	pop	{r3, r4, r5, pc}

0801110a <_ZNK8touchgfx9Container17invalidateContentEv>:
 801110a:	b510      	push	{r4, lr}
 801110c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801110e:	b12c      	cbz	r4, 801111c <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8011110:	6823      	ldr	r3, [r4, #0]
 8011112:	4620      	mov	r0, r4
 8011114:	699b      	ldr	r3, [r3, #24]
 8011116:	4798      	blx	r3
 8011118:	69a4      	ldr	r4, [r4, #24]
 801111a:	e7f8      	b.n	801110e <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 801111c:	bd10      	pop	{r4, pc}

0801111e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801111e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011120:	b19b      	cbz	r3, 801114a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011122:	428b      	cmp	r3, r1
 8011124:	d109      	bne.n	801113a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8011126:	699a      	ldr	r2, [r3, #24]
 8011128:	2100      	movs	r1, #0
 801112a:	6159      	str	r1, [r3, #20]
 801112c:	6282      	str	r2, [r0, #40]	; 0x28
 801112e:	b902      	cbnz	r2, 8011132 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8011130:	4770      	bx	lr
 8011132:	6199      	str	r1, [r3, #24]
 8011134:	4770      	bx	lr
 8011136:	4613      	mov	r3, r2
 8011138:	b13a      	cbz	r2, 801114a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801113a:	699a      	ldr	r2, [r3, #24]
 801113c:	428a      	cmp	r2, r1
 801113e:	d1fa      	bne.n	8011136 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8011140:	698a      	ldr	r2, [r1, #24]
 8011142:	619a      	str	r2, [r3, #24]
 8011144:	2300      	movs	r3, #0
 8011146:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801114a:	4770      	bx	lr

0801114c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801114c:	b410      	push	{r4}
 801114e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011150:	4604      	mov	r4, r0
 8011152:	b92b      	cbnz	r3, 8011160 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8011154:	6803      	ldr	r3, [r0, #0]
 8011156:	f85d 4b04 	ldr.w	r4, [sp], #4
 801115a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801115c:	4611      	mov	r1, r2
 801115e:	4718      	bx	r3
 8011160:	b941      	cbnz	r1, 8011174 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8011162:	6193      	str	r3, [r2, #24]
 8011164:	6282      	str	r2, [r0, #40]	; 0x28
 8011166:	6154      	str	r4, [r2, #20]
 8011168:	f85d 4b04 	ldr.w	r4, [sp], #4
 801116c:	4770      	bx	lr
 801116e:	4603      	mov	r3, r0
 8011170:	2800      	cmp	r0, #0
 8011172:	d0f9      	beq.n	8011168 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8011174:	4299      	cmp	r1, r3
 8011176:	6998      	ldr	r0, [r3, #24]
 8011178:	d1f9      	bne.n	801116e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801117a:	6190      	str	r0, [r2, #24]
 801117c:	618a      	str	r2, [r1, #24]
 801117e:	e7f2      	b.n	8011166 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08011180 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8011180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011184:	461f      	mov	r7, r3
 8011186:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801118a:	460d      	mov	r5, r1
 801118c:	4616      	mov	r6, r2
 801118e:	b103      	cbz	r3, 8011192 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8011190:	6038      	str	r0, [r7, #0]
 8011192:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011194:	b314      	cbz	r4, 80111dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8011196:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801119a:	b1eb      	cbz	r3, 80111d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801119c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80111a0:	428d      	cmp	r5, r1
 80111a2:	db19      	blt.n	80111d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80111a4:	8923      	ldrh	r3, [r4, #8]
 80111a6:	b289      	uxth	r1, r1
 80111a8:	440b      	add	r3, r1
 80111aa:	b21b      	sxth	r3, r3
 80111ac:	429d      	cmp	r5, r3
 80111ae:	da13      	bge.n	80111d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80111b0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80111b4:	4296      	cmp	r6, r2
 80111b6:	db0f      	blt.n	80111d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80111b8:	8963      	ldrh	r3, [r4, #10]
 80111ba:	b292      	uxth	r2, r2
 80111bc:	4413      	add	r3, r2
 80111be:	b21b      	sxth	r3, r3
 80111c0:	429e      	cmp	r6, r3
 80111c2:	da09      	bge.n	80111d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80111c4:	6823      	ldr	r3, [r4, #0]
 80111c6:	1ab2      	subs	r2, r6, r2
 80111c8:	1a69      	subs	r1, r5, r1
 80111ca:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80111ce:	b212      	sxth	r2, r2
 80111d0:	463b      	mov	r3, r7
 80111d2:	b209      	sxth	r1, r1
 80111d4:	4620      	mov	r0, r4
 80111d6:	47c0      	blx	r8
 80111d8:	69a4      	ldr	r4, [r4, #24]
 80111da:	e7db      	b.n	8011194 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80111dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080111e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80111e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111e4:	4c6e      	ldr	r4, [pc, #440]	; (80113a0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80111e6:	b0a1      	sub	sp, #132	; 0x84
 80111e8:	6824      	ldr	r4, [r4, #0]
 80111ea:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80111ec:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80111f0:	9303      	str	r3, [sp, #12]
 80111f2:	2400      	movs	r4, #0
 80111f4:	802c      	strh	r4, [r5, #0]
 80111f6:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80111f8:	802c      	strh	r4, [r5, #0]
 80111fa:	601c      	str	r4, [r3, #0]
 80111fc:	4606      	mov	r6, r0
 80111fe:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8011202:	f7ff ffbd 	bl	8011180 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011206:	f1b9 0f03 	cmp.w	r9, #3
 801120a:	f340 80c2 	ble.w	8011392 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 801120e:	4631      	mov	r1, r6
 8011210:	a80c      	add	r0, sp, #48	; 0x30
 8011212:	f006 fd49 	bl	8017ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011216:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801121a:	9306      	str	r3, [sp, #24]
 801121c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8011220:	9307      	str	r3, [sp, #28]
 8011222:	9b03      	ldr	r3, [sp, #12]
 8011224:	f8d3 a000 	ldr.w	sl, [r3]
 8011228:	f1ba 0f00 	cmp.w	sl, #0
 801122c:	f000 80b4 	beq.w	8011398 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8011230:	4651      	mov	r1, sl
 8011232:	a810      	add	r0, sp, #64	; 0x40
 8011234:	f006 fd38 	bl	8017ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011238:	9b01      	ldr	r3, [sp, #4]
 801123a:	9a06      	ldr	r2, [sp, #24]
 801123c:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8011240:	189d      	adds	r5, r3, r2
 8011242:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8011246:	9a07      	ldr	r2, [sp, #28]
 8011248:	2002      	movs	r0, #2
 801124a:	fb91 f1f0 	sdiv	r1, r1, r0
 801124e:	4419      	add	r1, r3
 8011250:	1a6d      	subs	r5, r5, r1
 8011252:	9b02      	ldr	r3, [sp, #8]
 8011254:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8011258:	4413      	add	r3, r2
 801125a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 801125e:	fb92 f2f0 	sdiv	r2, r2, r0
 8011262:	440a      	add	r2, r1
 8011264:	1a9b      	subs	r3, r3, r2
 8011266:	435b      	muls	r3, r3
 8011268:	fb05 3505 	mla	r5, r5, r5, r3
 801126c:	4f4d      	ldr	r7, [pc, #308]	; (80113a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 801126e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011270:	ac10      	add	r4, sp, #64	; 0x40
 8011272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011274:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011278:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801127a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801127c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8011280:	f1b9 0f0c 	cmp.w	r9, #12
 8011284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011288:	f04f 0303 	mov.w	r3, #3
 801128c:	bfc8      	it	gt
 801128e:	4698      	movgt	r8, r3
 8011290:	f8cd 9000 	str.w	r9, [sp]
 8011294:	f04f 0400 	mov.w	r4, #0
 8011298:	bfdc      	itt	le
 801129a:	f109 32ff 	addle.w	r2, r9, #4294967295
 801129e:	fb92 f8f3 	sdivle	r8, r2, r3
 80112a2:	1c63      	adds	r3, r4, #1
 80112a4:	aa10      	add	r2, sp, #64	; 0x40
 80112a6:	f004 0401 	and.w	r4, r4, #1
 80112aa:	9308      	str	r3, [sp, #32]
 80112ac:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80112b0:	9b00      	ldr	r3, [sp, #0]
 80112b2:	fb93 f3f8 	sdiv	r3, r3, r8
 80112b6:	b29b      	uxth	r3, r3
 80112b8:	3404      	adds	r4, #4
 80112ba:	f04f 0b00 	mov.w	fp, #0
 80112be:	9304      	str	r3, [sp, #16]
 80112c0:	9a04      	ldr	r2, [sp, #16]
 80112c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80112c6:	fb13 f302 	smulbb	r3, r3, r2
 80112ca:	9a01      	ldr	r2, [sp, #4]
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	1899      	adds	r1, r3, r2
 80112d0:	9305      	str	r3, [sp, #20]
 80112d2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80112d6:	b209      	sxth	r1, r1
 80112d8:	4299      	cmp	r1, r3
 80112da:	db4d      	blt.n	8011378 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80112dc:	8932      	ldrh	r2, [r6, #8]
 80112de:	4413      	add	r3, r2
 80112e0:	b21b      	sxth	r3, r3
 80112e2:	4299      	cmp	r1, r3
 80112e4:	da48      	bge.n	8011378 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80112e6:	9b04      	ldr	r3, [sp, #16]
 80112e8:	6827      	ldr	r7, [r4, #0]
 80112ea:	fb17 f703 	smulbb	r7, r7, r3
 80112ee:	9b02      	ldr	r3, [sp, #8]
 80112f0:	b2bf      	uxth	r7, r7
 80112f2:	18fa      	adds	r2, r7, r3
 80112f4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80112f8:	b212      	sxth	r2, r2
 80112fa:	429a      	cmp	r2, r3
 80112fc:	db3c      	blt.n	8011378 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80112fe:	8970      	ldrh	r0, [r6, #10]
 8011300:	4403      	add	r3, r0
 8011302:	b21b      	sxth	r3, r3
 8011304:	429a      	cmp	r2, r3
 8011306:	da37      	bge.n	8011378 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011308:	2300      	movs	r3, #0
 801130a:	930b      	str	r3, [sp, #44]	; 0x2c
 801130c:	4630      	mov	r0, r6
 801130e:	ab0b      	add	r3, sp, #44	; 0x2c
 8011310:	f7ff ff36 	bl	8011180 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011314:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011316:	b37a      	cbz	r2, 8011378 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011318:	4552      	cmp	r2, sl
 801131a:	d02d      	beq.n	8011378 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801131c:	4611      	mov	r1, r2
 801131e:	a80e      	add	r0, sp, #56	; 0x38
 8011320:	9209      	str	r2, [sp, #36]	; 0x24
 8011322:	f006 fcc1 	bl	8017ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011326:	9a06      	ldr	r2, [sp, #24]
 8011328:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801132c:	9b01      	ldr	r3, [sp, #4]
 801132e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8011332:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8011336:	4413      	add	r3, r2
 8011338:	f04f 0e02 	mov.w	lr, #2
 801133c:	fb91 f1fe 	sdiv	r1, r1, lr
 8011340:	4401      	add	r1, r0
 8011342:	1a58      	subs	r0, r3, r1
 8011344:	9a07      	ldr	r2, [sp, #28]
 8011346:	9b02      	ldr	r3, [sp, #8]
 8011348:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801134c:	fb9c fcfe 	sdiv	ip, ip, lr
 8011350:	4413      	add	r3, r2
 8011352:	448c      	add	ip, r1
 8011354:	eba3 030c 	sub.w	r3, r3, ip
 8011358:	435b      	muls	r3, r3
 801135a:	fb00 3300 	mla	r3, r0, r0, r3
 801135e:	42ab      	cmp	r3, r5
 8011360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011362:	d208      	bcs.n	8011376 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8011364:	9803      	ldr	r0, [sp, #12]
 8011366:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011368:	6001      	str	r1, [r0, #0]
 801136a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801136c:	9805      	ldr	r0, [sp, #20]
 801136e:	8008      	strh	r0, [r1, #0]
 8011370:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011372:	461d      	mov	r5, r3
 8011374:	800f      	strh	r7, [r1, #0]
 8011376:	4692      	mov	sl, r2
 8011378:	f10b 0b01 	add.w	fp, fp, #1
 801137c:	f1bb 0f04 	cmp.w	fp, #4
 8011380:	f104 0408 	add.w	r4, r4, #8
 8011384:	d19c      	bne.n	80112c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8011386:	9b00      	ldr	r3, [sp, #0]
 8011388:	9c08      	ldr	r4, [sp, #32]
 801138a:	444b      	add	r3, r9
 801138c:	4544      	cmp	r4, r8
 801138e:	9300      	str	r3, [sp, #0]
 8011390:	d187      	bne.n	80112a2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8011392:	b021      	add	sp, #132	; 0x84
 8011394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011398:	f04f 35ff 	mov.w	r5, #4294967295
 801139c:	e766      	b.n	801126c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801139e:	bf00      	nop
 80113a0:	20008808 	.word	0x20008808
 80113a4:	08029394 	.word	0x08029394

080113a8 <_ZN8touchgfx4RectaNERKS0_>:
 80113a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113ac:	f9b1 7000 	ldrsh.w	r7, [r1]
 80113b0:	888c      	ldrh	r4, [r1, #4]
 80113b2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80113b6:	443c      	add	r4, r7
 80113b8:	b2a4      	uxth	r4, r4
 80113ba:	fa0f f884 	sxth.w	r8, r4
 80113be:	45c1      	cmp	r9, r8
 80113c0:	da2f      	bge.n	8011422 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80113c2:	8882      	ldrh	r2, [r0, #4]
 80113c4:	444a      	add	r2, r9
 80113c6:	b292      	uxth	r2, r2
 80113c8:	fa0f fe82 	sxth.w	lr, r2
 80113cc:	4577      	cmp	r7, lr
 80113ce:	da28      	bge.n	8011422 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80113d0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80113d4:	88cb      	ldrh	r3, [r1, #6]
 80113d6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80113da:	442b      	add	r3, r5
 80113dc:	b21b      	sxth	r3, r3
 80113de:	429e      	cmp	r6, r3
 80113e0:	da1f      	bge.n	8011422 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80113e2:	88c3      	ldrh	r3, [r0, #6]
 80113e4:	4433      	add	r3, r6
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	fa0f fc83 	sxth.w	ip, r3
 80113ec:	4565      	cmp	r5, ip
 80113ee:	da18      	bge.n	8011422 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80113f0:	454f      	cmp	r7, r9
 80113f2:	bfb8      	it	lt
 80113f4:	464f      	movlt	r7, r9
 80113f6:	42b5      	cmp	r5, r6
 80113f8:	bfb8      	it	lt
 80113fa:	4635      	movlt	r5, r6
 80113fc:	45f0      	cmp	r8, lr
 80113fe:	bfd8      	it	le
 8011400:	4622      	movle	r2, r4
 8011402:	1bd2      	subs	r2, r2, r7
 8011404:	8082      	strh	r2, [r0, #4]
 8011406:	884a      	ldrh	r2, [r1, #2]
 8011408:	88c9      	ldrh	r1, [r1, #6]
 801140a:	8007      	strh	r7, [r0, #0]
 801140c:	440a      	add	r2, r1
 801140e:	b292      	uxth	r2, r2
 8011410:	b211      	sxth	r1, r2
 8011412:	458c      	cmp	ip, r1
 8011414:	bfa8      	it	ge
 8011416:	4613      	movge	r3, r2
 8011418:	1b5b      	subs	r3, r3, r5
 801141a:	80c3      	strh	r3, [r0, #6]
 801141c:	8045      	strh	r5, [r0, #2]
 801141e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011422:	2300      	movs	r3, #0
 8011424:	8003      	strh	r3, [r0, #0]
 8011426:	8043      	strh	r3, [r0, #2]
 8011428:	8083      	strh	r3, [r0, #4]
 801142a:	80c3      	strh	r3, [r0, #6]
 801142c:	e7f7      	b.n	801141e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801142e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801142e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011432:	2b00      	cmp	r3, #0
 8011434:	dd06      	ble.n	8011444 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8011436:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801143a:	2800      	cmp	r0, #0
 801143c:	bfcc      	ite	gt
 801143e:	2000      	movgt	r0, #0
 8011440:	2001      	movle	r0, #1
 8011442:	4770      	bx	lr
 8011444:	2001      	movs	r0, #1
 8011446:	4770      	bx	lr

08011448 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8011448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801144c:	2300      	movs	r3, #0
 801144e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8011450:	8003      	strh	r3, [r0, #0]
 8011452:	4604      	mov	r4, r0
 8011454:	8043      	strh	r3, [r0, #2]
 8011456:	8083      	strh	r3, [r0, #4]
 8011458:	80c3      	strh	r3, [r0, #6]
 801145a:	2d00      	cmp	r5, #0
 801145c:	d040      	beq.n	80114e0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801145e:	1d28      	adds	r0, r5, #4
 8011460:	f7ff ffe5 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 8011464:	b988      	cbnz	r0, 801148a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011466:	4620      	mov	r0, r4
 8011468:	f7ff ffe1 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 801146c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8011470:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011474:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8011478:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801147c:	b138      	cbz	r0, 801148e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801147e:	8022      	strh	r2, [r4, #0]
 8011480:	8063      	strh	r3, [r4, #2]
 8011482:	f8a4 e004 	strh.w	lr, [r4, #4]
 8011486:	f8a4 c006 	strh.w	ip, [r4, #6]
 801148a:	69ad      	ldr	r5, [r5, #24]
 801148c:	e7e5      	b.n	801145a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801148e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011492:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011496:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801149a:	4290      	cmp	r0, r2
 801149c:	4607      	mov	r7, r0
 801149e:	bfa8      	it	ge
 80114a0:	4617      	movge	r7, r2
 80114a2:	4472      	add	r2, lr
 80114a4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80114a8:	8027      	strh	r7, [r4, #0]
 80114aa:	4299      	cmp	r1, r3
 80114ac:	460e      	mov	r6, r1
 80114ae:	4440      	add	r0, r8
 80114b0:	bfa8      	it	ge
 80114b2:	461e      	movge	r6, r3
 80114b4:	4471      	add	r1, lr
 80114b6:	4463      	add	r3, ip
 80114b8:	b200      	sxth	r0, r0
 80114ba:	b212      	sxth	r2, r2
 80114bc:	b209      	sxth	r1, r1
 80114be:	b21b      	sxth	r3, r3
 80114c0:	4290      	cmp	r0, r2
 80114c2:	bfac      	ite	ge
 80114c4:	ebc7 0200 	rsbge	r2, r7, r0
 80114c8:	ebc7 0202 	rsblt	r2, r7, r2
 80114cc:	4299      	cmp	r1, r3
 80114ce:	bfac      	ite	ge
 80114d0:	ebc6 0301 	rsbge	r3, r6, r1
 80114d4:	ebc6 0303 	rsblt	r3, r6, r3
 80114d8:	8066      	strh	r6, [r4, #2]
 80114da:	80a2      	strh	r2, [r4, #4]
 80114dc:	80e3      	strh	r3, [r4, #6]
 80114de:	e7d4      	b.n	801148a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80114e0:	4620      	mov	r0, r4
 80114e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080114e6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80114e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80114ea:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80114ee:	b383      	cbz	r3, 8011552 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80114f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80114f2:	b374      	cbz	r4, 8011552 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80114f4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80114f8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80114fc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8011500:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8011504:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011508:	b303      	cbz	r3, 801154c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801150a:	4668      	mov	r0, sp
 801150c:	1d21      	adds	r1, r4, #4
 801150e:	f8ad 5000 	strh.w	r5, [sp]
 8011512:	f8ad 6002 	strh.w	r6, [sp, #2]
 8011516:	f8ad 7004 	strh.w	r7, [sp, #4]
 801151a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801151e:	f7ff ff43 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 8011522:	4668      	mov	r0, sp
 8011524:	f7ff ff83 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 8011528:	b980      	cbnz	r0, 801154c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801152a:	f8bd 3000 	ldrh.w	r3, [sp]
 801152e:	88a2      	ldrh	r2, [r4, #4]
 8011530:	1a9b      	subs	r3, r3, r2
 8011532:	f8ad 3000 	strh.w	r3, [sp]
 8011536:	88e2      	ldrh	r2, [r4, #6]
 8011538:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801153c:	1a9b      	subs	r3, r3, r2
 801153e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011542:	6823      	ldr	r3, [r4, #0]
 8011544:	4669      	mov	r1, sp
 8011546:	689b      	ldr	r3, [r3, #8]
 8011548:	4620      	mov	r0, r4
 801154a:	4798      	blx	r3
 801154c:	69a4      	ldr	r4, [r4, #24]
 801154e:	2c00      	cmp	r4, #0
 8011550:	d1d8      	bne.n	8011504 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8011552:	b002      	add	sp, #8
 8011554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011558 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8011558:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801155a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801155e:	460d      	mov	r5, r1
 8011560:	4616      	mov	r6, r2
 8011562:	b323      	cbz	r3, 80115ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8011564:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011566:	b314      	cbz	r4, 80115ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8011568:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801156c:	b1eb      	cbz	r3, 80115aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801156e:	6828      	ldr	r0, [r5, #0]
 8011570:	6869      	ldr	r1, [r5, #4]
 8011572:	466b      	mov	r3, sp
 8011574:	c303      	stmia	r3!, {r0, r1}
 8011576:	4668      	mov	r0, sp
 8011578:	1d21      	adds	r1, r4, #4
 801157a:	f7ff ff15 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 801157e:	4668      	mov	r0, sp
 8011580:	f7ff ff55 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 8011584:	b988      	cbnz	r0, 80115aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8011586:	f8bd 3000 	ldrh.w	r3, [sp]
 801158a:	88a2      	ldrh	r2, [r4, #4]
 801158c:	1a9b      	subs	r3, r3, r2
 801158e:	f8ad 3000 	strh.w	r3, [sp]
 8011592:	88e2      	ldrh	r2, [r4, #6]
 8011594:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011598:	1a9b      	subs	r3, r3, r2
 801159a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801159e:	6823      	ldr	r3, [r4, #0]
 80115a0:	4632      	mov	r2, r6
 80115a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80115a4:	4669      	mov	r1, sp
 80115a6:	4620      	mov	r0, r4
 80115a8:	4798      	blx	r3
 80115aa:	69a4      	ldr	r4, [r4, #24]
 80115ac:	e7db      	b.n	8011566 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80115ae:	b002      	add	sp, #8
 80115b0:	bd70      	pop	{r4, r5, r6, pc}

080115b2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80115b2:	b513      	push	{r0, r1, r4, lr}
 80115b4:	6803      	ldr	r3, [r0, #0]
 80115b6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80115ba:	2300      	movs	r3, #0
 80115bc:	e9cd 3300 	strd	r3, r3, [sp]
 80115c0:	466b      	mov	r3, sp
 80115c2:	47a0      	blx	r4
 80115c4:	b002      	add	sp, #8
 80115c6:	bd10      	pop	{r4, pc}

080115c8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80115c8:	2301      	movs	r3, #1
 80115ca:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80115ce:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80115d2:	4770      	bx	lr

080115d4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80115d4:	2301      	movs	r3, #1
 80115d6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80115da:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80115de:	4770      	bx	lr

080115e0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80115e0:	6843      	ldr	r3, [r0, #4]
 80115e2:	2201      	movs	r2, #1
 80115e4:	725a      	strb	r2, [r3, #9]
 80115e6:	6840      	ldr	r0, [r0, #4]
 80115e8:	6803      	ldr	r3, [r0, #0]
 80115ea:	691b      	ldr	r3, [r3, #16]
 80115ec:	4718      	bx	r3

080115ee <_ZN8touchgfx3HAL8flushDMAEv>:
 80115ee:	6840      	ldr	r0, [r0, #4]
 80115f0:	6803      	ldr	r3, [r0, #0]
 80115f2:	689b      	ldr	r3, [r3, #8]
 80115f4:	4718      	bx	r3

080115f6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80115f6:	b530      	push	{r4, r5, lr}
 80115f8:	b08b      	sub	sp, #44	; 0x2c
 80115fa:	6804      	ldr	r4, [r0, #0]
 80115fc:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8011600:	9509      	str	r5, [sp, #36]	; 0x24
 8011602:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8011606:	9508      	str	r5, [sp, #32]
 8011608:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801160c:	9507      	str	r5, [sp, #28]
 801160e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8011612:	9506      	str	r5, [sp, #24]
 8011614:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8011618:	9505      	str	r5, [sp, #20]
 801161a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801161e:	9504      	str	r5, [sp, #16]
 8011620:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8011624:	9503      	str	r5, [sp, #12]
 8011626:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801162a:	9502      	str	r5, [sp, #8]
 801162c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8011630:	e9cd 3500 	strd	r3, r5, [sp]
 8011634:	4613      	mov	r3, r2
 8011636:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8011638:	2200      	movs	r2, #0
 801163a:	47a0      	blx	r4
 801163c:	b00b      	add	sp, #44	; 0x2c
 801163e:	bd30      	pop	{r4, r5, pc}

08011640 <_ZN8touchgfx3HAL10beginFrameEv>:
 8011640:	4b04      	ldr	r3, [pc, #16]	; (8011654 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	b123      	cbz	r3, 8011650 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8011646:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801164a:	f080 0001 	eor.w	r0, r0, #1
 801164e:	4770      	bx	lr
 8011650:	2001      	movs	r0, #1
 8011652:	4770      	bx	lr
 8011654:	20008806 	.word	0x20008806

08011658 <_ZN8touchgfx3HAL8endFrameEv>:
 8011658:	b510      	push	{r4, lr}
 801165a:	4604      	mov	r4, r0
 801165c:	6840      	ldr	r0, [r0, #4]
 801165e:	6803      	ldr	r3, [r0, #0]
 8011660:	689b      	ldr	r3, [r3, #8]
 8011662:	4798      	blx	r3
 8011664:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8011668:	b113      	cbz	r3, 8011670 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801166a:	2301      	movs	r3, #1
 801166c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8011670:	bd10      	pop	{r4, pc}

08011672 <_ZN8touchgfx3HAL10initializeEv>:
 8011672:	b510      	push	{r4, lr}
 8011674:	4604      	mov	r4, r0
 8011676:	f7fe f95d 	bl	800f934 <_ZN8touchgfx10OSWrappers10initializeEv>
 801167a:	6860      	ldr	r0, [r4, #4]
 801167c:	6803      	ldr	r3, [r0, #0]
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	4798      	blx	r3
 8011682:	68e0      	ldr	r0, [r4, #12]
 8011684:	6803      	ldr	r3, [r0, #0]
 8011686:	689b      	ldr	r3, [r3, #8]
 8011688:	4798      	blx	r3
 801168a:	6823      	ldr	r3, [r4, #0]
 801168c:	4620      	mov	r0, r4
 801168e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011694:	4718      	bx	r3

08011696 <_ZN8touchgfx3HAL9taskEntryEv>:
 8011696:	b508      	push	{r3, lr}
 8011698:	6803      	ldr	r3, [r0, #0]
 801169a:	4604      	mov	r4, r0
 801169c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80116a0:	4798      	blx	r3
 80116a2:	6823      	ldr	r3, [r4, #0]
 80116a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80116a6:	4620      	mov	r0, r4
 80116a8:	4798      	blx	r3
 80116aa:	f7fe f9b9 	bl	800fa20 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80116ae:	6823      	ldr	r3, [r4, #0]
 80116b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116b2:	e7f8      	b.n	80116a6 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080116b4 <_ZN8touchgfx3HAL4tickEv>:
 80116b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80116b6:	6803      	ldr	r3, [r0, #0]
 80116b8:	4d5b      	ldr	r5, [pc, #364]	; (8011828 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80116ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80116be:	4604      	mov	r4, r0
 80116c0:	4798      	blx	r3
 80116c2:	2800      	cmp	r0, #0
 80116c4:	f000 8095 	beq.w	80117f2 <_ZN8touchgfx3HAL4tickEv+0x13e>
 80116c8:	2001      	movs	r0, #1
 80116ca:	f7fd fe31 	bl	800f330 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80116ce:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80116d2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80116d6:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80116da:	2600      	movs	r6, #0
 80116dc:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80116e0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80116e4:	b133      	cbz	r3, 80116f4 <_ZN8touchgfx3HAL4tickEv+0x40>
 80116e6:	6823      	ldr	r3, [r4, #0]
 80116e8:	4620      	mov	r0, r4
 80116ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80116ee:	4798      	blx	r3
 80116f0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80116f4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80116f8:	6862      	ldr	r2, [r4, #4]
 80116fa:	f083 0301 	eor.w	r3, r3, #1
 80116fe:	7253      	strb	r3, [r2, #9]
 8011700:	2601      	movs	r6, #1
 8011702:	702e      	strb	r6, [r5, #0]
 8011704:	f005 fa9e 	bl	8016c44 <_ZN8touchgfx11Application11getInstanceEv>
 8011708:	6803      	ldr	r3, [r0, #0]
 801170a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801170c:	4798      	blx	r3
 801170e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8011712:	b90b      	cbnz	r3, 8011718 <_ZN8touchgfx3HAL4tickEv+0x64>
 8011714:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8011718:	f005 fa94 	bl	8016c44 <_ZN8touchgfx11Application11getInstanceEv>
 801171c:	6803      	ldr	r3, [r0, #0]
 801171e:	695b      	ldr	r3, [r3, #20]
 8011720:	4798      	blx	r3
 8011722:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011724:	6803      	ldr	r3, [r0, #0]
 8011726:	691b      	ldr	r3, [r3, #16]
 8011728:	4798      	blx	r3
 801172a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801172e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8011732:	3b01      	subs	r3, #1
 8011734:	b2db      	uxtb	r3, r3
 8011736:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801173a:	b10a      	cbz	r2, 8011740 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801173c:	2b00      	cmp	r3, #0
 801173e:	d1eb      	bne.n	8011718 <_ZN8touchgfx3HAL4tickEv+0x64>
 8011740:	4a3a      	ldr	r2, [pc, #232]	; (801182c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8011742:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8011746:	7813      	ldrb	r3, [r2, #0]
 8011748:	3301      	adds	r3, #1
 801174a:	b25b      	sxtb	r3, r3
 801174c:	4299      	cmp	r1, r3
 801174e:	7013      	strb	r3, [r2, #0]
 8011750:	dc10      	bgt.n	8011774 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8011752:	68e0      	ldr	r0, [r4, #12]
 8011754:	2300      	movs	r3, #0
 8011756:	7013      	strb	r3, [r2, #0]
 8011758:	6803      	ldr	r3, [r0, #0]
 801175a:	aa03      	add	r2, sp, #12
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	a902      	add	r1, sp, #8
 8011760:	4798      	blx	r3
 8011762:	6823      	ldr	r3, [r4, #0]
 8011764:	2800      	cmp	r0, #0
 8011766:	d050      	beq.n	801180a <_ZN8touchgfx3HAL4tickEv+0x156>
 8011768:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801176c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011770:	4620      	mov	r0, r4
 8011772:	4798      	blx	r3
 8011774:	6960      	ldr	r0, [r4, #20]
 8011776:	2300      	movs	r3, #0
 8011778:	f88d 3007 	strb.w	r3, [sp, #7]
 801177c:	b158      	cbz	r0, 8011796 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801177e:	6803      	ldr	r3, [r0, #0]
 8011780:	f10d 0107 	add.w	r1, sp, #7
 8011784:	68db      	ldr	r3, [r3, #12]
 8011786:	4798      	blx	r3
 8011788:	b128      	cbz	r0, 8011796 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801178a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801178c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011790:	6803      	ldr	r3, [r0, #0]
 8011792:	68db      	ldr	r3, [r3, #12]
 8011794:	4798      	blx	r3
 8011796:	f104 001c 	add.w	r0, r4, #28
 801179a:	f013 ffab 	bl	80256f4 <_ZN8touchgfx8Gestures4tickEv>
 801179e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80117a2:	b30b      	cbz	r3, 80117e8 <_ZN8touchgfx3HAL4tickEv+0x134>
 80117a4:	6920      	ldr	r0, [r4, #16]
 80117a6:	6803      	ldr	r3, [r0, #0]
 80117a8:	691b      	ldr	r3, [r3, #16]
 80117aa:	4798      	blx	r3
 80117ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80117ae:	4606      	mov	r6, r0
 80117b0:	b903      	cbnz	r3, 80117b4 <_ZN8touchgfx3HAL4tickEv+0x100>
 80117b2:	6720      	str	r0, [r4, #112]	; 0x70
 80117b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80117b6:	4a1e      	ldr	r2, [pc, #120]	; (8011830 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80117b8:	1af3      	subs	r3, r6, r3
 80117ba:	4293      	cmp	r3, r2
 80117bc:	d914      	bls.n	80117e8 <_ZN8touchgfx3HAL4tickEv+0x134>
 80117be:	6920      	ldr	r0, [r4, #16]
 80117c0:	6803      	ldr	r3, [r0, #0]
 80117c2:	699b      	ldr	r3, [r3, #24]
 80117c4:	4798      	blx	r3
 80117c6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80117c8:	2264      	movs	r2, #100	; 0x64
 80117ca:	1af3      	subs	r3, r6, r3
 80117cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80117d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80117d4:	2800      	cmp	r0, #0
 80117d6:	dc1d      	bgt.n	8011814 <_ZN8touchgfx3HAL4tickEv+0x160>
 80117d8:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80117dc:	6920      	ldr	r0, [r4, #16]
 80117de:	6803      	ldr	r3, [r0, #0]
 80117e0:	2100      	movs	r1, #0
 80117e2:	69db      	ldr	r3, [r3, #28]
 80117e4:	4798      	blx	r3
 80117e6:	6726      	str	r6, [r4, #112]	; 0x70
 80117e8:	f005 fa2c 	bl	8016c44 <_ZN8touchgfx11Application11getInstanceEv>
 80117ec:	6803      	ldr	r3, [r0, #0]
 80117ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117f0:	4798      	blx	r3
 80117f2:	6823      	ldr	r3, [r4, #0]
 80117f4:	4620      	mov	r0, r4
 80117f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80117fa:	4798      	blx	r3
 80117fc:	2001      	movs	r0, #1
 80117fe:	f7fd fdb3 	bl	800f368 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011802:	2300      	movs	r3, #0
 8011804:	702b      	strb	r3, [r5, #0]
 8011806:	b004      	add	sp, #16
 8011808:	bd70      	pop	{r4, r5, r6, pc}
 801180a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801180e:	4620      	mov	r0, r4
 8011810:	4798      	blx	r3
 8011812:	e7af      	b.n	8011774 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8011814:	2863      	cmp	r0, #99	; 0x63
 8011816:	bfcb      	itete	gt
 8011818:	2300      	movgt	r3, #0
 801181a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801181e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8011822:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8011826:	e7d9      	b.n	80117dc <_ZN8touchgfx3HAL4tickEv+0x128>
 8011828:	2000880c 	.word	0x2000880c
 801182c:	2000880d 	.word	0x2000880d
 8011830:	05f5e100 	.word	0x05f5e100

08011834 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8011834:	f7fe b8c0 	b.w	800f9b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08011838 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8011838:	6581      	str	r1, [r0, #88]	; 0x58
 801183a:	301c      	adds	r0, #28
 801183c:	f013 bf58 	b.w	80256f0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08011840 <_ZN8touchgfx3HAL5touchEll>:
 8011840:	b530      	push	{r4, r5, lr}
 8011842:	b087      	sub	sp, #28
 8011844:	4604      	mov	r4, r0
 8011846:	a804      	add	r0, sp, #16
 8011848:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801184c:	f004 ffc6 	bl	80167dc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8011850:	9b04      	ldr	r3, [sp, #16]
 8011852:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011856:	a906      	add	r1, sp, #24
 8011858:	9b05      	ldr	r3, [sp, #20]
 801185a:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801185e:	a803      	add	r0, sp, #12
 8011860:	f005 f80e 	bl	8016880 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8011864:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8011868:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801186c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8011870:	f104 001c 	add.w	r0, r4, #28
 8011874:	b189      	cbz	r1, 801189a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8011876:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801187a:	9300      	str	r3, [sp, #0]
 801187c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8011880:	4613      	mov	r3, r2
 8011882:	462a      	mov	r2, r5
 8011884:	f013 ff44 	bl	8025710 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8011888:	b128      	cbz	r0, 8011896 <_ZN8touchgfx3HAL5touchEll+0x56>
 801188a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801188e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8011890:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011894:	6623      	str	r3, [r4, #96]	; 0x60
 8011896:	b007      	add	sp, #28
 8011898:	bd30      	pop	{r4, r5, pc}
 801189a:	f013 ff79 	bl	8025790 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801189e:	2301      	movs	r3, #1
 80118a0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80118a4:	e7f1      	b.n	801188a <_ZN8touchgfx3HAL5touchEll+0x4a>

080118a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80118a6:	b510      	push	{r4, lr}
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d046      	beq.n	801193a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80118ac:	ea81 0002 	eor.w	r0, r1, r2
 80118b0:	07c4      	lsls	r4, r0, #31
 80118b2:	d508      	bpl.n	80118c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80118b4:	440b      	add	r3, r1
 80118b6:	3a01      	subs	r2, #1
 80118b8:	428b      	cmp	r3, r1
 80118ba:	d93e      	bls.n	801193a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80118bc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80118c0:	f801 0b01 	strb.w	r0, [r1], #1
 80118c4:	e7f8      	b.n	80118b8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80118c6:	07d0      	lsls	r0, r2, #31
 80118c8:	bf42      	ittt	mi
 80118ca:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80118ce:	f801 0b01 	strbmi.w	r0, [r1], #1
 80118d2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80118d6:	2b01      	cmp	r3, #1
 80118d8:	d911      	bls.n	80118fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80118da:	ea81 0402 	eor.w	r4, r1, r2
 80118de:	07a4      	lsls	r4, r4, #30
 80118e0:	4610      	mov	r0, r2
 80118e2:	d022      	beq.n	801192a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80118e4:	f023 0401 	bic.w	r4, r3, #1
 80118e8:	440c      	add	r4, r1
 80118ea:	428c      	cmp	r4, r1
 80118ec:	4602      	mov	r2, r0
 80118ee:	d904      	bls.n	80118fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80118f0:	8812      	ldrh	r2, [r2, #0]
 80118f2:	f821 2b02 	strh.w	r2, [r1], #2
 80118f6:	3002      	adds	r0, #2
 80118f8:	e7f7      	b.n	80118ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80118fa:	f003 0301 	and.w	r3, r3, #1
 80118fe:	f023 0003 	bic.w	r0, r3, #3
 8011902:	4408      	add	r0, r1
 8011904:	4288      	cmp	r0, r1
 8011906:	4614      	mov	r4, r2
 8011908:	d904      	bls.n	8011914 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801190a:	6824      	ldr	r4, [r4, #0]
 801190c:	f841 4b04 	str.w	r4, [r1], #4
 8011910:	3204      	adds	r2, #4
 8011912:	e7f7      	b.n	8011904 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8011914:	f003 0303 	and.w	r3, r3, #3
 8011918:	440b      	add	r3, r1
 801191a:	3a01      	subs	r2, #1
 801191c:	428b      	cmp	r3, r1
 801191e:	d90c      	bls.n	801193a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8011920:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8011924:	f801 0b01 	strb.w	r0, [r1], #1
 8011928:	e7f8      	b.n	801191c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801192a:	0790      	lsls	r0, r2, #30
 801192c:	d0e7      	beq.n	80118fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801192e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8011932:	f821 0b02 	strh.w	r0, [r1], #2
 8011936:	3b02      	subs	r3, #2
 8011938:	e7e1      	b.n	80118fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801193a:	2001      	movs	r0, #1
 801193c:	bd10      	pop	{r4, pc}

0801193e <_ZN8touchgfx3HAL7noTouchEv>:
 801193e:	b510      	push	{r4, lr}
 8011940:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8011944:	4604      	mov	r4, r0
 8011946:	b153      	cbz	r3, 801195e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8011948:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801194c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8011950:	2101      	movs	r1, #1
 8011952:	301c      	adds	r0, #28
 8011954:	f013 ff1c 	bl	8025790 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8011958:	2300      	movs	r3, #0
 801195a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801195e:	bd10      	pop	{r4, pc}

08011960 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8011960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011964:	b085      	sub	sp, #20
 8011966:	ad04      	add	r5, sp, #16
 8011968:	4604      	mov	r4, r0
 801196a:	2000      	movs	r0, #0
 801196c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8011970:	69a0      	ldr	r0, [r4, #24]
 8011972:	6806      	ldr	r6, [r0, #0]
 8011974:	9501      	str	r5, [sp, #4]
 8011976:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801197a:	9500      	str	r5, [sp, #0]
 801197c:	6835      	ldr	r5, [r6, #0]
 801197e:	4699      	mov	r9, r3
 8011980:	460f      	mov	r7, r1
 8011982:	4690      	mov	r8, r2
 8011984:	47a8      	blx	r5
 8011986:	4d10      	ldr	r5, [pc, #64]	; (80119c8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8011988:	4606      	mov	r6, r0
 801198a:	f8a5 9000 	strh.w	r9, [r5]
 801198e:	f7f8 fac5 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 8011992:	6803      	ldr	r3, [r0, #0]
 8011994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011996:	4798      	blx	r3
 8011998:	b128      	cbz	r0, 80119a6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801199a:	2801      	cmp	r0, #1
 801199c:	d00b      	beq.n	80119b6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801199e:	4630      	mov	r0, r6
 80119a0:	b005      	add	sp, #20
 80119a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119a6:	882b      	ldrh	r3, [r5, #0]
 80119a8:	fb08 7203 	mla	r2, r8, r3, r7
 80119ac:	9b03      	ldr	r3, [sp, #12]
 80119ae:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80119b2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80119b4:	e7f3      	b.n	801199e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80119b6:	882a      	ldrh	r2, [r5, #0]
 80119b8:	9b03      	ldr	r3, [sp, #12]
 80119ba:	fb08 7202 	mla	r2, r8, r2, r7
 80119be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80119c2:	1a9a      	subs	r2, r3, r2
 80119c4:	63e2      	str	r2, [r4, #60]	; 0x3c
 80119c6:	e7ea      	b.n	801199e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80119c8:	20008802 	.word	0x20008802

080119cc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80119cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119ce:	b08b      	sub	sp, #44	; 0x2c
 80119d0:	4617      	mov	r7, r2
 80119d2:	4604      	mov	r4, r0
 80119d4:	460e      	mov	r6, r1
 80119d6:	461d      	mov	r5, r3
 80119d8:	f7f8 faa0 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 80119dc:	6803      	ldr	r3, [r0, #0]
 80119de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119e0:	4798      	blx	r3
 80119e2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80119e6:	9007      	str	r0, [sp, #28]
 80119e8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80119ec:	4b0d      	ldr	r3, [pc, #52]	; (8011a24 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80119ee:	6822      	ldr	r2, [r4, #0]
 80119f0:	881b      	ldrh	r3, [r3, #0]
 80119f2:	9306      	str	r3, [sp, #24]
 80119f4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80119f8:	9305      	str	r3, [sp, #20]
 80119fa:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80119fe:	9304      	str	r3, [sp, #16]
 8011a00:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011a04:	9303      	str	r3, [sp, #12]
 8011a06:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011a0a:	9302      	str	r3, [sp, #8]
 8011a0c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011a10:	e9cd 5300 	strd	r5, r3, [sp]
 8011a14:	4631      	mov	r1, r6
 8011a16:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8011a18:	463b      	mov	r3, r7
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	47a8      	blx	r5
 8011a20:	b00b      	add	sp, #44	; 0x2c
 8011a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a24:	20008802 	.word	0x20008802

08011a28 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8011a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a2c:	4698      	mov	r8, r3
 8011a2e:	6803      	ldr	r3, [r0, #0]
 8011a30:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8011a32:	4b15      	ldr	r3, [pc, #84]	; (8011a88 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8011a34:	b08b      	sub	sp, #44	; 0x2c
 8011a36:	4617      	mov	r7, r2
 8011a38:	f8b3 9000 	ldrh.w	r9, [r3]
 8011a3c:	460e      	mov	r6, r1
 8011a3e:	4604      	mov	r4, r0
 8011a40:	f7f8 fa6c 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 8011a44:	6803      	ldr	r3, [r0, #0]
 8011a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a48:	4798      	blx	r3
 8011a4a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8011a4e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8011a52:	2302      	movs	r3, #2
 8011a54:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8011a58:	2301      	movs	r3, #1
 8011a5a:	9305      	str	r3, [sp, #20]
 8011a5c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8011a60:	9304      	str	r3, [sp, #16]
 8011a62:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8011a66:	9303      	str	r3, [sp, #12]
 8011a68:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011a6c:	9302      	str	r3, [sp, #8]
 8011a6e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011a72:	2200      	movs	r2, #0
 8011a74:	e9cd 8300 	strd	r8, r3, [sp]
 8011a78:	4631      	mov	r1, r6
 8011a7a:	463b      	mov	r3, r7
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	47a8      	blx	r5
 8011a80:	b00b      	add	sp, #44	; 0x2c
 8011a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a86:	bf00      	nop
 8011a88:	20008802 	.word	0x20008802

08011a8c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8011a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a90:	4698      	mov	r8, r3
 8011a92:	6803      	ldr	r3, [r0, #0]
 8011a94:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8011a96:	4b11      	ldr	r3, [pc, #68]	; (8011adc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8011a98:	b087      	sub	sp, #28
 8011a9a:	f8b3 9000 	ldrh.w	r9, [r3]
 8011a9e:	460e      	mov	r6, r1
 8011aa0:	4617      	mov	r7, r2
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	f7f8 fa3a 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 8011aa8:	6803      	ldr	r3, [r0, #0]
 8011aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aac:	4798      	blx	r3
 8011aae:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8011ab2:	f8cd 900c 	str.w	r9, [sp, #12]
 8011ab6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8011aba:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8011abe:	9302      	str	r3, [sp, #8]
 8011ac0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8011ac4:	9301      	str	r3, [sp, #4]
 8011ac6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	463a      	mov	r2, r7
 8011ace:	4643      	mov	r3, r8
 8011ad0:	4631      	mov	r1, r6
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	47a8      	blx	r5
 8011ad6:	b007      	add	sp, #28
 8011ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011adc:	20008802 	.word	0x20008802

08011ae0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8011ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae4:	4604      	mov	r4, r0
 8011ae6:	b08f      	sub	sp, #60	; 0x3c
 8011ae8:	4610      	mov	r0, r2
 8011aea:	460d      	mov	r5, r1
 8011aec:	4691      	mov	r9, r2
 8011aee:	461e      	mov	r6, r3
 8011af0:	f008 f852 	bl	8019b98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011af4:	2800      	cmp	r0, #0
 8011af6:	f000 809d 	beq.w	8011c34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8011afa:	6823      	ldr	r3, [r4, #0]
 8011afc:	f8df b198 	ldr.w	fp, [pc, #408]	; 8011c98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8011b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b02:	f8df a198 	ldr.w	sl, [pc, #408]	; 8011c9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8011b06:	4f61      	ldr	r7, [pc, #388]	; (8011c8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011b08:	4620      	mov	r0, r4
 8011b0a:	4798      	blx	r3
 8011b0c:	6823      	ldr	r3, [r4, #0]
 8011b0e:	4620      	mov	r0, r4
 8011b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b12:	4798      	blx	r3
 8011b14:	f8bb 3000 	ldrh.w	r3, [fp]
 8011b18:	9301      	str	r3, [sp, #4]
 8011b1a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8011b1e:	f8ba 3000 	ldrh.w	r3, [sl]
 8011b22:	9302      	str	r3, [sp, #8]
 8011b24:	883b      	ldrh	r3, [r7, #0]
 8011b26:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8011b2a:	9303      	str	r3, [sp, #12]
 8011b2c:	4b58      	ldr	r3, [pc, #352]	; (8011c90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011b2e:	9305      	str	r3, [sp, #20]
 8011b30:	881a      	ldrh	r2, [r3, #0]
 8011b32:	9204      	str	r2, [sp, #16]
 8011b34:	4640      	mov	r0, r8
 8011b36:	f008 f8c3 	bl	8019cc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011b3a:	8038      	strh	r0, [r7, #0]
 8011b3c:	4640      	mov	r0, r8
 8011b3e:	f008 f8f3 	bl	8019d28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011b42:	9b05      	ldr	r3, [sp, #20]
 8011b44:	b280      	uxth	r0, r0
 8011b46:	8018      	strh	r0, [r3, #0]
 8011b48:	4b52      	ldr	r3, [pc, #328]	; (8011c94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d174      	bne.n	8011c3a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8011b50:	883b      	ldrh	r3, [r7, #0]
 8011b52:	f8ab 3000 	strh.w	r3, [fp]
 8011b56:	f8aa 0000 	strh.w	r0, [sl]
 8011b5a:	4648      	mov	r0, r9
 8011b5c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8011b60:	f008 f81a 	bl	8019b98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011b64:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8011b68:	2200      	movs	r2, #0
 8011b6a:	4611      	mov	r1, r2
 8011b6c:	4628      	mov	r0, r5
 8011b6e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8011b72:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8011b76:	f7f8 ff8e 	bl	800aa96 <_ZN8touchgfx8Drawable5setXYEss>
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8011b80:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8011b84:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	dd5c      	ble.n	8011c46 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8011b8c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	dd58      	ble.n	8011c46 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8011b94:	462a      	mov	r2, r5
 8011b96:	ab0a      	add	r3, sp, #40	; 0x28
 8011b98:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011b9c:	6851      	ldr	r1, [r2, #4]
 8011b9e:	c303      	stmia	r3!, {r0, r1}
 8011ba0:	4631      	mov	r1, r6
 8011ba2:	a80a      	add	r0, sp, #40	; 0x28
 8011ba4:	f7ff fc00 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 8011ba8:	4b38      	ldr	r3, [pc, #224]	; (8011c8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011baa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011bae:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8011bb2:	2100      	movs	r1, #0
 8011bb4:	aa0a      	add	r2, sp, #40	; 0x28
 8011bb6:	4b36      	ldr	r3, [pc, #216]	; (8011c90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011bb8:	910c      	str	r1, [sp, #48]	; 0x30
 8011bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bc2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8011bc6:	ab08      	add	r3, sp, #32
 8011bc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	a90c      	add	r1, sp, #48	; 0x30
 8011bd0:	f7ff fbea 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 8011bd4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d13c      	bne.n	8011c54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8011bda:	2000      	movs	r0, #0
 8011bdc:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8011be0:	2600      	movs	r6, #0
 8011be2:	682a      	ldr	r2, [r5, #0]
 8011be4:	696b      	ldr	r3, [r5, #20]
 8011be6:	616e      	str	r6, [r5, #20]
 8011be8:	9305      	str	r3, [sp, #20]
 8011bea:	6892      	ldr	r2, [r2, #8]
 8011bec:	a908      	add	r1, sp, #32
 8011bee:	4628      	mov	r0, r5
 8011bf0:	4790      	blx	r2
 8011bf2:	9b05      	ldr	r3, [sp, #20]
 8011bf4:	616b      	str	r3, [r5, #20]
 8011bf6:	4652      	mov	r2, sl
 8011bf8:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8011bfc:	4649      	mov	r1, r9
 8011bfe:	4628      	mov	r0, r5
 8011c00:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8011c04:	f7f8 ff47 	bl	800aa96 <_ZN8touchgfx8Drawable5setXYEss>
 8011c08:	4b23      	ldr	r3, [pc, #140]	; (8011c98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8011c0a:	9a01      	ldr	r2, [sp, #4]
 8011c0c:	801a      	strh	r2, [r3, #0]
 8011c0e:	4b23      	ldr	r3, [pc, #140]	; (8011c9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8011c10:	9a02      	ldr	r2, [sp, #8]
 8011c12:	801a      	strh	r2, [r3, #0]
 8011c14:	4b1d      	ldr	r3, [pc, #116]	; (8011c8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011c16:	9a03      	ldr	r2, [sp, #12]
 8011c18:	801a      	strh	r2, [r3, #0]
 8011c1a:	4b1d      	ldr	r3, [pc, #116]	; (8011c90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011c1c:	9a04      	ldr	r2, [sp, #16]
 8011c1e:	801a      	strh	r2, [r3, #0]
 8011c20:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8011c24:	6823      	ldr	r3, [r4, #0]
 8011c26:	4620      	mov	r0, r4
 8011c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c2a:	4798      	blx	r3
 8011c2c:	6823      	ldr	r3, [r4, #0]
 8011c2e:	4620      	mov	r0, r4
 8011c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c32:	4798      	blx	r3
 8011c34:	b00f      	add	sp, #60	; 0x3c
 8011c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c3a:	883b      	ldrh	r3, [r7, #0]
 8011c3c:	f8ab 0000 	strh.w	r0, [fp]
 8011c40:	f8aa 3000 	strh.w	r3, [sl]
 8011c44:	e789      	b.n	8011b5a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8011c46:	462a      	mov	r2, r5
 8011c48:	ab0a      	add	r3, sp, #40	; 0x28
 8011c4a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011c4e:	6851      	ldr	r1, [r2, #4]
 8011c50:	c303      	stmia	r3!, {r0, r1}
 8011c52:	e7a9      	b.n	8011ba8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8011c54:	a807      	add	r0, sp, #28
 8011c56:	f008 f9a3 	bl	8019fa0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011c5a:	4606      	mov	r6, r0
 8011c5c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8011c5e:	6803      	ldr	r3, [r0, #0]
 8011c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c62:	4798      	blx	r3
 8011c64:	4286      	cmp	r6, r0
 8011c66:	d1b8      	bne.n	8011bda <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8011c68:	f7f8 f958 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 8011c6c:	6803      	ldr	r3, [r0, #0]
 8011c6e:	4606      	mov	r6, r0
 8011c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c72:	9305      	str	r3, [sp, #20]
 8011c74:	a807      	add	r0, sp, #28
 8011c76:	f008 f993 	bl	8019fa0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011c7a:	9b05      	ldr	r3, [sp, #20]
 8011c7c:	4601      	mov	r1, r0
 8011c7e:	4630      	mov	r0, r6
 8011c80:	4798      	blx	r3
 8011c82:	f080 0001 	eor.w	r0, r0, #1
 8011c86:	b2c0      	uxtb	r0, r0
 8011c88:	e7a8      	b.n	8011bdc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8011c8a:	bf00      	nop
 8011c8c:	200087fc 	.word	0x200087fc
 8011c90:	200087fe 	.word	0x200087fe
 8011c94:	20008800 	.word	0x20008800
 8011c98:	20008802 	.word	0x20008802
 8011c9c:	20008804 	.word	0x20008804

08011ca0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8011ca0:	b510      	push	{r4, lr}
 8011ca2:	4b07      	ldr	r3, [pc, #28]	; (8011cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8011ca4:	781b      	ldrb	r3, [r3, #0]
 8011ca6:	4604      	mov	r4, r0
 8011ca8:	b13b      	cbz	r3, 8011cba <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8011caa:	6803      	ldr	r3, [r0, #0]
 8011cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cae:	4798      	blx	r3
 8011cb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011cb2:	4283      	cmp	r3, r0
 8011cb4:	d101      	bne.n	8011cba <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8011cb6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8011cb8:	bd10      	pop	{r4, pc}
 8011cba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011cbc:	e7fc      	b.n	8011cb8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8011cbe:	bf00      	nop
 8011cc0:	20008806 	.word	0x20008806

08011cc4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8011cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc8:	b08a      	sub	sp, #40	; 0x28
 8011cca:	461d      	mov	r5, r3
 8011ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011cd0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011cd4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011cd8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011cdc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011ce0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011ce4:	2400      	movs	r4, #0
 8011ce6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011cea:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8011cee:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011cf2:	4690      	mov	r8, r2
 8011cf4:	4607      	mov	r7, r0
 8011cf6:	9404      	str	r4, [sp, #16]
 8011cf8:	f88d 4020 	strb.w	r4, [sp, #32]
 8011cfc:	f7ff ffd0 	bl	8011ca0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011d00:	fb06 8505 	mla	r5, r6, r5, r8
 8011d04:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	9505      	str	r5, [sp, #20]
 8011d0c:	f8ad 601e 	strh.w	r6, [sp, #30]
 8011d10:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011d14:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8011d18:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8011d1c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8011d20:	6803      	ldr	r3, [r0, #0]
 8011d22:	a901      	add	r1, sp, #4
 8011d24:	685b      	ldr	r3, [r3, #4]
 8011d26:	4798      	blx	r3
 8011d28:	b00a      	add	sp, #40	; 0x28
 8011d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d2e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8011d2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d32:	b08b      	sub	sp, #44	; 0x2c
 8011d34:	2400      	movs	r4, #0
 8011d36:	461d      	mov	r5, r3
 8011d38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011d3c:	4688      	mov	r8, r1
 8011d3e:	4691      	mov	r9, r2
 8011d40:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8011d44:	9404      	str	r4, [sp, #16]
 8011d46:	4607      	mov	r7, r0
 8011d48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d4c:	f7ff ffa8 	bl	8011ca0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011d50:	fb06 9505 	mla	r5, r6, r5, r9
 8011d54:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011d58:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011d5c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011d60:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011d64:	6878      	ldr	r0, [r7, #4]
 8011d66:	9505      	str	r5, [sp, #20]
 8011d68:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011d6c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8011d70:	f8ad 601e 	strh.w	r6, [sp, #30]
 8011d74:	f8cd 8010 	str.w	r8, [sp, #16]
 8011d78:	f8ad 4020 	strh.w	r4, [sp, #32]
 8011d7c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011d80:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8011d84:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8011d88:	6803      	ldr	r3, [r0, #0]
 8011d8a:	a901      	add	r1, sp, #4
 8011d8c:	685b      	ldr	r3, [r3, #4]
 8011d8e:	4798      	blx	r3
 8011d90:	b00b      	add	sp, #44	; 0x2c
 8011d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08011d98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8011d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d9c:	b08a      	sub	sp, #40	; 0x28
 8011d9e:	4698      	mov	r8, r3
 8011da0:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8011da4:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8011da8:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8011dac:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8011db0:	2300      	movs	r3, #0
 8011db2:	2d0b      	cmp	r5, #11
 8011db4:	4606      	mov	r6, r0
 8011db6:	9304      	str	r3, [sp, #16]
 8011db8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8011dbc:	d138      	bne.n	8011e30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 8011dbe:	2380      	movs	r3, #128	; 0x80
 8011dc0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011dc4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011dc8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011dcc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011dd0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011dd4:	f88d 0020 	strb.w	r0, [sp, #32]
 8011dd8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011ddc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011de0:	4630      	mov	r0, r6
 8011de2:	9203      	str	r2, [sp, #12]
 8011de4:	f7ff ff5c 	bl	8011ca0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011de8:	2c0b      	cmp	r4, #11
 8011dea:	bf98      	it	ls
 8011dec:	4b1b      	ldrls	r3, [pc, #108]	; (8011e5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8011dee:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8011df2:	bf98      	it	ls
 8011df4:	5d19      	ldrbls	r1, [r3, r4]
 8011df6:	f8ad 701e 	strh.w	r7, [sp, #30]
 8011dfa:	bf88      	it	hi
 8011dfc:	2100      	movhi	r1, #0
 8011dfe:	fb02 8307 	mla	r3, r2, r7, r8
 8011e02:	10c9      	asrs	r1, r1, #3
 8011e04:	fb01 0003 	mla	r0, r1, r3, r0
 8011e08:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8011e0c:	9005      	str	r0, [sp, #20]
 8011e0e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8011e12:	6870      	ldr	r0, [r6, #4]
 8011e14:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8011e18:	2300      	movs	r3, #0
 8011e1a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011e1e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011e22:	6803      	ldr	r3, [r0, #0]
 8011e24:	a901      	add	r1, sp, #4
 8011e26:	685b      	ldr	r3, [r3, #4]
 8011e28:	4798      	blx	r3
 8011e2a:	b00a      	add	sp, #40	; 0x28
 8011e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e30:	2d02      	cmp	r5, #2
 8011e32:	d109      	bne.n	8011e48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 8011e34:	28ff      	cmp	r0, #255	; 0xff
 8011e36:	d105      	bne.n	8011e44 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8011e38:	f1bc 0f00 	cmp.w	ip, #0
 8011e3c:	bf14      	ite	ne
 8011e3e:	2340      	movne	r3, #64	; 0x40
 8011e40:	2320      	moveq	r3, #32
 8011e42:	e7bd      	b.n	8011dc0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011e44:	2340      	movs	r3, #64	; 0x40
 8011e46:	e7bb      	b.n	8011dc0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011e48:	28ff      	cmp	r0, #255	; 0xff
 8011e4a:	d105      	bne.n	8011e58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8011e4c:	f1bc 0f00 	cmp.w	ip, #0
 8011e50:	bf14      	ite	ne
 8011e52:	2304      	movne	r3, #4
 8011e54:	2301      	moveq	r3, #1
 8011e56:	e7b3      	b.n	8011dc0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011e58:	2304      	movs	r3, #4
 8011e5a:	e7b1      	b.n	8011dc0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011e5c:	0802a3c8 	.word	0x0802a3c8

08011e60 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8011e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e64:	b08b      	sub	sp, #44	; 0x2c
 8011e66:	461d      	mov	r5, r3
 8011e68:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8011e6c:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8011e70:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8011e74:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8011e78:	bf14      	ite	ne
 8011e7a:	2308      	movne	r3, #8
 8011e7c:	2302      	moveq	r3, #2
 8011e7e:	2400      	movs	r4, #0
 8011e80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e84:	4688      	mov	r8, r1
 8011e86:	4693      	mov	fp, r2
 8011e88:	9404      	str	r4, [sp, #16]
 8011e8a:	4607      	mov	r7, r0
 8011e8c:	f7ff ff08 	bl	8011ca0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011e90:	2e0b      	cmp	r6, #11
 8011e92:	bf98      	it	ls
 8011e94:	4b15      	ldrls	r3, [pc, #84]	; (8011eec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8011e96:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8011e9a:	bf98      	it	ls
 8011e9c:	5d9c      	ldrbls	r4, [r3, r6]
 8011e9e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8011ea2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011ea6:	fb05 b50a 	mla	r5, r5, sl, fp
 8011eaa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8011eae:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011eb2:	10e4      	asrs	r4, r4, #3
 8011eb4:	fb04 0405 	mla	r4, r4, r5, r0
 8011eb8:	2300      	movs	r3, #0
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	9405      	str	r4, [sp, #20]
 8011ebe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011ec2:	f8ad a01e 	strh.w	sl, [sp, #30]
 8011ec6:	f8cd 8010 	str.w	r8, [sp, #16]
 8011eca:	f88d 9020 	strb.w	r9, [sp, #32]
 8011ece:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8011ed2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011ed6:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8011eda:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8011ede:	6803      	ldr	r3, [r0, #0]
 8011ee0:	a901      	add	r1, sp, #4
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	4798      	blx	r3
 8011ee6:	b00b      	add	sp, #44	; 0x2c
 8011ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eec:	0802a3c8 	.word	0x0802a3c8

08011ef0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8011ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ef4:	461e      	mov	r6, r3
 8011ef6:	4b0a      	ldr	r3, [pc, #40]	; (8011f20 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8011ef8:	460f      	mov	r7, r1
 8011efa:	881d      	ldrh	r5, [r3, #0]
 8011efc:	4690      	mov	r8, r2
 8011efe:	f7f8 f80d 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 8011f02:	6803      	ldr	r3, [r0, #0]
 8011f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f06:	4798      	blx	r3
 8011f08:	280b      	cmp	r0, #11
 8011f0a:	bf9a      	itte	ls
 8011f0c:	4b05      	ldrls	r3, [pc, #20]	; (8011f24 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8011f0e:	5c1c      	ldrbls	r4, [r3, r0]
 8011f10:	2400      	movhi	r4, #0
 8011f12:	fb08 7005 	mla	r0, r8, r5, r7
 8011f16:	10e4      	asrs	r4, r4, #3
 8011f18:	fb04 6000 	mla	r0, r4, r0, r6
 8011f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f20:	20008802 	.word	0x20008802
 8011f24:	0802a3c8 	.word	0x0802a3c8

08011f28 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8011f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f2a:	b08b      	sub	sp, #44	; 0x2c
 8011f2c:	461f      	mov	r7, r3
 8011f2e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8011f32:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011f36:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011f3a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011f3e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011f42:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011f46:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011f4a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011f4e:	2500      	movs	r5, #0
 8011f50:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8011f54:	f88d 3020 	strb.w	r3, [sp, #32]
 8011f58:	4604      	mov	r4, r0
 8011f5a:	4616      	mov	r6, r2
 8011f5c:	9504      	str	r5, [sp, #16]
 8011f5e:	f7ff fe9f 	bl	8011ca0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011f62:	463a      	mov	r2, r7
 8011f64:	4631      	mov	r1, r6
 8011f66:	4603      	mov	r3, r0
 8011f68:	4620      	mov	r0, r4
 8011f6a:	f7ff ffc1 	bl	8011ef0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011f6e:	4b0e      	ldr	r3, [pc, #56]	; (8011fa8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8011f70:	9005      	str	r0, [sp, #20]
 8011f72:	881b      	ldrh	r3, [r3, #0]
 8011f74:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011f78:	f7f7 ffd0 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 8011f7c:	6803      	ldr	r3, [r0, #0]
 8011f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f80:	4798      	blx	r3
 8011f82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011f84:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8011f88:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8011f8c:	9304      	str	r3, [sp, #16]
 8011f8e:	6860      	ldr	r0, [r4, #4]
 8011f90:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8011f94:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8011f98:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8011f9c:	6803      	ldr	r3, [r0, #0]
 8011f9e:	a901      	add	r1, sp, #4
 8011fa0:	685b      	ldr	r3, [r3, #4]
 8011fa2:	4798      	blx	r3
 8011fa4:	b00b      	add	sp, #44	; 0x2c
 8011fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fa8:	20008802 	.word	0x20008802

08011fac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8011fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fae:	b08d      	sub	sp, #52	; 0x34
 8011fb0:	466b      	mov	r3, sp
 8011fb2:	e883 0006 	stmia.w	r3, {r1, r2}
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	9306      	str	r3, [sp, #24]
 8011fba:	6803      	ldr	r3, [r0, #0]
 8011fbc:	f8bd 6000 	ldrh.w	r6, [sp]
 8011fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fc2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8011fc6:	2501      	movs	r5, #1
 8011fc8:	9503      	str	r5, [sp, #12]
 8011fca:	4604      	mov	r4, r0
 8011fcc:	4798      	blx	r3
 8011fce:	463a      	mov	r2, r7
 8011fd0:	4631      	mov	r1, r6
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	4620      	mov	r0, r4
 8011fd6:	f7ff ff8b 	bl	8011ef0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011fda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011fdc:	9307      	str	r3, [sp, #28]
 8011fde:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011fe2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011fe6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011fea:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011fee:	4b0f      	ldr	r3, [pc, #60]	; (801202c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8011ff0:	9004      	str	r0, [sp, #16]
 8011ff2:	881b      	ldrh	r3, [r3, #0]
 8011ff4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8011ff8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8011ffc:	f7f7 ff8e 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 8012000:	6803      	ldr	r3, [r0, #0]
 8012002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012004:	4798      	blx	r3
 8012006:	23ff      	movs	r3, #255	; 0xff
 8012008:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801200c:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8012010:	6860      	ldr	r0, [r4, #4]
 8012012:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8012016:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801201a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801201e:	6803      	ldr	r3, [r0, #0]
 8012020:	a903      	add	r1, sp, #12
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	4798      	blx	r3
 8012026:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012028:	b00d      	add	sp, #52	; 0x34
 801202a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801202c:	20008802 	.word	0x20008802

08012030 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8012030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012034:	b08c      	sub	sp, #48	; 0x30
 8012036:	461e      	mov	r6, r3
 8012038:	466d      	mov	r5, sp
 801203a:	2300      	movs	r3, #0
 801203c:	e885 0006 	stmia.w	r5, {r1, r2}
 8012040:	9306      	str	r3, [sp, #24]
 8012042:	6803      	ldr	r3, [r0, #0]
 8012044:	f8bd 7000 	ldrh.w	r7, [sp]
 8012048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801204a:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801204e:	2501      	movs	r5, #1
 8012050:	9503      	str	r5, [sp, #12]
 8012052:	4604      	mov	r4, r0
 8012054:	4798      	blx	r3
 8012056:	4642      	mov	r2, r8
 8012058:	4639      	mov	r1, r7
 801205a:	4603      	mov	r3, r0
 801205c:	4620      	mov	r0, r4
 801205e:	f7ff ff47 	bl	8011ef0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012062:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012066:	f8ad 3020 	strh.w	r3, [sp, #32]
 801206a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801206e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012072:	4b11      	ldr	r3, [pc, #68]	; (80120b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8012074:	9004      	str	r0, [sp, #16]
 8012076:	881b      	ldrh	r3, [r3, #0]
 8012078:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801207c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801207e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012082:	9607      	str	r6, [sp, #28]
 8012084:	f7f7 ff4a 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 8012088:	6803      	ldr	r3, [r0, #0]
 801208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801208c:	4798      	blx	r3
 801208e:	23ff      	movs	r3, #255	; 0xff
 8012090:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8012094:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8012098:	6860      	ldr	r0, [r4, #4]
 801209a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801209e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80120a2:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80120a6:	6803      	ldr	r3, [r0, #0]
 80120a8:	a903      	add	r1, sp, #12
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	4798      	blx	r3
 80120ae:	4630      	mov	r0, r6
 80120b0:	b00c      	add	sp, #48	; 0x30
 80120b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120b6:	bf00      	nop
 80120b8:	20008802 	.word	0x20008802

080120bc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80120bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120be:	b085      	sub	sp, #20
 80120c0:	ac02      	add	r4, sp, #8
 80120c2:	e884 0006 	stmia.w	r4, {r1, r2}
 80120c6:	4605      	mov	r5, r0
 80120c8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80120cc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80120d0:	f7ff fde6 	bl	8011ca0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80120d4:	463a      	mov	r2, r7
 80120d6:	4603      	mov	r3, r0
 80120d8:	4631      	mov	r1, r6
 80120da:	4628      	mov	r0, r5
 80120dc:	f7ff ff08 	bl	8011ef0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80120e0:	4a05      	ldr	r2, [pc, #20]	; (80120f8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80120e2:	682b      	ldr	r3, [r5, #0]
 80120e4:	8812      	ldrh	r2, [r2, #0]
 80120e6:	9200      	str	r2, [sp, #0]
 80120e8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80120ea:	e894 0006 	ldmia.w	r4, {r1, r2}
 80120ee:	4603      	mov	r3, r0
 80120f0:	4628      	mov	r0, r5
 80120f2:	47b0      	blx	r6
 80120f4:	b005      	add	sp, #20
 80120f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120f8:	20008802 	.word	0x20008802

080120fc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80120fc:	b570      	push	{r4, r5, r6, lr}
 80120fe:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8012102:	4604      	mov	r4, r0
 8012104:	b19b      	cbz	r3, 801212e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8012106:	2002      	movs	r0, #2
 8012108:	f7fd f94a 	bl	800f3a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801210c:	2300      	movs	r3, #0
 801210e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8012112:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8012116:	6823      	ldr	r3, [r4, #0]
 8012118:	4620      	mov	r0, r4
 801211a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801211e:	f7ff fdbf 	bl	8011ca0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012122:	462b      	mov	r3, r5
 8012124:	4601      	mov	r1, r0
 8012126:	4620      	mov	r0, r4
 8012128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801212c:	4718      	bx	r3
 801212e:	bd70      	pop	{r4, r5, r6, pc}

08012130 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8012130:	b538      	push	{r3, r4, r5, lr}
 8012132:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8012136:	428b      	cmp	r3, r1
 8012138:	4604      	mov	r4, r0
 801213a:	460d      	mov	r5, r1
 801213c:	d006      	beq.n	801214c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801213e:	6803      	ldr	r3, [r0, #0]
 8012140:	b929      	cbnz	r1, 801214e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8012142:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012146:	4798      	blx	r3
 8012148:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801214c:	bd38      	pop	{r3, r4, r5, pc}
 801214e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012152:	e7f8      	b.n	8012146 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08012154 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8012154:	b510      	push	{r4, lr}
 8012156:	4b0d      	ldr	r3, [pc, #52]	; (801218c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	4604      	mov	r4, r0
 801215c:	b95b      	cbnz	r3, 8012176 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801215e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8012162:	2b02      	cmp	r3, #2
 8012164:	d007      	beq.n	8012176 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012166:	6840      	ldr	r0, [r0, #4]
 8012168:	f000 f926 	bl	80123b8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801216c:	b118      	cbz	r0, 8012176 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801216e:	6862      	ldr	r2, [r4, #4]
 8012170:	7a53      	ldrb	r3, [r2, #9]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d0fc      	beq.n	8012170 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8012176:	f7fd fc11 	bl	800f99c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801217a:	4620      	mov	r0, r4
 801217c:	2100      	movs	r1, #0
 801217e:	f7ff ffd7 	bl	8012130 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8012182:	4620      	mov	r0, r4
 8012184:	f7ff fd8c 	bl	8011ca0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012188:	bd10      	pop	{r4, pc}
 801218a:	bf00      	nop
 801218c:	20008806 	.word	0x20008806

08012190 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8012190:	b570      	push	{r4, r5, r6, lr}
 8012192:	4604      	mov	r4, r0
 8012194:	6803      	ldr	r3, [r0, #0]
 8012196:	b919      	cbnz	r1, 80121a0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8012198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801219a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801219e:	4718      	bx	r3
 80121a0:	2200      	movs	r2, #0
 80121a2:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 80121a6:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 80121aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121ac:	4798      	blx	r3
 80121ae:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 80121b2:	4605      	mov	r5, r0
 80121b4:	2101      	movs	r1, #1
 80121b6:	4620      	mov	r0, r4
 80121b8:	f7ff ffba 	bl	8012130 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80121bc:	4628      	mov	r0, r5
 80121be:	bd70      	pop	{r4, r5, r6, pc}

080121c0 <_ZN8touchgfx13DMA_Interface5flushEv>:
 80121c0:	6803      	ldr	r3, [r0, #0]
 80121c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121c4:	4718      	bx	r3

080121c6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80121c6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80121ca:	1a13      	subs	r3, r2, r0
 80121cc:	4258      	negs	r0, r3
 80121ce:	4158      	adcs	r0, r3
 80121d0:	4770      	bx	lr

080121d2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80121d2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80121d6:	1a9b      	subs	r3, r3, r2
 80121d8:	2b00      	cmp	r3, #0
 80121da:	bfdc      	itt	le
 80121dc:	6882      	ldrle	r2, [r0, #8]
 80121de:	189b      	addle	r3, r3, r2
 80121e0:	2b01      	cmp	r3, #1
 80121e2:	bfcc      	ite	gt
 80121e4:	2000      	movgt	r0, #0
 80121e6:	2001      	movle	r0, #1
 80121e8:	4770      	bx	lr

080121ea <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80121ea:	6902      	ldr	r2, [r0, #16]
 80121ec:	6843      	ldr	r3, [r0, #4]
 80121ee:	2024      	movs	r0, #36	; 0x24
 80121f0:	fb00 3002 	mla	r0, r0, r2, r3
 80121f4:	4770      	bx	lr

080121f6 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80121f6:	6803      	ldr	r3, [r0, #0]
 80121f8:	691b      	ldr	r3, [r3, #16]
 80121fa:	4718      	bx	r3

080121fc <_ZN8touchgfx13DMA_Interface7executeEv>:
 80121fc:	b570      	push	{r4, r5, r6, lr}
 80121fe:	2301      	movs	r3, #1
 8012200:	7203      	strb	r3, [r0, #8]
 8012202:	4604      	mov	r4, r0
 8012204:	6840      	ldr	r0, [r0, #4]
 8012206:	6803      	ldr	r3, [r0, #0]
 8012208:	699b      	ldr	r3, [r3, #24]
 801220a:	4798      	blx	r3
 801220c:	6803      	ldr	r3, [r0, #0]
 801220e:	2b40      	cmp	r3, #64	; 0x40
 8012210:	4605      	mov	r5, r0
 8012212:	d00c      	beq.n	801222e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012214:	d810      	bhi.n	8012238 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8012216:	2b04      	cmp	r3, #4
 8012218:	d01d      	beq.n	8012256 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801221a:	d804      	bhi.n	8012226 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801221c:	2b01      	cmp	r3, #1
 801221e:	d006      	beq.n	801222e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012220:	2b02      	cmp	r3, #2
 8012222:	d02c      	beq.n	801227e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8012224:	bd70      	pop	{r4, r5, r6, pc}
 8012226:	2b08      	cmp	r3, #8
 8012228:	d01d      	beq.n	8012266 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801222a:	2b20      	cmp	r3, #32
 801222c:	d1fa      	bne.n	8012224 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801222e:	6823      	ldr	r3, [r4, #0]
 8012230:	4620      	mov	r0, r4
 8012232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012234:	4798      	blx	r3
 8012236:	e013      	b.n	8012260 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8012238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801223c:	d0f7      	beq.n	801222e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801223e:	d804      	bhi.n	801224a <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8012240:	2b80      	cmp	r3, #128	; 0x80
 8012242:	d0f4      	beq.n	801222e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012248:	e7f0      	b.n	801222c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801224a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801224e:	d0ee      	beq.n	801222e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012254:	e7e5      	b.n	8012222 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8012256:	6823      	ldr	r3, [r4, #0]
 8012258:	7f01      	ldrb	r1, [r0, #28]
 801225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801225c:	4620      	mov	r0, r4
 801225e:	4798      	blx	r3
 8012260:	6823      	ldr	r3, [r4, #0]
 8012262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012264:	e006      	b.n	8012274 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8012266:	6823      	ldr	r3, [r4, #0]
 8012268:	7f01      	ldrb	r1, [r0, #28]
 801226a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801226c:	4620      	mov	r0, r4
 801226e:	4798      	blx	r3
 8012270:	6823      	ldr	r3, [r4, #0]
 8012272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012274:	4629      	mov	r1, r5
 8012276:	4620      	mov	r0, r4
 8012278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801227c:	4718      	bx	r3
 801227e:	6823      	ldr	r3, [r4, #0]
 8012280:	4620      	mov	r0, r4
 8012282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012284:	4798      	blx	r3
 8012286:	e7f3      	b.n	8012270 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08012288 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8012288:	4770      	bx	lr

0801228a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801228a:	4770      	bx	lr

0801228c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801228c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8012290:	1ad2      	subs	r2, r2, r3
 8012292:	2a00      	cmp	r2, #0
 8012294:	b510      	push	{r4, lr}
 8012296:	bfdc      	itt	le
 8012298:	6884      	ldrle	r4, [r0, #8]
 801229a:	1912      	addle	r2, r2, r4
 801229c:	2a01      	cmp	r2, #1
 801229e:	dd16      	ble.n	80122ce <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80122a0:	6842      	ldr	r2, [r0, #4]
 80122a2:	2424      	movs	r4, #36	; 0x24
 80122a4:	fb04 2303 	mla	r3, r4, r3, r2
 80122a8:	f101 0220 	add.w	r2, r1, #32
 80122ac:	f851 4b04 	ldr.w	r4, [r1], #4
 80122b0:	f843 4b04 	str.w	r4, [r3], #4
 80122b4:	4291      	cmp	r1, r2
 80122b6:	d1f9      	bne.n	80122ac <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80122b8:	780a      	ldrb	r2, [r1, #0]
 80122ba:	701a      	strb	r2, [r3, #0]
 80122bc:	68c3      	ldr	r3, [r0, #12]
 80122be:	6882      	ldr	r2, [r0, #8]
 80122c0:	f3bf 8f5b 	dmb	ish
 80122c4:	3301      	adds	r3, #1
 80122c6:	429a      	cmp	r2, r3
 80122c8:	bfd8      	it	le
 80122ca:	1a9b      	suble	r3, r3, r2
 80122cc:	60c3      	str	r3, [r0, #12]
 80122ce:	bd10      	pop	{r4, pc}

080122d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80122d0:	6903      	ldr	r3, [r0, #16]
 80122d2:	6882      	ldr	r2, [r0, #8]
 80122d4:	f3bf 8f5b 	dmb	ish
 80122d8:	3301      	adds	r3, #1
 80122da:	429a      	cmp	r2, r3
 80122dc:	bfd8      	it	le
 80122de:	1a9b      	suble	r3, r3, r2
 80122e0:	6103      	str	r3, [r0, #16]
 80122e2:	4770      	bx	lr

080122e4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80122e4:	b570      	push	{r4, r5, r6, lr}
 80122e6:	4604      	mov	r4, r0
 80122e8:	460e      	mov	r6, r1
 80122ea:	6860      	ldr	r0, [r4, #4]
 80122ec:	6803      	ldr	r3, [r0, #0]
 80122ee:	685b      	ldr	r3, [r3, #4]
 80122f0:	4798      	blx	r3
 80122f2:	2800      	cmp	r0, #0
 80122f4:	d1f9      	bne.n	80122ea <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80122f6:	4d0d      	ldr	r5, [pc, #52]	; (801232c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80122f8:	6828      	ldr	r0, [r5, #0]
 80122fa:	6803      	ldr	r3, [r0, #0]
 80122fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122fe:	4798      	blx	r3
 8012300:	f7fd fb66 	bl	800f9d0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8012304:	6828      	ldr	r0, [r5, #0]
 8012306:	2101      	movs	r1, #1
 8012308:	f7ff ff12 	bl	8012130 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801230c:	6860      	ldr	r0, [r4, #4]
 801230e:	6803      	ldr	r3, [r0, #0]
 8012310:	4631      	mov	r1, r6
 8012312:	689b      	ldr	r3, [r3, #8]
 8012314:	4798      	blx	r3
 8012316:	6823      	ldr	r3, [r4, #0]
 8012318:	4620      	mov	r0, r4
 801231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801231c:	4798      	blx	r3
 801231e:	6828      	ldr	r0, [r5, #0]
 8012320:	6803      	ldr	r3, [r0, #0]
 8012322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012328:	4718      	bx	r3
 801232a:	bf00      	nop
 801232c:	20008808 	.word	0x20008808

08012330 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8012330:	b508      	push	{r3, lr}
 8012332:	f7fd fb33 	bl	800f99c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801233a:	f7fd bb3d 	b.w	800f9b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801233e <_ZN8touchgfx13DMA_Interface5startEv>:
 801233e:	b510      	push	{r4, lr}
 8012340:	4604      	mov	r4, r0
 8012342:	6840      	ldr	r0, [r0, #4]
 8012344:	6803      	ldr	r3, [r0, #0]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	4798      	blx	r3
 801234a:	b948      	cbnz	r0, 8012360 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801234c:	7a63      	ldrb	r3, [r4, #9]
 801234e:	b13b      	cbz	r3, 8012360 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012350:	7a23      	ldrb	r3, [r4, #8]
 8012352:	b92b      	cbnz	r3, 8012360 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012354:	6823      	ldr	r3, [r4, #0]
 8012356:	4620      	mov	r0, r4
 8012358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801235a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801235e:	4718      	bx	r3
 8012360:	bd10      	pop	{r4, pc}

08012362 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8012362:	b570      	push	{r4, r5, r6, lr}
 8012364:	4604      	mov	r4, r0
 8012366:	6840      	ldr	r0, [r0, #4]
 8012368:	6803      	ldr	r3, [r0, #0]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	4798      	blx	r3
 801236e:	4605      	mov	r5, r0
 8012370:	b930      	cbnz	r0, 8012380 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012372:	7a23      	ldrb	r3, [r4, #8]
 8012374:	b123      	cbz	r3, 8012380 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012376:	6860      	ldr	r0, [r4, #4]
 8012378:	6803      	ldr	r3, [r0, #0]
 801237a:	695b      	ldr	r3, [r3, #20]
 801237c:	4798      	blx	r3
 801237e:	7225      	strb	r5, [r4, #8]
 8012380:	6860      	ldr	r0, [r4, #4]
 8012382:	6803      	ldr	r3, [r0, #0]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	4798      	blx	r3
 8012388:	b928      	cbnz	r0, 8012396 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801238a:	6823      	ldr	r3, [r4, #0]
 801238c:	4620      	mov	r0, r4
 801238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012394:	4718      	bx	r3
 8012396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801239a:	f7fd bb25 	b.w	800f9e8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

080123a0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80123a0:	b510      	push	{r4, lr}
 80123a2:	4c04      	ldr	r4, [pc, #16]	; (80123b4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80123a4:	6082      	str	r2, [r0, #8]
 80123a6:	2200      	movs	r2, #0
 80123a8:	e9c0 4100 	strd	r4, r1, [r0]
 80123ac:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80123b0:	bd10      	pop	{r4, pc}
 80123b2:	bf00      	nop
 80123b4:	0802a504 	.word	0x0802a504

080123b8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80123b8:	6840      	ldr	r0, [r0, #4]
 80123ba:	6803      	ldr	r3, [r0, #0]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	4718      	bx	r3

080123c0 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 80123c0:	b508      	push	{r3, lr}
 80123c2:	4b05      	ldr	r3, [pc, #20]	; (80123d8 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 80123c4:	6818      	ldr	r0, [r3, #0]
 80123c6:	6803      	ldr	r3, [r0, #0]
 80123c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80123cc:	4798      	blx	r3
 80123ce:	1e43      	subs	r3, r0, #1
 80123d0:	4258      	negs	r0, r3
 80123d2:	4158      	adcs	r0, r3
 80123d4:	bd08      	pop	{r3, pc}
 80123d6:	bf00      	nop
 80123d8:	20008808 	.word	0x20008808

080123dc <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 80123dc:	b430      	push	{r4, r5}
 80123de:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 80123e2:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80123e6:	8a02      	ldrh	r2, [r0, #16]
 80123e8:	9202      	str	r2, [sp, #8]
 80123ea:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80123ee:	68c2      	ldr	r2, [r0, #12]
 80123f0:	4629      	mov	r1, r5
 80123f2:	4620      	mov	r0, r4
 80123f4:	bc30      	pop	{r4, r5}
 80123f6:	f7fe b9bb 	b.w	8010770 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

080123fa <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 80123fa:	f7fe b9b1 	b.w	8010760 <_ZN8touchgfx5paint6rgb5658tearDownEv>
	...

08012400 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8012400:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012402:	6803      	ldr	r3, [r0, #0]
 8012404:	460d      	mov	r5, r1
 8012406:	4604      	mov	r4, r0
 8012408:	4601      	mov	r1, r0
 801240a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801240c:	a802      	add	r0, sp, #8
 801240e:	4798      	blx	r3
 8012410:	6828      	ldr	r0, [r5, #0]
 8012412:	6869      	ldr	r1, [r5, #4]
 8012414:	466b      	mov	r3, sp
 8012416:	c303      	stmia	r3!, {r0, r1}
 8012418:	4668      	mov	r0, sp
 801241a:	4619      	mov	r1, r3
 801241c:	f7fe ffc4 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 8012420:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012422:	b1a8      	cbz	r0, 8012450 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8012424:	6803      	ldr	r3, [r0, #0]
 8012426:	1d21      	adds	r1, r4, #4
 8012428:	68db      	ldr	r3, [r3, #12]
 801242a:	4798      	blx	r3
 801242c:	b180      	cbz	r0, 8012450 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801242e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8012432:	2b00      	cmp	r3, #0
 8012434:	dd0c      	ble.n	8012450 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8012436:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801243a:	2d00      	cmp	r5, #0
 801243c:	dd08      	ble.n	8012450 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801243e:	4a2d      	ldr	r2, [pc, #180]	; (80124f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8012440:	7812      	ldrb	r2, [r2, #0]
 8012442:	b13a      	cbz	r2, 8012454 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 8012444:	2a01      	cmp	r2, #1
 8012446:	d02d      	beq.n	80124a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8012448:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801244a:	6803      	ldr	r3, [r0, #0]
 801244c:	691b      	ldr	r3, [r3, #16]
 801244e:	4798      	blx	r3
 8012450:	b004      	add	sp, #16
 8012452:	bd70      	pop	{r4, r5, r6, pc}
 8012454:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012458:	441d      	add	r5, r3
 801245a:	b2ad      	uxth	r5, r5
 801245c:	b22e      	sxth	r6, r5
 801245e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8012462:	42b3      	cmp	r3, r6
 8012464:	daf0      	bge.n	8012448 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012466:	6823      	ldr	r3, [r4, #0]
 8012468:	4669      	mov	r1, sp
 801246a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801246c:	4620      	mov	r0, r4
 801246e:	4798      	blx	r3
 8012470:	b940      	cbnz	r0, 8012484 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8012472:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8012476:	2b01      	cmp	r3, #1
 8012478:	d004      	beq.n	8012484 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801247a:	3301      	adds	r3, #1
 801247c:	105b      	asrs	r3, r3, #1
 801247e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012482:	e7f0      	b.n	8012466 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 8012484:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012488:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801248c:	4413      	add	r3, r2
 801248e:	b29b      	uxth	r3, r3
 8012490:	441a      	add	r2, r3
 8012492:	b212      	sxth	r2, r2
 8012494:	4296      	cmp	r6, r2
 8012496:	f8ad 3002 	strh.w	r3, [sp, #2]
 801249a:	dae0      	bge.n	801245e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801249c:	1aeb      	subs	r3, r5, r3
 801249e:	f8ad 3006 	strh.w	r3, [sp, #6]
 80124a2:	e7dc      	b.n	801245e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80124a4:	f8bd 5000 	ldrh.w	r5, [sp]
 80124a8:	441d      	add	r5, r3
 80124aa:	b2ad      	uxth	r5, r5
 80124ac:	b22e      	sxth	r6, r5
 80124ae:	f9bd 3000 	ldrsh.w	r3, [sp]
 80124b2:	42b3      	cmp	r3, r6
 80124b4:	dac8      	bge.n	8012448 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80124b6:	6823      	ldr	r3, [r4, #0]
 80124b8:	4669      	mov	r1, sp
 80124ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124bc:	4620      	mov	r0, r4
 80124be:	4798      	blx	r3
 80124c0:	b940      	cbnz	r0, 80124d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80124c2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80124c6:	2b01      	cmp	r3, #1
 80124c8:	d004      	beq.n	80124d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80124ca:	3301      	adds	r3, #1
 80124cc:	105b      	asrs	r3, r3, #1
 80124ce:	f8ad 3004 	strh.w	r3, [sp, #4]
 80124d2:	e7f0      	b.n	80124b6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 80124d4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80124d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80124dc:	4413      	add	r3, r2
 80124de:	b29b      	uxth	r3, r3
 80124e0:	441a      	add	r2, r3
 80124e2:	b212      	sxth	r2, r2
 80124e4:	4296      	cmp	r6, r2
 80124e6:	f8ad 3000 	strh.w	r3, [sp]
 80124ea:	dae0      	bge.n	80124ae <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80124ec:	1aeb      	subs	r3, r5, r3
 80124ee:	f8ad 3004 	strh.w	r3, [sp, #4]
 80124f2:	e7dc      	b.n	80124ae <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80124f4:	20008800 	.word	0x20008800

080124f8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80124f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80124fa:	6803      	ldr	r3, [r0, #0]
 80124fc:	4604      	mov	r4, r0
 80124fe:	4601      	mov	r1, r0
 8012500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012502:	4668      	mov	r0, sp
 8012504:	4798      	blx	r3
 8012506:	2100      	movs	r1, #0
 8012508:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801250c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012510:	9102      	str	r1, [sp, #8]
 8012512:	4668      	mov	r0, sp
 8012514:	a902      	add	r1, sp, #8
 8012516:	f8ad 200c 	strh.w	r2, [sp, #12]
 801251a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801251e:	f7fe ff43 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 8012522:	6823      	ldr	r3, [r4, #0]
 8012524:	4669      	mov	r1, sp
 8012526:	691b      	ldr	r3, [r3, #16]
 8012528:	4620      	mov	r0, r4
 801252a:	4798      	blx	r3
 801252c:	b004      	add	sp, #16
 801252e:	bd10      	pop	{r4, pc}

08012530 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8012530:	2101      	movs	r1, #1
 8012532:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8012536:	490b      	ldr	r1, [pc, #44]	; (8012564 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8012538:	6001      	str	r1, [r0, #0]
 801253a:	2200      	movs	r2, #0
 801253c:	21ff      	movs	r1, #255	; 0xff
 801253e:	8082      	strh	r2, [r0, #4]
 8012540:	80c2      	strh	r2, [r0, #6]
 8012542:	8102      	strh	r2, [r0, #8]
 8012544:	8142      	strh	r2, [r0, #10]
 8012546:	8182      	strh	r2, [r0, #12]
 8012548:	81c2      	strh	r2, [r0, #14]
 801254a:	8202      	strh	r2, [r0, #16]
 801254c:	8242      	strh	r2, [r0, #18]
 801254e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012552:	61c2      	str	r2, [r0, #28]
 8012554:	8402      	strh	r2, [r0, #32]
 8012556:	8442      	strh	r2, [r0, #34]	; 0x22
 8012558:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801255c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8012560:	6282      	str	r2, [r0, #40]	; 0x28
 8012562:	4770      	bx	lr
 8012564:	0802a560 	.word	0x0802a560

08012568 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 8012568:	6301      	str	r1, [r0, #48]	; 0x30
 801256a:	4770      	bx	lr

0801256c <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 801256c:	6341      	str	r1, [r0, #52]	; 0x34
 801256e:	4770      	bx	lr

08012570 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 8012570:	4770      	bx	lr

08012572 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 8012572:	4608      	mov	r0, r1
 8012574:	4770      	bx	lr

08012576 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 8012576:	b530      	push	{r4, r5, lr}
 8012578:	460d      	mov	r5, r1
 801257a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 801257c:	8949      	ldrh	r1, [r1, #10]
 801257e:	1ac9      	subs	r1, r1, r3
 8012580:	6803      	ldr	r3, [r0, #0]
 8012582:	b085      	sub	sp, #20
 8012584:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8012588:	f10d 0206 	add.w	r2, sp, #6
 801258c:	b209      	sxth	r1, r1
 801258e:	4604      	mov	r4, r0
 8012590:	4798      	blx	r3
 8012592:	b1a0      	cbz	r0, 80125be <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8012594:	792b      	ldrb	r3, [r5, #4]
 8012596:	b993      	cbnz	r3, 80125be <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8012598:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 801259c:	b178      	cbz	r0, 80125be <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801259e:	6803      	ldr	r3, [r0, #0]
 80125a0:	68db      	ldr	r3, [r3, #12]
 80125a2:	4798      	blx	r3
 80125a4:	b158      	cbz	r0, 80125be <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80125a6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80125aa:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 80125ae:	f8ad 3008 	strh.w	r3, [sp, #8]
 80125b2:	9503      	str	r5, [sp, #12]
 80125b4:	6803      	ldr	r3, [r0, #0]
 80125b6:	aa02      	add	r2, sp, #8
 80125b8:	689b      	ldr	r3, [r3, #8]
 80125ba:	4621      	mov	r1, r4
 80125bc:	4798      	blx	r3
 80125be:	b005      	add	sp, #20
 80125c0:	bd30      	pop	{r4, r5, pc}

080125c2 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 80125c2:	b510      	push	{r4, lr}
 80125c4:	428a      	cmp	r2, r1
 80125c6:	bfbe      	ittt	lt
 80125c8:	460b      	movlt	r3, r1
 80125ca:	4611      	movlt	r1, r2
 80125cc:	461a      	movlt	r2, r3
 80125ce:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 80125d2:	428b      	cmp	r3, r1
 80125d4:	4604      	mov	r4, r0
 80125d6:	d103      	bne.n	80125e0 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x1e>
 80125d8:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 80125dc:	4293      	cmp	r3, r2
 80125de:	d011      	beq.n	8012604 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x42>
 80125e0:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 80125e4:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
 80125e8:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80125ec:	f005 fac1 	bl	8017b72 <_ZNK8touchgfx8Drawable10invalidateEv>
 80125f0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80125f4:	f005 fabd 	bl	8017b72 <_ZNK8touchgfx8Drawable10invalidateEv>
 80125f8:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80125fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012600:	f005 bab7 	b.w	8017b72 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012604:	bd10      	pop	{r4, pc}

08012606 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 8012606:	b510      	push	{r4, lr}
 8012608:	428a      	cmp	r2, r1
 801260a:	bfbe      	ittt	lt
 801260c:	460b      	movlt	r3, r1
 801260e:	4611      	movlt	r1, r2
 8012610:	461a      	movlt	r2, r3
 8012612:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 8012616:	428b      	cmp	r3, r1
 8012618:	4604      	mov	r4, r0
 801261a:	d103      	bne.n	8012624 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x1e>
 801261c:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 8012620:	4293      	cmp	r3, r2
 8012622:	d011      	beq.n	8012648 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x42>
 8012624:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
 8012628:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 801262c:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8012630:	f005 fa9f 	bl	8017b72 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012634:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012638:	f005 fa9b 	bl	8017b72 <_ZNK8touchgfx8Drawable10invalidateEv>
 801263c:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8012640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012644:	f005 ba95 	b.w	8017b72 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012648:	bd10      	pop	{r4, pc}

0801264a <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 801264a:	2300      	movs	r3, #0
 801264c:	f8a0 311e 	strh.w	r3, [r0, #286]	; 0x11e
 8012650:	3038      	adds	r0, #56	; 0x38
 8012652:	f005 ba8e 	b.w	8017b72 <_ZNK8touchgfx8Drawable10invalidateEv>

08012656 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 8012656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801265a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 801265e:	4605      	mov	r5, r0
 8012660:	4688      	mov	r8, r1
 8012662:	4617      	mov	r7, r2
 8012664:	2b00      	cmp	r3, #0
 8012666:	d03f      	beq.n	80126e8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x92>
 8012668:	6803      	ldr	r3, [r0, #0]
 801266a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801266e:	4798      	blx	r3
 8012670:	682b      	ldr	r3, [r5, #0]
 8012672:	4604      	mov	r4, r0
 8012674:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8012678:	4628      	mov	r0, r5
 801267a:	4798      	blx	r3
 801267c:	4284      	cmp	r4, r0
 801267e:	bfc8      	it	gt
 8012680:	4623      	movgt	r3, r4
 8012682:	f9b5 611e 	ldrsh.w	r6, [r5, #286]	; 0x11e
 8012686:	bfc4      	itt	gt
 8012688:	4604      	movgt	r4, r0
 801268a:	4618      	movgt	r0, r3
 801268c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8012690:	42b3      	cmp	r3, r6
 8012692:	da29      	bge.n	80126e8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x92>
 8012694:	42b0      	cmp	r0, r6
 8012696:	bfa8      	it	ge
 8012698:	4630      	movge	r0, r6
 801269a:	2800      	cmp	r0, #0
 801269c:	db24      	blt.n	80126e8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x92>
 801269e:	f1b8 0f00 	cmp.w	r8, #0
 80126a2:	d11e      	bne.n	80126e2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8c>
 80126a4:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 80126a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80126ac:	460c      	mov	r4, r1
 80126ae:	009a      	lsls	r2, r3, #2
 80126b0:	4298      	cmp	r0, r3
 80126b2:	dd0b      	ble.n	80126cc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x76>
 80126b4:	f8d5 6144 	ldr.w	r6, [r5, #324]	; 0x144
 80126b8:	58b6      	ldr	r6, [r6, r2]
 80126ba:	42b1      	cmp	r1, r6
 80126bc:	bfa8      	it	ge
 80126be:	4631      	movge	r1, r6
 80126c0:	42b4      	cmp	r4, r6
 80126c2:	bfb8      	it	lt
 80126c4:	4634      	movlt	r4, r6
 80126c6:	3301      	adds	r3, #1
 80126c8:	3204      	adds	r2, #4
 80126ca:	e7f1      	b.n	80126b0 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x5a>
 80126cc:	1bc9      	subs	r1, r1, r7
 80126ce:	193a      	adds	r2, r7, r4
 80126d0:	4291      	cmp	r1, r2
 80126d2:	d009      	beq.n	80126e8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x92>
 80126d4:	682b      	ldr	r3, [r5, #0]
 80126d6:	4628      	mov	r0, r5
 80126d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80126dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126e0:	4718      	bx	r3
 80126e2:	427c      	negs	r4, r7
 80126e4:	4639      	mov	r1, r7
 80126e6:	e7e2      	b.n	80126ae <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x58>
 80126e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080126ec <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 80126ec:	b530      	push	{r4, r5, lr}
 80126ee:	790b      	ldrb	r3, [r1, #4]
 80126f0:	2b02      	cmp	r3, #2
 80126f2:	b085      	sub	sp, #20
 80126f4:	4604      	mov	r4, r0
 80126f6:	460d      	mov	r5, r1
 80126f8:	d020      	beq.n	801273c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 80126fa:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80126fc:	88c9      	ldrh	r1, [r1, #6]
 80126fe:	1ac9      	subs	r1, r1, r3
 8012700:	6803      	ldr	r3, [r0, #0]
 8012702:	f10d 0206 	add.w	r2, sp, #6
 8012706:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801270a:	b209      	sxth	r1, r1
 801270c:	4798      	blx	r3
 801270e:	b1a8      	cbz	r0, 801273c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8012710:	792b      	ldrb	r3, [r5, #4]
 8012712:	2b01      	cmp	r3, #1
 8012714:	d812      	bhi.n	801273c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8012716:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 801271a:	b178      	cbz	r0, 801273c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801271c:	6803      	ldr	r3, [r0, #0]
 801271e:	68db      	ldr	r3, [r3, #12]
 8012720:	4798      	blx	r3
 8012722:	b158      	cbz	r0, 801273c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8012724:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8012728:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 801272c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8012730:	9503      	str	r5, [sp, #12]
 8012732:	6803      	ldr	r3, [r0, #0]
 8012734:	aa02      	add	r2, sp, #8
 8012736:	689b      	ldr	r3, [r3, #8]
 8012738:	4621      	mov	r1, r4
 801273a:	4798      	blx	r3
 801273c:	b005      	add	sp, #20
 801273e:	bd30      	pop	{r4, r5, pc}

08012740 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 8012740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012744:	4604      	mov	r4, r0
 8012746:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 801274a:	9e06      	ldr	r6, [sp, #24]
 801274c:	4690      	mov	r8, r2
 801274e:	461f      	mov	r7, r3
 8012750:	b928      	cbnz	r0, 801275e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8012752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012756:	8033      	strh	r3, [r6, #0]
 8012758:	803b      	strh	r3, [r7, #0]
 801275a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801275e:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 8012762:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 8012766:	1883      	adds	r3, r0, r2
 8012768:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 801276c:	1ad2      	subs	r2, r2, r3
 801276e:	b212      	sxth	r2, r2
 8012770:	2a01      	cmp	r2, #1
 8012772:	dc07      	bgt.n	8012784 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 8012774:	2300      	movs	r3, #0
 8012776:	803b      	strh	r3, [r7, #0]
 8012778:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 801277c:	3b01      	subs	r3, #1
 801277e:	8033      	strh	r3, [r6, #0]
 8012780:	2001      	movs	r0, #1
 8012782:	e7ea      	b.n	801275a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8012784:	1a08      	subs	r0, r1, r0
 8012786:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 801278a:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 801278e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012790:	1a5b      	subs	r3, r3, r1
 8012792:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8012796:	d45b      	bmi.n	8012850 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x110>
 8012798:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801279c:	fb93 f1f5 	sdiv	r1, r3, r5
 80127a0:	2302      	movs	r3, #2
 80127a2:	fb91 f1f3 	sdiv	r1, r1, r3
 80127a6:	3a01      	subs	r2, #1
 80127a8:	f005 fba4 	bl	8017ef4 <_ZN8touchgfx6muldivElll>
 80127ac:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 80127b0:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
 80127b4:	2900      	cmp	r1, #0
 80127b6:	db57      	blt.n	8012868 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x128>
 80127b8:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 80127bc:	2502      	movs	r5, #2
 80127be:	fb93 f3fc 	sdiv	r3, r3, ip
 80127c2:	fb93 f3f5 	sdiv	r3, r3, r5
 80127c6:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 80127ca:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 80127ce:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
 80127d2:	1a52      	subs	r2, r2, r1
 80127d4:	eba8 0003 	sub.w	r0, r8, r3
 80127d8:	ea4f 1040 	mov.w	r0, r0, lsl #5
 80127dc:	d450      	bmi.n	8012880 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x140>
 80127de:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80127e2:	fb92 f1fc 	sdiv	r1, r2, ip
 80127e6:	2202      	movs	r2, #2
 80127e8:	fb91 f1f2 	sdiv	r1, r1, r2
 80127ec:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 80127f0:	4413      	add	r3, r2
 80127f2:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 80127f6:	1ad2      	subs	r2, r2, r3
 80127f8:	b212      	sxth	r2, r2
 80127fa:	3a01      	subs	r2, #1
 80127fc:	f005 fb7a 	bl	8017ef4 <_ZN8touchgfx6muldivElll>
 8012800:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8012804:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012806:	2b00      	cmp	r3, #0
 8012808:	db46      	blt.n	8012898 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x158>
 801280a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801280e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012812:	2202      	movs	r2, #2
 8012814:	fb93 f3f2 	sdiv	r3, r3, r2
 8012818:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 801281c:	429d      	cmp	r5, r3
 801281e:	bfde      	ittt	le
 8012820:	461a      	movle	r2, r3
 8012822:	462b      	movle	r3, r5
 8012824:	4615      	movle	r5, r2
 8012826:	2d00      	cmp	r5, #0
 8012828:	bfa4      	itt	ge
 801282a:	351f      	addge	r5, #31
 801282c:	116d      	asrge	r5, r5, #5
 801282e:	f04f 0020 	mov.w	r0, #32
 8012832:	bfb8      	it	lt
 8012834:	fb95 f5f0 	sdivlt	r5, r5, r0
 8012838:	b22d      	sxth	r5, r5
 801283a:	2d00      	cmp	r5, #0
 801283c:	b21b      	sxth	r3, r3
 801283e:	fb93 f3f0 	sdiv	r3, r3, r0
 8012842:	803b      	strh	r3, [r7, #0]
 8012844:	8035      	strh	r5, [r6, #0]
 8012846:	da33      	bge.n	80128b0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x170>
 8012848:	2000      	movs	r0, #0
 801284a:	8030      	strh	r0, [r6, #0]
 801284c:	8038      	strh	r0, [r7, #0]
 801284e:	e784      	b.n	801275a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8012850:	f06f 0101 	mvn.w	r1, #1
 8012854:	fb01 5303 	mla	r3, r1, r3, r5
 8012858:	1e59      	subs	r1, r3, #1
 801285a:	2302      	movs	r3, #2
 801285c:	fb91 f1f5 	sdiv	r1, r1, r5
 8012860:	fb91 f1f3 	sdiv	r1, r1, r3
 8012864:	4249      	negs	r1, r1
 8012866:	e79e      	b.n	80127a6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x66>
 8012868:	f06f 0301 	mvn.w	r3, #1
 801286c:	fb03 c301 	mla	r3, r3, r1, ip
 8012870:	3b01      	subs	r3, #1
 8012872:	2502      	movs	r5, #2
 8012874:	fb93 f3fc 	sdiv	r3, r3, ip
 8012878:	fb93 f3f5 	sdiv	r3, r3, r5
 801287c:	425b      	negs	r3, r3
 801287e:	e7a2      	b.n	80127c6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x86>
 8012880:	f06f 0101 	mvn.w	r1, #1
 8012884:	fb01 c202 	mla	r2, r1, r2, ip
 8012888:	1e51      	subs	r1, r2, #1
 801288a:	2202      	movs	r2, #2
 801288c:	fb91 f1fc 	sdiv	r1, r1, ip
 8012890:	fb91 f1f2 	sdiv	r1, r1, r2
 8012894:	4249      	negs	r1, r1
 8012896:	e7a9      	b.n	80127ec <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xac>
 8012898:	f06f 0101 	mvn.w	r1, #1
 801289c:	fb01 2303 	mla	r3, r1, r3, r2
 80128a0:	3b01      	subs	r3, #1
 80128a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80128a6:	2202      	movs	r2, #2
 80128a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80128ac:	425b      	negs	r3, r3
 80128ae:	e7b3      	b.n	8012818 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd8>
 80128b0:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 80128b4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80128b8:	4293      	cmp	r3, r2
 80128ba:	dc05      	bgt.n	80128c8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x188>
 80128bc:	3b01      	subs	r3, #1
 80128be:	b21b      	sxth	r3, r3
 80128c0:	8033      	strh	r3, [r6, #0]
 80128c2:	2000      	movs	r0, #0
 80128c4:	803b      	strh	r3, [r7, #0]
 80128c6:	e748      	b.n	801275a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80128c8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80128cc:	803a      	strh	r2, [r7, #0]
 80128ce:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 80128d2:	f9b6 2000 	ldrsh.w	r2, [r6]
 80128d6:	4293      	cmp	r3, r2
 80128d8:	bfdc      	itt	le
 80128da:	f103 33ff 	addle.w	r3, r3, #4294967295
 80128de:	b21a      	sxthle	r2, r3
 80128e0:	8032      	strh	r2, [r6, #0]
 80128e2:	e74d      	b.n	8012780 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>

080128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 80128e4:	6800      	ldr	r0, [r0, #0]
 80128e6:	2800      	cmp	r0, #0
 80128e8:	bfbd      	ittte	lt
 80128ea:	380f      	sublt	r0, #15
 80128ec:	2320      	movlt	r3, #32
 80128ee:	fb90 f0f3 	sdivlt	r0, r0, r3
 80128f2:	3010      	addge	r0, #16
 80128f4:	bfa8      	it	ge
 80128f6:	1140      	asrge	r0, r0, #5
 80128f8:	4770      	bx	lr

080128fa <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 80128fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128fe:	4605      	mov	r5, r0
 8012900:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 8012904:	4688      	mov	r8, r1
 8012906:	4691      	mov	r9, r2
 8012908:	469a      	mov	sl, r3
 801290a:	b360      	cbz	r0, 8012966 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 801290c:	2700      	movs	r7, #0
 801290e:	f04f 3bff 	mov.w	fp, #4294967295
 8012912:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
 8012916:	b23e      	sxth	r6, r7
 8012918:	42b3      	cmp	r3, r6
 801291a:	dd23      	ble.n	8012964 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 801291c:	682b      	ldr	r3, [r5, #0]
 801291e:	4631      	mov	r1, r6
 8012920:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012924:	4628      	mov	r0, r5
 8012926:	4798      	blx	r3
 8012928:	9001      	str	r0, [sp, #4]
 801292a:	a801      	add	r0, sp, #4
 801292c:	f7ff ffda 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012930:	682b      	ldr	r3, [r5, #0]
 8012932:	eba0 0008 	sub.w	r0, r0, r8
 8012936:	b204      	sxth	r4, r0
 8012938:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801293c:	4631      	mov	r1, r6
 801293e:	4628      	mov	r0, r5
 8012940:	4798      	blx	r3
 8012942:	9001      	str	r0, [sp, #4]
 8012944:	a801      	add	r0, sp, #4
 8012946:	f7ff ffcd 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801294a:	eba0 0009 	sub.w	r0, r0, r9
 801294e:	fb10 f000 	smulbb	r0, r0, r0
 8012952:	fb04 0404 	mla	r4, r4, r4, r0
 8012956:	455c      	cmp	r4, fp
 8012958:	bf3c      	itt	cc
 801295a:	f8aa 6000 	strhcc.w	r6, [sl]
 801295e:	46a3      	movcc	fp, r4
 8012960:	3701      	adds	r7, #1
 8012962:	e7d6      	b.n	8012912 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 8012964:	2001      	movs	r0, #1
 8012966:	b003      	add	sp, #12
 8012968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801296c <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 801296c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012970:	4604      	mov	r4, r0
 8012972:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 8012976:	4688      	mov	r8, r1
 8012978:	4691      	mov	r9, r2
 801297a:	b1f8      	cbz	r0, 80129bc <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
 801297c:	2500      	movs	r5, #0
 801297e:	f04f 37ff 	mov.w	r7, #4294967295
 8012982:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012986:	b22e      	sxth	r6, r5
 8012988:	42b3      	cmp	r3, r6
 801298a:	dd16      	ble.n	80129ba <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
 801298c:	6823      	ldr	r3, [r4, #0]
 801298e:	4631      	mov	r1, r6
 8012990:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012994:	4620      	mov	r0, r4
 8012996:	4798      	blx	r3
 8012998:	9001      	str	r0, [sp, #4]
 801299a:	a801      	add	r0, sp, #4
 801299c:	f7ff ffa2 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80129a0:	b200      	sxth	r0, r0
 80129a2:	eba0 0008 	sub.w	r0, r0, r8
 80129a6:	2800      	cmp	r0, #0
 80129a8:	bfb8      	it	lt
 80129aa:	4240      	neglt	r0, r0
 80129ac:	42b8      	cmp	r0, r7
 80129ae:	bf3c      	itt	cc
 80129b0:	f8a9 6000 	strhcc.w	r6, [r9]
 80129b4:	4607      	movcc	r7, r0
 80129b6:	3501      	adds	r5, #1
 80129b8:	e7e3      	b.n	8012982 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
 80129ba:	2001      	movs	r0, #1
 80129bc:	b003      	add	sp, #12
 80129be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080129c2 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 80129c2:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
 80129c6:	f9bd 3000 	ldrsh.w	r3, [sp]
 80129ca:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
 80129ce:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
 80129d2:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 80129d6:	4770      	bx	lr

080129d8 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 80129d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129da:	4604      	mov	r4, r0
 80129dc:	3038      	adds	r0, #56	; 0x38
 80129de:	460d      	mov	r5, r1
 80129e0:	f7fe fb5a 	bl	8011098 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80129e4:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 80129e8:	9200      	str	r2, [sp, #0]
 80129ea:	2200      	movs	r2, #0
 80129ec:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80129f0:	4611      	mov	r1, r2
 80129f2:	4628      	mov	r0, r5
 80129f4:	f7f7 fff6 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80129f8:	b003      	add	sp, #12
 80129fa:	bd30      	pop	{r4, r5, pc}

080129fc <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 80129fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129fe:	4604      	mov	r4, r0
 8012a00:	3064      	adds	r0, #100	; 0x64
 8012a02:	460d      	mov	r5, r1
 8012a04:	f7fe fb48 	bl	8011098 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012a08:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 8012a0c:	9200      	str	r2, [sp, #0]
 8012a0e:	2200      	movs	r2, #0
 8012a10:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 8012a14:	4611      	mov	r1, r2
 8012a16:	4628      	mov	r0, r5
 8012a18:	f7f7 ffe4 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012a1c:	b003      	add	sp, #12
 8012a1e:	bd30      	pop	{r4, r5, pc}

08012a20 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8012a20:	b538      	push	{r3, r4, r5, lr}
 8012a22:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8012a26:	428b      	cmp	r3, r1
 8012a28:	460d      	mov	r5, r1
 8012a2a:	dd08      	ble.n	8012a3e <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8012a2c:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8012a2e:	b134      	cbz	r4, 8012a3e <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8012a30:	6823      	ldr	r3, [r4, #0]
 8012a32:	4620      	mov	r0, r4
 8012a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a36:	4629      	mov	r1, r5
 8012a38:	4798      	blx	r3
 8012a3a:	69a4      	ldr	r4, [r4, #24]
 8012a3c:	e7f7      	b.n	8012a2e <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8012a3e:	bd38      	pop	{r3, r4, r5, pc}

08012a40 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8012a40:	b570      	push	{r4, r5, r6, lr}
 8012a42:	f8d0 40e4 	ldr.w	r4, [r0, #228]	; 0xe4
 8012a46:	4606      	mov	r6, r0
 8012a48:	460d      	mov	r5, r1
 8012a4a:	b134      	cbz	r4, 8012a5a <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 8012a4c:	6823      	ldr	r3, [r4, #0]
 8012a4e:	4620      	mov	r0, r4
 8012a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a52:	4629      	mov	r1, r5
 8012a54:	4798      	blx	r3
 8012a56:	69a4      	ldr	r4, [r4, #24]
 8012a58:	e7f7      	b.n	8012a4a <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 8012a5a:	f8d6 4110 	ldr.w	r4, [r6, #272]	; 0x110
 8012a5e:	b134      	cbz	r4, 8012a6e <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 8012a60:	6823      	ldr	r3, [r4, #0]
 8012a62:	4620      	mov	r0, r4
 8012a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a66:	4629      	mov	r1, r5
 8012a68:	4798      	blx	r3
 8012a6a:	69a4      	ldr	r4, [r4, #24]
 8012a6c:	e7f7      	b.n	8012a5e <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 8012a6e:	bd70      	pop	{r4, r5, r6, pc}

08012a70 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 8012a70:	b538      	push	{r3, r4, r5, lr}
 8012a72:	4604      	mov	r4, r0
 8012a74:	2500      	movs	r5, #0
 8012a76:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012a7a:	42ab      	cmp	r3, r5
 8012a7c:	db05      	blt.n	8012a8a <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 8012a7e:	b229      	sxth	r1, r5
 8012a80:	4620      	mov	r0, r4
 8012a82:	f7ff ffdd 	bl	8012a40 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8012a86:	3501      	adds	r5, #1
 8012a88:	e7f5      	b.n	8012a76 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 8012a8a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8012a8e:	f005 f870 	bl	8017b72 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012a92:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8012a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a9a:	f005 b86a 	b.w	8017b72 <_ZNK8touchgfx8Drawable10invalidateEv>

08012a9e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 8012a9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012aa0:	6e05      	ldr	r5, [r0, #96]	; 0x60
 8012aa2:	4604      	mov	r4, r0
 8012aa4:	b15d      	cbz	r5, 8012abe <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 8012aa6:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 8012aaa:	9200      	str	r2, [sp, #0]
 8012aac:	2200      	movs	r2, #0
 8012aae:	4628      	mov	r0, r5
 8012ab0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8012ab4:	4611      	mov	r1, r2
 8012ab6:	f7f7 ff95 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012aba:	69ad      	ldr	r5, [r5, #24]
 8012abc:	e7f2      	b.n	8012aa4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 8012abe:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
 8012ac2:	b15d      	cbz	r5, 8012adc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 8012ac4:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
 8012ac8:	9200      	str	r2, [sp, #0]
 8012aca:	2200      	movs	r2, #0
 8012acc:	4628      	mov	r0, r5
 8012ace:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
 8012ad2:	4611      	mov	r1, r2
 8012ad4:	f7f7 ff86 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012ad8:	69ad      	ldr	r5, [r5, #24]
 8012ada:	e7f2      	b.n	8012ac2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 8012adc:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 8012ae0:	b15d      	cbz	r5, 8012afa <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8012ae2:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 8012ae6:	9200      	str	r2, [sp, #0]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	4628      	mov	r0, r5
 8012aec:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 8012af0:	4611      	mov	r1, r2
 8012af2:	f7f7 ff77 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012af6:	69ad      	ldr	r5, [r5, #24]
 8012af8:	e7f2      	b.n	8012ae0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 8012afa:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8012afe:	b15d      	cbz	r5, 8012b18 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8012b00:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 8012b04:	9200      	str	r2, [sp, #0]
 8012b06:	2200      	movs	r2, #0
 8012b08:	4628      	mov	r0, r5
 8012b0a:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 8012b0e:	4611      	mov	r1, r2
 8012b10:	f7f7 ff68 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012b14:	69ad      	ldr	r5, [r5, #24]
 8012b16:	e7f2      	b.n	8012afe <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 8012b18:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8012b1c:	b15d      	cbz	r5, 8012b36 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8012b1e:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 8012b22:	9200      	str	r2, [sp, #0]
 8012b24:	2200      	movs	r2, #0
 8012b26:	4628      	mov	r0, r5
 8012b28:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 8012b2c:	4611      	mov	r1, r2
 8012b2e:	f7f7 ff59 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012b32:	69ad      	ldr	r5, [r5, #24]
 8012b34:	e7f2      	b.n	8012b1c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8012b36:	6823      	ldr	r3, [r4, #0]
 8012b38:	695b      	ldr	r3, [r3, #20]
 8012b3a:	4620      	mov	r0, r4
 8012b3c:	b003      	add	sp, #12
 8012b3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b42:	4718      	bx	r3

08012b44 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8012b44:	b430      	push	{r4, r5}
 8012b46:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
 8012b4a:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
 8012b4e:	b28a      	uxth	r2, r1
 8012b50:	1b15      	subs	r5, r2, r4
 8012b52:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
 8012b56:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
 8012b5a:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
 8012b5e:	442c      	add	r4, r5
 8012b60:	1b12      	subs	r2, r2, r4
 8012b62:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8012b66:	8101      	strh	r1, [r0, #8]
 8012b68:	bc30      	pop	{r4, r5}
 8012b6a:	f7ff bf98 	b.w	8012a9e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08012b6e <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8012b6e:	b430      	push	{r4, r5}
 8012b70:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
 8012b74:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
 8012b78:	b28a      	uxth	r2, r1
 8012b7a:	1b15      	subs	r5, r2, r4
 8012b7c:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
 8012b80:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
 8012b84:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
 8012b88:	442c      	add	r4, r5
 8012b8a:	1b12      	subs	r2, r2, r4
 8012b8c:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 8012b90:	8141      	strh	r1, [r0, #10]
 8012b92:	bc30      	pop	{r4, r5}
 8012b94:	f7ff bf83 	b.w	8012a9e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08012b98 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8012b98:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b9c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 8012ba0:	fa1f fa83 	uxth.w	sl, r3
 8012ba4:	4699      	mov	r9, r3
 8012ba6:	8903      	ldrh	r3, [r0, #8]
 8012ba8:	4604      	mov	r4, r0
 8012baa:	4615      	mov	r5, r2
 8012bac:	fa1f f887 	uxth.w	r8, r7
 8012bb0:	4452      	add	r2, sl
 8012bb2:	8940      	ldrh	r0, [r0, #10]
 8012bb4:	1a9b      	subs	r3, r3, r2
 8012bb6:	eb08 0201 	add.w	r2, r8, r1
 8012bba:	1a80      	subs	r0, r0, r2
 8012bbc:	b200      	sxth	r0, r0
 8012bbe:	460e      	mov	r6, r1
 8012bc0:	9000      	str	r0, [sp, #0]
 8012bc2:	460a      	mov	r2, r1
 8012bc4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012bc8:	4629      	mov	r1, r5
 8012bca:	b21b      	sxth	r3, r3
 8012bcc:	f7f7 ff0a 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8012bd6:	9600      	str	r6, [sp, #0]
 8012bd8:	4611      	mov	r1, r2
 8012bda:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8012bde:	f7f7 ff01 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012be2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012be6:	9300      	str	r3, [sp, #0]
 8012be8:	2200      	movs	r2, #0
 8012bea:	462b      	mov	r3, r5
 8012bec:	4611      	mov	r1, r2
 8012bee:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8012bf2:	f7f7 fef7 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012bf6:	8921      	ldrh	r1, [r4, #8]
 8012bf8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012bfc:	9300      	str	r3, [sp, #0]
 8012bfe:	eba1 010a 	sub.w	r1, r1, sl
 8012c02:	464b      	mov	r3, r9
 8012c04:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8012c08:	2200      	movs	r2, #0
 8012c0a:	b209      	sxth	r1, r1
 8012c0c:	f7f7 feea 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012c10:	8962      	ldrh	r2, [r4, #10]
 8012c12:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8012c16:	9700      	str	r7, [sp, #0]
 8012c18:	eba2 0208 	sub.w	r2, r2, r8
 8012c1c:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8012c20:	b212      	sxth	r2, r2
 8012c22:	2100      	movs	r1, #0
 8012c24:	f7f7 fede 	bl	800a9e4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012c28:	4620      	mov	r0, r4
 8012c2a:	b002      	add	sp, #8
 8012c2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c30:	f7ff bf35 	b.w	8012a9e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08012c34 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8012c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c38:	b085      	sub	sp, #20
 8012c3a:	4604      	mov	r4, r0
 8012c3c:	9103      	str	r1, [sp, #12]
 8012c3e:	f7f8 f831 	bl	800aca4 <_ZN8touchgfx9ContainerC1Ev>
 8012c42:	4b2d      	ldr	r3, [pc, #180]	; (8012cf8 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 8012c44:	6023      	str	r3, [r4, #0]
 8012c46:	2601      	movs	r6, #1
 8012c48:	23ff      	movs	r3, #255	; 0xff
 8012c4a:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8012c4e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8012c52:	f104 0964 	add.w	r9, r4, #100	; 0x64
 8012c56:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8012c5a:	4658      	mov	r0, fp
 8012c5c:	f7f8 f822 	bl	800aca4 <_ZN8touchgfx9ContainerC1Ev>
 8012c60:	f104 0890 	add.w	r8, r4, #144	; 0x90
 8012c64:	4648      	mov	r0, r9
 8012c66:	f7f8 f81d 	bl	800aca4 <_ZN8touchgfx9ContainerC1Ev>
 8012c6a:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
 8012c6e:	4640      	mov	r0, r8
 8012c70:	f7f8 f818 	bl	800aca4 <_ZN8touchgfx9ContainerC1Ev>
 8012c74:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
 8012c78:	4650      	mov	r0, sl
 8012c7a:	f7f8 f813 	bl	800aca4 <_ZN8touchgfx9ContainerC1Ev>
 8012c7e:	4638      	mov	r0, r7
 8012c80:	f7f8 f810 	bl	800aca4 <_ZN8touchgfx9ContainerC1Ev>
 8012c84:	2500      	movs	r5, #0
 8012c86:	9903      	ldr	r1, [sp, #12]
 8012c88:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
 8012c8c:	4620      	mov	r0, r4
 8012c8e:	4659      	mov	r1, fp
 8012c90:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8012c94:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 8012c98:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
 8012c9c:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
 8012ca0:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 8012ca4:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 8012ca8:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8012cac:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8012cb0:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8012cb4:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 8012cb8:	f7fe f9ee 	bl	8011098 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012cbc:	4651      	mov	r1, sl
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	f7fe f9ea 	bl	8011098 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012cc4:	4649      	mov	r1, r9
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	f7fe f9e6 	bl	8011098 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012ccc:	4641      	mov	r1, r8
 8012cce:	4620      	mov	r0, r4
 8012cd0:	f7fe f9e2 	bl	8011098 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012cd4:	4639      	mov	r1, r7
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f7fe f9de 	bl	8011098 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012cdc:	4620      	mov	r0, r4
 8012cde:	9500      	str	r5, [sp, #0]
 8012ce0:	462b      	mov	r3, r5
 8012ce2:	462a      	mov	r2, r5
 8012ce4:	4629      	mov	r1, r5
 8012ce6:	f7ff ff57 	bl	8012b98 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 8012cea:	4620      	mov	r0, r4
 8012cec:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8012cf0:	b005      	add	sp, #20
 8012cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf6:	bf00      	nop
 8012cf8:	0802a770 	.word	0x0802a770

08012cfc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8012cfc:	4291      	cmp	r1, r2
 8012cfe:	4613      	mov	r3, r2
 8012d00:	d003      	beq.n	8012d0a <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 8012d02:	460a      	mov	r2, r1
 8012d04:	4619      	mov	r1, r3
 8012d06:	f005 b8f5 	b.w	8017ef4 <_ZN8touchgfx6muldivElll>
 8012d0a:	4770      	bx	lr

08012d0c <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8012d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d10:	6803      	ldr	r3, [r0, #0]
 8012d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012d16:	460d      	mov	r5, r1
 8012d18:	4604      	mov	r4, r0
 8012d1a:	4798      	blx	r3
 8012d1c:	42a8      	cmp	r0, r5
 8012d1e:	4606      	mov	r6, r0
 8012d20:	d024      	beq.n	8012d6c <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 8012d22:	6823      	ldr	r3, [r4, #0]
 8012d24:	4601      	mov	r1, r0
 8012d26:	462a      	mov	r2, r5
 8012d28:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8012d2c:	f8d3 70a4 	ldr.w	r7, [r3, #164]	; 0xa4
 8012d30:	f7ff ffe4 	bl	8012cfc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012d34:	462a      	mov	r2, r5
 8012d36:	4680      	mov	r8, r0
 8012d38:	4631      	mov	r1, r6
 8012d3a:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8012d3e:	f7ff ffdd 	bl	8012cfc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012d42:	4641      	mov	r1, r8
 8012d44:	4602      	mov	r2, r0
 8012d46:	4620      	mov	r0, r4
 8012d48:	47b8      	blx	r7
 8012d4a:	462a      	mov	r2, r5
 8012d4c:	4631      	mov	r1, r6
 8012d4e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8012d52:	f7ff ffd3 	bl	8012cfc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012d56:	462a      	mov	r2, r5
 8012d58:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 8012d5c:	4631      	mov	r1, r6
 8012d5e:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8012d62:	f7ff ffcb 	bl	8012cfc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012d66:	6325      	str	r5, [r4, #48]	; 0x30
 8012d68:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
 8012d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d70 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8012d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d74:	4604      	mov	r4, r0
 8012d76:	460f      	mov	r7, r1
 8012d78:	b1ba      	cbz	r2, 8012daa <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x3a>
 8012d7a:	6803      	ldr	r3, [r0, #0]
 8012d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012d80:	4798      	blx	r3
 8012d82:	2600      	movs	r6, #0
 8012d84:	4681      	mov	r9, r0
 8012d86:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012d8a:	b235      	sxth	r5, r6
 8012d8c:	42ab      	cmp	r3, r5
 8012d8e:	f106 0601 	add.w	r6, r6, #1
 8012d92:	dd0a      	ble.n	8012daa <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x3a>
 8012d94:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 8012d98:	463a      	mov	r2, r7
 8012d9a:	4649      	mov	r1, r9
 8012d9c:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8012da0:	f7ff ffac 	bl	8012cfc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012da4:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8012da8:	e7ed      	b.n	8012d86 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 8012daa:	6367      	str	r7, [r4, #52]	; 0x34
 8012dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012db0 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 8012db0:	b570      	push	{r4, r5, r6, lr}
 8012db2:	6803      	ldr	r3, [r0, #0]
 8012db4:	4604      	mov	r4, r0
 8012db6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8012dba:	460d      	mov	r5, r1
 8012dbc:	4798      	blx	r3
 8012dbe:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8012dc8:	6823      	ldr	r3, [r4, #0]
 8012dca:	4629      	mov	r1, r5
 8012dcc:	4620      	mov	r0, r4
 8012dce:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8012dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012dd6:	4718      	bx	r3

08012dd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dda:	4604      	mov	r4, r0
 8012ddc:	4608      	mov	r0, r1
 8012dde:	460d      	mov	r5, r1
 8012de0:	f7fe fb25 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012de4:	b978      	cbnz	r0, 8012e06 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8012de6:	4620      	mov	r0, r4
 8012de8:	f7fe fb21 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012dec:	f9b5 6000 	ldrsh.w	r6, [r5]
 8012df0:	b150      	cbz	r0, 8012e08 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8012df2:	8026      	strh	r6, [r4, #0]
 8012df4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012df8:	8063      	strh	r3, [r4, #2]
 8012dfa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8012dfe:	80a3      	strh	r3, [r4, #4]
 8012e00:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012e04:	80e3      	strh	r3, [r4, #6]
 8012e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e08:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012e0c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012e10:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012e14:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8012e18:	88ed      	ldrh	r5, [r5, #6]
 8012e1a:	42b1      	cmp	r1, r6
 8012e1c:	460f      	mov	r7, r1
 8012e1e:	bfa8      	it	ge
 8012e20:	4637      	movge	r7, r6
 8012e22:	4293      	cmp	r3, r2
 8012e24:	4618      	mov	r0, r3
 8012e26:	4466      	add	r6, ip
 8012e28:	bfa8      	it	ge
 8012e2a:	4610      	movge	r0, r2
 8012e2c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012e30:	8027      	strh	r7, [r4, #0]
 8012e32:	442a      	add	r2, r5
 8012e34:	88e5      	ldrh	r5, [r4, #6]
 8012e36:	8060      	strh	r0, [r4, #2]
 8012e38:	4461      	add	r1, ip
 8012e3a:	442b      	add	r3, r5
 8012e3c:	b236      	sxth	r6, r6
 8012e3e:	b209      	sxth	r1, r1
 8012e40:	b212      	sxth	r2, r2
 8012e42:	b21b      	sxth	r3, r3
 8012e44:	428e      	cmp	r6, r1
 8012e46:	bfac      	ite	ge
 8012e48:	ebc7 0106 	rsbge	r1, r7, r6
 8012e4c:	ebc7 0101 	rsblt	r1, r7, r1
 8012e50:	429a      	cmp	r2, r3
 8012e52:	bfac      	ite	ge
 8012e54:	ebc0 0202 	rsbge	r2, r0, r2
 8012e58:	ebc0 0203 	rsblt	r2, r0, r3
 8012e5c:	80a1      	strh	r1, [r4, #4]
 8012e5e:	80e2      	strh	r2, [r4, #6]
 8012e60:	e7d1      	b.n	8012e06 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08012e62 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8012e62:	6800      	ldr	r0, [r0, #0]
 8012e64:	2800      	cmp	r0, #0
 8012e66:	bfb9      	ittee	lt
 8012e68:	2320      	movlt	r3, #32
 8012e6a:	fb90 f0f3 	sdivlt	r0, r0, r3
 8012e6e:	301f      	addge	r0, #31
 8012e70:	1140      	asrge	r0, r0, #5
 8012e72:	4770      	bx	lr

08012e74 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 8012e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e78:	6803      	ldr	r3, [r0, #0]
 8012e7a:	6945      	ldr	r5, [r0, #20]
 8012e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e7e:	b093      	sub	sp, #76	; 0x4c
 8012e80:	4604      	mov	r4, r0
 8012e82:	460f      	mov	r7, r1
 8012e84:	2d00      	cmp	r5, #0
 8012e86:	f000 81ad 	beq.w	80131e4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 8012e8a:	696d      	ldr	r5, [r5, #20]
 8012e8c:	4798      	blx	r3
 8012e8e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d077      	beq.n	8012f86 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012e96:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012e9a:	fb13 f000 	smulbb	r0, r3, r0
 8012e9e:	b283      	uxth	r3, r0
 8012ea0:	1c58      	adds	r0, r3, #1
 8012ea2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8012ea6:	1200      	asrs	r0, r0, #8
 8012ea8:	d06d      	beq.n	8012f86 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012eaa:	b2c3      	uxtb	r3, r0
 8012eac:	9308      	str	r3, [sp, #32]
 8012eae:	6823      	ldr	r3, [r4, #0]
 8012eb0:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8012eb4:	462a      	mov	r2, r5
 8012eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012eba:	4621      	mov	r1, r4
 8012ebc:	4640      	mov	r0, r8
 8012ebe:	4798      	blx	r3
 8012ec0:	e898 0003 	ldmia.w	r8, {r0, r1}
 8012ec4:	ae0e      	add	r6, sp, #56	; 0x38
 8012ec6:	e886 0003 	stmia.w	r6, {r0, r1}
 8012eca:	4639      	mov	r1, r7
 8012ecc:	4630      	mov	r0, r6
 8012ece:	f7fe fa6b 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 8012ed2:	6823      	ldr	r3, [r4, #0]
 8012ed4:	4629      	mov	r1, r5
 8012ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012eda:	4620      	mov	r0, r4
 8012edc:	4798      	blx	r3
 8012ede:	6823      	ldr	r3, [r4, #0]
 8012ee0:	4607      	mov	r7, r0
 8012ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ee6:	4629      	mov	r1, r5
 8012ee8:	4620      	mov	r0, r4
 8012eea:	4798      	blx	r3
 8012eec:	4681      	mov	r9, r0
 8012eee:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 8012ef2:	0103      	lsls	r3, r0, #4
 8012ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8012ef6:	6823      	ldr	r3, [r4, #0]
 8012ef8:	4629      	mov	r1, r5
 8012efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012efe:	4620      	mov	r0, r4
 8012f00:	4798      	blx	r3
 8012f02:	b203      	sxth	r3, r0
 8012f04:	9306      	str	r3, [sp, #24]
 8012f06:	6823      	ldr	r3, [r4, #0]
 8012f08:	4629      	mov	r1, r5
 8012f0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012f0e:	4620      	mov	r0, r4
 8012f10:	4798      	blx	r3
 8012f12:	2f00      	cmp	r7, #0
 8012f14:	b203      	sxth	r3, r0
 8012f16:	9307      	str	r3, [sp, #28]
 8012f18:	d138      	bne.n	8012f8c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 8012f1a:	f1b9 0f00 	cmp.w	r9, #0
 8012f1e:	d132      	bne.n	8012f86 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012f20:	6823      	ldr	r3, [r4, #0]
 8012f22:	464a      	mov	r2, r9
 8012f24:	4629      	mov	r1, r5
 8012f26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	4798      	blx	r3
 8012f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f30:	1ac0      	subs	r0, r0, r3
 8012f32:	9010      	str	r0, [sp, #64]	; 0x40
 8012f34:	4640      	mov	r0, r8
 8012f36:	f7ff fcd5 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012f3a:	6823      	ldr	r3, [r4, #0]
 8012f3c:	4607      	mov	r7, r0
 8012f3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012f42:	4629      	mov	r1, r5
 8012f44:	4620      	mov	r0, r4
 8012f46:	4798      	blx	r3
 8012f48:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012f4c:	1a38      	subs	r0, r7, r0
 8012f4e:	fa0f f880 	sxth.w	r8, r0
 8012f52:	eb13 0f08 	cmn.w	r3, r8
 8012f56:	d416      	bmi.n	8012f86 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012f58:	6823      	ldr	r3, [r4, #0]
 8012f5a:	4629      	mov	r1, r5
 8012f5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012f60:	4620      	mov	r0, r4
 8012f62:	4798      	blx	r3
 8012f64:	4580      	cmp	r8, r0
 8012f66:	da0e      	bge.n	8012f86 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012f68:	9a08      	ldr	r2, [sp, #32]
 8012f6a:	6823      	ldr	r3, [r4, #0]
 8012f6c:	9202      	str	r2, [sp, #8]
 8012f6e:	b23f      	sxth	r7, r7
 8012f70:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8012f74:	9201      	str	r2, [sp, #4]
 8012f76:	9700      	str	r7, [sp, #0]
 8012f78:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8012f7c:	4631      	mov	r1, r6
 8012f7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012f82:	4620      	mov	r0, r4
 8012f84:	47a8      	blx	r5
 8012f86:	b013      	add	sp, #76	; 0x4c
 8012f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f8c:	ddfb      	ble.n	8012f86 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012f8e:	6823      	ldr	r3, [r4, #0]
 8012f90:	4629      	mov	r1, r5
 8012f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012f96:	4620      	mov	r0, r4
 8012f98:	4798      	blx	r3
 8012f9a:	6823      	ldr	r3, [r4, #0]
 8012f9c:	4683      	mov	fp, r0
 8012f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012fa2:	4629      	mov	r1, r5
 8012fa4:	4620      	mov	r0, r4
 8012fa6:	4798      	blx	r3
 8012fa8:	eba0 030b 	sub.w	r3, r0, fp
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	bfb8      	it	lt
 8012fb0:	425b      	neglt	r3, r3
 8012fb2:	fb93 f3f7 	sdiv	r3, r3, r7
 8012fb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8012fba:	4680      	mov	r8, r0
 8012fbc:	dce3      	bgt.n	8012f86 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012fbe:	6823      	ldr	r3, [r4, #0]
 8012fc0:	465a      	mov	r2, fp
 8012fc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012fc6:	4629      	mov	r1, r5
 8012fc8:	4620      	mov	r0, r4
 8012fca:	4798      	blx	r3
 8012fcc:	6823      	ldr	r3, [r4, #0]
 8012fce:	4606      	mov	r6, r0
 8012fd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012fd4:	4642      	mov	r2, r8
 8012fd6:	4629      	mov	r1, r5
 8012fd8:	4620      	mov	r0, r4
 8012fda:	4798      	blx	r3
 8012fdc:	42b0      	cmp	r0, r6
 8012fde:	bfa2      	ittt	ge
 8012fe0:	4643      	movge	r3, r8
 8012fe2:	46d8      	movge	r8, fp
 8012fe4:	469b      	movge	fp, r3
 8012fe6:	45d8      	cmp	r8, fp
 8012fe8:	bfac      	ite	ge
 8012fea:	f04f 33ff 	movge.w	r3, #4294967295
 8012fee:	2301      	movlt	r3, #1
 8012ff0:	fb98 f6f7 	sdiv	r6, r8, r7
 8012ff4:	fb9b f2f7 	sdiv	r2, fp, r7
 8012ff8:	1af6      	subs	r6, r6, r3
 8012ffa:	441a      	add	r2, r3
 8012ffc:	4296      	cmp	r6, r2
 8012ffe:	bfac      	ite	ge
 8013000:	f04f 3aff 	movge.w	sl, #4294967295
 8013004:	f04f 0a01 	movlt.w	sl, #1
 8013008:	f1b9 0f00 	cmp.w	r9, #0
 801300c:	d13e      	bne.n	801308c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 801300e:	fb07 fb0a 	mul.w	fp, r7, sl
 8013012:	eb0a 0802 	add.w	r8, sl, r2
 8013016:	4377      	muls	r7, r6
 8013018:	45b0      	cmp	r8, r6
 801301a:	d0b4      	beq.n	8012f86 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801301c:	6823      	ldr	r3, [r4, #0]
 801301e:	463a      	mov	r2, r7
 8013020:	4629      	mov	r1, r5
 8013022:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013026:	4620      	mov	r0, r4
 8013028:	4798      	blx	r3
 801302a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801302c:	1ac0      	subs	r0, r0, r3
 801302e:	9010      	str	r0, [sp, #64]	; 0x40
 8013030:	a810      	add	r0, sp, #64	; 0x40
 8013032:	f7ff fc57 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013036:	6823      	ldr	r3, [r4, #0]
 8013038:	4681      	mov	r9, r0
 801303a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801303e:	4629      	mov	r1, r5
 8013040:	4620      	mov	r0, r4
 8013042:	4798      	blx	r3
 8013044:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8013048:	eba9 0000 	sub.w	r0, r9, r0
 801304c:	b203      	sxth	r3, r0
 801304e:	42da      	cmn	r2, r3
 8013050:	9304      	str	r3, [sp, #16]
 8013052:	d418      	bmi.n	8013086 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 8013054:	6822      	ldr	r2, [r4, #0]
 8013056:	4629      	mov	r1, r5
 8013058:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 801305c:	4620      	mov	r0, r4
 801305e:	4790      	blx	r2
 8013060:	9b04      	ldr	r3, [sp, #16]
 8013062:	4283      	cmp	r3, r0
 8013064:	da0f      	bge.n	8013086 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 8013066:	9b08      	ldr	r3, [sp, #32]
 8013068:	9302      	str	r3, [sp, #8]
 801306a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801306e:	6822      	ldr	r2, [r4, #0]
 8013070:	9301      	str	r3, [sp, #4]
 8013072:	fa0f f389 	sxth.w	r3, r9
 8013076:	9300      	str	r3, [sp, #0]
 8013078:	f8d2 9088 	ldr.w	r9, [r2, #136]	; 0x88
 801307c:	a90e      	add	r1, sp, #56	; 0x38
 801307e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013082:	4620      	mov	r0, r4
 8013084:	47c8      	blx	r9
 8013086:	4456      	add	r6, sl
 8013088:	445f      	add	r7, fp
 801308a:	e7c5      	b.n	8013018 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 801308c:	fb98 f8f9 	sdiv	r8, r8, r9
 8013090:	eba8 0203 	sub.w	r2, r8, r3
 8013094:	fb9b f8f9 	sdiv	r8, fp, r9
 8013098:	4498      	add	r8, r3
 801309a:	4542      	cmp	r2, r8
 801309c:	bfac      	ite	ge
 801309e:	f04f 33ff 	movge.w	r3, #4294967295
 80130a2:	2301      	movlt	r3, #1
 80130a4:	930a      	str	r3, [sp, #40]	; 0x28
 80130a6:	6823      	ldr	r3, [r4, #0]
 80130a8:	9204      	str	r2, [sp, #16]
 80130aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80130ae:	fb02 f209 	mul.w	r2, r2, r9
 80130b2:	4629      	mov	r1, r5
 80130b4:	4620      	mov	r0, r4
 80130b6:	4798      	blx	r3
 80130b8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 80130bc:	f84b 0d08 	str.w	r0, [fp, #-8]!
 80130c0:	4658      	mov	r0, fp
 80130c2:	f7ff fc0f 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80130c6:	b203      	sxth	r3, r0
 80130c8:	9305      	str	r3, [sp, #20]
 80130ca:	6823      	ldr	r3, [r4, #0]
 80130cc:	fb06 f207 	mul.w	r2, r6, r7
 80130d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80130d4:	4629      	mov	r1, r5
 80130d6:	4620      	mov	r0, r4
 80130d8:	4798      	blx	r3
 80130da:	9010      	str	r0, [sp, #64]	; 0x40
 80130dc:	4658      	mov	r0, fp
 80130de:	f7ff fc01 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80130e2:	fb07 f20a 	mul.w	r2, r7, sl
 80130e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80130e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130ea:	4442      	add	r2, r8
 80130ec:	b203      	sxth	r3, r0
 80130ee:	920c      	str	r2, [sp, #48]	; 0x30
 80130f0:	9a05      	ldr	r2, [sp, #20]
 80130f2:	429a      	cmp	r2, r3
 80130f4:	dc16      	bgt.n	8013124 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 80130f6:	eb06 080a 	add.w	r8, r6, sl
 80130fa:	fb07 f808 	mul.w	r8, r7, r8
 80130fe:	9a05      	ldr	r2, [sp, #20]
 8013100:	429a      	cmp	r2, r3
 8013102:	db54      	blt.n	80131ae <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 8013104:	6823      	ldr	r3, [r4, #0]
 8013106:	4642      	mov	r2, r8
 8013108:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801310c:	4629      	mov	r1, r5
 801310e:	4620      	mov	r0, r4
 8013110:	4798      	blx	r3
 8013112:	9010      	str	r0, [sp, #64]	; 0x40
 8013114:	4658      	mov	r0, fp
 8013116:	f7ff fbe5 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801311a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801311c:	4456      	add	r6, sl
 801311e:	b203      	sxth	r3, r0
 8013120:	4490      	add	r8, r2
 8013122:	e7ec      	b.n	80130fe <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 8013124:	6823      	ldr	r3, [r4, #0]
 8013126:	fb07 f206 	mul.w	r2, r7, r6
 801312a:	4629      	mov	r1, r5
 801312c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013130:	4620      	mov	r0, r4
 8013132:	4798      	blx	r3
 8013134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013136:	1ac0      	subs	r0, r0, r3
 8013138:	9010      	str	r0, [sp, #64]	; 0x40
 801313a:	4658      	mov	r0, fp
 801313c:	f7ff fbd2 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013140:	6823      	ldr	r3, [r4, #0]
 8013142:	4680      	mov	r8, r0
 8013144:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013148:	4629      	mov	r1, r5
 801314a:	4620      	mov	r0, r4
 801314c:	4798      	blx	r3
 801314e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8013152:	eba8 0000 	sub.w	r0, r8, r0
 8013156:	b203      	sxth	r3, r0
 8013158:	42da      	cmn	r2, r3
 801315a:	930d      	str	r3, [sp, #52]	; 0x34
 801315c:	d418      	bmi.n	8013190 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 801315e:	6822      	ldr	r2, [r4, #0]
 8013160:	4629      	mov	r1, r5
 8013162:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8013166:	4620      	mov	r0, r4
 8013168:	4790      	blx	r2
 801316a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801316c:	4283      	cmp	r3, r0
 801316e:	da0f      	bge.n	8013190 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8013170:	9b08      	ldr	r3, [sp, #32]
 8013172:	9302      	str	r3, [sp, #8]
 8013174:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013178:	6822      	ldr	r2, [r4, #0]
 801317a:	9301      	str	r3, [sp, #4]
 801317c:	fa0f f388 	sxth.w	r3, r8
 8013180:	9300      	str	r3, [sp, #0]
 8013182:	f8d2 8088 	ldr.w	r8, [r2, #136]	; 0x88
 8013186:	a90e      	add	r1, sp, #56	; 0x38
 8013188:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801318c:	4620      	mov	r0, r4
 801318e:	47c0      	blx	r8
 8013190:	6823      	ldr	r3, [r4, #0]
 8013192:	4456      	add	r6, sl
 8013194:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013198:	fb06 f207 	mul.w	r2, r6, r7
 801319c:	4629      	mov	r1, r5
 801319e:	4620      	mov	r0, r4
 80131a0:	4798      	blx	r3
 80131a2:	9010      	str	r0, [sp, #64]	; 0x40
 80131a4:	4658      	mov	r0, fp
 80131a6:	f7ff fb9d 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80131aa:	b203      	sxth	r3, r0
 80131ac:	e7a0      	b.n	80130f0 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 80131ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80131b0:	930d      	str	r3, [sp, #52]	; 0x34
 80131b2:	9b04      	ldr	r3, [sp, #16]
 80131b4:	4413      	add	r3, r2
 80131b6:	9304      	str	r3, [sp, #16]
 80131b8:	9a04      	ldr	r2, [sp, #16]
 80131ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80131bc:	4293      	cmp	r3, r2
 80131be:	f43f aee2 	beq.w	8012f86 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80131c2:	9b04      	ldr	r3, [sp, #16]
 80131c4:	6822      	ldr	r2, [r4, #0]
 80131c6:	4629      	mov	r1, r5
 80131c8:	f8d2 80ac 	ldr.w	r8, [r2, #172]	; 0xac
 80131cc:	4620      	mov	r0, r4
 80131ce:	fb03 f209 	mul.w	r2, r3, r9
 80131d2:	47c0      	blx	r8
 80131d4:	9010      	str	r0, [sp, #64]	; 0x40
 80131d6:	4658      	mov	r0, fp
 80131d8:	f7ff fb84 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80131dc:	b203      	sxth	r3, r0
 80131de:	9305      	str	r3, [sp, #20]
 80131e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131e2:	e785      	b.n	80130f0 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 80131e4:	4798      	blx	r3
 80131e6:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80131ea:	deff      	udf	#255	; 0xff

080131ec <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 80131ec:	b510      	push	{r4, lr}
 80131ee:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 80131f2:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 80131f6:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 80131fa:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80131fe:	13a4      	asrs	r4, r4, #14
 8013200:	139b      	asrs	r3, r3, #14
 8013202:	429c      	cmp	r4, r3
 8013204:	bfb8      	it	lt
 8013206:	461c      	movlt	r4, r3
 8013208:	2c01      	cmp	r4, #1
 801320a:	dd07      	ble.n	801321c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 801320c:	fb91 f1f4 	sdiv	r1, r1, r4
 8013210:	fb90 f0f4 	sdiv	r0, r0, r4
 8013214:	f7ff ffea 	bl	80131ec <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8013218:	4360      	muls	r0, r4
 801321a:	bd10      	pop	{r4, pc}
 801321c:	4340      	muls	r0, r0
 801321e:	fb01 0101 	mla	r1, r1, r1, r0
 8013222:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8013226:	bfb4      	ite	lt
 8013228:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
 801322c:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 8013230:	2000      	movs	r0, #0
 8013232:	18c2      	adds	r2, r0, r3
 8013234:	428a      	cmp	r2, r1
 8013236:	bf9c      	itt	ls
 8013238:	1898      	addls	r0, r3, r2
 801323a:	1a89      	subls	r1, r1, r2
 801323c:	089b      	lsrs	r3, r3, #2
 801323e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8013242:	d1f6      	bne.n	8013232 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 8013244:	e7e9      	b.n	801321a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08013246 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 8013246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013248:	9906      	ldr	r1, [sp, #24]
 801324a:	4291      	cmp	r1, r2
 801324c:	bfbc      	itt	lt
 801324e:	9206      	strlt	r2, [sp, #24]
 8013250:	460a      	movlt	r2, r1
 8013252:	9907      	ldr	r1, [sp, #28]
 8013254:	428b      	cmp	r3, r1
 8013256:	4606      	mov	r6, r0
 8013258:	461c      	mov	r4, r3
 801325a:	f04f 0020 	mov.w	r0, #32
 801325e:	bfc8      	it	gt
 8013260:	460c      	movgt	r4, r1
 8013262:	fb92 f5f0 	sdiv	r5, r2, r0
 8013266:	fb94 f4f0 	sdiv	r4, r4, r0
 801326a:	a806      	add	r0, sp, #24
 801326c:	bfc8      	it	gt
 801326e:	9307      	strgt	r3, [sp, #28]
 8013270:	f7ff fdf7 	bl	8012e62 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8013274:	4607      	mov	r7, r0
 8013276:	a807      	add	r0, sp, #28
 8013278:	f7ff fdf3 	bl	8012e62 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801327c:	1b7a      	subs	r2, r7, r5
 801327e:	1b00      	subs	r0, r0, r4
 8013280:	80f0      	strh	r0, [r6, #6]
 8013282:	8035      	strh	r5, [r6, #0]
 8013284:	8074      	strh	r4, [r6, #2]
 8013286:	80b2      	strh	r2, [r6, #4]
 8013288:	4630      	mov	r0, r6
 801328a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801328c <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 801328c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801328e:	9c08      	ldr	r4, [sp, #32]
 8013290:	2602      	movs	r6, #2
 8013292:	3401      	adds	r4, #1
 8013294:	fb94 f4f6 	sdiv	r4, r4, r6
 8013298:	18a6      	adds	r6, r4, r2
 801329a:	191f      	adds	r7, r3, r4
 801329c:	e9cd 6700 	strd	r6, r7, [sp]
 80132a0:	1b1b      	subs	r3, r3, r4
 80132a2:	1b12      	subs	r2, r2, r4
 80132a4:	4605      	mov	r5, r0
 80132a6:	f7ff ffce 	bl	8013246 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 80132aa:	4628      	mov	r0, r5
 80132ac:	b003      	add	sp, #12
 80132ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080132b0 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 80132b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132b4:	6943      	ldr	r3, [r0, #20]
 80132b6:	b087      	sub	sp, #28
 80132b8:	4606      	mov	r6, r0
 80132ba:	460d      	mov	r5, r1
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d072      	beq.n	80133a6 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 80132c0:	695c      	ldr	r4, [r3, #20]
 80132c2:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
 80132c6:	6823      	ldr	r3, [r4, #0]
 80132c8:	4620      	mov	r0, r4
 80132ca:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80132ce:	4798      	blx	r3
 80132d0:	6823      	ldr	r3, [r4, #0]
 80132d2:	4680      	mov	r8, r0
 80132d4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80132d8:	4629      	mov	r1, r5
 80132da:	4620      	mov	r0, r4
 80132dc:	4798      	blx	r3
 80132de:	017f      	lsls	r7, r7, #5
 80132e0:	4603      	mov	r3, r0
 80132e2:	9700      	str	r7, [sp, #0]
 80132e4:	4642      	mov	r2, r8
 80132e6:	4631      	mov	r1, r6
 80132e8:	a802      	add	r0, sp, #8
 80132ea:	f7ff ffcf 	bl	801328c <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 80132ee:	2d00      	cmp	r5, #0
 80132f0:	dd1b      	ble.n	801332a <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 80132f2:	6823      	ldr	r3, [r4, #0]
 80132f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80132f8:	fa0f f888 	sxth.w	r8, r8
 80132fc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013300:	4641      	mov	r1, r8
 8013302:	4620      	mov	r0, r4
 8013304:	4798      	blx	r3
 8013306:	6823      	ldr	r3, [r4, #0]
 8013308:	4681      	mov	r9, r0
 801330a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801330e:	4641      	mov	r1, r8
 8013310:	4620      	mov	r0, r4
 8013312:	4798      	blx	r3
 8013314:	4631      	mov	r1, r6
 8013316:	4603      	mov	r3, r0
 8013318:	9700      	str	r7, [sp, #0]
 801331a:	a804      	add	r0, sp, #16
 801331c:	464a      	mov	r2, r9
 801331e:	f7ff ffb5 	bl	801328c <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8013322:	a904      	add	r1, sp, #16
 8013324:	a802      	add	r0, sp, #8
 8013326:	f7ff fd57 	bl	8012dd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801332a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 801332e:	3b01      	subs	r3, #1
 8013330:	429d      	cmp	r5, r3
 8013332:	da19      	bge.n	8013368 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 8013334:	6823      	ldr	r3, [r4, #0]
 8013336:	3501      	adds	r5, #1
 8013338:	b22d      	sxth	r5, r5
 801333a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801333e:	4629      	mov	r1, r5
 8013340:	4620      	mov	r0, r4
 8013342:	4798      	blx	r3
 8013344:	6823      	ldr	r3, [r4, #0]
 8013346:	4680      	mov	r8, r0
 8013348:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801334c:	4629      	mov	r1, r5
 801334e:	4620      	mov	r0, r4
 8013350:	4798      	blx	r3
 8013352:	4631      	mov	r1, r6
 8013354:	4603      	mov	r3, r0
 8013356:	9700      	str	r7, [sp, #0]
 8013358:	a804      	add	r0, sp, #16
 801335a:	4642      	mov	r2, r8
 801335c:	f7ff ff96 	bl	801328c <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8013360:	a904      	add	r1, sp, #16
 8013362:	a802      	add	r0, sp, #8
 8013364:	f7ff fd38 	bl	8012dd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013368:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 801336c:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 8013370:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 8013374:	18ca      	adds	r2, r1, r3
 8013376:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 801337a:	f8ad 1012 	strh.w	r1, [sp, #18]
 801337e:	1a9b      	subs	r3, r3, r2
 8013380:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013384:	2200      	movs	r2, #0
 8013386:	a904      	add	r1, sp, #16
 8013388:	a802      	add	r0, sp, #8
 801338a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801338e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013392:	f7fe f809 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 8013396:	6833      	ldr	r3, [r6, #0]
 8013398:	a902      	add	r1, sp, #8
 801339a:	691b      	ldr	r3, [r3, #16]
 801339c:	4630      	mov	r0, r6
 801339e:	4798      	blx	r3
 80133a0:	b007      	add	sp, #28
 80133a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	deff      	udf	#255	; 0xff

080133aa <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 80133aa:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	da05      	bge.n	80133be <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 80133b2:	880a      	ldrh	r2, [r1, #0]
 80133b4:	b29b      	uxth	r3, r3
 80133b6:	441a      	add	r2, r3
 80133b8:	425b      	negs	r3, r3
 80133ba:	800a      	strh	r2, [r1, #0]
 80133bc:	808b      	strh	r3, [r1, #4]
 80133be:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	da05      	bge.n	80133d2 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 80133c6:	884a      	ldrh	r2, [r1, #2]
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	441a      	add	r2, r3
 80133cc:	425b      	negs	r3, r3
 80133ce:	804a      	strh	r2, [r1, #2]
 80133d0:	80cb      	strh	r3, [r1, #6]
 80133d2:	4770      	bx	lr

080133d4 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 80133d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80133d6:	4604      	mov	r4, r0
 80133d8:	460d      	mov	r5, r1
 80133da:	6801      	ldr	r1, [r0, #0]
 80133dc:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 80133e0:	9001      	str	r0, [sp, #4]
 80133e2:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80133e6:	9000      	str	r0, [sp, #0]
 80133e8:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
 80133ec:	a802      	add	r0, sp, #8
 80133ee:	4621      	mov	r1, r4
 80133f0:	47b0      	blx	r6
 80133f2:	a902      	add	r1, sp, #8
 80133f4:	4620      	mov	r0, r4
 80133f6:	f7ff ffd8 	bl	80133aa <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 80133fa:	a802      	add	r0, sp, #8
 80133fc:	4629      	mov	r1, r5
 80133fe:	f7fd ffd3 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 8013402:	a802      	add	r0, sp, #8
 8013404:	f7fe f813 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013408:	b968      	cbnz	r0, 8013426 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 801340a:	6823      	ldr	r3, [r4, #0]
 801340c:	a902      	add	r1, sp, #8
 801340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013410:	4620      	mov	r0, r4
 8013412:	4798      	blx	r3
 8013414:	f7f6 fd82 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 8013418:	6803      	ldr	r3, [r0, #0]
 801341a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801341c:	6a1d      	ldr	r5, [r3, #32]
 801341e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8013422:	a902      	add	r1, sp, #8
 8013424:	47a8      	blx	r5
 8013426:	b004      	add	sp, #16
 8013428:	bd70      	pop	{r4, r5, r6, pc}

0801342a <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 801342a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801342e:	b08b      	sub	sp, #44	; 0x2c
 8013430:	461e      	mov	r6, r3
 8013432:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8013436:	9304      	str	r3, [sp, #16]
 8013438:	429e      	cmp	r6, r3
 801343a:	4689      	mov	r9, r1
 801343c:	4615      	mov	r5, r2
 801343e:	d072      	beq.n	8013526 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8013440:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013444:	015b      	lsls	r3, r3, #5
 8013446:	9303      	str	r3, [sp, #12]
 8013448:	6813      	ldr	r3, [r2, #0]
 801344a:	4610      	mov	r0, r2
 801344c:	4631      	mov	r1, r6
 801344e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013452:	4798      	blx	r3
 8013454:	ab0a      	add	r3, sp, #40	; 0x28
 8013456:	4634      	mov	r4, r6
 8013458:	f843 0d10 	str.w	r0, [r3, #-16]!
 801345c:	4618      	mov	r0, r3
 801345e:	f7ff fa41 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013462:	682b      	ldr	r3, [r5, #0]
 8013464:	4631      	mov	r1, r6
 8013466:	0147      	lsls	r7, r0, #5
 8013468:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801346c:	4628      	mov	r0, r5
 801346e:	4798      	blx	r3
 8013470:	ab0a      	add	r3, sp, #40	; 0x28
 8013472:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8013476:	4618      	mov	r0, r3
 8013478:	f7ff fa34 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801347c:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8013480:	4642      	mov	r2, r8
 8013482:	4639      	mov	r1, r7
 8013484:	4648      	mov	r0, r9
 8013486:	f012 fcab 	bl	8025de0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801348a:	2301      	movs	r3, #1
 801348c:	9300      	str	r3, [sp, #0]
 801348e:	9b00      	ldr	r3, [sp, #0]
 8013490:	441c      	add	r4, r3
 8013492:	682b      	ldr	r3, [r5, #0]
 8013494:	b224      	sxth	r4, r4
 8013496:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801349a:	4621      	mov	r1, r4
 801349c:	4628      	mov	r0, r5
 801349e:	4798      	blx	r3
 80134a0:	9008      	str	r0, [sp, #32]
 80134a2:	a808      	add	r0, sp, #32
 80134a4:	f7ff fa1e 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80134a8:	0143      	lsls	r3, r0, #5
 80134aa:	9301      	str	r3, [sp, #4]
 80134ac:	682b      	ldr	r3, [r5, #0]
 80134ae:	4621      	mov	r1, r4
 80134b0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80134b4:	4628      	mov	r0, r5
 80134b6:	4798      	blx	r3
 80134b8:	9009      	str	r0, [sp, #36]	; 0x24
 80134ba:	a809      	add	r0, sp, #36	; 0x24
 80134bc:	f7ff fa12 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80134c0:	0143      	lsls	r3, r0, #5
 80134c2:	9302      	str	r3, [sp, #8]
 80134c4:	9b01      	ldr	r3, [sp, #4]
 80134c6:	eba3 0b07 	sub.w	fp, r3, r7
 80134ca:	9b02      	ldr	r3, [sp, #8]
 80134cc:	eba3 0a08 	sub.w	sl, r3, r8
 80134d0:	4651      	mov	r1, sl
 80134d2:	4658      	mov	r0, fp
 80134d4:	f7ff fe8a 	bl	80131ec <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80134d8:	b318      	cbz	r0, 8013522 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xf8>
 80134da:	4602      	mov	r2, r0
 80134dc:	4651      	mov	r1, sl
 80134de:	9005      	str	r0, [sp, #20]
 80134e0:	9803      	ldr	r0, [sp, #12]
 80134e2:	f004 fd07 	bl	8017ef4 <_ZN8touchgfx6muldivElll>
 80134e6:	2302      	movs	r3, #2
 80134e8:	fb90 faf3 	sdiv	sl, r0, r3
 80134ec:	9b05      	ldr	r3, [sp, #20]
 80134ee:	9803      	ldr	r0, [sp, #12]
 80134f0:	461a      	mov	r2, r3
 80134f2:	4659      	mov	r1, fp
 80134f4:	f004 fcfe 	bl	8017ef4 <_ZN8touchgfx6muldivElll>
 80134f8:	2302      	movs	r3, #2
 80134fa:	eba7 010a 	sub.w	r1, r7, sl
 80134fe:	fb90 fbf3 	sdiv	fp, r0, r3
 8013502:	4648      	mov	r0, r9
 8013504:	eb0b 0208 	add.w	r2, fp, r8
 8013508:	f012 fb40 	bl	8025b8c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801350c:	9b02      	ldr	r3, [sp, #8]
 801350e:	eb03 020b 	add.w	r2, r3, fp
 8013512:	9b01      	ldr	r3, [sp, #4]
 8013514:	4648      	mov	r0, r9
 8013516:	eba3 010a 	sub.w	r1, r3, sl
 801351a:	f012 fb37 	bl	8025b8c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801351e:	e9dd 7801 	ldrd	r7, r8, [sp, #4]
 8013522:	42a6      	cmp	r6, r4
 8013524:	db02      	blt.n	801352c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x102>
 8013526:	b00b      	add	sp, #44	; 0x2c
 8013528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801352c:	9b00      	ldr	r3, [sp, #0]
 801352e:	9a04      	ldr	r2, [sp, #16]
 8013530:	42a2      	cmp	r2, r4
 8013532:	bf08      	it	eq
 8013534:	f04f 33ff 	moveq.w	r3, #4294967295
 8013538:	e7a8      	b.n	801348c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x62>
	...

0801353c <_ZN8touchgfx6CanvasD1Ev>:
 801353c:	b510      	push	{r4, lr}
 801353e:	4b04      	ldr	r3, [pc, #16]	; (8013550 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8013540:	4604      	mov	r4, r0
 8013542:	f840 3b20 	str.w	r3, [r0], #32
 8013546:	f001 f837 	bl	80145b8 <_ZN8touchgfx7OutlineD1Ev>
 801354a:	4620      	mov	r0, r4
 801354c:	bd10      	pop	{r4, pc}
 801354e:	bf00      	nop
 8013550:	0802a8a0 	.word	0x0802a8a0

08013554 <_ZN8touchgfx6CanvasD0Ev>:
 8013554:	b510      	push	{r4, lr}
 8013556:	4604      	mov	r4, r0
 8013558:	f7ff fff0 	bl	801353c <_ZN8touchgfx6CanvasD1Ev>
 801355c:	4620      	mov	r0, r4
 801355e:	2170      	movs	r1, #112	; 0x70
 8013560:	f012 fc90 	bl	8025e84 <_ZdlPvj>
 8013564:	4620      	mov	r0, r4
 8013566:	bd10      	pop	{r4, pc}

08013568 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8013568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801356c:	6943      	ldr	r3, [r0, #20]
 801356e:	b0a2      	sub	sp, #136	; 0x88
 8013570:	4606      	mov	r6, r0
 8013572:	460f      	mov	r7, r1
 8013574:	2b00      	cmp	r3, #0
 8013576:	d06a      	beq.n	801364e <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xe6>
 8013578:	695c      	ldr	r4, [r3, #20]
 801357a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 801357e:	2b01      	cmp	r3, #1
 8013580:	dc04      	bgt.n	801358c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8013582:	2401      	movs	r4, #1
 8013584:	4620      	mov	r0, r4
 8013586:	b022      	add	sp, #136	; 0x88
 8013588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801358c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013590:	ad22      	add	r5, sp, #136	; 0x88
 8013592:	011b      	lsls	r3, r3, #4
 8013594:	f845 3d70 	str.w	r3, [r5, #-112]!
 8013598:	4628      	mov	r0, r5
 801359a:	f7ff fc62 	bl	8012e62 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801359e:	8839      	ldrh	r1, [r7, #0]
 80135a0:	88ba      	ldrh	r2, [r7, #4]
 80135a2:	6823      	ldr	r3, [r4, #0]
 80135a4:	b280      	uxth	r0, r0
 80135a6:	440a      	add	r2, r1
 80135a8:	4402      	add	r2, r0
 80135aa:	1a09      	subs	r1, r1, r0
 80135ac:	f10d 000e 	add.w	r0, sp, #14
 80135b0:	9000      	str	r0, [sp, #0]
 80135b2:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
 80135b6:	b212      	sxth	r2, r2
 80135b8:	ab03      	add	r3, sp, #12
 80135ba:	b209      	sxth	r1, r1
 80135bc:	4620      	mov	r0, r4
 80135be:	47c0      	blx	r8
 80135c0:	2800      	cmp	r0, #0
 80135c2:	d0de      	beq.n	8013582 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 80135c4:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 80135c8:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 80135cc:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 80135d0:	f8ad 1012 	strh.w	r1, [sp, #18]
 80135d4:	18ca      	adds	r2, r1, r3
 80135d6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80135da:	f8ad 0014 	strh.w	r0, [sp, #20]
 80135de:	1a9b      	subs	r3, r3, r2
 80135e0:	4639      	mov	r1, r7
 80135e2:	2200      	movs	r2, #0
 80135e4:	a804      	add	r0, sp, #16
 80135e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80135ea:	f8ad 2010 	strh.w	r2, [sp, #16]
 80135ee:	f7fd fedb 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 80135f2:	aa04      	add	r2, sp, #16
 80135f4:	4631      	mov	r1, r6
 80135f6:	4628      	mov	r0, r5
 80135f8:	f012 fa1a 	bl	8025a30 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80135fc:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
 8013600:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013604:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8013608:	2f00      	cmp	r7, #0
 801360a:	dd03      	ble.n	8013614 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 801360c:	42bb      	cmp	r3, r7
 801360e:	da01      	bge.n	8013614 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8013610:	42ba      	cmp	r2, r7
 8013612:	da0f      	bge.n	8013634 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xcc>
 8013614:	9200      	str	r2, [sp, #0]
 8013616:	4622      	mov	r2, r4
 8013618:	4629      	mov	r1, r5
 801361a:	4630      	mov	r0, r6
 801361c:	f7ff ff05 	bl	801342a <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8013620:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013624:	4628      	mov	r0, r5
 8013626:	f012 fb2d 	bl	8025c84 <_ZN8touchgfx6Canvas6renderEh>
 801362a:	4604      	mov	r4, r0
 801362c:	4628      	mov	r0, r5
 801362e:	f7ff ff85 	bl	801353c <_ZN8touchgfx6CanvasD1Ev>
 8013632:	e7a7      	b.n	8013584 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 8013634:	1e7a      	subs	r2, r7, #1
 8013636:	b212      	sxth	r2, r2
 8013638:	9200      	str	r2, [sp, #0]
 801363a:	4629      	mov	r1, r5
 801363c:	4622      	mov	r2, r4
 801363e:	4630      	mov	r0, r6
 8013640:	f7ff fef3 	bl	801342a <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8013644:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013648:	9300      	str	r3, [sp, #0]
 801364a:	463b      	mov	r3, r7
 801364c:	e7e3      	b.n	8013616 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
 801364e:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 8013652:	deff      	udf	#255	; 0xff

08013654 <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 8013654:	4770      	bx	lr

08013656 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 8013656:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8013658:	b118      	cbz	r0, 8013662 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 801365a:	6803      	ldr	r3, [r0, #0]
 801365c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013660:	4718      	bx	r3
 8013662:	4770      	bx	lr

08013664 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 8013664:	680b      	ldr	r3, [r1, #0]
 8013666:	4608      	mov	r0, r1
 8013668:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801366c:	4718      	bx	r3

0801366e <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 801366e:	680b      	ldr	r3, [r1, #0]
 8013670:	4608      	mov	r0, r1
 8013672:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8013676:	4718      	bx	r3

08013678 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 8013678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801367c:	4a37      	ldr	r2, [pc, #220]	; (801375c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe4>)
 801367e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8013680:	8812      	ldrh	r2, [r2, #0]
 8013682:	429a      	cmp	r2, r3
 8013684:	b087      	sub	sp, #28
 8013686:	4604      	mov	r4, r0
 8013688:	4689      	mov	r9, r1
 801368a:	d937      	bls.n	80136fc <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 801368c:	4a34      	ldr	r2, [pc, #208]	; (8013760 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe8>)
 801368e:	6812      	ldr	r2, [r2, #0]
 8013690:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013694:	4b33      	ldr	r3, [pc, #204]	; (8013764 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xec>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801369c:	f1b8 0f00 	cmp.w	r8, #0
 80136a0:	d02c      	beq.n	80136fc <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 80136a2:	6803      	ldr	r3, [r0, #0]
 80136a4:	6945      	ldr	r5, [r0, #20]
 80136a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80136a8:	2d00      	cmp	r5, #0
 80136aa:	d052      	beq.n	8013752 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xda>
 80136ac:	696f      	ldr	r7, [r5, #20]
 80136ae:	4798      	blx	r3
 80136b0:	f897 502c 	ldrb.w	r5, [r7, #44]	; 0x2c
 80136b4:	fb15 f000 	smulbb	r0, r5, r0
 80136b8:	b280      	uxth	r0, r0
 80136ba:	1c45      	adds	r5, r0, #1
 80136bc:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80136c0:	122d      	asrs	r5, r5, #8
 80136c2:	d01b      	beq.n	80136fc <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 80136c4:	6823      	ldr	r3, [r4, #0]
 80136c6:	4639      	mov	r1, r7
 80136c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80136cc:	4620      	mov	r0, r4
 80136ce:	4798      	blx	r3
 80136d0:	6823      	ldr	r3, [r4, #0]
 80136d2:	4606      	mov	r6, r0
 80136d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80136d8:	4639      	mov	r1, r7
 80136da:	4620      	mov	r0, r4
 80136dc:	4798      	blx	r3
 80136de:	b2ed      	uxtb	r5, r5
 80136e0:	4683      	mov	fp, r0
 80136e2:	b970      	cbnz	r0, 8013702 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 80136e4:	b96e      	cbnz	r6, 8013702 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 80136e6:	e9cd 6501 	strd	r6, r5, [sp, #4]
 80136ea:	6823      	ldr	r3, [r4, #0]
 80136ec:	9600      	str	r6, [sp, #0]
 80136ee:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 80136f2:	4642      	mov	r2, r8
 80136f4:	463b      	mov	r3, r7
 80136f6:	4649      	mov	r1, r9
 80136f8:	4620      	mov	r0, r4
 80136fa:	47a8      	blx	r5
 80136fc:	b007      	add	sp, #28
 80136fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013702:	2e00      	cmp	r6, #0
 8013704:	ddfa      	ble.n	80136fc <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8013706:	6823      	ldr	r3, [r4, #0]
 8013708:	4639      	mov	r1, r7
 801370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801370e:	4620      	mov	r0, r4
 8013710:	4798      	blx	r3
 8013712:	6823      	ldr	r3, [r4, #0]
 8013714:	4682      	mov	sl, r0
 8013716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801371a:	4639      	mov	r1, r7
 801371c:	4620      	mov	r0, r4
 801371e:	4798      	blx	r3
 8013720:	4582      	cmp	sl, r0
 8013722:	bfde      	ittt	le
 8013724:	4603      	movle	r3, r0
 8013726:	4650      	movle	r0, sl
 8013728:	469a      	movle	sl, r3
 801372a:	ebaa 0300 	sub.w	r3, sl, r0
 801372e:	fb93 f3f6 	sdiv	r3, r3, r6
 8013732:	2b64      	cmp	r3, #100	; 0x64
 8013734:	dce2      	bgt.n	80136fc <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8013736:	e9cd b503 	strd	fp, r5, [sp, #12]
 801373a:	e9cd a601 	strd	sl, r6, [sp, #4]
 801373e:	6823      	ldr	r3, [r4, #0]
 8013740:	9000      	str	r0, [sp, #0]
 8013742:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8013746:	4642      	mov	r2, r8
 8013748:	463b      	mov	r3, r7
 801374a:	4649      	mov	r1, r9
 801374c:	4620      	mov	r0, r4
 801374e:	47a8      	blx	r5
 8013750:	e7d4      	b.n	80136fc <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8013752:	4798      	blx	r3
 8013754:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8013758:	deff      	udf	#255	; 0xff
 801375a:	bf00      	nop
 801375c:	20008864 	.word	0x20008864
 8013760:	20008860 	.word	0x20008860
 8013764:	20008868 	.word	0x20008868

08013768 <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 8013768:	b538      	push	{r3, r4, r5, lr}
 801376a:	680a      	ldr	r2, [r1, #0]
 801376c:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 8013770:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8013774:	4608      	mov	r0, r1
 8013776:	4790      	blx	r2
 8013778:	4629      	mov	r1, r5
 801377a:	4602      	mov	r2, r0
 801377c:	4620      	mov	r0, r4
 801377e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013782:	f7ff babb 	b.w	8012cfc <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08013786 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 8013786:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801378a:	b08d      	sub	sp, #52	; 0x34
 801378c:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	; 0x60
 8013790:	9309      	str	r3, [sp, #36]	; 0x24
 8013792:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8013796:	930a      	str	r3, [sp, #40]	; 0x28
 8013798:	4606      	mov	r6, r0
 801379a:	e9cd 1207 	strd	r1, r2, [sp, #28]
 801379e:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 80137a2:	f1b9 0f00 	cmp.w	r9, #0
 80137a6:	d117      	bne.n	80137d8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 80137a8:	2f00      	cmp	r7, #0
 80137aa:	dc7c      	bgt.n	80138a6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 80137ac:	f1b8 0f00 	cmp.w	r8, #0
 80137b0:	da01      	bge.n	80137b6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 80137b2:	2f00      	cmp	r7, #0
 80137b4:	d17a      	bne.n	80138ac <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 80137b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137b8:	9318      	str	r3, [sp, #96]	; 0x60
 80137ba:	2300      	movs	r3, #0
 80137bc:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 80137c0:	6832      	ldr	r2, [r6, #0]
 80137c2:	9907      	ldr	r1, [sp, #28]
 80137c4:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 80137c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80137cc:	4630      	mov	r0, r6
 80137ce:	46a4      	mov	ip, r4
 80137d0:	b00d      	add	sp, #52	; 0x34
 80137d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137d6:	4760      	bx	ip
 80137d8:	fb97 f4f9 	sdiv	r4, r7, r9
 80137dc:	1e63      	subs	r3, r4, #1
 80137de:	9305      	str	r3, [sp, #20]
 80137e0:	f1ba 0f00 	cmp.w	sl, #0
 80137e4:	d122      	bne.n	801382c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 80137e6:	fb98 faf9 	sdiv	sl, r8, r9
 80137ea:	fb03 f509 	mul.w	r5, r3, r9
 80137ee:	f10a 0a02 	add.w	sl, sl, #2
 80137f2:	9b05      	ldr	r3, [sp, #20]
 80137f4:	459a      	cmp	sl, r3
 80137f6:	d059      	beq.n	80138ac <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 80137f8:	42af      	cmp	r7, r5
 80137fa:	dc5a      	bgt.n	80138b2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 80137fc:	45a8      	cmp	r8, r5
 80137fe:	da01      	bge.n	8013804 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 8013800:	42af      	cmp	r7, r5
 8013802:	db0e      	blt.n	8013822 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8013804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013806:	9302      	str	r3, [sp, #8]
 8013808:	9905      	ldr	r1, [sp, #20]
 801380a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801380c:	6832      	ldr	r2, [r6, #0]
 801380e:	434b      	muls	r3, r1
 8013810:	e9cd 5300 	strd	r5, r3, [sp]
 8013814:	9907      	ldr	r1, [sp, #28]
 8013816:	f8d2 b08c 	ldr.w	fp, [r2, #140]	; 0x8c
 801381a:	4630      	mov	r0, r6
 801381c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013820:	47d8      	blx	fp
 8013822:	9b05      	ldr	r3, [sp, #20]
 8013824:	3301      	adds	r3, #1
 8013826:	9305      	str	r3, [sp, #20]
 8013828:	444d      	add	r5, r9
 801382a:	e7e2      	b.n	80137f2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 801382c:	fb97 f3fa 	sdiv	r3, r7, sl
 8013830:	3b01      	subs	r3, #1
 8013832:	9306      	str	r3, [sp, #24]
 8013834:	9a06      	ldr	r2, [sp, #24]
 8013836:	fb98 f3fa 	sdiv	r3, r8, sl
 801383a:	fb02 fb0a 	mul.w	fp, r2, sl
 801383e:	9a05      	ldr	r2, [sp, #20]
 8013840:	3302      	adds	r3, #2
 8013842:	fb02 f509 	mul.w	r5, r2, r9
 8013846:	930b      	str	r3, [sp, #44]	; 0x2c
 8013848:	45ab      	cmp	fp, r5
 801384a:	dd1d      	ble.n	8013888 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 801384c:	42af      	cmp	r7, r5
 801384e:	dc08      	bgt.n	8013862 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 8013850:	45a8      	cmp	r8, r5
 8013852:	da08      	bge.n	8013866 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 8013854:	42af      	cmp	r7, r5
 8013856:	da06      	bge.n	8013866 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 8013858:	9b05      	ldr	r3, [sp, #20]
 801385a:	3301      	adds	r3, #1
 801385c:	9305      	str	r3, [sp, #20]
 801385e:	444d      	add	r5, r9
 8013860:	e7f2      	b.n	8013848 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 8013862:	45a8      	cmp	r8, r5
 8013864:	dcf8      	bgt.n	8013858 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 8013866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013868:	9302      	str	r3, [sp, #8]
 801386a:	9905      	ldr	r1, [sp, #20]
 801386c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801386e:	6832      	ldr	r2, [r6, #0]
 8013870:	434b      	muls	r3, r1
 8013872:	e9cd 5300 	strd	r5, r3, [sp]
 8013876:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 801387a:	9907      	ldr	r1, [sp, #28]
 801387c:	461c      	mov	r4, r3
 801387e:	4630      	mov	r0, r6
 8013880:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013884:	47a0      	blx	r4
 8013886:	e7e7      	b.n	8013858 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 8013888:	45ab      	cmp	fp, r5
 801388a:	db04      	blt.n	8013896 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 801388c:	9b05      	ldr	r3, [sp, #20]
 801388e:	3301      	adds	r3, #1
 8013890:	9305      	str	r3, [sp, #20]
 8013892:	444d      	add	r5, r9
 8013894:	e7f8      	b.n	8013888 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 8013896:	9b06      	ldr	r3, [sp, #24]
 8013898:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801389a:	3301      	adds	r3, #1
 801389c:	4293      	cmp	r3, r2
 801389e:	9306      	str	r3, [sp, #24]
 80138a0:	d004      	beq.n	80138ac <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 80138a2:	44d3      	add	fp, sl
 80138a4:	e7d0      	b.n	8013848 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 80138a6:	f1b8 0f00 	cmp.w	r8, #0
 80138aa:	dd84      	ble.n	80137b6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 80138ac:	b00d      	add	sp, #52	; 0x34
 80138ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138b2:	45a8      	cmp	r8, r5
 80138b4:	dcb5      	bgt.n	8013822 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 80138b6:	e7a5      	b.n	8013804 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

080138b8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 80138b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138bc:	f1b3 0900 	subs.w	r9, r3, #0
 80138c0:	460d      	mov	r5, r1
 80138c2:	4690      	mov	r8, r2
 80138c4:	9f08      	ldr	r7, [sp, #32]
 80138c6:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 80138ca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80138cc:	da18      	bge.n	8013900 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 80138ce:	2a01      	cmp	r2, #1
 80138d0:	dd16      	ble.n	8013900 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 80138d2:	232d      	movs	r3, #45	; 0x2d
 80138d4:	800b      	strh	r3, [r1, #0]
 80138d6:	f1c9 0900 	rsb	r9, r9, #0
 80138da:	2001      	movs	r0, #1
 80138dc:	2f00      	cmp	r7, #0
 80138de:	d111      	bne.n	8013904 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 80138e0:	eba8 0100 	sub.w	r1, r8, r0
 80138e4:	2302      	movs	r3, #2
 80138e6:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 80138ea:	fb96 f3f3 	sdiv	r3, r6, r3
 80138ee:	4a24      	ldr	r2, [pc, #144]	; (8013980 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 80138f0:	444b      	add	r3, r9
 80138f2:	b289      	uxth	r1, r1
 80138f4:	fb93 f3f6 	sdiv	r3, r3, r6
 80138f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138fc:	f006 b926 	b.w	8019b4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013900:	2000      	movs	r0, #0
 8013902:	e7eb      	b.n	80138dc <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 8013904:	dd39      	ble.n	801397a <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 8013906:	fb99 f4f6 	sdiv	r4, r9, r6
 801390a:	eba8 0100 	sub.w	r1, r8, r0
 801390e:	4623      	mov	r3, r4
 8013910:	4a1b      	ldr	r2, [pc, #108]	; (8013980 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8013912:	b289      	uxth	r1, r1
 8013914:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8013918:	f006 f918 	bl	8019b4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801391c:	4628      	mov	r0, r5
 801391e:	f005 fda1 	bl	8019464 <_ZN8touchgfx7Unicode6strlenEPKt>
 8013922:	f108 38ff 	add.w	r8, r8, #4294967295
 8013926:	4580      	cmp	r8, r0
 8013928:	dd27      	ble.n	801397a <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 801392a:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 801392e:	fb06 9314 	mls	r3, r6, r4, r9
 8013932:	3001      	adds	r0, #1
 8013934:	2200      	movs	r2, #0
 8013936:	f04f 090a 	mov.w	r9, #10
 801393a:	f107 3aff 	add.w	sl, r7, #4294967295
 801393e:	f04f 0e02 	mov.w	lr, #2
 8013942:	fb96 fefe 	sdiv	lr, r6, lr
 8013946:	4580      	cmp	r8, r0
 8013948:	4684      	mov	ip, r0
 801394a:	dd13      	ble.n	8013974 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 801394c:	fb09 f303 	mul.w	r3, r9, r3
 8013950:	4592      	cmp	sl, r2
 8013952:	f102 0201 	add.w	r2, r2, #1
 8013956:	bf08      	it	eq
 8013958:	4473      	addeq	r3, lr
 801395a:	f100 0c01 	add.w	ip, r0, #1
 801395e:	fb93 f4f6 	sdiv	r4, r3, r6
 8013962:	4297      	cmp	r7, r2
 8013964:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013968:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 801396c:	fb06 3314 	mls	r3, r6, r4, r3
 8013970:	4660      	mov	r0, ip
 8013972:	d1e8      	bne.n	8013946 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 8013974:	2300      	movs	r3, #0
 8013976:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 801397a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801397e:	bf00      	nop
 8013980:	0802a9dc 	.word	0x0802a9dc

08013984 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 8013984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013988:	4698      	mov	r8, r3
 801398a:	b099      	sub	sp, #100	; 0x64
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	4604      	mov	r4, r0
 8013990:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8013994:	4689      	mov	r9, r1
 8013996:	4640      	mov	r0, r8
 8013998:	9922      	ldr	r1, [sp, #136]	; 0x88
 801399a:	4617      	mov	r7, r2
 801399c:	4798      	blx	r3
 801399e:	ae18      	add	r6, sp, #96	; 0x60
 80139a0:	f846 0d28 	str.w	r0, [r6, #-40]!
 80139a4:	4630      	mov	r0, r6
 80139a6:	f7fe ff9d 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80139aa:	f8b8 3114 	ldrh.w	r3, [r8, #276]	; 0x114
 80139ae:	1ac0      	subs	r0, r0, r3
 80139b0:	b200      	sxth	r0, r0
 80139b2:	2800      	cmp	r0, #0
 80139b4:	f2c0 80c0 	blt.w	8013b38 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1b4>
 80139b8:	f8b8 211a 	ldrh.w	r2, [r8, #282]	; 0x11a
 80139bc:	441a      	add	r2, r3
 80139be:	f8b8 3042 	ldrh.w	r3, [r8, #66]	; 0x42
 80139c2:	1a9b      	subs	r3, r3, r2
 80139c4:	b21b      	sxth	r3, r3
 80139c6:	4298      	cmp	r0, r3
 80139c8:	f280 80b6 	bge.w	8013b38 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1b4>
 80139cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80139ce:	9302      	str	r3, [sp, #8]
 80139d0:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80139d4:	9301      	str	r3, [sp, #4]
 80139d6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80139da:	9300      	str	r3, [sp, #0]
 80139dc:	4631      	mov	r1, r6
 80139de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80139e0:	f8df a174 	ldr.w	sl, [pc, #372]	; 8013b58 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1d4>
 80139e4:	2214      	movs	r2, #20
 80139e6:	4620      	mov	r0, r4
 80139e8:	f7ff ff66 	bl	80138b8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 80139ec:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80139f0:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 80139f2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	f040 80a1 	bne.w	8013b3e <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1ba>
 80139fc:	f8da 0000 	ldr.w	r0, [sl]
 8013a00:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8013a02:	f7fb f80d 	bl	800ea20 <_ZNK8touchgfx5Texts7getTextEt>
 8013a06:	4632      	mov	r2, r6
 8013a08:	4601      	mov	r1, r0
 8013a0a:	4638      	mov	r0, r7
 8013a0c:	47a8      	blx	r5
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8013a12:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
 8013a16:	4605      	mov	r5, r0
 8013a18:	f8da 0000 	ldr.w	r0, [sl]
 8013a1c:	f7fb f800 	bl	800ea20 <_ZNK8touchgfx5Texts7getTextEt>
 8013a20:	4632      	mov	r2, r6
 8013a22:	4601      	mov	r1, r0
 8013a24:	4638      	mov	r0, r7
 8013a26:	47d8      	blx	fp
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8013a2c:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 8013a30:	fb15 f500 	smulbb	r5, r5, r0
 8013a34:	f8da 0000 	ldr.w	r0, [sl]
 8013a38:	f7fa fff2 	bl	800ea20 <_ZNK8touchgfx5Texts7getTextEt>
 8013a3c:	4632      	mov	r2, r6
 8013a3e:	4601      	mov	r1, r0
 8013a40:	4638      	mov	r0, r7
 8013a42:	47d8      	blx	fp
 8013a44:	b2ad      	uxth	r5, r5
 8013a46:	4405      	add	r5, r0
 8013a48:	b2ad      	uxth	r5, r5
 8013a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8013a4e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013a50:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8013a54:	f8b8 a0c6 	ldrh.w	sl, [r8, #198]	; 0xc6
 8013a58:	4640      	mov	r0, r8
 8013a5a:	4798      	blx	r3
 8013a5c:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
 8013a60:	f04f 0800 	mov.w	r8, #0
 8013a64:	f84b 0d3c 	str.w	r0, [fp, #-60]!
 8013a68:	4658      	mov	r0, fp
 8013a6a:	f7fe ff3b 	bl	80128e4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013a6e:	4450      	add	r0, sl
 8013a70:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013a74:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013a78:	eba0 0055 	sub.w	r0, r0, r5, lsr #1
 8013a7c:	f8ad 501a 	strh.w	r5, [sp, #26]
 8013a80:	f8ad 8014 	strh.w	r8, [sp, #20]
 8013a84:	f8ad 0016 	strh.w	r0, [sp, #22]
 8013a88:	ad05      	add	r5, sp, #20
 8013a8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013a8e:	f10d 0a1c 	add.w	sl, sp, #28
 8013a92:	e88a 0003 	stmia.w	sl, {r0, r1}
 8013a96:	4649      	mov	r1, r9
 8013a98:	4650      	mov	r0, sl
 8013a9a:	f7fd fc85 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 8013a9e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8013aa2:	4543      	cmp	r3, r8
 8013aa4:	dd48      	ble.n	8013b38 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1b4>
 8013aa6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8013aaa:	4543      	cmp	r3, r8
 8013aac:	dd44      	ble.n	8013b38 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1b4>
 8013aae:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013ab2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013ab6:	1a9b      	subs	r3, r3, r2
 8013ab8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013abc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8013ac0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013ac4:	1a9b      	subs	r3, r3, r2
 8013ac6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013aca:	6823      	ldr	r3, [r4, #0]
 8013acc:	4620      	mov	r0, r4
 8013ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ad0:	4629      	mov	r1, r5
 8013ad2:	4798      	blx	r3
 8013ad4:	4b1f      	ldr	r3, [pc, #124]	; (8013b54 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1d0>)
 8013ad6:	f8b4 903c 	ldrh.w	r9, [r4, #60]	; 0x3c
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8013ae0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013ae2:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8013ae6:	785b      	ldrb	r3, [r3, #1]
 8013ae8:	920b      	str	r2, [sp, #44]	; 0x2c
 8013aea:	f3c3 0001 	ubfx	r0, r3, #0, #2
 8013aee:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013af6:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8013afa:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
 8013afe:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8013b02:	9709      	str	r7, [sp, #36]	; 0x24
 8013b04:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8013b08:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 8013b0c:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
 8013b10:	f88d 8034 	strb.w	r8, [sp, #52]	; 0x34
 8013b14:	f7f6 fa02 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 8013b18:	4b0f      	ldr	r3, [pc, #60]	; (8013b58 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1d4>)
 8013b1a:	4604      	mov	r4, r0
 8013b1c:	4649      	mov	r1, r9
 8013b1e:	6818      	ldr	r0, [r3, #0]
 8013b20:	f7fa ff7e 	bl	800ea20 <_ZNK8touchgfx5Texts7getTextEt>
 8013b24:	e9cd 6802 	strd	r6, r8, [sp, #8]
 8013b28:	e9cd b000 	strd	fp, r0, [sp]
 8013b2c:	4653      	mov	r3, sl
 8013b2e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8013b32:	4620      	mov	r0, r4
 8013b34:	f7fa ff05 	bl	800e942 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013b38:	b019      	add	sp, #100	; 0x64
 8013b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b3e:	f8da 0000 	ldr.w	r0, [sl]
 8013b42:	699d      	ldr	r5, [r3, #24]
 8013b44:	f7fa ff6c 	bl	800ea20 <_ZNK8touchgfx5Texts7getTextEt>
 8013b48:	4632      	mov	r2, r6
 8013b4a:	4601      	mov	r1, r0
 8013b4c:	4638      	mov	r0, r7
 8013b4e:	47a8      	blx	r5
 8013b50:	4605      	mov	r5, r0
 8013b52:	e77a      	b.n	8013a4a <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xc6>
 8013b54:	20008860 	.word	0x20008860
 8013b58:	2000886c 	.word	0x2000886c

08013b5c <_ZN8touchgfx21GraphWrapAndClearData5clearEv>:
 8013b5c:	b510      	push	{r4, lr}
 8013b5e:	4604      	mov	r4, r0
 8013b60:	f7fe ff86 	bl	8012a70 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8013b64:	4620      	mov	r0, r4
 8013b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b6a:	f7fe bd6e 	b.w	801264a <_ZN8touchgfx17AbstractDataGraph5clearEv>

08013b6e <_ZN8touchgfx21GraphWrapAndClearData8addValueEi>:
 8013b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b70:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 8013b74:	f8d0 6144 	ldr.w	r6, [r0, #324]	; 0x144
 8013b78:	1c6b      	adds	r3, r5, #1
 8013b7a:	f8a0 311e 	strh.w	r3, [r0, #286]	; 0x11e
 8013b7e:	6803      	ldr	r3, [r0, #0]
 8013b80:	460f      	mov	r7, r1
 8013b82:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8013b86:	4629      	mov	r1, r5
 8013b88:	4604      	mov	r4, r0
 8013b8a:	4798      	blx	r3
 8013b8c:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 8013b90:	b915      	cbnz	r5, 8013b98 <_ZN8touchgfx21GraphWrapAndClearData8addValueEi+0x2a>
 8013b92:	4620      	mov	r0, r4
 8013b94:	f7fe ff6c 	bl	8012a70 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8013b98:	4620      	mov	r0, r4
 8013b9a:	4629      	mov	r1, r5
 8013b9c:	f7fe ff40 	bl	8012a20 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8013ba0:	4628      	mov	r0, r5
 8013ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013ba4 <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv>:
 8013ba4:	f9b0 111e 	ldrsh.w	r1, [r0, #286]	; 0x11e
 8013ba8:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
 8013bac:	4291      	cmp	r1, r2
 8013bae:	db03      	blt.n	8013bb8 <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv+0x14>
 8013bb0:	6803      	ldr	r3, [r0, #0]
 8013bb2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8013bb6:	4718      	bx	r3
 8013bb8:	4770      	bx	lr

08013bba <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8013bba:	2000      	movs	r0, #0
 8013bbc:	4770      	bx	lr
	...

08013bc0 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8013bc0:	4b07      	ldr	r3, [pc, #28]	; (8013be0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8013bc2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013bc4:	881b      	ldrh	r3, [r3, #0]
 8013bc6:	4293      	cmp	r3, r2
 8013bc8:	bf81      	itttt	hi
 8013bca:	4b06      	ldrhi	r3, [pc, #24]	; (8013be4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8013bcc:	681b      	ldrhi	r3, [r3, #0]
 8013bce:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8013bd2:	7858      	ldrbhi	r0, [r3, #1]
 8013bd4:	bf8c      	ite	hi
 8013bd6:	f000 0003 	andhi.w	r0, r0, #3
 8013bda:	2000      	movls	r0, #0
 8013bdc:	4770      	bx	lr
 8013bde:	bf00      	nop
 8013be0:	20008864 	.word	0x20008864
 8013be4:	20008860 	.word	0x20008860

08013be8 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8013be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bec:	4b10      	ldr	r3, [pc, #64]	; (8013c30 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8013bee:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013bf0:	881b      	ldrh	r3, [r3, #0]
 8013bf2:	428b      	cmp	r3, r1
 8013bf4:	4604      	mov	r4, r0
 8013bf6:	d918      	bls.n	8013c2a <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8013bf8:	6803      	ldr	r3, [r0, #0]
 8013bfa:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8013bfc:	4b0d      	ldr	r3, [pc, #52]	; (8013c34 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8013bfe:	6818      	ldr	r0, [r3, #0]
 8013c00:	f7fa ff0e 	bl	800ea20 <_ZNK8touchgfx5Texts7getTextEt>
 8013c04:	6823      	ldr	r3, [r4, #0]
 8013c06:	4606      	mov	r6, r0
 8013c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c0a:	4620      	mov	r0, r4
 8013c0c:	4798      	blx	r3
 8013c0e:	6823      	ldr	r3, [r4, #0]
 8013c10:	4607      	mov	r7, r0
 8013c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c16:	4620      	mov	r0, r4
 8013c18:	4798      	blx	r3
 8013c1a:	463a      	mov	r2, r7
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	4631      	mov	r1, r6
 8013c20:	4620      	mov	r0, r4
 8013c22:	46ac      	mov	ip, r5
 8013c24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c28:	4760      	bx	ip
 8013c2a:	2000      	movs	r0, #0
 8013c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c30:	20008864 	.word	0x20008864
 8013c34:	2000886c 	.word	0x2000886c

08013c38 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8013c38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013c3c:	4b17      	ldr	r3, [pc, #92]	; (8013c9c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8013c3e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013c40:	881b      	ldrh	r3, [r3, #0]
 8013c42:	428b      	cmp	r3, r1
 8013c44:	4604      	mov	r4, r0
 8013c46:	d926      	bls.n	8013c96 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8013c48:	4b15      	ldr	r3, [pc, #84]	; (8013ca0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8013c50:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8013c54:	4b13      	ldr	r3, [pc, #76]	; (8013ca4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8013c56:	7855      	ldrb	r5, [r2, #1]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8013c5e:	6833      	ldr	r3, [r6, #0]
 8013c60:	69df      	ldr	r7, [r3, #28]
 8013c62:	4b11      	ldr	r3, [pc, #68]	; (8013ca8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8013c64:	6818      	ldr	r0, [r3, #0]
 8013c66:	f7fa fedb 	bl	800ea20 <_ZNK8touchgfx5Texts7getTextEt>
 8013c6a:	6823      	ldr	r3, [r4, #0]
 8013c6c:	4680      	mov	r8, r0
 8013c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c70:	4620      	mov	r0, r4
 8013c72:	4798      	blx	r3
 8013c74:	6823      	ldr	r3, [r4, #0]
 8013c76:	4681      	mov	r9, r0
 8013c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	4798      	blx	r3
 8013c80:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8013c84:	9000      	str	r0, [sp, #0]
 8013c86:	464b      	mov	r3, r9
 8013c88:	4642      	mov	r2, r8
 8013c8a:	4629      	mov	r1, r5
 8013c8c:	4630      	mov	r0, r6
 8013c8e:	47b8      	blx	r7
 8013c90:	b003      	add	sp, #12
 8013c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c96:	2000      	movs	r0, #0
 8013c98:	e7fa      	b.n	8013c90 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8013c9a:	bf00      	nop
 8013c9c:	20008864 	.word	0x20008864
 8013ca0:	20008860 	.word	0x20008860
 8013ca4:	20008868 	.word	0x20008868
 8013ca8:	2000886c 	.word	0x2000886c

08013cac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8013cac:	b40e      	push	{r1, r2, r3}
 8013cae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cb2:	4b2f      	ldr	r3, [pc, #188]	; (8013d70 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8013cb4:	881a      	ldrh	r2, [r3, #0]
 8013cb6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8013cb8:	429a      	cmp	r2, r3
 8013cba:	b09d      	sub	sp, #116	; 0x74
 8013cbc:	4604      	mov	r4, r0
 8013cbe:	d954      	bls.n	8013d6a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8013cc0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8013d74 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8013cc4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013d78 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8013cc8:	aa26      	add	r2, sp, #152	; 0x98
 8013cca:	9202      	str	r2, [sp, #8]
 8013ccc:	f8d9 2000 	ldr.w	r2, [r9]
 8013cd0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8013cd8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013cdc:	682b      	ldr	r3, [r5, #0]
 8013cde:	4628      	mov	r0, r5
 8013ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ce2:	4798      	blx	r3
 8013ce4:	b207      	sxth	r7, r0
 8013ce6:	4606      	mov	r6, r0
 8013ce8:	a803      	add	r0, sp, #12
 8013cea:	f004 fc57 	bl	801859c <_ZN8touchgfx12TextProviderC1Ev>
 8013cee:	682b      	ldr	r3, [r5, #0]
 8013cf0:	4628      	mov	r0, r5
 8013cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cf4:	4798      	blx	r3
 8013cf6:	682b      	ldr	r3, [r5, #0]
 8013cf8:	4682      	mov	sl, r0
 8013cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013cfc:	4628      	mov	r0, r5
 8013cfe:	4798      	blx	r3
 8013d00:	4653      	mov	r3, sl
 8013d02:	9000      	str	r0, [sp, #0]
 8013d04:	9a02      	ldr	r2, [sp, #8]
 8013d06:	9925      	ldr	r1, [sp, #148]	; 0x94
 8013d08:	a803      	add	r0, sp, #12
 8013d0a:	f004 fca2 	bl	8018652 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013d0e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013d10:	f8d9 3000 	ldr.w	r3, [r9]
 8013d14:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8013d18:	8925      	ldrh	r5, [r4, #8]
 8013d1a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8013d1e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8013d22:	eba5 050c 	sub.w	r5, r5, ip
 8013d26:	784a      	ldrb	r2, [r1, #1]
 8013d28:	f8d8 3000 	ldr.w	r3, [r8]
 8013d2c:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8013d30:	b22d      	sxth	r5, r5
 8013d32:	9500      	str	r5, [sp, #0]
 8013d34:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013d38:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013d3c:	a803      	add	r0, sp, #12
 8013d3e:	f002 fae1 	bl	8016304 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8013d42:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8013d46:	18b9      	adds	r1, r7, r2
 8013d48:	2900      	cmp	r1, #0
 8013d4a:	b203      	sxth	r3, r0
 8013d4c:	dd0b      	ble.n	8013d66 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8013d4e:	3b01      	subs	r3, #1
 8013d50:	fb13 f302 	smulbb	r3, r3, r2
 8013d54:	fb16 3300 	smlabb	r3, r6, r0, r3
 8013d58:	b21f      	sxth	r7, r3
 8013d5a:	4638      	mov	r0, r7
 8013d5c:	b01d      	add	sp, #116	; 0x74
 8013d5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d62:	b003      	add	sp, #12
 8013d64:	4770      	bx	lr
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	dcf7      	bgt.n	8013d5a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8013d6a:	2700      	movs	r7, #0
 8013d6c:	e7f5      	b.n	8013d5a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8013d6e:	bf00      	nop
 8013d70:	20008864 	.word	0x20008864
 8013d74:	20008860 	.word	0x20008860
 8013d78:	20008868 	.word	0x20008868

08013d7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8013d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d80:	4bbb      	ldr	r3, [pc, #748]	; (8014070 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 8013d82:	460c      	mov	r4, r1
 8013d84:	881b      	ldrh	r3, [r3, #0]
 8013d86:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8013d88:	428b      	cmp	r3, r1
 8013d8a:	b0a9      	sub	sp, #164	; 0xa4
 8013d8c:	4681      	mov	r9, r0
 8013d8e:	d809      	bhi.n	8013da4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8013d90:	2300      	movs	r3, #0
 8013d92:	f04f 32ff 	mov.w	r2, #4294967295
 8013d96:	e9c0 3200 	strd	r3, r2, [r0]
 8013d9a:	6083      	str	r3, [r0, #8]
 8013d9c:	4648      	mov	r0, r9
 8013d9e:	b029      	add	sp, #164	; 0xa4
 8013da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013da4:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8014078 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8013da8:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 801407c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 8013dac:	f8db 3000 	ldr.w	r3, [fp]
 8013db0:	f8d8 0000 	ldr.w	r0, [r8]
 8013db4:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8013db8:	4bae      	ldr	r3, [pc, #696]	; (8014074 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013dc0:	f7fa fe2e 	bl	800ea20 <_ZNK8touchgfx5Texts7getTextEt>
 8013dc4:	682b      	ldr	r3, [r5, #0]
 8013dc6:	4607      	mov	r7, r0
 8013dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dca:	4628      	mov	r0, r5
 8013dcc:	4798      	blx	r3
 8013dce:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 8013dd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8013dd4:	4430      	add	r0, r6
 8013dd6:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 8013dda:	b283      	uxth	r3, r0
 8013ddc:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8013de0:	9302      	str	r3, [sp, #8]
 8013de2:	4650      	mov	r0, sl
 8013de4:	2e00      	cmp	r6, #0
 8013de6:	f040 8091 	bne.w	8013f0c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 8013dea:	f004 fbd7 	bl	801859c <_ZN8touchgfx12TextProviderC1Ev>
 8013dee:	682b      	ldr	r3, [r5, #0]
 8013df0:	4628      	mov	r0, r5
 8013df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013df4:	4798      	blx	r3
 8013df6:	682b      	ldr	r3, [r5, #0]
 8013df8:	9005      	str	r0, [sp, #20]
 8013dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013dfc:	4628      	mov	r0, r5
 8013dfe:	4798      	blx	r3
 8013e00:	6823      	ldr	r3, [r4, #0]
 8013e02:	4680      	mov	r8, r0
 8013e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013e06:	4620      	mov	r0, r4
 8013e08:	4798      	blx	r3
 8013e0a:	6822      	ldr	r2, [r4, #0]
 8013e0c:	9004      	str	r0, [sp, #16]
 8013e0e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8013e12:	4620      	mov	r0, r4
 8013e14:	4790      	blx	r2
 8013e16:	9905      	ldr	r1, [sp, #20]
 8013e18:	9b04      	ldr	r3, [sp, #16]
 8013e1a:	9001      	str	r0, [sp, #4]
 8013e1c:	9300      	str	r3, [sp, #0]
 8013e1e:	460a      	mov	r2, r1
 8013e20:	4643      	mov	r3, r8
 8013e22:	4639      	mov	r1, r7
 8013e24:	4650      	mov	r0, sl
 8013e26:	f004 fc29 	bl	801867c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013e2a:	4637      	mov	r7, r6
 8013e2c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013e2e:	f8db 3000 	ldr.w	r3, [fp]
 8013e32:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013e36:	4629      	mov	r1, r5
 8013e38:	785b      	ldrb	r3, [r3, #1]
 8013e3a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013e3e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013e42:	4650      	mov	r0, sl
 8013e44:	f001 ffb0 	bl	8015da8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8013e48:	4287      	cmp	r7, r0
 8013e4a:	bfb8      	it	lt
 8013e4c:	b207      	sxthlt	r7, r0
 8013e4e:	3601      	adds	r6, #1
 8013e50:	4650      	mov	r0, sl
 8013e52:	b2b6      	uxth	r6, r6
 8013e54:	f004 fbc9 	bl	80185ea <_ZN8touchgfx12TextProvider11endOfStringEv>
 8013e58:	2800      	cmp	r0, #0
 8013e5a:	d0e7      	beq.n	8013e2c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 8013e5c:	9b02      	ldr	r3, [sp, #8]
 8013e5e:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 8013e62:	fb13 f606 	smulbb	r6, r3, r6
 8013e66:	eba6 0608 	sub.w	r6, r6, r8
 8013e6a:	b2b6      	uxth	r6, r6
 8013e6c:	fa0f f886 	sxth.w	r8, r6
 8013e70:	f1b8 0f00 	cmp.w	r8, #0
 8013e74:	dd06      	ble.n	8013e84 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 8013e76:	682b      	ldr	r3, [r5, #0]
 8013e78:	4628      	mov	r0, r5
 8013e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e7c:	4798      	blx	r3
 8013e7e:	4430      	add	r0, r6
 8013e80:	fa0f f880 	sxth.w	r8, r0
 8013e84:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013e88:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013e8c:	6823      	ldr	r3, [r4, #0]
 8013e8e:	bf08      	it	eq
 8013e90:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 8013e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e96:	bf18      	it	ne
 8013e98:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	4798      	blx	r3
 8013ea0:	2801      	cmp	r0, #1
 8013ea2:	b2ba      	uxth	r2, r7
 8013ea4:	f000 80d1 	beq.w	801404a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 8013ea8:	2802      	cmp	r0, #2
 8013eaa:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8013eae:	f000 80d2 	beq.w	8014056 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 8013eb2:	b21e      	sxth	r6, r3
 8013eb4:	7a29      	ldrb	r1, [r5, #8]
 8013eb6:	7a6d      	ldrb	r5, [r5, #9]
 8013eb8:	1a76      	subs	r6, r6, r1
 8013eba:	4429      	add	r1, r5
 8013ebc:	440a      	add	r2, r1
 8013ebe:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8013ec2:	b2b3      	uxth	r3, r6
 8013ec4:	b292      	uxth	r2, r2
 8013ec6:	2902      	cmp	r1, #2
 8013ec8:	b21f      	sxth	r7, r3
 8013eca:	b216      	sxth	r6, r2
 8013ecc:	f000 80c6 	beq.w	801405c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 8013ed0:	2903      	cmp	r1, #3
 8013ed2:	f000 80d5 	beq.w	8014080 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 8013ed6:	2901      	cmp	r1, #1
 8013ed8:	f040 80db 	bne.w	8014092 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 8013edc:	8923      	ldrh	r3, [r4, #8]
 8013ede:	4632      	mov	r2, r6
 8013ee0:	eba3 0308 	sub.w	r3, r3, r8
 8013ee4:	4646      	mov	r6, r8
 8013ee6:	463d      	mov	r5, r7
 8013ee8:	4690      	mov	r8, r2
 8013eea:	b21f      	sxth	r7, r3
 8013eec:	9b03      	ldr	r3, [sp, #12]
 8013eee:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013ef0:	6818      	ldr	r0, [r3, #0]
 8013ef2:	f7fa fd95 	bl	800ea20 <_ZNK8touchgfx5Texts7getTextEt>
 8013ef6:	f8a9 7000 	strh.w	r7, [r9]
 8013efa:	f8a9 5002 	strh.w	r5, [r9, #2]
 8013efe:	f8a9 6004 	strh.w	r6, [r9, #4]
 8013f02:	f8a9 8006 	strh.w	r8, [r9, #6]
 8013f06:	f8c9 0008 	str.w	r0, [r9, #8]
 8013f0a:	e747      	b.n	8013d9c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8013f0c:	f004 fb46 	bl	801859c <_ZN8touchgfx12TextProviderC1Ev>
 8013f10:	682b      	ldr	r3, [r5, #0]
 8013f12:	4628      	mov	r0, r5
 8013f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f16:	4798      	blx	r3
 8013f18:	682b      	ldr	r3, [r5, #0]
 8013f1a:	4606      	mov	r6, r0
 8013f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f1e:	4628      	mov	r0, r5
 8013f20:	4798      	blx	r3
 8013f22:	6823      	ldr	r3, [r4, #0]
 8013f24:	4680      	mov	r8, r0
 8013f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f28:	4620      	mov	r0, r4
 8013f2a:	4798      	blx	r3
 8013f2c:	6822      	ldr	r2, [r4, #0]
 8013f2e:	9004      	str	r0, [sp, #16]
 8013f30:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8013f34:	4620      	mov	r0, r4
 8013f36:	4790      	blx	r2
 8013f38:	9b04      	ldr	r3, [sp, #16]
 8013f3a:	9001      	str	r0, [sp, #4]
 8013f3c:	4632      	mov	r2, r6
 8013f3e:	9300      	str	r3, [sp, #0]
 8013f40:	4639      	mov	r1, r7
 8013f42:	4643      	mov	r3, r8
 8013f44:	4650      	mov	r0, sl
 8013f46:	f004 fb99 	bl	801867c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013f4a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013f4e:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 8013f52:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013f54:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8013f58:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013f5c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013f60:	bf0a      	itet	eq
 8013f62:	4642      	moveq	r2, r8
 8013f64:	461a      	movne	r2, r3
 8013f66:	4698      	moveq	r8, r3
 8013f68:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8013f6c:	1ad2      	subs	r2, r2, r3
 8013f6e:	f8db 3000 	ldr.w	r3, [fp]
 8013f72:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013f76:	7859      	ldrb	r1, [r3, #1]
 8013f78:	f8cd a020 	str.w	sl, [sp, #32]
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8013f82:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013f86:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8013f8a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8013f8e:	950a      	str	r5, [sp, #40]	; 0x28
 8013f90:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8013f94:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013f98:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8013f9c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8013fa0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8013fa4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8013fa8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8013fac:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8013fb0:	b350      	cbz	r0, 8014008 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 8013fb2:	682b      	ldr	r3, [r5, #0]
 8013fb4:	4628      	mov	r0, r5
 8013fb6:	695b      	ldr	r3, [r3, #20]
 8013fb8:	4798      	blx	r3
 8013fba:	4607      	mov	r7, r0
 8013fbc:	b320      	cbz	r0, 8014008 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 8013fbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013fc0:	6803      	ldr	r3, [r0, #0]
 8013fc2:	4639      	mov	r1, r7
 8013fc4:	68db      	ldr	r3, [r3, #12]
 8013fc6:	4798      	blx	r3
 8013fc8:	4606      	mov	r6, r0
 8013fca:	b1e8      	cbz	r0, 8014008 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 8013fcc:	7b43      	ldrb	r3, [r0, #13]
 8013fce:	7a82      	ldrb	r2, [r0, #10]
 8013fd0:	005b      	lsls	r3, r3, #1
 8013fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013fd6:	4313      	orrs	r3, r2
 8013fd8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8013fdc:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8013fe0:	2b04      	cmp	r3, #4
 8013fe2:	d111      	bne.n	8014008 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 8013fe4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013fe6:	6803      	ldr	r3, [r0, #0]
 8013fe8:	4632      	mov	r2, r6
 8013fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013fec:	4639      	mov	r1, r7
 8013fee:	4798      	blx	r3
 8013ff0:	7b73      	ldrb	r3, [r6, #13]
 8013ff2:	005b      	lsls	r3, r3, #1
 8013ff4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013ff8:	7ab3      	ldrb	r3, [r6, #10]
 8013ffa:	4313      	orrs	r3, r2
 8013ffc:	4418      	add	r0, r3
 8013ffe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014002:	4418      	add	r0, r3
 8014004:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8014008:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 801400c:	2600      	movs	r6, #0
 801400e:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 8014012:	4637      	mov	r7, r6
 8014014:	45c3      	cmp	fp, r8
 8014016:	bfd4      	ite	le
 8014018:	2100      	movle	r1, #0
 801401a:	2101      	movgt	r1, #1
 801401c:	a807      	add	r0, sp, #28
 801401e:	f002 f8a2 	bl	8016166 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8014022:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8014026:	429f      	cmp	r7, r3
 8014028:	bfb8      	it	lt
 801402a:	b21f      	sxthlt	r7, r3
 801402c:	9b02      	ldr	r3, [sp, #8]
 801402e:	eba8 0803 	sub.w	r8, r8, r3
 8014032:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8014036:	3601      	adds	r6, #1
 8014038:	b2b6      	uxth	r6, r6
 801403a:	fa0f f888 	sxth.w	r8, r8
 801403e:	2b00      	cmp	r3, #0
 8014040:	f43f af0c 	beq.w	8013e5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 8014044:	45c2      	cmp	sl, r8
 8014046:	dbe5      	blt.n	8014014 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x298>
 8014048:	e708      	b.n	8013e5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 801404a:	1bf6      	subs	r6, r6, r7
 801404c:	2702      	movs	r7, #2
 801404e:	fb96 f6f7 	sdiv	r6, r6, r7
 8014052:	b236      	sxth	r6, r6
 8014054:	e72e      	b.n	8013eb4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x138>
 8014056:	4413      	add	r3, r2
 8014058:	1af6      	subs	r6, r6, r3
 801405a:	e7fa      	b.n	8014052 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 801405c:	8925      	ldrh	r5, [r4, #8]
 801405e:	1aad      	subs	r5, r5, r2
 8014060:	1aed      	subs	r5, r5, r3
 8014062:	b22f      	sxth	r7, r5
 8014064:	8965      	ldrh	r5, [r4, #10]
 8014066:	eba5 0508 	sub.w	r5, r5, r8
 801406a:	b22d      	sxth	r5, r5
 801406c:	e73e      	b.n	8013eec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x170>
 801406e:	bf00      	nop
 8014070:	20008864 	.word	0x20008864
 8014074:	20008868 	.word	0x20008868
 8014078:	20008860 	.word	0x20008860
 801407c:	2000886c 	.word	0x2000886c
 8014080:	8965      	ldrh	r5, [r4, #10]
 8014082:	1aad      	subs	r5, r5, r2
 8014084:	1aed      	subs	r5, r5, r3
 8014086:	4633      	mov	r3, r6
 8014088:	b22d      	sxth	r5, r5
 801408a:	4646      	mov	r6, r8
 801408c:	2700      	movs	r7, #0
 801408e:	4698      	mov	r8, r3
 8014090:	e72c      	b.n	8013eec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x170>
 8014092:	2500      	movs	r5, #0
 8014094:	e72a      	b.n	8013eec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x170>
 8014096:	bf00      	nop

08014098 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8014098:	b513      	push	{r0, r1, r4, lr}
 801409a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801409e:	4604      	mov	r4, r0
 80140a0:	b1fb      	cbz	r3, 80140e2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80140a2:	4b16      	ldr	r3, [pc, #88]	; (80140fc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 80140a4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80140a6:	881b      	ldrh	r3, [r3, #0]
 80140a8:	428b      	cmp	r3, r1
 80140aa:	d91a      	bls.n	80140e2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80140ac:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	dd16      	ble.n	80140e2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80140b4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	dd12      	ble.n	80140e2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80140bc:	4b10      	ldr	r3, [pc, #64]	; (8014100 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80140be:	6818      	ldr	r0, [r3, #0]
 80140c0:	f7fa fcae 	bl	800ea20 <_ZNK8touchgfx5Texts7getTextEt>
 80140c4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80140c8:	6822      	ldr	r2, [r4, #0]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	db06      	blt.n	80140dc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80140ce:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	db02      	blt.n	80140dc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80140d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80140d8:	4298      	cmp	r0, r3
 80140da:	d004      	beq.n	80140e6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80140dc:	6953      	ldr	r3, [r2, #20]
 80140de:	4620      	mov	r0, r4
 80140e0:	4798      	blx	r3
 80140e2:	b002      	add	sp, #8
 80140e4:	bd10      	pop	{r4, pc}
 80140e6:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80140ea:	c903      	ldmia	r1, {r0, r1}
 80140ec:	466b      	mov	r3, sp
 80140ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80140f2:	6912      	ldr	r2, [r2, #16]
 80140f4:	4619      	mov	r1, r3
 80140f6:	4620      	mov	r0, r4
 80140f8:	4790      	blx	r2
 80140fa:	e7f2      	b.n	80140e2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80140fc:	20008864 	.word	0x20008864
 8014100:	2000886c 	.word	0x2000886c

08014104 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8014104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014108:	4b44      	ldr	r3, [pc, #272]	; (801421c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801410a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801410c:	881b      	ldrh	r3, [r3, #0]
 801410e:	4293      	cmp	r3, r2
 8014110:	b08e      	sub	sp, #56	; 0x38
 8014112:	4604      	mov	r4, r0
 8014114:	d97e      	bls.n	8014214 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014116:	6808      	ldr	r0, [r1, #0]
 8014118:	4d41      	ldr	r5, [pc, #260]	; (8014220 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801411a:	6849      	ldr	r1, [r1, #4]
 801411c:	ab05      	add	r3, sp, #20
 801411e:	c303      	stmia	r3!, {r0, r1}
 8014120:	4611      	mov	r1, r2
 8014122:	6828      	ldr	r0, [r5, #0]
 8014124:	f7fa fc7c 	bl	800ea20 <_ZNK8touchgfx5Texts7getTextEt>
 8014128:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801412c:	2b00      	cmp	r3, #0
 801412e:	db11      	blt.n	8014154 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8014130:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8014134:	2b00      	cmp	r3, #0
 8014136:	db0d      	blt.n	8014154 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8014138:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801413a:	4298      	cmp	r0, r3
 801413c:	d10a      	bne.n	8014154 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801413e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8014142:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014146:	ab09      	add	r3, sp, #36	; 0x24
 8014148:	e883 0003 	stmia.w	r3, {r0, r1}
 801414c:	4619      	mov	r1, r3
 801414e:	a805      	add	r0, sp, #20
 8014150:	f7fd f92a 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 8014154:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014158:	2b00      	cmp	r3, #0
 801415a:	dd5b      	ble.n	8014214 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801415c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8014160:	2b00      	cmp	r3, #0
 8014162:	dd57      	ble.n	8014214 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014164:	4f2f      	ldr	r7, [pc, #188]	; (8014224 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8014166:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801416e:	4b2e      	ldr	r3, [pc, #184]	; (8014228 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8014176:	2e00      	cmp	r6, #0
 8014178:	d04c      	beq.n	8014214 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801417a:	6823      	ldr	r3, [r4, #0]
 801417c:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8014180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014182:	4620      	mov	r0, r4
 8014184:	4798      	blx	r3
 8014186:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 801418e:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8014192:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8014196:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014198:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801419c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80141a0:	785b      	ldrb	r3, [r3, #1]
 80141a2:	9609      	str	r6, [sp, #36]	; 0x24
 80141a4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80141a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80141ac:	4b1f      	ldr	r3, [pc, #124]	; (801422c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 80141ae:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 80141b8:	910b      	str	r1, [sp, #44]	; 0x2c
 80141ba:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 80141be:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 80141c2:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 80141c6:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 80141ca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80141ce:	b10a      	cbz	r2, 80141d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80141d0:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80141d2:	b906      	cbnz	r6, 80141d6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80141d4:	689e      	ldr	r6, [r3, #8]
 80141d6:	af07      	add	r7, sp, #28
 80141d8:	4621      	mov	r1, r4
 80141da:	4638      	mov	r0, r7
 80141dc:	f003 fd64 	bl	8017ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80141e0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80141e2:	6828      	ldr	r0, [r5, #0]
 80141e4:	f7fa fc1c 	bl	800ea20 <_ZNK8touchgfx5Texts7getTextEt>
 80141e8:	6823      	ldr	r3, [r4, #0]
 80141ea:	4605      	mov	r5, r0
 80141ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80141ee:	4620      	mov	r0, r4
 80141f0:	4798      	blx	r3
 80141f2:	6823      	ldr	r3, [r4, #0]
 80141f4:	4680      	mov	r8, r0
 80141f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80141fa:	4620      	mov	r0, r4
 80141fc:	4798      	blx	r3
 80141fe:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8014202:	ab09      	add	r3, sp, #36	; 0x24
 8014204:	9300      	str	r3, [sp, #0]
 8014206:	9501      	str	r5, [sp, #4]
 8014208:	ab05      	add	r3, sp, #20
 801420a:	e897 0006 	ldmia.w	r7, {r1, r2}
 801420e:	4630      	mov	r0, r6
 8014210:	f7fa fb97 	bl	800e942 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8014214:	b00e      	add	sp, #56	; 0x38
 8014216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801421a:	bf00      	nop
 801421c:	20008864 	.word	0x20008864
 8014220:	2000886c 	.word	0x2000886c
 8014224:	20008860 	.word	0x20008860
 8014228:	20008868 	.word	0x20008868
 801422c:	20008808 	.word	0x20008808

08014230 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8014230:	b538      	push	{r3, r4, r5, lr}
 8014232:	4b0e      	ldr	r3, [pc, #56]	; (801426c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8014234:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8014236:	881b      	ldrh	r3, [r3, #0]
 8014238:	429a      	cmp	r2, r3
 801423a:	4604      	mov	r4, r0
 801423c:	d214      	bcs.n	8014268 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801423e:	6803      	ldr	r3, [r0, #0]
 8014240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014242:	4798      	blx	r3
 8014244:	6823      	ldr	r3, [r4, #0]
 8014246:	4605      	mov	r5, r0
 8014248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801424a:	4620      	mov	r0, r4
 801424c:	4798      	blx	r3
 801424e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014252:	b22d      	sxth	r5, r5
 8014254:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8014258:	4601      	mov	r1, r0
 801425a:	bf06      	itte	eq
 801425c:	4602      	moveq	r2, r0
 801425e:	4629      	moveq	r1, r5
 8014260:	462a      	movne	r2, r5
 8014262:	4620      	mov	r0, r4
 8014264:	f7f6 fc73 	bl	800ab4e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014268:	bd38      	pop	{r3, r4, r5, pc}
 801426a:	bf00      	nop
 801426c:	20008864 	.word	0x20008864

08014270 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8014270:	b530      	push	{r4, r5, lr}
 8014272:	888b      	ldrh	r3, [r1, #4]
 8014274:	8583      	strh	r3, [r0, #44]	; 0x2c
 8014276:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801427a:	b085      	sub	sp, #20
 801427c:	4604      	mov	r4, r0
 801427e:	b923      	cbnz	r3, 801428a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8014280:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014284:	b90b      	cbnz	r3, 801428a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8014286:	f7ff ffd3 	bl	8014230 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801428a:	6823      	ldr	r3, [r4, #0]
 801428c:	466d      	mov	r5, sp
 801428e:	4621      	mov	r1, r4
 8014290:	4628      	mov	r0, r5
 8014292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014296:	4798      	blx	r3
 8014298:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801429c:	343c      	adds	r4, #60	; 0x3c
 801429e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80142a2:	b005      	add	sp, #20
 80142a4:	bd30      	pop	{r4, r5, pc}

080142a6 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80142a6:	2300      	movs	r3, #0
 80142a8:	8083      	strh	r3, [r0, #4]
 80142aa:	80c3      	strh	r3, [r0, #6]
 80142ac:	8003      	strh	r3, [r0, #0]
 80142ae:	8043      	strh	r3, [r0, #2]
 80142b0:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80142b4:	2bff      	cmp	r3, #255	; 0xff
 80142b6:	bf01      	itttt	eq
 80142b8:	890b      	ldrheq	r3, [r1, #8]
 80142ba:	8083      	strheq	r3, [r0, #4]
 80142bc:	894b      	ldrheq	r3, [r1, #10]
 80142be:	80c3      	strheq	r3, [r0, #6]
 80142c0:	4770      	bx	lr
	...

080142c4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80142c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80142c6:	4604      	mov	r4, r0
 80142c8:	6808      	ldr	r0, [r1, #0]
 80142ca:	6849      	ldr	r1, [r1, #4]
 80142cc:	466b      	mov	r3, sp
 80142ce:	c303      	stmia	r3!, {r0, r1}
 80142d0:	6823      	ldr	r3, [r4, #0]
 80142d2:	4669      	mov	r1, sp
 80142d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142d6:	4620      	mov	r0, r4
 80142d8:	4798      	blx	r3
 80142da:	4b08      	ldr	r3, [pc, #32]	; (80142fc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80142e2:	b10a      	cbz	r2, 80142e8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80142e4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80142e6:	b900      	cbnz	r0, 80142ea <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80142e8:	6898      	ldr	r0, [r3, #8]
 80142ea:	6803      	ldr	r3, [r0, #0]
 80142ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80142ee:	6a1d      	ldr	r5, [r3, #32]
 80142f0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80142f4:	4669      	mov	r1, sp
 80142f6:	47a8      	blx	r5
 80142f8:	b003      	add	sp, #12
 80142fa:	bd30      	pop	{r4, r5, pc}
 80142fc:	20008808 	.word	0x20008808

08014300 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8014300:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8014304:	b12a      	cbz	r2, 8014312 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8014306:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801430a:	b112      	cbz	r2, 8014312 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801430c:	6803      	ldr	r3, [r0, #0]
 801430e:	695b      	ldr	r3, [r3, #20]
 8014310:	4718      	bx	r3
 8014312:	4770      	bx	lr

08014314 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8014314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014318:	4b2f      	ldr	r3, [pc, #188]	; (80143d8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 801431a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801431c:	881b      	ldrh	r3, [r3, #0]
 801431e:	4293      	cmp	r3, r2
 8014320:	b08d      	sub	sp, #52	; 0x34
 8014322:	4604      	mov	r4, r0
 8014324:	460f      	mov	r7, r1
 8014326:	d954      	bls.n	80143d2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8014328:	4b2c      	ldr	r3, [pc, #176]	; (80143dc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801432a:	6819      	ldr	r1, [r3, #0]
 801432c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8014330:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8014334:	4a2a      	ldr	r2, [pc, #168]	; (80143e0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8014336:	6812      	ldr	r2, [r2, #0]
 8014338:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801433c:	2900      	cmp	r1, #0
 801433e:	d048      	beq.n	80143d2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8014340:	785a      	ldrb	r2, [r3, #1]
 8014342:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8014346:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801434a:	4b26      	ldr	r3, [pc, #152]	; (80143e4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 801434c:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8014350:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8014354:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8014358:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801435a:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 801435e:	9107      	str	r1, [sp, #28]
 8014360:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8014364:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8014368:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 801436c:	681a      	ldr	r2, [r3, #0]
 801436e:	f88d 8020 	strb.w	r8, [sp, #32]
 8014372:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8014376:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801437a:	9609      	str	r6, [sp, #36]	; 0x24
 801437c:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8014380:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8014384:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8014388:	b10b      	cbz	r3, 801438e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 801438a:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 801438c:	b905      	cbnz	r5, 8014390 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801438e:	6895      	ldr	r5, [r2, #8]
 8014390:	ae05      	add	r6, sp, #20
 8014392:	4621      	mov	r1, r4
 8014394:	4630      	mov	r0, r6
 8014396:	f003 fc87 	bl	8017ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801439a:	4b13      	ldr	r3, [pc, #76]	; (80143e8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 801439c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801439e:	6818      	ldr	r0, [r3, #0]
 80143a0:	f7fa fb3e 	bl	800ea20 <_ZNK8touchgfx5Texts7getTextEt>
 80143a4:	6823      	ldr	r3, [r4, #0]
 80143a6:	4680      	mov	r8, r0
 80143a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80143aa:	4620      	mov	r0, r4
 80143ac:	4798      	blx	r3
 80143ae:	6823      	ldr	r3, [r4, #0]
 80143b0:	4681      	mov	r9, r0
 80143b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80143b6:	4620      	mov	r0, r4
 80143b8:	4798      	blx	r3
 80143ba:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80143be:	ab07      	add	r3, sp, #28
 80143c0:	9300      	str	r3, [sp, #0]
 80143c2:	f8cd 8004 	str.w	r8, [sp, #4]
 80143c6:	463b      	mov	r3, r7
 80143c8:	e896 0006 	ldmia.w	r6, {r1, r2}
 80143cc:	4628      	mov	r0, r5
 80143ce:	f7fa fab8 	bl	800e942 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80143d2:	b00d      	add	sp, #52	; 0x34
 80143d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143d8:	20008864 	.word	0x20008864
 80143dc:	20008860 	.word	0x20008860
 80143e0:	20008868 	.word	0x20008868
 80143e4:	20008808 	.word	0x20008808
 80143e8:	2000886c 	.word	0x2000886c

080143ec <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 80143ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143f0:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80143f4:	b0a0      	sub	sp, #128	; 0x80
 80143f6:	4604      	mov	r4, r0
 80143f8:	b193      	cbz	r3, 8014420 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80143fa:	4b30      	ldr	r3, [pc, #192]	; (80144bc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 80143fc:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80143fe:	881b      	ldrh	r3, [r3, #0]
 8014400:	428b      	cmp	r3, r1
 8014402:	d90d      	bls.n	8014420 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8014404:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014408:	2b00      	cmp	r3, #0
 801440a:	dd09      	ble.n	8014420 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801440c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014410:	2b00      	cmp	r3, #0
 8014412:	dd05      	ble.n	8014420 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8014414:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8014418:	b12b      	cbz	r3, 8014426 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 801441a:	6803      	ldr	r3, [r0, #0]
 801441c:	695b      	ldr	r3, [r3, #20]
 801441e:	4798      	blx	r3
 8014420:	b020      	add	sp, #128	; 0x80
 8014422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014426:	4b26      	ldr	r3, [pc, #152]	; (80144c0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801442e:	4b25      	ldr	r3, [pc, #148]	; (80144c4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014436:	4b24      	ldr	r3, [pc, #144]	; (80144c8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 8014438:	6818      	ldr	r0, [r3, #0]
 801443a:	f7fa faf1 	bl	800ea20 <_ZNK8touchgfx5Texts7getTextEt>
 801443e:	4606      	mov	r6, r0
 8014440:	a807      	add	r0, sp, #28
 8014442:	f004 f8ab 	bl	801859c <_ZN8touchgfx12TextProviderC1Ev>
 8014446:	682b      	ldr	r3, [r5, #0]
 8014448:	4628      	mov	r0, r5
 801444a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801444c:	4798      	blx	r3
 801444e:	682b      	ldr	r3, [r5, #0]
 8014450:	4607      	mov	r7, r0
 8014452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014454:	4628      	mov	r0, r5
 8014456:	4798      	blx	r3
 8014458:	6823      	ldr	r3, [r4, #0]
 801445a:	4605      	mov	r5, r0
 801445c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801445e:	4620      	mov	r0, r4
 8014460:	4798      	blx	r3
 8014462:	6823      	ldr	r3, [r4, #0]
 8014464:	4680      	mov	r8, r0
 8014466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801446a:	4620      	mov	r0, r4
 801446c:	4798      	blx	r3
 801446e:	462b      	mov	r3, r5
 8014470:	e9cd 8000 	strd	r8, r0, [sp]
 8014474:	463a      	mov	r2, r7
 8014476:	a807      	add	r0, sp, #28
 8014478:	4631      	mov	r1, r6
 801447a:	f004 f8ff 	bl	801867c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801447e:	a807      	add	r0, sp, #28
 8014480:	f004 fcb8 	bl	8018df4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014484:	280a      	cmp	r0, #10
 8014486:	d103      	bne.n	8014490 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 8014488:	6823      	ldr	r3, [r4, #0]
 801448a:	4620      	mov	r0, r4
 801448c:	695b      	ldr	r3, [r3, #20]
 801448e:	e7c6      	b.n	801441e <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 8014490:	a807      	add	r0, sp, #28
 8014492:	f004 fcaf 	bl	8018df4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014496:	2800      	cmp	r0, #0
 8014498:	d1f4      	bne.n	8014484 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 801449a:	ad04      	add	r5, sp, #16
 801449c:	4621      	mov	r1, r4
 801449e:	4628      	mov	r0, r5
 80144a0:	f7ff fc6c 	bl	8013d7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80144a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80144a8:	6822      	ldr	r2, [r4, #0]
 80144aa:	ab02      	add	r3, sp, #8
 80144ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80144b0:	6912      	ldr	r2, [r2, #16]
 80144b2:	4619      	mov	r1, r3
 80144b4:	4620      	mov	r0, r4
 80144b6:	4790      	blx	r2
 80144b8:	e7b2      	b.n	8014420 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80144ba:	bf00      	nop
 80144bc:	20008864 	.word	0x20008864
 80144c0:	20008860 	.word	0x20008860
 80144c4:	20008868 	.word	0x20008868
 80144c8:	2000886c 	.word	0x2000886c

080144cc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80144cc:	b570      	push	{r4, r5, r6, lr}
 80144ce:	880b      	ldrh	r3, [r1, #0]
 80144d0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80144d2:	4604      	mov	r4, r0
 80144d4:	4608      	mov	r0, r1
 80144d6:	460d      	mov	r5, r1
 80144d8:	f005 fbf2 	bl	8019cc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80144dc:	4606      	mov	r6, r0
 80144de:	4628      	mov	r0, r5
 80144e0:	f005 fc22 	bl	8019d28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80144e4:	6823      	ldr	r3, [r4, #0]
 80144e6:	4605      	mov	r5, r0
 80144e8:	4631      	mov	r1, r6
 80144ea:	4620      	mov	r0, r4
 80144ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144ee:	4798      	blx	r3
 80144f0:	6823      	ldr	r3, [r4, #0]
 80144f2:	4629      	mov	r1, r5
 80144f4:	4620      	mov	r0, r4
 80144f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80144f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144fc:	4718      	bx	r3

080144fe <_ZNK8touchgfx5Image12getSolidRectEv>:
 80144fe:	b510      	push	{r4, lr}
 8014500:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8014504:	2bff      	cmp	r3, #255	; 0xff
 8014506:	4604      	mov	r4, r0
 8014508:	d006      	beq.n	8014518 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801450a:	2300      	movs	r3, #0
 801450c:	8003      	strh	r3, [r0, #0]
 801450e:	8043      	strh	r3, [r0, #2]
 8014510:	8083      	strh	r3, [r0, #4]
 8014512:	80c3      	strh	r3, [r0, #6]
 8014514:	4620      	mov	r0, r4
 8014516:	bd10      	pop	{r4, pc}
 8014518:	3126      	adds	r1, #38	; 0x26
 801451a:	f005 fc39 	bl	8019d90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801451e:	e7f9      	b.n	8014514 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08014520 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8014520:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8014524:	b12a      	cbz	r2, 8014532 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8014526:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801452a:	b112      	cbz	r2, 8014532 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801452c:	6803      	ldr	r3, [r0, #0]
 801452e:	695b      	ldr	r3, [r3, #20]
 8014530:	4718      	bx	r3
 8014532:	4770      	bx	lr

08014534 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8014534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014538:	4604      	mov	r4, r0
 801453a:	b088      	sub	sp, #32
 801453c:	f854 3b26 	ldr.w	r3, [r4], #38
 8014540:	2500      	movs	r5, #0
 8014542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014544:	460f      	mov	r7, r1
 8014546:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801454a:	a904      	add	r1, sp, #16
 801454c:	4606      	mov	r6, r0
 801454e:	4798      	blx	r3
 8014550:	4620      	mov	r0, r4
 8014552:	f005 fbb5 	bl	8019cc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014556:	4680      	mov	r8, r0
 8014558:	4620      	mov	r0, r4
 801455a:	f005 fbe5 	bl	8019d28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801455e:	9506      	str	r5, [sp, #24]
 8014560:	ad06      	add	r5, sp, #24
 8014562:	f8ad 001e 	strh.w	r0, [sp, #30]
 8014566:	4639      	mov	r1, r7
 8014568:	4628      	mov	r0, r5
 801456a:	f8ad 801c 	strh.w	r8, [sp, #28]
 801456e:	f7fc ff1b 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 8014572:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8014576:	2b00      	cmp	r3, #0
 8014578:	dd19      	ble.n	80145ae <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801457a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801457e:	2b00      	cmp	r3, #0
 8014580:	dd15      	ble.n	80145ae <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8014582:	4b0c      	ldr	r3, [pc, #48]	; (80145b4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801458a:	b10a      	cbz	r2, 8014590 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801458c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801458e:	b900      	cbnz	r0, 8014592 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8014590:	6898      	ldr	r0, [r3, #8]
 8014592:	6801      	ldr	r1, [r0, #0]
 8014594:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014598:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801459c:	2701      	movs	r7, #1
 801459e:	9702      	str	r7, [sp, #8]
 80145a0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80145a4:	e9cd 5600 	strd	r5, r6, [sp]
 80145a8:	688d      	ldr	r5, [r1, #8]
 80145aa:	4621      	mov	r1, r4
 80145ac:	47a8      	blx	r5
 80145ae:	b008      	add	sp, #32
 80145b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145b4:	20008808 	.word	0x20008808

080145b8 <_ZN8touchgfx7OutlineD1Ev>:
 80145b8:	4770      	bx	lr

080145ba <_ZN8touchgfx7OutlineD0Ev>:
 80145ba:	b510      	push	{r4, lr}
 80145bc:	2130      	movs	r1, #48	; 0x30
 80145be:	4604      	mov	r4, r0
 80145c0:	f011 fc60 	bl	8025e84 <_ZdlPvj>
 80145c4:	4620      	mov	r0, r4
 80145c6:	bd10      	pop	{r4, pc}

080145c8 <_ZN8touchgfx7Outline5resetEv>:
 80145c8:	b510      	push	{r4, lr}
 80145ca:	4604      	mov	r4, r0
 80145cc:	f000 fe8c 	bl	80152e8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80145d0:	60e0      	str	r0, [r4, #12]
 80145d2:	f000 fe8f 	bl	80152f4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80145d6:	68e3      	ldr	r3, [r4, #12]
 80145d8:	6123      	str	r3, [r4, #16]
 80145da:	08c0      	lsrs	r0, r0, #3
 80145dc:	2200      	movs	r2, #0
 80145de:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80145e2:	3801      	subs	r0, #1
 80145e4:	6060      	str	r0, [r4, #4]
 80145e6:	60a2      	str	r2, [r4, #8]
 80145e8:	8019      	strh	r1, [r3, #0]
 80145ea:	8059      	strh	r1, [r3, #2]
 80145ec:	809a      	strh	r2, [r3, #4]
 80145ee:	80da      	strh	r2, [r3, #6]
 80145f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145f2:	f023 0301 	bic.w	r3, r3, #1
 80145f6:	f043 0302 	orr.w	r3, r3, #2
 80145fa:	6263      	str	r3, [r4, #36]	; 0x24
 80145fc:	bd10      	pop	{r4, pc}
	...

08014600 <_ZN8touchgfx7OutlineC1Ev>:
 8014600:	b510      	push	{r4, lr}
 8014602:	4b0a      	ldr	r3, [pc, #40]	; (801462c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8014604:	6003      	str	r3, [r0, #0]
 8014606:	2300      	movs	r3, #0
 8014608:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801460c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014610:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8014614:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8014618:	6243      	str	r3, [r0, #36]	; 0x24
 801461a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801461e:	4604      	mov	r4, r0
 8014620:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8014624:	f7ff ffd0 	bl	80145c8 <_ZN8touchgfx7Outline5resetEv>
 8014628:	4620      	mov	r0, r4
 801462a:	bd10      	pop	{r4, pc}
 801462c:	0802aeb4 	.word	0x0802aeb4

08014630 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8014630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014634:	b093      	sub	sp, #76	; 0x4c
 8014636:	1156      	asrs	r6, r2, #5
 8014638:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801463a:	9305      	str	r3, [sp, #20]
 801463c:	f004 051f 	and.w	r5, r4, #31
 8014640:	1153      	asrs	r3, r2, #5
 8014642:	9504      	str	r5, [sp, #16]
 8014644:	1165      	asrs	r5, r4, #5
 8014646:	9303      	str	r3, [sp, #12]
 8014648:	42ae      	cmp	r6, r5
 801464a:	ea4f 1364 	mov.w	r3, r4, asr #5
 801464e:	9306      	str	r3, [sp, #24]
 8014650:	f002 031f 	and.w	r3, r2, #31
 8014654:	f040 80f8 	bne.w	8014848 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 8014658:	9c04      	ldr	r4, [sp, #16]
 801465a:	9a05      	ldr	r2, [sp, #20]
 801465c:	42a3      	cmp	r3, r4
 801465e:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8014662:	6902      	ldr	r2, [r0, #16]
 8014664:	d125      	bne.n	80146b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 8014666:	f9b2 3000 	ldrsh.w	r3, [r2]
 801466a:	459e      	cmp	lr, r3
 801466c:	d103      	bne.n	8014676 <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 801466e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8014672:	429e      	cmp	r6, r3
 8014674:	d035      	beq.n	80146e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8014676:	88d1      	ldrh	r1, [r2, #6]
 8014678:	8893      	ldrh	r3, [r2, #4]
 801467a:	430b      	orrs	r3, r1
 801467c:	d010      	beq.n	80146a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801467e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8014682:	2b00      	cmp	r3, #0
 8014684:	db0c      	blt.n	80146a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8014686:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8014688:	428b      	cmp	r3, r1
 801468a:	da09      	bge.n	80146a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801468c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8014690:	428b      	cmp	r3, r1
 8014692:	bf38      	it	cc
 8014694:	3208      	addcc	r2, #8
 8014696:	f103 0301 	add.w	r3, r3, #1
 801469a:	bf38      	it	cc
 801469c:	6102      	strcc	r2, [r0, #16]
 801469e:	6083      	str	r3, [r0, #8]
 80146a0:	6903      	ldr	r3, [r0, #16]
 80146a2:	9a03      	ldr	r2, [sp, #12]
 80146a4:	f8a3 e000 	strh.w	lr, [r3]
 80146a8:	805a      	strh	r2, [r3, #2]
 80146aa:	2200      	movs	r2, #0
 80146ac:	809a      	strh	r2, [r3, #4]
 80146ae:	80da      	strh	r2, [r3, #6]
 80146b0:	e017      	b.n	80146e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80146b2:	9c05      	ldr	r4, [sp, #20]
 80146b4:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80146b8:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80146bc:	f004 041f 	and.w	r4, r4, #31
 80146c0:	114e      	asrs	r6, r1, #5
 80146c2:	9402      	str	r4, [sp, #8]
 80146c4:	9c04      	ldr	r4, [sp, #16]
 80146c6:	4576      	cmp	r6, lr
 80146c8:	f001 0c1f 	and.w	ip, r1, #31
 80146cc:	eba4 0403 	sub.w	r4, r4, r3
 80146d0:	d10a      	bne.n	80146e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 80146d2:	9b02      	ldr	r3, [sp, #8]
 80146d4:	449c      	add	ip, r3
 80146d6:	44a0      	add	r8, r4
 80146d8:	fb04 a40c 	mla	r4, r4, ip, sl
 80146dc:	f8a2 8004 	strh.w	r8, [r2, #4]
 80146e0:	80d4      	strh	r4, [r2, #6]
 80146e2:	b013      	add	sp, #76	; 0x4c
 80146e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146e8:	9d05      	ldr	r5, [sp, #20]
 80146ea:	1a69      	subs	r1, r5, r1
 80146ec:	bf5b      	ittet	pl
 80146ee:	f1cc 0520 	rsbpl	r5, ip, #32
 80146f2:	436c      	mulpl	r4, r5
 80146f4:	2500      	movmi	r5, #0
 80146f6:	2520      	movpl	r5, #32
 80146f8:	bf44      	itt	mi
 80146fa:	fb04 f40c 	mulmi.w	r4, r4, ip
 80146fe:	4249      	negmi	r1, r1
 8014700:	9501      	str	r5, [sp, #4]
 8014702:	9f01      	ldr	r7, [sp, #4]
 8014704:	fb94 f5f1 	sdiv	r5, r4, r1
 8014708:	fb01 4415 	mls	r4, r1, r5, r4
 801470c:	bf54      	ite	pl
 801470e:	f04f 0901 	movpl.w	r9, #1
 8014712:	f04f 39ff 	movmi.w	r9, #4294967295
 8014716:	2c00      	cmp	r4, #0
 8014718:	bfb8      	it	lt
 801471a:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801471e:	44bc      	add	ip, r7
 8014720:	44a8      	add	r8, r5
 8014722:	fb05 ac0c 	mla	ip, r5, ip, sl
 8014726:	f8a2 8004 	strh.w	r8, [r2, #4]
 801472a:	f8a2 c006 	strh.w	ip, [r2, #6]
 801472e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014732:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8014736:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801473a:	bfb8      	it	lt
 801473c:	1864      	addlt	r4, r4, r1
 801473e:	ea58 0202 	orrs.w	r2, r8, r2
 8014742:	444e      	add	r6, r9
 8014744:	d011      	beq.n	801476a <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8014746:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801474a:	f1b8 0f00 	cmp.w	r8, #0
 801474e:	db0c      	blt.n	801476a <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8014750:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8014752:	4590      	cmp	r8, r2
 8014754:	da09      	bge.n	801476a <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8014756:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 801475a:	4590      	cmp	r8, r2
 801475c:	bf3c      	itt	cc
 801475e:	f10c 0208 	addcc.w	r2, ip, #8
 8014762:	6102      	strcc	r2, [r0, #16]
 8014764:	f108 0201 	add.w	r2, r8, #1
 8014768:	6082      	str	r2, [r0, #8]
 801476a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801476e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8014772:	f8ac 6000 	strh.w	r6, [ip]
 8014776:	2700      	movs	r7, #0
 8014778:	45b6      	cmp	lr, r6
 801477a:	f8ac 2002 	strh.w	r2, [ip, #2]
 801477e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8014782:	f8ac 7006 	strh.w	r7, [ip, #6]
 8014786:	442b      	add	r3, r5
 8014788:	d04d      	beq.n	8014826 <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 801478a:	9f04      	ldr	r7, [sp, #16]
 801478c:	1aff      	subs	r7, r7, r3
 801478e:	443d      	add	r5, r7
 8014790:	016d      	lsls	r5, r5, #5
 8014792:	fb95 f8f1 	sdiv	r8, r5, r1
 8014796:	fb01 5518 	mls	r5, r1, r8, r5
 801479a:	2d00      	cmp	r5, #0
 801479c:	bfb8      	it	lt
 801479e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80147a2:	f108 0701 	add.w	r7, r8, #1
 80147a6:	bfb8      	it	lt
 80147a8:	186d      	addlt	r5, r5, r1
 80147aa:	1a64      	subs	r4, r4, r1
 80147ac:	9703      	str	r7, [sp, #12]
 80147ae:	f04f 0a00 	mov.w	sl, #0
 80147b2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80147b6:	1964      	adds	r4, r4, r5
 80147b8:	bf58      	it	pl
 80147ba:	9f03      	ldrpl	r7, [sp, #12]
 80147bc:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80147c0:	bf48      	it	mi
 80147c2:	4647      	movmi	r7, r8
 80147c4:	44bb      	add	fp, r7
 80147c6:	f8ac b004 	strh.w	fp, [ip, #4]
 80147ca:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80147ce:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80147d2:	f8ac b006 	strh.w	fp, [ip, #6]
 80147d6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80147da:	443b      	add	r3, r7
 80147dc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80147e0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80147e4:	bf58      	it	pl
 80147e6:	1a64      	subpl	r4, r4, r1
 80147e8:	ea5b 0707 	orrs.w	r7, fp, r7
 80147ec:	444e      	add	r6, r9
 80147ee:	d011      	beq.n	8014814 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 80147f0:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80147f4:	f1bb 0f00 	cmp.w	fp, #0
 80147f8:	db0c      	blt.n	8014814 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 80147fa:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80147fc:	45bb      	cmp	fp, r7
 80147fe:	da09      	bge.n	8014814 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8014800:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8014804:	45bb      	cmp	fp, r7
 8014806:	bf3c      	itt	cc
 8014808:	f10c 0708 	addcc.w	r7, ip, #8
 801480c:	6107      	strcc	r7, [r0, #16]
 801480e:	f10b 0701 	add.w	r7, fp, #1
 8014812:	6087      	str	r7, [r0, #8]
 8014814:	6907      	ldr	r7, [r0, #16]
 8014816:	45b6      	cmp	lr, r6
 8014818:	803e      	strh	r6, [r7, #0]
 801481a:	807a      	strh	r2, [r7, #2]
 801481c:	f8a7 a004 	strh.w	sl, [r7, #4]
 8014820:	f8a7 a006 	strh.w	sl, [r7, #6]
 8014824:	d1c5      	bne.n	80147b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 8014826:	9a04      	ldr	r2, [sp, #16]
 8014828:	1ad3      	subs	r3, r2, r3
 801482a:	6902      	ldr	r2, [r0, #16]
 801482c:	8891      	ldrh	r1, [r2, #4]
 801482e:	88d6      	ldrh	r6, [r2, #6]
 8014830:	4419      	add	r1, r3
 8014832:	8091      	strh	r1, [r2, #4]
 8014834:	9902      	ldr	r1, [sp, #8]
 8014836:	f101 0c20 	add.w	ip, r1, #32
 801483a:	9901      	ldr	r1, [sp, #4]
 801483c:	ebac 0c01 	sub.w	ip, ip, r1
 8014840:	fb03 630c 	mla	r3, r3, ip, r6
 8014844:	80d3      	strh	r3, [r2, #6]
 8014846:	e74c      	b.n	80146e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8014848:	9d05      	ldr	r5, [sp, #20]
 801484a:	1aa2      	subs	r2, r4, r2
 801484c:	eba5 0501 	sub.w	r5, r5, r1
 8014850:	9508      	str	r5, [sp, #32]
 8014852:	9202      	str	r2, [sp, #8]
 8014854:	f140 8128 	bpl.w	8014aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 8014858:	9a03      	ldr	r2, [sp, #12]
 801485a:	2a00      	cmp	r2, #0
 801485c:	f6ff af41 	blt.w	80146e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8014860:	9a02      	ldr	r2, [sp, #8]
 8014862:	4252      	negs	r2, r2
 8014864:	9202      	str	r2, [sp, #8]
 8014866:	9a06      	ldr	r2, [sp, #24]
 8014868:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801486c:	f04f 34ff 	mov.w	r4, #4294967295
 8014870:	9206      	str	r2, [sp, #24]
 8014872:	462a      	mov	r2, r5
 8014874:	940b      	str	r4, [sp, #44]	; 0x2c
 8014876:	435a      	muls	r2, r3
 8014878:	2400      	movs	r4, #0
 801487a:	9d02      	ldr	r5, [sp, #8]
 801487c:	9401      	str	r4, [sp, #4]
 801487e:	9c02      	ldr	r4, [sp, #8]
 8014880:	fb92 f4f4 	sdiv	r4, r2, r4
 8014884:	fb05 2214 	mls	r2, r5, r4, r2
 8014888:	2a00      	cmp	r2, #0
 801488a:	9207      	str	r2, [sp, #28]
 801488c:	bfbc      	itt	lt
 801488e:	1952      	addlt	r2, r2, r5
 8014890:	9207      	strlt	r2, [sp, #28]
 8014892:	9a01      	ldr	r2, [sp, #4]
 8014894:	6905      	ldr	r5, [r0, #16]
 8014896:	bfb8      	it	lt
 8014898:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801489c:	eb04 0901 	add.w	r9, r4, r1
 80148a0:	429a      	cmp	r2, r3
 80148a2:	ea4f 1669 	mov.w	r6, r9, asr #5
 80148a6:	f040 8112 	bne.w	8014ace <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 80148aa:	f9b5 3000 	ldrsh.w	r3, [r5]
 80148ae:	429e      	cmp	r6, r3
 80148b0:	d104      	bne.n	80148bc <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 80148b2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80148b6:	9a03      	ldr	r2, [sp, #12]
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d01b      	beq.n	80148f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 80148bc:	88ea      	ldrh	r2, [r5, #6]
 80148be:	88ab      	ldrh	r3, [r5, #4]
 80148c0:	4313      	orrs	r3, r2
 80148c2:	d010      	beq.n	80148e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 80148c4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80148c8:	2a00      	cmp	r2, #0
 80148ca:	db0c      	blt.n	80148e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 80148cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80148ce:	429a      	cmp	r2, r3
 80148d0:	da09      	bge.n	80148e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 80148d2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80148d6:	429a      	cmp	r2, r3
 80148d8:	bf38      	it	cc
 80148da:	3508      	addcc	r5, #8
 80148dc:	f102 0201 	add.w	r2, r2, #1
 80148e0:	bf38      	it	cc
 80148e2:	6105      	strcc	r5, [r0, #16]
 80148e4:	6082      	str	r2, [r0, #8]
 80148e6:	6903      	ldr	r3, [r0, #16]
 80148e8:	9a03      	ldr	r2, [sp, #12]
 80148ea:	805a      	strh	r2, [r3, #2]
 80148ec:	2200      	movs	r2, #0
 80148ee:	801e      	strh	r6, [r3, #0]
 80148f0:	809a      	strh	r2, [r3, #4]
 80148f2:	80da      	strh	r2, [r3, #6]
 80148f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148f6:	9a03      	ldr	r2, [sp, #12]
 80148f8:	6901      	ldr	r1, [r0, #16]
 80148fa:	441a      	add	r2, r3
 80148fc:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014900:	42b3      	cmp	r3, r6
 8014902:	d103      	bne.n	801490c <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 8014904:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8014908:	429a      	cmp	r2, r3
 801490a:	d01a      	beq.n	8014942 <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 801490c:	88cc      	ldrh	r4, [r1, #6]
 801490e:	888b      	ldrh	r3, [r1, #4]
 8014910:	4323      	orrs	r3, r4
 8014912:	d010      	beq.n	8014936 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8014914:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8014918:	2c00      	cmp	r4, #0
 801491a:	db0c      	blt.n	8014936 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 801491c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801491e:	429c      	cmp	r4, r3
 8014920:	da09      	bge.n	8014936 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8014922:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8014926:	429c      	cmp	r4, r3
 8014928:	bf38      	it	cc
 801492a:	3108      	addcc	r1, #8
 801492c:	f104 0401 	add.w	r4, r4, #1
 8014930:	bf38      	it	cc
 8014932:	6101      	strcc	r1, [r0, #16]
 8014934:	6084      	str	r4, [r0, #8]
 8014936:	6903      	ldr	r3, [r0, #16]
 8014938:	2100      	movs	r1, #0
 801493a:	801e      	strh	r6, [r3, #0]
 801493c:	805a      	strh	r2, [r3, #2]
 801493e:	8099      	strh	r1, [r3, #4]
 8014940:	80d9      	strh	r1, [r3, #6]
 8014942:	9b06      	ldr	r3, [sp, #24]
 8014944:	4293      	cmp	r3, r2
 8014946:	f000 8082 	beq.w	8014a4e <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 801494a:	9b08      	ldr	r3, [sp, #32]
 801494c:	9c02      	ldr	r4, [sp, #8]
 801494e:	9902      	ldr	r1, [sp, #8]
 8014950:	015b      	lsls	r3, r3, #5
 8014952:	fb93 f1f1 	sdiv	r1, r3, r1
 8014956:	fb04 3311 	mls	r3, r4, r1, r3
 801495a:	2b00      	cmp	r3, #0
 801495c:	9103      	str	r1, [sp, #12]
 801495e:	9308      	str	r3, [sp, #32]
 8014960:	da04      	bge.n	801496c <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 8014962:	1e4b      	subs	r3, r1, #1
 8014964:	9303      	str	r3, [sp, #12]
 8014966:	9b08      	ldr	r3, [sp, #32]
 8014968:	4423      	add	r3, r4
 801496a:	9308      	str	r3, [sp, #32]
 801496c:	9b07      	ldr	r3, [sp, #28]
 801496e:	9902      	ldr	r1, [sp, #8]
 8014970:	1a5b      	subs	r3, r3, r1
 8014972:	9307      	str	r3, [sp, #28]
 8014974:	9b01      	ldr	r3, [sp, #4]
 8014976:	f1c3 0320 	rsb	r3, r3, #32
 801497a:	930e      	str	r3, [sp, #56]	; 0x38
 801497c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801497e:	9b01      	ldr	r3, [sp, #4]
 8014980:	1a5b      	subs	r3, r3, r1
 8014982:	464f      	mov	r7, r9
 8014984:	930a      	str	r3, [sp, #40]	; 0x28
 8014986:	2600      	movs	r6, #0
 8014988:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801498c:	185b      	adds	r3, r3, r1
 801498e:	bf58      	it	pl
 8014990:	9902      	ldrpl	r1, [sp, #8]
 8014992:	9307      	str	r3, [sp, #28]
 8014994:	bf5d      	ittte	pl
 8014996:	1a5b      	subpl	r3, r3, r1
 8014998:	9307      	strpl	r3, [sp, #28]
 801499a:	9b03      	ldrpl	r3, [sp, #12]
 801499c:	9903      	ldrmi	r1, [sp, #12]
 801499e:	bf58      	it	pl
 80149a0:	1c59      	addpl	r1, r3, #1
 80149a2:	4489      	add	r9, r1
 80149a4:	2a00      	cmp	r2, #0
 80149a6:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80149aa:	db2e      	blt.n	8014a0a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80149ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80149ae:	4293      	cmp	r3, r2
 80149b0:	dd2b      	ble.n	8014a0a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80149b2:	9c01      	ldr	r4, [sp, #4]
 80149b4:	6905      	ldr	r5, [r0, #16]
 80149b6:	46a0      	mov	r8, r4
 80149b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80149ba:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 80149be:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 80149c2:	45a0      	cmp	r8, r4
 80149c4:	f040 814f 	bne.w	8014c66 <_ZN8touchgfx7Outline10renderLineEiiii+0x636>
 80149c8:	f9b5 1000 	ldrsh.w	r1, [r5]
 80149cc:	4551      	cmp	r1, sl
 80149ce:	d103      	bne.n	80149d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 80149d0:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80149d4:	4291      	cmp	r1, r2
 80149d6:	d018      	beq.n	8014a0a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80149d8:	ea5c 010e 	orrs.w	r1, ip, lr
 80149dc:	d00f      	beq.n	80149fe <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 80149de:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80149e2:	2900      	cmp	r1, #0
 80149e4:	db0b      	blt.n	80149fe <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 80149e6:	428b      	cmp	r3, r1
 80149e8:	dd09      	ble.n	80149fe <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 80149ea:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80149ee:	4299      	cmp	r1, r3
 80149f0:	bf38      	it	cc
 80149f2:	3508      	addcc	r5, #8
 80149f4:	f101 0101 	add.w	r1, r1, #1
 80149f8:	bf38      	it	cc
 80149fa:	6105      	strcc	r5, [r0, #16]
 80149fc:	6081      	str	r1, [r0, #8]
 80149fe:	6903      	ldr	r3, [r0, #16]
 8014a00:	f8a3 a000 	strh.w	sl, [r3]
 8014a04:	805a      	strh	r2, [r3, #2]
 8014a06:	809e      	strh	r6, [r3, #4]
 8014a08:	80de      	strh	r6, [r3, #6]
 8014a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a0c:	6901      	ldr	r1, [r0, #16]
 8014a0e:	441a      	add	r2, r3
 8014a10:	88cc      	ldrh	r4, [r1, #6]
 8014a12:	888b      	ldrh	r3, [r1, #4]
 8014a14:	4323      	orrs	r3, r4
 8014a16:	d010      	beq.n	8014a3a <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8014a18:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8014a1c:	2c00      	cmp	r4, #0
 8014a1e:	db0c      	blt.n	8014a3a <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8014a20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014a22:	429c      	cmp	r4, r3
 8014a24:	da09      	bge.n	8014a3a <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8014a26:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8014a2a:	429c      	cmp	r4, r3
 8014a2c:	bf38      	it	cc
 8014a2e:	3108      	addcc	r1, #8
 8014a30:	f104 0401 	add.w	r4, r4, #1
 8014a34:	bf38      	it	cc
 8014a36:	6101      	strcc	r1, [r0, #16]
 8014a38:	6084      	str	r4, [r0, #8]
 8014a3a:	6903      	ldr	r3, [r0, #16]
 8014a3c:	f8a3 a000 	strh.w	sl, [r3]
 8014a40:	805a      	strh	r2, [r3, #2]
 8014a42:	809e      	strh	r6, [r3, #4]
 8014a44:	80de      	strh	r6, [r3, #6]
 8014a46:	9b06      	ldr	r3, [sp, #24]
 8014a48:	4293      	cmp	r3, r2
 8014a4a:	464f      	mov	r7, r9
 8014a4c:	d19c      	bne.n	8014988 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 8014a4e:	9b01      	ldr	r3, [sp, #4]
 8014a50:	6907      	ldr	r7, [r0, #16]
 8014a52:	f1c3 0620 	rsb	r6, r3, #32
 8014a56:	9b05      	ldr	r3, [sp, #20]
 8014a58:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8014a5c:	9b04      	ldr	r3, [sp, #16]
 8014a5e:	429e      	cmp	r6, r3
 8014a60:	f040 81cc 	bne.w	8014dfc <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 8014a64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8014a68:	459e      	cmp	lr, r3
 8014a6a:	d104      	bne.n	8014a76 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8014a6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014a70:	429a      	cmp	r2, r3
 8014a72:	f43f ae36 	beq.w	80146e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8014a76:	88f9      	ldrh	r1, [r7, #6]
 8014a78:	88bb      	ldrh	r3, [r7, #4]
 8014a7a:	430b      	orrs	r3, r1
 8014a7c:	d010      	beq.n	8014aa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8014a7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	db0c      	blt.n	8014aa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8014a86:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8014a88:	428b      	cmp	r3, r1
 8014a8a:	da09      	bge.n	8014aa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8014a8c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8014a90:	428b      	cmp	r3, r1
 8014a92:	bf38      	it	cc
 8014a94:	3708      	addcc	r7, #8
 8014a96:	f103 0301 	add.w	r3, r3, #1
 8014a9a:	bf38      	it	cc
 8014a9c:	6107      	strcc	r7, [r0, #16]
 8014a9e:	6083      	str	r3, [r0, #8]
 8014aa0:	6903      	ldr	r3, [r0, #16]
 8014aa2:	f8a3 e000 	strh.w	lr, [r3]
 8014aa6:	e5ff      	b.n	80146a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 8014aa8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8014aaa:	9c03      	ldr	r4, [sp, #12]
 8014aac:	42a2      	cmp	r2, r4
 8014aae:	f6ff ae18 	blt.w	80146e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8014ab2:	9c06      	ldr	r4, [sp, #24]
 8014ab4:	42a2      	cmp	r2, r4
 8014ab6:	bfb8      	it	lt
 8014ab8:	3201      	addlt	r2, #1
 8014aba:	9c08      	ldr	r4, [sp, #32]
 8014abc:	bfb8      	it	lt
 8014abe:	9206      	strlt	r2, [sp, #24]
 8014ac0:	f1c3 0220 	rsb	r2, r3, #32
 8014ac4:	4362      	muls	r2, r4
 8014ac6:	2401      	movs	r4, #1
 8014ac8:	940b      	str	r4, [sp, #44]	; 0x2c
 8014aca:	2420      	movs	r4, #32
 8014acc:	e6d5      	b.n	801487a <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 8014ace:	f009 021f 	and.w	r2, r9, #31
 8014ad2:	ea4f 1861 	mov.w	r8, r1, asr #5
 8014ad6:	920c      	str	r2, [sp, #48]	; 0x30
 8014ad8:	9a01      	ldr	r2, [sp, #4]
 8014ada:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8014ade:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8014ae2:	45b0      	cmp	r8, r6
 8014ae4:	f001 011f 	and.w	r1, r1, #31
 8014ae8:	eba2 0203 	sub.w	r2, r2, r3
 8014aec:	d108      	bne.n	8014b00 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 8014aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014af0:	4419      	add	r1, r3
 8014af2:	4496      	add	lr, r2
 8014af4:	fb02 a101 	mla	r1, r2, r1, sl
 8014af8:	f8a5 e004 	strh.w	lr, [r5, #4]
 8014afc:	80e9      	strh	r1, [r5, #6]
 8014afe:	e6f9      	b.n	80148f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8014b00:	2c00      	cmp	r4, #0
 8014b02:	f2c0 80a9 	blt.w	8014c58 <_ZN8touchgfx7Outline10renderLineEiiii+0x628>
 8014b06:	2701      	movs	r7, #1
 8014b08:	f1c1 0c20 	rsb	ip, r1, #32
 8014b0c:	970a      	str	r7, [sp, #40]	; 0x28
 8014b0e:	fb02 f20c 	mul.w	r2, r2, ip
 8014b12:	2720      	movs	r7, #32
 8014b14:	9709      	str	r7, [sp, #36]	; 0x24
 8014b16:	fb92 fcf4 	sdiv	ip, r2, r4
 8014b1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014b1c:	fb04 221c 	mls	r2, r4, ip, r2
 8014b20:	2a00      	cmp	r2, #0
 8014b22:	bfb8      	it	lt
 8014b24:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8014b28:	4439      	add	r1, r7
 8014b2a:	fb0c a101 	mla	r1, ip, r1, sl
 8014b2e:	80e9      	strh	r1, [r5, #6]
 8014b30:	44e6      	add	lr, ip
 8014b32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014b34:	f8a5 e004 	strh.w	lr, [r5, #4]
 8014b38:	eb08 0501 	add.w	r5, r8, r1
 8014b3c:	6901      	ldr	r1, [r0, #16]
 8014b3e:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8014b42:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8014b46:	bfb8      	it	lt
 8014b48:	1912      	addlt	r2, r2, r4
 8014b4a:	ea58 070e 	orrs.w	r7, r8, lr
 8014b4e:	d010      	beq.n	8014b72 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8014b50:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8014b54:	f1be 0f00 	cmp.w	lr, #0
 8014b58:	db0b      	blt.n	8014b72 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8014b5a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014b5c:	45be      	cmp	lr, r7
 8014b5e:	da08      	bge.n	8014b72 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8014b60:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8014b64:	45be      	cmp	lr, r7
 8014b66:	bf3c      	itt	cc
 8014b68:	3108      	addcc	r1, #8
 8014b6a:	6101      	strcc	r1, [r0, #16]
 8014b6c:	f10e 0101 	add.w	r1, lr, #1
 8014b70:	6081      	str	r1, [r0, #8]
 8014b72:	6901      	ldr	r1, [r0, #16]
 8014b74:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8014b78:	800d      	strh	r5, [r1, #0]
 8014b7a:	f04f 0e00 	mov.w	lr, #0
 8014b7e:	42ae      	cmp	r6, r5
 8014b80:	f8a1 8002 	strh.w	r8, [r1, #2]
 8014b84:	f8a1 e004 	strh.w	lr, [r1, #4]
 8014b88:	f8a1 e006 	strh.w	lr, [r1, #6]
 8014b8c:	4463      	add	r3, ip
 8014b8e:	d054      	beq.n	8014c3a <_ZN8touchgfx7Outline10renderLineEiiii+0x60a>
 8014b90:	9901      	ldr	r1, [sp, #4]
 8014b92:	1ac9      	subs	r1, r1, r3
 8014b94:	4461      	add	r1, ip
 8014b96:	0149      	lsls	r1, r1, #5
 8014b98:	fb91 fef4 	sdiv	lr, r1, r4
 8014b9c:	fb04 111e 	mls	r1, r4, lr, r1
 8014ba0:	2900      	cmp	r1, #0
 8014ba2:	bfb8      	it	lt
 8014ba4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8014ba8:	f10e 0701 	add.w	r7, lr, #1
 8014bac:	bfb8      	it	lt
 8014bae:	1909      	addlt	r1, r1, r4
 8014bb0:	1b12      	subs	r2, r2, r4
 8014bb2:	970d      	str	r7, [sp, #52]	; 0x34
 8014bb4:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8014bb8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014bba:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8014bbe:	1852      	adds	r2, r2, r1
 8014bc0:	bf54      	ite	pl
 8014bc2:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8014bc6:	46f4      	movmi	ip, lr
 8014bc8:	44e3      	add	fp, ip
 8014bca:	f8aa b004 	strh.w	fp, [sl, #4]
 8014bce:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8014bd2:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8014bd6:	f8aa b006 	strh.w	fp, [sl, #6]
 8014bda:	4463      	add	r3, ip
 8014bdc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014be0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014be4:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8014be8:	bf58      	it	pl
 8014bea:	1b12      	subpl	r2, r2, r4
 8014bec:	443d      	add	r5, r7
 8014bee:	ea5b 070a 	orrs.w	r7, fp, sl
 8014bf2:	d014      	beq.n	8014c1e <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 8014bf4:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8014bf8:	f1ba 0f00 	cmp.w	sl, #0
 8014bfc:	db0f      	blt.n	8014c1e <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 8014bfe:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014c00:	45ba      	cmp	sl, r7
 8014c02:	da0c      	bge.n	8014c1e <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 8014c04:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8014c08:	45ba      	cmp	sl, r7
 8014c0a:	bf38      	it	cc
 8014c0c:	f10c 0c08 	addcc.w	ip, ip, #8
 8014c10:	f10a 0a01 	add.w	sl, sl, #1
 8014c14:	bf38      	it	cc
 8014c16:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8014c1a:	f8c0 a008 	str.w	sl, [r0, #8]
 8014c1e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014c22:	f04f 0700 	mov.w	r7, #0
 8014c26:	42ae      	cmp	r6, r5
 8014c28:	f8ac 5000 	strh.w	r5, [ip]
 8014c2c:	f8ac 8002 	strh.w	r8, [ip, #2]
 8014c30:	f8ac 7004 	strh.w	r7, [ip, #4]
 8014c34:	f8ac 7006 	strh.w	r7, [ip, #6]
 8014c38:	d1bc      	bne.n	8014bb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 8014c3a:	6904      	ldr	r4, [r0, #16]
 8014c3c:	9a01      	ldr	r2, [sp, #4]
 8014c3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014c40:	1ad3      	subs	r3, r2, r3
 8014c42:	88a2      	ldrh	r2, [r4, #4]
 8014c44:	441a      	add	r2, r3
 8014c46:	80a2      	strh	r2, [r4, #4]
 8014c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c4a:	3120      	adds	r1, #32
 8014c4c:	1a89      	subs	r1, r1, r2
 8014c4e:	88e2      	ldrh	r2, [r4, #6]
 8014c50:	fb03 2301 	mla	r3, r3, r1, r2
 8014c54:	80e3      	strh	r3, [r4, #6]
 8014c56:	e64d      	b.n	80148f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8014c58:	f04f 37ff 	mov.w	r7, #4294967295
 8014c5c:	970a      	str	r7, [sp, #40]	; 0x28
 8014c5e:	434a      	muls	r2, r1
 8014c60:	4264      	negs	r4, r4
 8014c62:	2700      	movs	r7, #0
 8014c64:	e756      	b.n	8014b14 <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 8014c66:	ea4f 1867 	mov.w	r8, r7, asr #5
 8014c6a:	f009 031f 	and.w	r3, r9, #31
 8014c6e:	45d0      	cmp	r8, sl
 8014c70:	f007 071f 	and.w	r7, r7, #31
 8014c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c76:	fa1f fc8c 	uxth.w	ip, ip
 8014c7a:	fa1f fe8e 	uxth.w	lr, lr
 8014c7e:	d10a      	bne.n	8014c96 <_ZN8touchgfx7Outline10renderLineEiiii+0x666>
 8014c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c82:	449c      	add	ip, r3
 8014c84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c86:	f8a5 c004 	strh.w	ip, [r5, #4]
 8014c8a:	441f      	add	r7, r3
 8014c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c8e:	fb03 e707 	mla	r7, r3, r7, lr
 8014c92:	80ef      	strh	r7, [r5, #6]
 8014c94:	e6b9      	b.n	8014a0a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8014c96:	2900      	cmp	r1, #0
 8014c98:	f2c0 80a8 	blt.w	8014dec <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 8014c9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014c9e:	f1c7 0320 	rsb	r3, r7, #32
 8014ca2:	4363      	muls	r3, r4
 8014ca4:	2401      	movs	r4, #1
 8014ca6:	940d      	str	r4, [sp, #52]	; 0x34
 8014ca8:	2420      	movs	r4, #32
 8014caa:	940c      	str	r4, [sp, #48]	; 0x30
 8014cac:	fb93 f4f1 	sdiv	r4, r3, r1
 8014cb0:	fb01 3b14 	mls	fp, r1, r4, r3
 8014cb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cb6:	f1bb 0f00 	cmp.w	fp, #0
 8014cba:	bfb8      	it	lt
 8014cbc:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8014cc0:	441f      	add	r7, r3
 8014cc2:	fb04 e707 	mla	r7, r4, r7, lr
 8014cc6:	44a4      	add	ip, r4
 8014cc8:	f8a5 c004 	strh.w	ip, [r5, #4]
 8014ccc:	80ef      	strh	r7, [r5, #6]
 8014cce:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cd4:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8014cd8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014cdc:	bfb8      	it	lt
 8014cde:	448b      	addlt	fp, r1
 8014ce0:	eb08 0503 	add.w	r5, r8, r3
 8014ce4:	ea5e 0307 	orrs.w	r3, lr, r7
 8014ce8:	d011      	beq.n	8014d0e <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 8014cea:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8014cee:	f1be 0f00 	cmp.w	lr, #0
 8014cf2:	db0c      	blt.n	8014d0e <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 8014cf4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014cf6:	45be      	cmp	lr, r7
 8014cf8:	da09      	bge.n	8014d0e <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 8014cfa:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8014cfe:	45be      	cmp	lr, r7
 8014d00:	bf3c      	itt	cc
 8014d02:	f10c 0708 	addcc.w	r7, ip, #8
 8014d06:	6107      	strcc	r7, [r0, #16]
 8014d08:	f10e 0701 	add.w	r7, lr, #1
 8014d0c:	6087      	str	r7, [r0, #8]
 8014d0e:	6907      	ldr	r7, [r0, #16]
 8014d10:	b213      	sxth	r3, r2
 8014d12:	9310      	str	r3, [sp, #64]	; 0x40
 8014d14:	807b      	strh	r3, [r7, #2]
 8014d16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d18:	803d      	strh	r5, [r7, #0]
 8014d1a:	4555      	cmp	r5, sl
 8014d1c:	80be      	strh	r6, [r7, #4]
 8014d1e:	80fe      	strh	r6, [r7, #6]
 8014d20:	eb04 0c03 	add.w	ip, r4, r3
 8014d24:	d051      	beq.n	8014dca <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 8014d26:	9b01      	ldr	r3, [sp, #4]
 8014d28:	eba3 070c 	sub.w	r7, r3, ip
 8014d2c:	443c      	add	r4, r7
 8014d2e:	0164      	lsls	r4, r4, #5
 8014d30:	fb94 f8f1 	sdiv	r8, r4, r1
 8014d34:	fb01 4418 	mls	r4, r1, r8, r4
 8014d38:	2c00      	cmp	r4, #0
 8014d3a:	bfb8      	it	lt
 8014d3c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014d40:	ebab 0301 	sub.w	r3, fp, r1
 8014d44:	f108 0701 	add.w	r7, r8, #1
 8014d48:	bfb8      	it	lt
 8014d4a:	1864      	addlt	r4, r4, r1
 8014d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8014d4e:	9711      	str	r7, [sp, #68]	; 0x44
 8014d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d52:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8014d56:	191b      	adds	r3, r3, r4
 8014d58:	bf58      	it	pl
 8014d5a:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8014d5c:	f8be b004 	ldrh.w	fp, [lr, #4]
 8014d60:	9309      	str	r3, [sp, #36]	; 0x24
 8014d62:	bf48      	it	mi
 8014d64:	4647      	movmi	r7, r8
 8014d66:	44bb      	add	fp, r7
 8014d68:	f8ae b004 	strh.w	fp, [lr, #4]
 8014d6c:	f8be b006 	ldrh.w	fp, [lr, #6]
 8014d70:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014d74:	f8ae b006 	strh.w	fp, [lr, #6]
 8014d78:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8014d7c:	44bc      	add	ip, r7
 8014d7e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014d80:	f8be b006 	ldrh.w	fp, [lr, #6]
 8014d84:	443d      	add	r5, r7
 8014d86:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8014d8a:	bf5c      	itt	pl
 8014d8c:	1a5b      	subpl	r3, r3, r1
 8014d8e:	9309      	strpl	r3, [sp, #36]	; 0x24
 8014d90:	ea5b 0307 	orrs.w	r3, fp, r7
 8014d94:	d011      	beq.n	8014dba <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8014d96:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8014d9a:	f1bb 0f00 	cmp.w	fp, #0
 8014d9e:	db0c      	blt.n	8014dba <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8014da0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014da2:	45bb      	cmp	fp, r7
 8014da4:	da09      	bge.n	8014dba <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8014da6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8014daa:	45bb      	cmp	fp, r7
 8014dac:	bf3c      	itt	cc
 8014dae:	f10e 0708 	addcc.w	r7, lr, #8
 8014db2:	6107      	strcc	r7, [r0, #16]
 8014db4:	f10b 0701 	add.w	r7, fp, #1
 8014db8:	6087      	str	r7, [r0, #8]
 8014dba:	6907      	ldr	r7, [r0, #16]
 8014dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014dbe:	803d      	strh	r5, [r7, #0]
 8014dc0:	4555      	cmp	r5, sl
 8014dc2:	807b      	strh	r3, [r7, #2]
 8014dc4:	80be      	strh	r6, [r7, #4]
 8014dc6:	80fe      	strh	r6, [r7, #6]
 8014dc8:	d1c2      	bne.n	8014d50 <_ZN8touchgfx7Outline10renderLineEiiii+0x720>
 8014dca:	9b01      	ldr	r3, [sp, #4]
 8014dcc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014dce:	eba3 0c0c 	sub.w	ip, r3, ip
 8014dd2:	6903      	ldr	r3, [r0, #16]
 8014dd4:	8899      	ldrh	r1, [r3, #4]
 8014dd6:	4461      	add	r1, ip
 8014dd8:	8099      	strh	r1, [r3, #4]
 8014dda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014ddc:	3720      	adds	r7, #32
 8014dde:	1a7f      	subs	r7, r7, r1
 8014de0:	88d9      	ldrh	r1, [r3, #6]
 8014de2:	fb0c 1c07 	mla	ip, ip, r7, r1
 8014de6:	f8a3 c006 	strh.w	ip, [r3, #6]
 8014dea:	e60e      	b.n	8014a0a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8014dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dee:	f04f 34ff 	mov.w	r4, #4294967295
 8014df2:	940d      	str	r4, [sp, #52]	; 0x34
 8014df4:	437b      	muls	r3, r7
 8014df6:	4249      	negs	r1, r1
 8014df8:	2400      	movs	r4, #0
 8014dfa:	e756      	b.n	8014caa <_ZN8touchgfx7Outline10renderLineEiiii+0x67a>
 8014dfc:	9905      	ldr	r1, [sp, #20]
 8014dfe:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8014e02:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8014e06:	f001 011f 	and.w	r1, r1, #31
 8014e0a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8014e0e:	9102      	str	r1, [sp, #8]
 8014e10:	9904      	ldr	r1, [sp, #16]
 8014e12:	45f3      	cmp	fp, lr
 8014e14:	f009 0c1f 	and.w	ip, r9, #31
 8014e18:	eba1 0406 	sub.w	r4, r1, r6
 8014e1c:	d108      	bne.n	8014e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 8014e1e:	9b02      	ldr	r3, [sp, #8]
 8014e20:	449c      	add	ip, r3
 8014e22:	44a0      	add	r8, r4
 8014e24:	fb04 a40c 	mla	r4, r4, ip, sl
 8014e28:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014e2c:	80fc      	strh	r4, [r7, #6]
 8014e2e:	e458      	b.n	80146e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8014e30:	9905      	ldr	r1, [sp, #20]
 8014e32:	ebb1 0109 	subs.w	r1, r1, r9
 8014e36:	bf5b      	ittet	pl
 8014e38:	f1cc 0520 	rsbpl	r5, ip, #32
 8014e3c:	436c      	mulpl	r4, r5
 8014e3e:	2500      	movmi	r5, #0
 8014e40:	2520      	movpl	r5, #32
 8014e42:	bf44      	itt	mi
 8014e44:	fb04 f40c 	mulmi.w	r4, r4, ip
 8014e48:	4249      	negmi	r1, r1
 8014e4a:	9501      	str	r5, [sp, #4]
 8014e4c:	9b01      	ldr	r3, [sp, #4]
 8014e4e:	fb94 f5f1 	sdiv	r5, r4, r1
 8014e52:	fb01 4415 	mls	r4, r1, r5, r4
 8014e56:	bf54      	ite	pl
 8014e58:	f04f 0901 	movpl.w	r9, #1
 8014e5c:	f04f 39ff 	movmi.w	r9, #4294967295
 8014e60:	2c00      	cmp	r4, #0
 8014e62:	bfb8      	it	lt
 8014e64:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8014e68:	449c      	add	ip, r3
 8014e6a:	44a8      	add	r8, r5
 8014e6c:	fb05 ac0c 	mla	ip, r5, ip, sl
 8014e70:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014e74:	f8a7 c006 	strh.w	ip, [r7, #6]
 8014e78:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014e7c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8014e80:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014e84:	bfb8      	it	lt
 8014e86:	1864      	addlt	r4, r4, r1
 8014e88:	ea58 0707 	orrs.w	r7, r8, r7
 8014e8c:	eb0b 0309 	add.w	r3, fp, r9
 8014e90:	d011      	beq.n	8014eb6 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8014e92:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8014e96:	f1b8 0f00 	cmp.w	r8, #0
 8014e9a:	db0c      	blt.n	8014eb6 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8014e9c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014e9e:	45b8      	cmp	r8, r7
 8014ea0:	da09      	bge.n	8014eb6 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8014ea2:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8014ea6:	45b8      	cmp	r8, r7
 8014ea8:	bf3c      	itt	cc
 8014eaa:	f10c 0708 	addcc.w	r7, ip, #8
 8014eae:	6107      	strcc	r7, [r0, #16]
 8014eb0:	f108 0701 	add.w	r7, r8, #1
 8014eb4:	6087      	str	r7, [r0, #8]
 8014eb6:	6907      	ldr	r7, [r0, #16]
 8014eb8:	f04f 0c00 	mov.w	ip, #0
 8014ebc:	b212      	sxth	r2, r2
 8014ebe:	459e      	cmp	lr, r3
 8014ec0:	803b      	strh	r3, [r7, #0]
 8014ec2:	807a      	strh	r2, [r7, #2]
 8014ec4:	f8a7 c004 	strh.w	ip, [r7, #4]
 8014ec8:	f8a7 c006 	strh.w	ip, [r7, #6]
 8014ecc:	442e      	add	r6, r5
 8014ece:	d04d      	beq.n	8014f6c <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 8014ed0:	9f04      	ldr	r7, [sp, #16]
 8014ed2:	1bbf      	subs	r7, r7, r6
 8014ed4:	443d      	add	r5, r7
 8014ed6:	016d      	lsls	r5, r5, #5
 8014ed8:	fb95 f8f1 	sdiv	r8, r5, r1
 8014edc:	fb01 5518 	mls	r5, r1, r8, r5
 8014ee0:	4565      	cmp	r5, ip
 8014ee2:	bfb8      	it	lt
 8014ee4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014ee8:	f108 0701 	add.w	r7, r8, #1
 8014eec:	bfb8      	it	lt
 8014eee:	186d      	addlt	r5, r5, r1
 8014ef0:	1a64      	subs	r4, r4, r1
 8014ef2:	9703      	str	r7, [sp, #12]
 8014ef4:	f04f 0a00 	mov.w	sl, #0
 8014ef8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014efc:	1964      	adds	r4, r4, r5
 8014efe:	bf58      	it	pl
 8014f00:	9f03      	ldrpl	r7, [sp, #12]
 8014f02:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8014f06:	bf48      	it	mi
 8014f08:	4647      	movmi	r7, r8
 8014f0a:	44bb      	add	fp, r7
 8014f0c:	f8ac b004 	strh.w	fp, [ip, #4]
 8014f10:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014f14:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014f18:	f8ac b006 	strh.w	fp, [ip, #6]
 8014f1c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014f20:	443e      	add	r6, r7
 8014f22:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014f26:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014f2a:	bf58      	it	pl
 8014f2c:	1a64      	subpl	r4, r4, r1
 8014f2e:	ea5b 0707 	orrs.w	r7, fp, r7
 8014f32:	444b      	add	r3, r9
 8014f34:	d011      	beq.n	8014f5a <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8014f36:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8014f3a:	f1bb 0f00 	cmp.w	fp, #0
 8014f3e:	db0c      	blt.n	8014f5a <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8014f40:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014f42:	45bb      	cmp	fp, r7
 8014f44:	da09      	bge.n	8014f5a <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8014f46:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8014f4a:	45bb      	cmp	fp, r7
 8014f4c:	bf3c      	itt	cc
 8014f4e:	f10c 0708 	addcc.w	r7, ip, #8
 8014f52:	6107      	strcc	r7, [r0, #16]
 8014f54:	f10b 0701 	add.w	r7, fp, #1
 8014f58:	6087      	str	r7, [r0, #8]
 8014f5a:	6907      	ldr	r7, [r0, #16]
 8014f5c:	459e      	cmp	lr, r3
 8014f5e:	803b      	strh	r3, [r7, #0]
 8014f60:	807a      	strh	r2, [r7, #2]
 8014f62:	f8a7 a004 	strh.w	sl, [r7, #4]
 8014f66:	f8a7 a006 	strh.w	sl, [r7, #6]
 8014f6a:	d1c5      	bne.n	8014ef8 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 8014f6c:	9b04      	ldr	r3, [sp, #16]
 8014f6e:	1b9e      	subs	r6, r3, r6
 8014f70:	6903      	ldr	r3, [r0, #16]
 8014f72:	889a      	ldrh	r2, [r3, #4]
 8014f74:	4432      	add	r2, r6
 8014f76:	809a      	strh	r2, [r3, #4]
 8014f78:	9a02      	ldr	r2, [sp, #8]
 8014f7a:	f102 0c20 	add.w	ip, r2, #32
 8014f7e:	9a01      	ldr	r2, [sp, #4]
 8014f80:	ebac 0c02 	sub.w	ip, ip, r2
 8014f84:	88da      	ldrh	r2, [r3, #6]
 8014f86:	fb06 260c 	mla	r6, r6, ip, r2
 8014f8a:	80de      	strh	r6, [r3, #6]
 8014f8c:	f7ff bba9 	b.w	80146e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

08014f90 <_ZN8touchgfx7Outline6lineToEii>:
 8014f90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014f92:	079b      	lsls	r3, r3, #30
 8014f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014f96:	460e      	mov	r6, r1
 8014f98:	4615      	mov	r5, r2
 8014f9a:	d511      	bpl.n	8014fc0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8014f9c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8014fa0:	ea86 0701 	eor.w	r7, r6, r1
 8014fa4:	ea85 0302 	eor.w	r3, r5, r2
 8014fa8:	433b      	orrs	r3, r7
 8014faa:	d009      	beq.n	8014fc0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8014fac:	4633      	mov	r3, r6
 8014fae:	9500      	str	r5, [sp, #0]
 8014fb0:	f7ff fb3e 	bl	8014630 <_ZN8touchgfx7Outline10renderLineEiiii>
 8014fb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014fb6:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8014fba:	f043 0301 	orr.w	r3, r3, #1
 8014fbe:	6243      	str	r3, [r0, #36]	; 0x24
 8014fc0:	b003      	add	sp, #12
 8014fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014fc4 <_ZN8touchgfx7Outline6moveToEii>:
 8014fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fc6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014fc8:	4615      	mov	r5, r2
 8014fca:	079a      	lsls	r2, r3, #30
 8014fcc:	4604      	mov	r4, r0
 8014fce:	460e      	mov	r6, r1
 8014fd0:	d401      	bmi.n	8014fd6 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8014fd2:	f7ff faf9 	bl	80145c8 <_ZN8touchgfx7Outline5resetEv>
 8014fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fd8:	07db      	lsls	r3, r3, #31
 8014fda:	d504      	bpl.n	8014fe6 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8014fdc:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	f7ff ffd5 	bl	8014f90 <_ZN8touchgfx7Outline6lineToEii>
 8014fe6:	6923      	ldr	r3, [r4, #16]
 8014fe8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014fec:	1170      	asrs	r0, r6, #5
 8014fee:	4290      	cmp	r0, r2
 8014ff0:	ea4f 1165 	mov.w	r1, r5, asr #5
 8014ff4:	d103      	bne.n	8014ffe <_ZN8touchgfx7Outline6moveToEii+0x3a>
 8014ff6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014ffa:	4291      	cmp	r1, r2
 8014ffc:	d01a      	beq.n	8015034 <_ZN8touchgfx7Outline6moveToEii+0x70>
 8014ffe:	88df      	ldrh	r7, [r3, #6]
 8015000:	889a      	ldrh	r2, [r3, #4]
 8015002:	433a      	orrs	r2, r7
 8015004:	d010      	beq.n	8015028 <_ZN8touchgfx7Outline6moveToEii+0x64>
 8015006:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801500a:	2a00      	cmp	r2, #0
 801500c:	db0c      	blt.n	8015028 <_ZN8touchgfx7Outline6moveToEii+0x64>
 801500e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8015010:	42ba      	cmp	r2, r7
 8015012:	da09      	bge.n	8015028 <_ZN8touchgfx7Outline6moveToEii+0x64>
 8015014:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8015018:	42ba      	cmp	r2, r7
 801501a:	bf38      	it	cc
 801501c:	3308      	addcc	r3, #8
 801501e:	f102 0201 	add.w	r2, r2, #1
 8015022:	bf38      	it	cc
 8015024:	6123      	strcc	r3, [r4, #16]
 8015026:	60a2      	str	r2, [r4, #8]
 8015028:	6923      	ldr	r3, [r4, #16]
 801502a:	2200      	movs	r2, #0
 801502c:	8018      	strh	r0, [r3, #0]
 801502e:	8059      	strh	r1, [r3, #2]
 8015030:	809a      	strh	r2, [r3, #4]
 8015032:	80da      	strh	r2, [r3, #6]
 8015034:	6166      	str	r6, [r4, #20]
 8015036:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801503a:	6225      	str	r5, [r4, #32]
 801503c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801503e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801503e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015042:	b0d0      	sub	sp, #320	; 0x140
 8015044:	466c      	mov	r4, sp
 8015046:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801504a:	4627      	mov	r7, r4
 801504c:	1a0d      	subs	r5, r1, r0
 801504e:	2d48      	cmp	r5, #72	; 0x48
 8015050:	f100 0308 	add.w	r3, r0, #8
 8015054:	f340 80d5 	ble.w	8015202 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8015058:	112d      	asrs	r5, r5, #4
 801505a:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801505e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015062:	6816      	ldr	r6, [r2, #0]
 8015064:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8015068:	6006      	str	r6, [r0, #0]
 801506a:	6856      	ldr	r6, [r2, #4]
 801506c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8015070:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8015074:	6046      	str	r6, [r0, #4]
 8015076:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801507a:	f8a2 8002 	strh.w	r8, [r2, #2]
 801507e:	f8a2 e004 	strh.w	lr, [r2, #4]
 8015082:	f8a2 c006 	strh.w	ip, [r2, #6]
 8015086:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801508a:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 801508e:	4565      	cmp	r5, ip
 8015090:	f1a1 0208 	sub.w	r2, r1, #8
 8015094:	db06      	blt.n	80150a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8015096:	d119      	bne.n	80150cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8015098:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801509c:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80150a0:	42ae      	cmp	r6, r5
 80150a2:	dd13      	ble.n	80150cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80150a4:	460e      	mov	r6, r1
 80150a6:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80150aa:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80150ae:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80150b2:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80150b6:	601d      	str	r5, [r3, #0]
 80150b8:	6875      	ldr	r5, [r6, #4]
 80150ba:	605d      	str	r5, [r3, #4]
 80150bc:	f821 9c08 	strh.w	r9, [r1, #-8]
 80150c0:	f821 cc06 	strh.w	ip, [r1, #-6]
 80150c4:	f821 8c04 	strh.w	r8, [r1, #-4]
 80150c8:	f821 ec02 	strh.w	lr, [r1, #-2]
 80150cc:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80150d0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80150d4:	42ae      	cmp	r6, r5
 80150d6:	db06      	blt.n	80150e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 80150d8:	d116      	bne.n	8015108 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80150da:	f9b0 c000 	ldrsh.w	ip, [r0]
 80150de:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80150e2:	45ac      	cmp	ip, r5
 80150e4:	da10      	bge.n	8015108 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80150e6:	681d      	ldr	r5, [r3, #0]
 80150e8:	f9b0 8000 	ldrsh.w	r8, [r0]
 80150ec:	6005      	str	r5, [r0, #0]
 80150ee:	685d      	ldr	r5, [r3, #4]
 80150f0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80150f4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80150f8:	f8a0 8008 	strh.w	r8, [r0, #8]
 80150fc:	6045      	str	r5, [r0, #4]
 80150fe:	8146      	strh	r6, [r0, #10]
 8015100:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8015104:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015108:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801510c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8015110:	4565      	cmp	r5, ip
 8015112:	db06      	blt.n	8015122 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8015114:	d119      	bne.n	801514a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015116:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801511a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801511e:	42ae      	cmp	r6, r5
 8015120:	da13      	bge.n	801514a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015122:	460e      	mov	r6, r1
 8015124:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015128:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801512c:	6005      	str	r5, [r0, #0]
 801512e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8015132:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8015136:	6875      	ldr	r5, [r6, #4]
 8015138:	6045      	str	r5, [r0, #4]
 801513a:	f821 9c08 	strh.w	r9, [r1, #-8]
 801513e:	f821 cc06 	strh.w	ip, [r1, #-6]
 8015142:	f821 8c04 	strh.w	r8, [r1, #-4]
 8015146:	f821 ec02 	strh.w	lr, [r1, #-2]
 801514a:	3308      	adds	r3, #8
 801514c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8015150:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8015154:	45e6      	cmp	lr, ip
 8015156:	dbf8      	blt.n	801514a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015158:	d105      	bne.n	8015166 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801515a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801515e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015162:	42ae      	cmp	r6, r5
 8015164:	dbf1      	blt.n	801514a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015166:	4615      	mov	r5, r2
 8015168:	3a08      	subs	r2, #8
 801516a:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801516e:	45b4      	cmp	ip, r6
 8015170:	dbf9      	blt.n	8015166 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8015172:	d105      	bne.n	8015180 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8015174:	f9b0 8000 	ldrsh.w	r8, [r0]
 8015178:	f9b2 6000 	ldrsh.w	r6, [r2]
 801517c:	45b0      	cmp	r8, r6
 801517e:	dbf2      	blt.n	8015166 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8015180:	4293      	cmp	r3, r2
 8015182:	f1a5 0608 	sub.w	r6, r5, #8
 8015186:	d816      	bhi.n	80151b6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8015188:	f8d6 c000 	ldr.w	ip, [r6]
 801518c:	f9b3 a000 	ldrsh.w	sl, [r3]
 8015190:	f8c3 c000 	str.w	ip, [r3]
 8015194:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8015198:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801519c:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80151a0:	f8c3 c004 	str.w	ip, [r3, #4]
 80151a4:	f825 ac08 	strh.w	sl, [r5, #-8]
 80151a8:	f825 ec06 	strh.w	lr, [r5, #-6]
 80151ac:	f825 9c04 	strh.w	r9, [r5, #-4]
 80151b0:	f825 8c02 	strh.w	r8, [r5, #-2]
 80151b4:	e7c9      	b.n	801514a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80151b6:	f8d6 e000 	ldr.w	lr, [r6]
 80151ba:	f9b0 a000 	ldrsh.w	sl, [r0]
 80151be:	f8c0 e000 	str.w	lr, [r0]
 80151c2:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80151c6:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80151ca:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80151ce:	f8c0 e004 	str.w	lr, [r0, #4]
 80151d2:	f825 ac08 	strh.w	sl, [r5, #-8]
 80151d6:	f825 cc06 	strh.w	ip, [r5, #-6]
 80151da:	f825 9c04 	strh.w	r9, [r5, #-4]
 80151de:	f825 8c02 	strh.w	r8, [r5, #-2]
 80151e2:	1acd      	subs	r5, r1, r3
 80151e4:	1a16      	subs	r6, r2, r0
 80151e6:	10ed      	asrs	r5, r5, #3
 80151e8:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 80151ec:	bfb5      	itete	lt
 80151ee:	e9c4 0200 	strdlt	r0, r2, [r4]
 80151f2:	e9c4 3100 	strdge	r3, r1, [r4]
 80151f6:	460a      	movlt	r2, r1
 80151f8:	4603      	movge	r3, r0
 80151fa:	3408      	adds	r4, #8
 80151fc:	4618      	mov	r0, r3
 80151fe:	4611      	mov	r1, r2
 8015200:	e724      	b.n	801504c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8015202:	4299      	cmp	r1, r3
 8015204:	d928      	bls.n	8015258 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 8015206:	f1a3 0210 	sub.w	r2, r3, #16
 801520a:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801520e:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8015212:	45ac      	cmp	ip, r5
 8015214:	db06      	blt.n	8015224 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8015216:	d11d      	bne.n	8015254 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8015218:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801521c:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8015220:	42ae      	cmp	r6, r5
 8015222:	da17      	bge.n	8015254 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8015224:	4615      	mov	r5, r2
 8015226:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801522a:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801522e:	6116      	str	r6, [r2, #16]
 8015230:	686e      	ldr	r6, [r5, #4]
 8015232:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8015236:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 801523a:	f8a2 9008 	strh.w	r9, [r2, #8]
 801523e:	42a8      	cmp	r0, r5
 8015240:	6156      	str	r6, [r2, #20]
 8015242:	f8a2 c00a 	strh.w	ip, [r2, #10]
 8015246:	f8a2 800c 	strh.w	r8, [r2, #12]
 801524a:	f8a2 e00e 	strh.w	lr, [r2, #14]
 801524e:	f1a2 0208 	sub.w	r2, r2, #8
 8015252:	d1da      	bne.n	801520a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8015254:	3308      	adds	r3, #8
 8015256:	e7d4      	b.n	8015202 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8015258:	42bc      	cmp	r4, r7
 801525a:	d903      	bls.n	8015264 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 801525c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8015260:	3c08      	subs	r4, #8
 8015262:	e6f3      	b.n	801504c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8015264:	b050      	add	sp, #320	; 0x140
 8015266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801526a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801526a:	b510      	push	{r4, lr}
 801526c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801526e:	07da      	lsls	r2, r3, #31
 8015270:	4604      	mov	r4, r0
 8015272:	d507      	bpl.n	8015284 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8015274:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8015278:	f7ff fe8a 	bl	8014f90 <_ZN8touchgfx7Outline6lineToEii>
 801527c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801527e:	f023 0301 	bic.w	r3, r3, #1
 8015282:	6243      	str	r3, [r0, #36]	; 0x24
 8015284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015286:	079b      	lsls	r3, r3, #30
 8015288:	d521      	bpl.n	80152ce <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801528a:	6923      	ldr	r3, [r4, #16]
 801528c:	88d9      	ldrh	r1, [r3, #6]
 801528e:	889a      	ldrh	r2, [r3, #4]
 8015290:	430a      	orrs	r2, r1
 8015292:	d010      	beq.n	80152b6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015294:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015298:	2a00      	cmp	r2, #0
 801529a:	db0c      	blt.n	80152b6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801529c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801529e:	428a      	cmp	r2, r1
 80152a0:	da09      	bge.n	80152b6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80152a2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80152a6:	4291      	cmp	r1, r2
 80152a8:	bf88      	it	hi
 80152aa:	3308      	addhi	r3, #8
 80152ac:	f102 0201 	add.w	r2, r2, #1
 80152b0:	bf88      	it	hi
 80152b2:	6123      	strhi	r3, [r4, #16]
 80152b4:	60a2      	str	r2, [r4, #8]
 80152b6:	68a1      	ldr	r1, [r4, #8]
 80152b8:	b129      	cbz	r1, 80152c6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80152ba:	6863      	ldr	r3, [r4, #4]
 80152bc:	4299      	cmp	r1, r3
 80152be:	d802      	bhi.n	80152c6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80152c0:	68e0      	ldr	r0, [r4, #12]
 80152c2:	f7ff febc 	bl	801503e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80152c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152c8:	f023 0302 	bic.w	r3, r3, #2
 80152cc:	6263      	str	r3, [r4, #36]	; 0x24
 80152ce:	68e0      	ldr	r0, [r4, #12]
 80152d0:	bd10      	pop	{r4, pc}
	...

080152d4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80152d4:	4b02      	ldr	r3, [pc, #8]	; (80152e0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80152d6:	6018      	str	r0, [r3, #0]
 80152d8:	4b02      	ldr	r3, [pc, #8]	; (80152e4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80152da:	6019      	str	r1, [r3, #0]
 80152dc:	4770      	bx	lr
 80152de:	bf00      	nop
 80152e0:	20008810 	.word	0x20008810
 80152e4:	20008814 	.word	0x20008814

080152e8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80152e8:	4b01      	ldr	r3, [pc, #4]	; (80152f0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80152ea:	6818      	ldr	r0, [r3, #0]
 80152ec:	4770      	bx	lr
 80152ee:	bf00      	nop
 80152f0:	20008810 	.word	0x20008810

080152f4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80152f4:	4b01      	ldr	r3, [pc, #4]	; (80152fc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80152f6:	6818      	ldr	r0, [r3, #0]
 80152f8:	4770      	bx	lr
 80152fa:	bf00      	nop
 80152fc:	20008814 	.word	0x20008814

08015300 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8015300:	b510      	push	{r4, lr}
 8015302:	6803      	ldr	r3, [r0, #0]
 8015304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015306:	460c      	mov	r4, r1
 8015308:	4798      	blx	r3
 801530a:	1b03      	subs	r3, r0, r4
 801530c:	4258      	negs	r0, r3
 801530e:	4158      	adcs	r0, r3
 8015310:	bd10      	pop	{r4, pc}
	...

08015314 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8015314:	4b01      	ldr	r3, [pc, #4]	; (801531c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8015316:	6019      	str	r1, [r3, #0]
 8015318:	4770      	bx	lr
 801531a:	bf00      	nop
 801531c:	20008818 	.word	0x20008818

08015320 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015324:	4696      	mov	lr, r2
 8015326:	4605      	mov	r5, r0
 8015328:	4614      	mov	r4, r2
 801532a:	460e      	mov	r6, r1
 801532c:	461f      	mov	r7, r3
 801532e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015332:	b097      	sub	sp, #92	; 0x5c
 8015334:	f10d 0c1c 	add.w	ip, sp, #28
 8015338:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801533c:	f8de 3000 	ldr.w	r3, [lr]
 8015340:	f8cc 3000 	str.w	r3, [ip]
 8015344:	f104 0e14 	add.w	lr, r4, #20
 8015348:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801534c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015350:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015354:	f8de 3000 	ldr.w	r3, [lr]
 8015358:	f8cc 3000 	str.w	r3, [ip]
 801535c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8015360:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015364:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8015368:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801536c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8015370:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8015374:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8015378:	f8de 3000 	ldr.w	r3, [lr]
 801537c:	f8cc 3000 	str.w	r3, [ip]
 8015380:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015382:	682b      	ldr	r3, [r5, #0]
 8015384:	9201      	str	r2, [sp, #4]
 8015386:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801538a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801538c:	9200      	str	r2, [sp, #0]
 801538e:	f8cd 8008 	str.w	r8, [sp, #8]
 8015392:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8015396:	aa07      	add	r2, sp, #28
 8015398:	463b      	mov	r3, r7
 801539a:	4631      	mov	r1, r6
 801539c:	4628      	mov	r0, r5
 801539e:	47d8      	blx	fp
 80153a0:	46a6      	mov	lr, r4
 80153a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80153a6:	f10d 0c1c 	add.w	ip, sp, #28
 80153aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80153ae:	f8de 3000 	ldr.w	r3, [lr]
 80153b2:	f8cc 3000 	str.w	r3, [ip]
 80153b6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80153ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80153be:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80153c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80153c6:	343c      	adds	r4, #60	; 0x3c
 80153c8:	f8de 3000 	ldr.w	r3, [lr]
 80153cc:	f8cc 3000 	str.w	r3, [ip]
 80153d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80153d2:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80153d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80153da:	6823      	ldr	r3, [r4, #0]
 80153dc:	f8cc 3000 	str.w	r3, [ip]
 80153e0:	682b      	ldr	r3, [r5, #0]
 80153e2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80153e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80153e8:	9201      	str	r2, [sp, #4]
 80153ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80153ec:	9200      	str	r2, [sp, #0]
 80153ee:	f8cd 8008 	str.w	r8, [sp, #8]
 80153f2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80153f4:	aa07      	add	r2, sp, #28
 80153f6:	463b      	mov	r3, r7
 80153f8:	4631      	mov	r1, r6
 80153fa:	4628      	mov	r0, r5
 80153fc:	47a0      	blx	r4
 80153fe:	b017      	add	sp, #92	; 0x5c
 8015400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015404 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015404:	2000      	movs	r0, #0
 8015406:	4770      	bx	lr

08015408 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8015408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801540c:	b08d      	sub	sp, #52	; 0x34
 801540e:	4688      	mov	r8, r1
 8015410:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015412:	f8d3 c000 	ldr.w	ip, [r3]
 8015416:	680f      	ldr	r7, [r1, #0]
 8015418:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801541c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8015420:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8015424:	edd3 6a07 	vldr	s13, [r3, #28]
 8015428:	9918      	ldr	r1, [sp, #96]	; 0x60
 801542a:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801542e:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015432:	f9ba 1000 	ldrsh.w	r1, [sl]
 8015436:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801543a:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801543e:	eba7 070c 	sub.w	r7, r7, ip
 8015442:	42bc      	cmp	r4, r7
 8015444:	bfa8      	it	ge
 8015446:	463c      	movge	r4, r7
 8015448:	ee07 4a90 	vmov	s15, r4
 801544c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015450:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8015454:	ee25 4a04 	vmul.f32	s8, s10, s8
 8015458:	ee65 4a24 	vmul.f32	s9, s10, s9
 801545c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8015460:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015464:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015468:	eb09 0e0c 	add.w	lr, r9, ip
 801546c:	4571      	cmp	r1, lr
 801546e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8015472:	ee32 1a05 	vadd.f32	s2, s4, s10
 8015476:	ee36 0a84 	vadd.f32	s0, s13, s8
 801547a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801547e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015482:	f340 808d 	ble.w	80155a0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 8015486:	eba1 060e 	sub.w	r6, r1, lr
 801548a:	fb96 f5f4 	sdiv	r5, r6, r4
 801548e:	ee07 5a10 	vmov	s14, r5
 8015492:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015496:	2d00      	cmp	r5, #0
 8015498:	fb04 6615 	mls	r6, r4, r5, r6
 801549c:	eea7 0a04 	vfma.f32	s0, s14, s8
 80154a0:	eee7 0a24 	vfma.f32	s1, s14, s9
 80154a4:	eea7 1a05 	vfma.f32	s2, s14, s10
 80154a8:	dd13      	ble.n	80154d2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 80154aa:	ee70 6a44 	vsub.f32	s13, s0, s8
 80154ae:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80154b2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80154b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154ba:	bf18      	it	ne
 80154bc:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80154c0:	ee31 2a45 	vsub.f32	s4, s2, s10
 80154c4:	bf08      	it	eq
 80154c6:	eeb0 7a67 	vmoveq.f32	s14, s15
 80154ca:	ee61 1a87 	vmul.f32	s3, s3, s14
 80154ce:	ee22 2a07 	vmul.f32	s4, s4, s14
 80154d2:	fb05 f204 	mul.w	r2, r5, r4
 80154d6:	1abf      	subs	r7, r7, r2
 80154d8:	4494      	add	ip, r2
 80154da:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80154de:	4411      	add	r1, r2
 80154e0:	eb09 020c 	add.w	r2, r9, ip
 80154e4:	443a      	add	r2, r7
 80154e6:	b209      	sxth	r1, r1
 80154e8:	428a      	cmp	r2, r1
 80154ea:	bfc4      	itt	gt
 80154ec:	eba1 0209 	subgt.w	r2, r1, r9
 80154f0:	eba2 070c 	subgt.w	r7, r2, ip
 80154f4:	2f00      	cmp	r7, #0
 80154f6:	dd50      	ble.n	801559a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 80154f8:	fb97 f1f4 	sdiv	r1, r7, r4
 80154fc:	fb04 7211 	mls	r2, r4, r1, r7
 8015500:	b90a      	cbnz	r2, 8015506 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 8015502:	3901      	subs	r1, #1
 8015504:	4622      	mov	r2, r4
 8015506:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801550a:	6840      	ldr	r0, [r0, #4]
 801550c:	900b      	str	r0, [sp, #44]	; 0x2c
 801550e:	f8d0 a000 	ldr.w	sl, [r0]
 8015512:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015514:	9008      	str	r0, [sp, #32]
 8015516:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801551a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801551c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8015520:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8015524:	695b      	ldr	r3, [r3, #20]
 8015526:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015528:	445b      	add	r3, fp
 801552a:	eef0 6a42 	vmov.f32	s13, s4
 801552e:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015532:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015536:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801553a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801553e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015542:	9307      	str	r3, [sp, #28]
 8015544:	ee17 7a90 	vmov	r7, s15
 8015548:	ee73 7a42 	vsub.f32	s15, s6, s4
 801554c:	eeb0 7a61 	vmov.f32	s14, s3
 8015550:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015554:	ee16 3a90 	vmov	r3, s13
 8015558:	fb97 f7f4 	sdiv	r7, r7, r4
 801555c:	ee17 ca90 	vmov	ip, s15
 8015560:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8015564:	fb9c fcf4 	sdiv	ip, ip, r4
 8015568:	fb0c 3306 	mla	r3, ip, r6, r3
 801556c:	9302      	str	r3, [sp, #8]
 801556e:	ee17 3a10 	vmov	r3, s14
 8015572:	44b6      	add	lr, r6
 8015574:	fb04 e505 	mla	r5, r4, r5, lr
 8015578:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801557c:	fb07 3706 	mla	r7, r7, r6, r3
 8015580:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8015584:	e9cd 4700 	strd	r4, r7, [sp]
 8015588:	2900      	cmp	r1, #0
 801558a:	bfcc      	ite	gt
 801558c:	46a1      	movgt	r9, r4
 801558e:	4691      	movle	r9, r2
 8015590:	eba9 0306 	sub.w	r3, r9, r6
 8015594:	f8da 4008 	ldr.w	r4, [sl, #8]
 8015598:	47a0      	blx	r4
 801559a:	b00d      	add	sp, #52	; 0x34
 801559c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155a0:	2500      	movs	r5, #0
 80155a2:	462e      	mov	r6, r5
 80155a4:	e799      	b.n	80154da <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

080155a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80155a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155ac:	b0db      	sub	sp, #364	; 0x16c
 80155ae:	461d      	mov	r5, r3
 80155b0:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80155b4:	930a      	str	r3, [sp, #40]	; 0x28
 80155b6:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80155ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80155bc:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80155c0:	9310      	str	r3, [sp, #64]	; 0x40
 80155c2:	6803      	ldr	r3, [r0, #0]
 80155c4:	910f      	str	r1, [sp, #60]	; 0x3c
 80155c6:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80155c8:	9009      	str	r0, [sp, #36]	; 0x24
 80155ca:	4614      	mov	r4, r2
 80155cc:	4629      	mov	r1, r5
 80155ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80155d2:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80155d6:	47b8      	blx	r7
 80155d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155da:	6058      	str	r0, [r3, #4]
 80155dc:	2800      	cmp	r0, #0
 80155de:	f000 83a1 	beq.w	8015d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80155e2:	682b      	ldr	r3, [r5, #0]
 80155e4:	9314      	str	r3, [sp, #80]	; 0x50
 80155e6:	686b      	ldr	r3, [r5, #4]
 80155e8:	9315      	str	r3, [sp, #84]	; 0x54
 80155ea:	4bc4      	ldr	r3, [pc, #784]	; (80158fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80155ec:	ed94 7a02 	vldr	s14, [r4, #8]
 80155f0:	7819      	ldrb	r1, [r3, #0]
 80155f2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80155f6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80155fa:	2900      	cmp	r1, #0
 80155fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015600:	bf16      	itet	ne
 8015602:	4619      	movne	r1, r3
 8015604:	4611      	moveq	r1, r2
 8015606:	4613      	movne	r3, r2
 8015608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801560c:	9116      	str	r1, [sp, #88]	; 0x58
 801560e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8015612:	f240 8387 	bls.w	8015d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015616:	ed94 7a07 	vldr	s14, [r4, #28]
 801561a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801561e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015622:	f240 837f 	bls.w	8015d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015626:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801562a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801562e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015632:	f240 8377 	bls.w	8015d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015636:	6822      	ldr	r2, [r4, #0]
 8015638:	4bb1      	ldr	r3, [pc, #708]	; (8015900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801563a:	429a      	cmp	r2, r3
 801563c:	f2c0 8372 	blt.w	8015d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015640:	49b0      	ldr	r1, [pc, #704]	; (8015904 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8015642:	6963      	ldr	r3, [r4, #20]
 8015644:	428a      	cmp	r2, r1
 8015646:	f300 836d 	bgt.w	8015d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801564a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801564e:	48ae      	ldr	r0, [pc, #696]	; (8015908 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8015650:	33ff      	adds	r3, #255	; 0xff
 8015652:	4283      	cmp	r3, r0
 8015654:	f200 8366 	bhi.w	8015d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015658:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801565a:	4dac      	ldr	r5, [pc, #688]	; (801590c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801565c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015660:	33ff      	adds	r3, #255	; 0xff
 8015662:	42ab      	cmp	r3, r5
 8015664:	f200 835e 	bhi.w	8015d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015668:	6862      	ldr	r2, [r4, #4]
 801566a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801566e:	33ff      	adds	r3, #255	; 0xff
 8015670:	4283      	cmp	r3, r0
 8015672:	f200 8357 	bhi.w	8015d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015676:	69a1      	ldr	r1, [r4, #24]
 8015678:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801567c:	33ff      	adds	r3, #255	; 0xff
 801567e:	4283      	cmp	r3, r0
 8015680:	f200 8350 	bhi.w	8015d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015684:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015686:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801568a:	30ff      	adds	r0, #255	; 0xff
 801568c:	42a8      	cmp	r0, r5
 801568e:	f200 8349 	bhi.w	8015d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015692:	428a      	cmp	r2, r1
 8015694:	f280 8110 	bge.w	80158b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8015698:	429a      	cmp	r2, r3
 801569a:	f300 8119 	bgt.w	80158d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801569e:	4299      	cmp	r1, r3
 80156a0:	f280 811d 	bge.w	80158de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80156a4:	2502      	movs	r5, #2
 80156a6:	2701      	movs	r7, #1
 80156a8:	46a9      	mov	r9, r5
 80156aa:	46b8      	mov	r8, r7
 80156ac:	f04f 0a00 	mov.w	sl, #0
 80156b0:	4621      	mov	r1, r4
 80156b2:	a849      	add	r0, sp, #292	; 0x124
 80156b4:	f003 fcba 	bl	801902c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80156b8:	4622      	mov	r2, r4
 80156ba:	4653      	mov	r3, sl
 80156bc:	a949      	add	r1, sp, #292	; 0x124
 80156be:	f8cd 9000 	str.w	r9, [sp]
 80156c2:	a819      	add	r0, sp, #100	; 0x64
 80156c4:	f003 fde2 	bl	801928c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80156c8:	4622      	mov	r2, r4
 80156ca:	4653      	mov	r3, sl
 80156cc:	a949      	add	r1, sp, #292	; 0x124
 80156ce:	f8cd 8000 	str.w	r8, [sp]
 80156d2:	a829      	add	r0, sp, #164	; 0xa4
 80156d4:	f003 fdda 	bl	801928c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80156d8:	4643      	mov	r3, r8
 80156da:	4622      	mov	r2, r4
 80156dc:	a949      	add	r1, sp, #292	; 0x124
 80156de:	f8cd 9000 	str.w	r9, [sp]
 80156e2:	a839      	add	r0, sp, #228	; 0xe4
 80156e4:	f003 fdd2 	bl	801928c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80156e8:	42af      	cmp	r7, r5
 80156ea:	bfb5      	itete	lt
 80156ec:	2300      	movlt	r3, #0
 80156ee:	2301      	movge	r3, #1
 80156f0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80156f2:	930e      	strge	r3, [sp, #56]	; 0x38
 80156f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80156fa:	af12      	add	r7, sp, #72	; 0x48
 80156fc:	bfb9      	ittee	lt
 80156fe:	ad29      	addlt	r5, sp, #164	; 0xa4
 8015700:	ac19      	addlt	r4, sp, #100	; 0x64
 8015702:	ad19      	addge	r5, sp, #100	; 0x64
 8015704:	ac29      	addge	r4, sp, #164	; 0xa4
 8015706:	e887 0003 	stmia.w	r7, {r0, r1}
 801570a:	b928      	cbnz	r0, 8015718 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801570c:	4b80      	ldr	r3, [pc, #512]	; (8015910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801570e:	6818      	ldr	r0, [r3, #0]
 8015710:	6803      	ldr	r3, [r0, #0]
 8015712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015714:	4798      	blx	r3
 8015716:	6038      	str	r0, [r7, #0]
 8015718:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801571a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801571e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015722:	930c      	str	r3, [sp, #48]	; 0x30
 8015724:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015726:	6963      	ldr	r3, [r4, #20]
 8015728:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801572a:	440b      	add	r3, r1
 801572c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015730:	4408      	add	r0, r1
 8015732:	b200      	sxth	r0, r0
 8015734:	4283      	cmp	r3, r0
 8015736:	900d      	str	r0, [sp, #52]	; 0x34
 8015738:	f280 80dd 	bge.w	80158f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801573c:	428b      	cmp	r3, r1
 801573e:	da08      	bge.n	8015752 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015740:	2a00      	cmp	r2, #0
 8015742:	dd06      	ble.n	8015752 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015744:	1acb      	subs	r3, r1, r3
 8015746:	429a      	cmp	r2, r3
 8015748:	f2c0 80e4 	blt.w	8015914 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801574c:	2b00      	cmp	r3, #0
 801574e:	f300 80e2 	bgt.w	8015916 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8015752:	6967      	ldr	r7, [r4, #20]
 8015754:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015756:	443b      	add	r3, r7
 8015758:	461f      	mov	r7, r3
 801575a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801575c:	1bdf      	subs	r7, r3, r7
 801575e:	4297      	cmp	r7, r2
 8015760:	bfa8      	it	ge
 8015762:	4617      	movge	r7, r2
 8015764:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8015768:	2f00      	cmp	r7, #0
 801576a:	f340 8166 	ble.w	8015a3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801576e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015770:	6829      	ldr	r1, [r5, #0]
 8015772:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015776:	f9bb 3000 	ldrsh.w	r3, [fp]
 801577a:	6820      	ldr	r0, [r4, #0]
 801577c:	4411      	add	r1, r2
 801577e:	4299      	cmp	r1, r3
 8015780:	dd1a      	ble.n	80157b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015782:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015786:	440b      	add	r3, r1
 8015788:	4402      	add	r2, r0
 801578a:	b21b      	sxth	r3, r3
 801578c:	429a      	cmp	r2, r3
 801578e:	dc13      	bgt.n	80157b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015792:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	9206      	str	r2, [sp, #24]
 8015798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801579a:	9205      	str	r2, [sp, #20]
 801579c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801579e:	9500      	str	r5, [sp, #0]
 80157a0:	e9cd b203 	strd	fp, r2, [sp, #12]
 80157a4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80157a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80157a8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80157ac:	a912      	add	r1, sp, #72	; 0x48
 80157ae:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80157b2:	aa49      	add	r2, sp, #292	; 0x124
 80157b4:	4623      	mov	r3, r4
 80157b6:	47c8      	blx	r9
 80157b8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80157bc:	441a      	add	r2, r3
 80157be:	6963      	ldr	r3, [r4, #20]
 80157c0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80157c4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80157c8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80157cc:	68a1      	ldr	r1, [r4, #8]
 80157ce:	ed94 6a08 	vldr	s12, [r4, #32]
 80157d2:	6022      	str	r2, [r4, #0]
 80157d4:	3301      	adds	r3, #1
 80157d6:	6163      	str	r3, [r4, #20]
 80157d8:	69a3      	ldr	r3, [r4, #24]
 80157da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80157de:	3b01      	subs	r3, #1
 80157e0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80157e4:	61a3      	str	r3, [r4, #24]
 80157e6:	6923      	ldr	r3, [r4, #16]
 80157e8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80157ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80157f0:	edd4 6a07 	vldr	s13, [r4, #28]
 80157f4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80157f8:	440b      	add	r3, r1
 80157fa:	68e1      	ldr	r1, [r4, #12]
 80157fc:	6123      	str	r3, [r4, #16]
 80157fe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015802:	428b      	cmp	r3, r1
 8015804:	edc4 6a07 	vstr	s13, [r4, #28]
 8015808:	db15      	blt.n	8015836 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801580a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801580e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015812:	3201      	adds	r2, #1
 8015814:	edc4 6a07 	vstr	s13, [r4, #28]
 8015818:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801581c:	6022      	str	r2, [r4, #0]
 801581e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015822:	1a5b      	subs	r3, r3, r1
 8015824:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015828:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801582c:	6123      	str	r3, [r4, #16]
 801582e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015832:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015836:	e9d5 2300 	ldrd	r2, r3, [r5]
 801583a:	441a      	add	r2, r3
 801583c:	696b      	ldr	r3, [r5, #20]
 801583e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8015842:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8015846:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801584a:	68a9      	ldr	r1, [r5, #8]
 801584c:	ed95 6a08 	vldr	s12, [r5, #32]
 8015850:	602a      	str	r2, [r5, #0]
 8015852:	3301      	adds	r3, #1
 8015854:	616b      	str	r3, [r5, #20]
 8015856:	69ab      	ldr	r3, [r5, #24]
 8015858:	ee37 7a27 	vadd.f32	s14, s14, s15
 801585c:	3b01      	subs	r3, #1
 801585e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8015862:	61ab      	str	r3, [r5, #24]
 8015864:	692b      	ldr	r3, [r5, #16]
 8015866:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801586a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801586e:	edd5 6a07 	vldr	s13, [r5, #28]
 8015872:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015876:	440b      	add	r3, r1
 8015878:	68e9      	ldr	r1, [r5, #12]
 801587a:	612b      	str	r3, [r5, #16]
 801587c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015880:	428b      	cmp	r3, r1
 8015882:	edc5 6a07 	vstr	s13, [r5, #28]
 8015886:	db15      	blt.n	80158b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8015888:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801588c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015890:	3201      	adds	r2, #1
 8015892:	edc5 6a07 	vstr	s13, [r5, #28]
 8015896:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801589a:	602a      	str	r2, [r5, #0]
 801589c:	ee36 7a87 	vadd.f32	s14, s13, s14
 80158a0:	1a5b      	subs	r3, r3, r1
 80158a2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80158a6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80158aa:	612b      	str	r3, [r5, #16]
 80158ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80158b0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80158b4:	3f01      	subs	r7, #1
 80158b6:	e757      	b.n	8015768 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80158b8:	4299      	cmp	r1, r3
 80158ba:	dc13      	bgt.n	80158e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80158bc:	429a      	cmp	r2, r3
 80158be:	da14      	bge.n	80158ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80158c0:	2502      	movs	r5, #2
 80158c2:	2703      	movs	r7, #3
 80158c4:	46a9      	mov	r9, r5
 80158c6:	f04f 0800 	mov.w	r8, #0
 80158ca:	f04f 0a01 	mov.w	sl, #1
 80158ce:	e6ef      	b.n	80156b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80158d0:	2501      	movs	r5, #1
 80158d2:	2700      	movs	r7, #0
 80158d4:	46a9      	mov	r9, r5
 80158d6:	46b8      	mov	r8, r7
 80158d8:	f04f 0a02 	mov.w	sl, #2
 80158dc:	e6e8      	b.n	80156b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80158de:	2501      	movs	r5, #1
 80158e0:	2702      	movs	r7, #2
 80158e2:	e6e1      	b.n	80156a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80158e4:	2500      	movs	r5, #0
 80158e6:	2701      	movs	r7, #1
 80158e8:	e7f4      	b.n	80158d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80158ea:	2702      	movs	r7, #2
 80158ec:	2503      	movs	r5, #3
 80158ee:	f04f 0900 	mov.w	r9, #0
 80158f2:	46b8      	mov	r8, r7
 80158f4:	e7e9      	b.n	80158ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80158f6:	4613      	mov	r3, r2
 80158f8:	e728      	b.n	801574c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80158fa:	bf00      	nop
 80158fc:	20008800 	.word	0x20008800
 8015900:	fffd8f01 	.word	0xfffd8f01
 8015904:	00027100 	.word	0x00027100
 8015908:	0004e1ff 	.word	0x0004e1ff
 801590c:	0004e1fe 	.word	0x0004e1fe
 8015910:	20008808 	.word	0x20008808
 8015914:	4613      	mov	r3, r2
 8015916:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015918:	9111      	str	r1, [sp, #68]	; 0x44
 801591a:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801591e:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8015922:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8015924:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8015928:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801592c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8015930:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8015934:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8015938:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801593c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8015940:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8015944:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8015948:	469e      	mov	lr, r3
 801594a:	469c      	mov	ip, r3
 801594c:	f04f 0900 	mov.w	r9, #0
 8015950:	f1bc 0f00 	cmp.w	ip, #0
 8015954:	d147      	bne.n	80159e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8015956:	eb03 0c07 	add.w	ip, r3, r7
 801595a:	1ad7      	subs	r7, r2, r3
 801595c:	f1b9 0f00 	cmp.w	r9, #0
 8015960:	d009      	beq.n	8015976 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8015962:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8015966:	9029      	str	r0, [sp, #164]	; 0xa4
 8015968:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801596c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8015970:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8015974:	912d      	str	r1, [sp, #180]	; 0xb4
 8015976:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8015978:	9111      	str	r1, [sp, #68]	; 0x44
 801597a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801597e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8015982:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8015986:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801598a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801598e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8015992:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8015996:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801599a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801599e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80159a2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80159a6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80159aa:	f04f 0800 	mov.w	r8, #0
 80159ae:	f1be 0f00 	cmp.w	lr, #0
 80159b2:	d031      	beq.n	8015a18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80159b4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80159b6:	4431      	add	r1, r6
 80159b8:	4549      	cmp	r1, r9
 80159ba:	4450      	add	r0, sl
 80159bc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80159c0:	ee37 7a04 	vadd.f32	s14, s14, s8
 80159c4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80159c8:	db08      	blt.n	80159dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80159ca:	ee77 7a85 	vadd.f32	s15, s15, s10
 80159ce:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80159d2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80159d6:	3001      	adds	r0, #1
 80159d8:	eba1 0109 	sub.w	r1, r1, r9
 80159dc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80159e0:	f04f 0801 	mov.w	r8, #1
 80159e4:	e7e3      	b.n	80159ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80159e6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80159e8:	4431      	add	r1, r6
 80159ea:	4541      	cmp	r1, r8
 80159ec:	4450      	add	r0, sl
 80159ee:	ee37 7a24 	vadd.f32	s14, s14, s9
 80159f2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80159f6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80159fa:	db08      	blt.n	8015a0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80159fc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015a00:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015a04:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015a08:	3001      	adds	r0, #1
 8015a0a:	eba1 0108 	sub.w	r1, r1, r8
 8015a0e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015a12:	f04f 0901 	mov.w	r9, #1
 8015a16:	e79b      	b.n	8015950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015a18:	449c      	add	ip, r3
 8015a1a:	1aff      	subs	r7, r7, r3
 8015a1c:	f1b8 0f00 	cmp.w	r8, #0
 8015a20:	d009      	beq.n	8015a36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8015a22:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015a26:	9019      	str	r0, [sp, #100]	; 0x64
 8015a28:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015a2c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015a30:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015a34:	911d      	str	r1, [sp, #116]	; 0x74
 8015a36:	1ad2      	subs	r2, r2, r3
 8015a38:	e68b      	b.n	8015752 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a3c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	f000 80d1 	beq.w	8015be6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8015a44:	ad19      	add	r5, sp, #100	; 0x64
 8015a46:	ac39      	add	r4, sp, #228	; 0xe4
 8015a48:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015a4a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015a4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015a52:	930c      	str	r3, [sp, #48]	; 0x30
 8015a54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015a56:	6963      	ldr	r3, [r4, #20]
 8015a58:	440b      	add	r3, r1
 8015a5a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015a5e:	4408      	add	r0, r1
 8015a60:	b200      	sxth	r0, r0
 8015a62:	4283      	cmp	r3, r0
 8015a64:	900d      	str	r0, [sp, #52]	; 0x34
 8015a66:	f280 80c1 	bge.w	8015bec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8015a6a:	428b      	cmp	r3, r1
 8015a6c:	da08      	bge.n	8015a80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015a6e:	2a00      	cmp	r2, #0
 8015a70:	dd06      	ble.n	8015a80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015a72:	1acb      	subs	r3, r1, r3
 8015a74:	429a      	cmp	r2, r3
 8015a76:	f2c0 80bb 	blt.w	8015bf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	f300 80b9 	bgt.w	8015bf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8015a80:	6967      	ldr	r7, [r4, #20]
 8015a82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a84:	443b      	add	r3, r7
 8015a86:	461f      	mov	r7, r3
 8015a88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a8a:	1bdf      	subs	r7, r3, r7
 8015a8c:	4297      	cmp	r7, r2
 8015a8e:	bfa8      	it	ge
 8015a90:	4617      	movge	r7, r2
 8015a92:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8015a96:	2f00      	cmp	r7, #0
 8015a98:	f340 813c 	ble.w	8015d14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8015a9c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015a9e:	6829      	ldr	r1, [r5, #0]
 8015aa0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015aa4:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015aa8:	6820      	ldr	r0, [r4, #0]
 8015aaa:	4411      	add	r1, r2
 8015aac:	4299      	cmp	r1, r3
 8015aae:	dd1a      	ble.n	8015ae6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015ab0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015ab4:	440b      	add	r3, r1
 8015ab6:	4402      	add	r2, r0
 8015ab8:	b21b      	sxth	r3, r3
 8015aba:	429a      	cmp	r2, r3
 8015abc:	dc13      	bgt.n	8015ae6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ac0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	9206      	str	r2, [sp, #24]
 8015ac6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015ac8:	9205      	str	r2, [sp, #20]
 8015aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015acc:	9500      	str	r5, [sp, #0]
 8015ace:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015ad2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015ad6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015ada:	a912      	add	r1, sp, #72	; 0x48
 8015adc:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8015ae0:	aa49      	add	r2, sp, #292	; 0x124
 8015ae2:	4623      	mov	r3, r4
 8015ae4:	47c8      	blx	r9
 8015ae6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015aea:	441a      	add	r2, r3
 8015aec:	6963      	ldr	r3, [r4, #20]
 8015aee:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8015af2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8015af6:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8015afa:	68a1      	ldr	r1, [r4, #8]
 8015afc:	ed94 6a08 	vldr	s12, [r4, #32]
 8015b00:	6022      	str	r2, [r4, #0]
 8015b02:	3301      	adds	r3, #1
 8015b04:	6163      	str	r3, [r4, #20]
 8015b06:	69a3      	ldr	r3, [r4, #24]
 8015b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015b0c:	3b01      	subs	r3, #1
 8015b0e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8015b12:	61a3      	str	r3, [r4, #24]
 8015b14:	6923      	ldr	r3, [r4, #16]
 8015b16:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015b1e:	edd4 6a07 	vldr	s13, [r4, #28]
 8015b22:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015b26:	440b      	add	r3, r1
 8015b28:	68e1      	ldr	r1, [r4, #12]
 8015b2a:	6123      	str	r3, [r4, #16]
 8015b2c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015b30:	428b      	cmp	r3, r1
 8015b32:	edc4 6a07 	vstr	s13, [r4, #28]
 8015b36:	db15      	blt.n	8015b64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8015b38:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8015b3c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015b40:	3201      	adds	r2, #1
 8015b42:	edc4 6a07 	vstr	s13, [r4, #28]
 8015b46:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8015b4a:	6022      	str	r2, [r4, #0]
 8015b4c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015b50:	1a5b      	subs	r3, r3, r1
 8015b52:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015b56:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015b5a:	6123      	str	r3, [r4, #16]
 8015b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b60:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015b64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015b68:	441a      	add	r2, r3
 8015b6a:	696b      	ldr	r3, [r5, #20]
 8015b6c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8015b70:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8015b74:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8015b78:	68a9      	ldr	r1, [r5, #8]
 8015b7a:	ed95 6a08 	vldr	s12, [r5, #32]
 8015b7e:	602a      	str	r2, [r5, #0]
 8015b80:	3301      	adds	r3, #1
 8015b82:	616b      	str	r3, [r5, #20]
 8015b84:	69ab      	ldr	r3, [r5, #24]
 8015b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015b8a:	3b01      	subs	r3, #1
 8015b8c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8015b90:	61ab      	str	r3, [r5, #24]
 8015b92:	692b      	ldr	r3, [r5, #16]
 8015b94:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015b98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015b9c:	edd5 6a07 	vldr	s13, [r5, #28]
 8015ba0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015ba4:	440b      	add	r3, r1
 8015ba6:	68e9      	ldr	r1, [r5, #12]
 8015ba8:	612b      	str	r3, [r5, #16]
 8015baa:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015bae:	428b      	cmp	r3, r1
 8015bb0:	edc5 6a07 	vstr	s13, [r5, #28]
 8015bb4:	db15      	blt.n	8015be2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8015bb6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8015bba:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015bbe:	3201      	adds	r2, #1
 8015bc0:	edc5 6a07 	vstr	s13, [r5, #28]
 8015bc4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8015bc8:	602a      	str	r2, [r5, #0]
 8015bca:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015bce:	1a5b      	subs	r3, r3, r1
 8015bd0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015bd4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8015bd8:	612b      	str	r3, [r5, #16]
 8015bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015bde:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015be2:	3f01      	subs	r7, #1
 8015be4:	e757      	b.n	8015a96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8015be6:	ad39      	add	r5, sp, #228	; 0xe4
 8015be8:	ac19      	add	r4, sp, #100	; 0x64
 8015bea:	e72d      	b.n	8015a48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8015bec:	4613      	mov	r3, r2
 8015bee:	e744      	b.n	8015a7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8015bf0:	4613      	mov	r3, r2
 8015bf2:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8015bf6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8015bf8:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8015bfc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8015c00:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8015c04:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8015c08:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8015c0c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8015c10:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8015c14:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8015c16:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8015c1a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8015c1e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8015c22:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8015c26:	960e      	str	r6, [sp, #56]	; 0x38
 8015c28:	469e      	mov	lr, r3
 8015c2a:	461f      	mov	r7, r3
 8015c2c:	f04f 0900 	mov.w	r9, #0
 8015c30:	2f00      	cmp	r7, #0
 8015c32:	d146      	bne.n	8015cc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8015c34:	449c      	add	ip, r3
 8015c36:	1ad7      	subs	r7, r2, r3
 8015c38:	f1b9 0f00 	cmp.w	r9, #0
 8015c3c:	d009      	beq.n	8015c52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8015c3e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8015c42:	9039      	str	r0, [sp, #228]	; 0xe4
 8015c44:	913d      	str	r1, [sp, #244]	; 0xf4
 8015c46:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8015c4a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8015c4e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8015c52:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8015c54:	910e      	str	r1, [sp, #56]	; 0x38
 8015c56:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8015c5a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8015c5e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8015c62:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8015c66:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8015c6a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8015c6e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8015c72:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8015c76:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8015c7a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8015c7e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8015c82:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8015c86:	f04f 0800 	mov.w	r8, #0
 8015c8a:	f1be 0f00 	cmp.w	lr, #0
 8015c8e:	d030      	beq.n	8015cf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8015c90:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015c92:	4431      	add	r1, r6
 8015c94:	4549      	cmp	r1, r9
 8015c96:	4450      	add	r0, sl
 8015c98:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015c9c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015ca0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015ca4:	db08      	blt.n	8015cb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8015ca6:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015caa:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015cae:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015cb2:	3001      	adds	r0, #1
 8015cb4:	eba1 0109 	sub.w	r1, r1, r9
 8015cb8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015cbc:	f04f 0801 	mov.w	r8, #1
 8015cc0:	e7e3      	b.n	8015c8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8015cc2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015cc4:	4431      	add	r1, r6
 8015cc6:	4541      	cmp	r1, r8
 8015cc8:	4450      	add	r0, sl
 8015cca:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015cce:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015cd2:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015cd6:	db08      	blt.n	8015cea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8015cd8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015cdc:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015ce0:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015ce4:	3001      	adds	r0, #1
 8015ce6:	eba1 0108 	sub.w	r1, r1, r8
 8015cea:	3f01      	subs	r7, #1
 8015cec:	f04f 0901 	mov.w	r9, #1
 8015cf0:	e79e      	b.n	8015c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8015cf2:	449c      	add	ip, r3
 8015cf4:	1aff      	subs	r7, r7, r3
 8015cf6:	f1b8 0f00 	cmp.w	r8, #0
 8015cfa:	d009      	beq.n	8015d10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8015cfc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015d00:	9019      	str	r0, [sp, #100]	; 0x64
 8015d02:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015d06:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015d0a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015d0e:	911d      	str	r1, [sp, #116]	; 0x74
 8015d10:	1ad2      	subs	r2, r2, r3
 8015d12:	e6b5      	b.n	8015a80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	b923      	cbnz	r3, 8015d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015d1a:	4b04      	ldr	r3, [pc, #16]	; (8015d2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8015d1c:	6818      	ldr	r0, [r3, #0]
 8015d1e:	6803      	ldr	r3, [r0, #0]
 8015d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d22:	4798      	blx	r3
 8015d24:	b05b      	add	sp, #364	; 0x16c
 8015d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d2a:	bf00      	nop
 8015d2c:	20008808 	.word	0x20008808

08015d30 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8015d30:	b570      	push	{r4, r5, r6, lr}
 8015d32:	4604      	mov	r4, r0
 8015d34:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8015d38:	9804      	ldr	r0, [sp, #16]
 8015d3a:	6061      	str	r1, [r4, #4]
 8015d3c:	2500      	movs	r5, #0
 8015d3e:	8025      	strh	r5, [r4, #0]
 8015d40:	7223      	strb	r3, [r4, #8]
 8015d42:	7266      	strb	r6, [r4, #9]
 8015d44:	60e0      	str	r0, [r4, #12]
 8015d46:	8222      	strh	r2, [r4, #16]
 8015d48:	8265      	strh	r5, [r4, #18]
 8015d4a:	82a5      	strh	r5, [r4, #20]
 8015d4c:	82e5      	strh	r5, [r4, #22]
 8015d4e:	8325      	strh	r5, [r4, #24]
 8015d50:	8365      	strh	r5, [r4, #26]
 8015d52:	83a5      	strh	r5, [r4, #28]
 8015d54:	77a5      	strb	r5, [r4, #30]
 8015d56:	b32e      	cbz	r6, 8015da4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8015d58:	6803      	ldr	r3, [r0, #0]
 8015d5a:	695b      	ldr	r3, [r3, #20]
 8015d5c:	4798      	blx	r3
 8015d5e:	4606      	mov	r6, r0
 8015d60:	b300      	cbz	r0, 8015da4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8015d62:	68e0      	ldr	r0, [r4, #12]
 8015d64:	6803      	ldr	r3, [r0, #0]
 8015d66:	4631      	mov	r1, r6
 8015d68:	68db      	ldr	r3, [r3, #12]
 8015d6a:	4798      	blx	r3
 8015d6c:	4605      	mov	r5, r0
 8015d6e:	b1c8      	cbz	r0, 8015da4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8015d70:	7b43      	ldrb	r3, [r0, #13]
 8015d72:	7a82      	ldrb	r2, [r0, #10]
 8015d74:	005b      	lsls	r3, r3, #1
 8015d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015d7a:	4313      	orrs	r3, r2
 8015d7c:	83a3      	strh	r3, [r4, #28]
 8015d7e:	7a63      	ldrb	r3, [r4, #9]
 8015d80:	2b04      	cmp	r3, #4
 8015d82:	d10f      	bne.n	8015da4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8015d84:	68e0      	ldr	r0, [r4, #12]
 8015d86:	6803      	ldr	r3, [r0, #0]
 8015d88:	462a      	mov	r2, r5
 8015d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d8c:	4631      	mov	r1, r6
 8015d8e:	4798      	blx	r3
 8015d90:	7b6b      	ldrb	r3, [r5, #13]
 8015d92:	005b      	lsls	r3, r3, #1
 8015d94:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015d98:	7aab      	ldrb	r3, [r5, #10]
 8015d9a:	4313      	orrs	r3, r2
 8015d9c:	4418      	add	r0, r3
 8015d9e:	8ba3      	ldrh	r3, [r4, #28]
 8015da0:	4418      	add	r0, r3
 8015da2:	83a0      	strh	r0, [r4, #28]
 8015da4:	4620      	mov	r0, r4
 8015da6:	bd70      	pop	{r4, r5, r6, pc}

08015da8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8015da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dac:	2400      	movs	r4, #0
 8015dae:	b085      	sub	sp, #20
 8015db0:	4681      	mov	r9, r0
 8015db2:	4688      	mov	r8, r1
 8015db4:	4692      	mov	sl, r2
 8015db6:	469b      	mov	fp, r3
 8015db8:	4627      	mov	r7, r4
 8015dba:	4625      	mov	r5, r4
 8015dbc:	4626      	mov	r6, r4
 8015dbe:	4554      	cmp	r4, sl
 8015dc0:	da2a      	bge.n	8015e18 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	9303      	str	r3, [sp, #12]
 8015dc6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015dca:	429d      	cmp	r5, r3
 8015dcc:	d004      	beq.n	8015dd8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8015dce:	f242 030b 	movw	r3, #8203	; 0x200b
 8015dd2:	429d      	cmp	r5, r3
 8015dd4:	bf18      	it	ne
 8015dd6:	462f      	movne	r7, r5
 8015dd8:	ab03      	add	r3, sp, #12
 8015dda:	4642      	mov	r2, r8
 8015ddc:	4659      	mov	r1, fp
 8015dde:	4648      	mov	r0, r9
 8015de0:	f002 ff3a 	bl	8018c58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015de4:	4605      	mov	r5, r0
 8015de6:	b1b8      	cbz	r0, 8015e18 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015de8:	280a      	cmp	r0, #10
 8015dea:	d015      	beq.n	8015e18 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015dec:	9a03      	ldr	r2, [sp, #12]
 8015dee:	b18a      	cbz	r2, 8015e14 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8015df0:	7b50      	ldrb	r0, [r2, #13]
 8015df2:	7a93      	ldrb	r3, [r2, #10]
 8015df4:	8895      	ldrh	r5, [r2, #4]
 8015df6:	0040      	lsls	r0, r0, #1
 8015df8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015dfc:	4303      	orrs	r3, r0
 8015dfe:	9301      	str	r3, [sp, #4]
 8015e00:	f8d8 3000 	ldr.w	r3, [r8]
 8015e04:	4639      	mov	r1, r7
 8015e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e08:	4640      	mov	r0, r8
 8015e0a:	4798      	blx	r3
 8015e0c:	9b01      	ldr	r3, [sp, #4]
 8015e0e:	4418      	add	r0, r3
 8015e10:	4406      	add	r6, r0
 8015e12:	b2b6      	uxth	r6, r6
 8015e14:	3401      	adds	r4, #1
 8015e16:	e7d2      	b.n	8015dbe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8015e18:	4630      	mov	r0, r6
 8015e1a:	b005      	add	sp, #20
 8015e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015e20 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8015e20:	2a02      	cmp	r2, #2
 8015e22:	b530      	push	{r4, r5, lr}
 8015e24:	d011      	beq.n	8015e4a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8015e26:	2a03      	cmp	r2, #3
 8015e28:	d01c      	beq.n	8015e64 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8015e2a:	2a01      	cmp	r2, #1
 8015e2c:	d10c      	bne.n	8015e48 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015e2e:	888b      	ldrh	r3, [r1, #4]
 8015e30:	8801      	ldrh	r1, [r0, #0]
 8015e32:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8015e36:	8844      	ldrh	r4, [r0, #2]
 8015e38:	8004      	strh	r4, [r0, #0]
 8015e3a:	1a5b      	subs	r3, r3, r1
 8015e3c:	1a9b      	subs	r3, r3, r2
 8015e3e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015e42:	8043      	strh	r3, [r0, #2]
 8015e44:	8081      	strh	r1, [r0, #4]
 8015e46:	80c2      	strh	r2, [r0, #6]
 8015e48:	bd30      	pop	{r4, r5, pc}
 8015e4a:	88cb      	ldrh	r3, [r1, #6]
 8015e4c:	8842      	ldrh	r2, [r0, #2]
 8015e4e:	1a9b      	subs	r3, r3, r2
 8015e50:	88c2      	ldrh	r2, [r0, #6]
 8015e52:	1a9b      	subs	r3, r3, r2
 8015e54:	888a      	ldrh	r2, [r1, #4]
 8015e56:	8801      	ldrh	r1, [r0, #0]
 8015e58:	8043      	strh	r3, [r0, #2]
 8015e5a:	1a52      	subs	r2, r2, r1
 8015e5c:	8881      	ldrh	r1, [r0, #4]
 8015e5e:	1a52      	subs	r2, r2, r1
 8015e60:	8002      	strh	r2, [r0, #0]
 8015e62:	e7f1      	b.n	8015e48 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015e64:	88cb      	ldrh	r3, [r1, #6]
 8015e66:	8841      	ldrh	r1, [r0, #2]
 8015e68:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015e6c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015e70:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8015e74:	8045      	strh	r5, [r0, #2]
 8015e76:	1a5b      	subs	r3, r3, r1
 8015e78:	1a9b      	subs	r3, r3, r2
 8015e7a:	8003      	strh	r3, [r0, #0]
 8015e7c:	8082      	strh	r2, [r0, #4]
 8015e7e:	80c4      	strh	r4, [r0, #6]
 8015e80:	e7e2      	b.n	8015e48 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08015e82 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8015e82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e86:	b09f      	sub	sp, #124	; 0x7c
 8015e88:	9116      	str	r1, [sp, #88]	; 0x58
 8015e8a:	9317      	str	r3, [sp, #92]	; 0x5c
 8015e8c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8015e8e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015e90:	8809      	ldrh	r1, [r1, #0]
 8015e92:	889b      	ldrh	r3, [r3, #4]
 8015e94:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8015e98:	9212      	str	r2, [sp, #72]	; 0x48
 8015e9a:	440b      	add	r3, r1
 8015e9c:	b21b      	sxth	r3, r3
 8015e9e:	9310      	str	r3, [sp, #64]	; 0x40
 8015ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8015ea4:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8015ea8:	7a59      	ldrb	r1, [r3, #9]
 8015eaa:	7a1b      	ldrb	r3, [r3, #8]
 8015eac:	9011      	str	r0, [sp, #68]	; 0x44
 8015eae:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8015eb2:	9114      	str	r1, [sp, #80]	; 0x50
 8015eb4:	9315      	str	r3, [sp, #84]	; 0x54
 8015eb6:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 8015eba:	2a00      	cmp	r2, #0
 8015ebc:	d06a      	beq.n	8015f94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8015ebe:	f898 3010 	ldrb.w	r3, [r8, #16]
 8015ec2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8015ec4:	2b04      	cmp	r3, #4
 8015ec6:	bf14      	ite	ne
 8015ec8:	2301      	movne	r3, #1
 8015eca:	2302      	moveq	r3, #2
 8015ecc:	4413      	add	r3, r2
 8015ece:	f04f 0900 	mov.w	r9, #0
 8015ed2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ed4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8015ed8:	464c      	mov	r4, r9
 8015eda:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8015ede:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8015ee2:	4293      	cmp	r3, r2
 8015ee4:	f280 808f 	bge.w	8016006 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8015ee8:	2300      	movs	r3, #0
 8015eea:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8015eee:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8015ef2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015ef6:	429c      	cmp	r4, r3
 8015ef8:	d006      	beq.n	8015f08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8015efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015efc:	f242 020b 	movw	r2, #8203	; 0x200b
 8015f00:	4294      	cmp	r4, r2
 8015f02:	bf18      	it	ne
 8015f04:	4623      	movne	r3, r4
 8015f06:	930d      	str	r3, [sp, #52]	; 0x34
 8015f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f0a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8015f0c:	f8d8 2000 	ldr.w	r2, [r8]
 8015f10:	428b      	cmp	r3, r1
 8015f12:	db41      	blt.n	8015f98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8015f14:	6813      	ldr	r3, [r2, #0]
 8015f16:	4610      	mov	r0, r2
 8015f18:	695b      	ldr	r3, [r3, #20]
 8015f1a:	4798      	blx	r3
 8015f1c:	4604      	mov	r4, r0
 8015f1e:	f8d8 0000 	ldr.w	r0, [r8]
 8015f22:	6803      	ldr	r3, [r0, #0]
 8015f24:	aa1d      	add	r2, sp, #116	; 0x74
 8015f26:	689e      	ldr	r6, [r3, #8]
 8015f28:	4621      	mov	r1, r4
 8015f2a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8015f2e:	47b0      	blx	r6
 8015f30:	901c      	str	r0, [sp, #112]	; 0x70
 8015f32:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015f36:	429c      	cmp	r4, r3
 8015f38:	f000 80e9 	beq.w	801610e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 8015f3c:	f242 030b 	movw	r3, #8203	; 0x200b
 8015f40:	429c      	cmp	r4, r3
 8015f42:	f000 80e4 	beq.w	801610e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 8015f46:	2c00      	cmp	r4, #0
 8015f48:	f000 80f6 	beq.w	8016138 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 8015f4c:	2c0a      	cmp	r4, #10
 8015f4e:	d060      	beq.n	8016012 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8015f50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015f52:	b36a      	cbz	r2, 8015fb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8015f54:	8894      	ldrh	r4, [r2, #4]
 8015f56:	f1bb 0f00 	cmp.w	fp, #0
 8015f5a:	d03b      	beq.n	8015fd4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8015f5c:	f892 900d 	ldrb.w	r9, [r2, #13]
 8015f60:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8015f64:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8015f68:	f892 900a 	ldrb.w	r9, [r2, #10]
 8015f6c:	f1bb 0f01 	cmp.w	fp, #1
 8015f70:	ea49 0903 	orr.w	r9, r9, r3
 8015f74:	d134      	bne.n	8015fe0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8015f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f78:	eba5 0509 	sub.w	r5, r5, r9
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d14f      	bne.n	8016020 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8015f80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015f82:	eb09 0305 	add.w	r3, r9, r5
 8015f86:	4413      	add	r3, r2
 8015f88:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8015f8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f8e:	4293      	cmp	r3, r2
 8015f90:	da51      	bge.n	8016036 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8015f92:	e038      	b.n	8016006 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8015f94:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015f96:	e79a      	b.n	8015ece <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8015f98:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8015f9c:	9301      	str	r3, [sp, #4]
 8015f9e:	ab1d      	add	r3, sp, #116	; 0x74
 8015fa0:	9300      	str	r3, [sp, #0]
 8015fa2:	4659      	mov	r1, fp
 8015fa4:	ab1c      	add	r3, sp, #112	; 0x70
 8015fa6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8015fa8:	f002 fe9f 	bl	8018cea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8015fac:	4604      	mov	r4, r0
 8015fae:	e7c0      	b.n	8015f32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8015fb0:	f8d8 0000 	ldr.w	r0, [r8]
 8015fb4:	6803      	ldr	r3, [r0, #0]
 8015fb6:	691b      	ldr	r3, [r3, #16]
 8015fb8:	4798      	blx	r3
 8015fba:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015fbe:	4298      	cmp	r0, r3
 8015fc0:	f000 80a5 	beq.w	801610e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 8015fc4:	f242 030b 	movw	r3, #8203	; 0x200b
 8015fc8:	4298      	cmp	r0, r3
 8015fca:	f000 80a0 	beq.w	801610e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 8015fce:	f1bb 0f00 	cmp.w	fp, #0
 8015fd2:	d100      	bne.n	8015fd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8015fd4:	444d      	add	r5, r9
 8015fd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015fd8:	2a00      	cmp	r2, #0
 8015fda:	d1bf      	bne.n	8015f5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8015fdc:	4691      	mov	r9, r2
 8015fde:	e096      	b.n	801610e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 8015fe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	f000 80aa 	beq.w	801613c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 8015fe8:	f1bb 0f00 	cmp.w	fp, #0
 8015fec:	d118      	bne.n	8016020 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8015fee:	f8d8 0000 	ldr.w	r0, [r8]
 8015ff2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015ff4:	6803      	ldr	r3, [r0, #0]
 8015ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ff8:	4798      	blx	r3
 8015ffa:	4405      	add	r5, r0
 8015ffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ffe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016000:	1aeb      	subs	r3, r5, r3
 8016002:	4293      	cmp	r3, r2
 8016004:	dd17      	ble.n	8016036 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8016006:	2c00      	cmp	r4, #0
 8016008:	f000 8096 	beq.w	8016138 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801600c:	2c0a      	cmp	r4, #10
 801600e:	f040 8084 	bne.w	801611a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8016012:	240a      	movs	r4, #10
 8016014:	fab4 f084 	clz	r0, r4
 8016018:	0940      	lsrs	r0, r0, #5
 801601a:	b01f      	add	sp, #124	; 0x7c
 801601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016020:	f8d8 0000 	ldr.w	r0, [r8]
 8016024:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016026:	6803      	ldr	r3, [r0, #0]
 8016028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801602a:	4798      	blx	r3
 801602c:	f1bb 0f01 	cmp.w	fp, #1
 8016030:	eba5 0500 	sub.w	r5, r5, r0
 8016034:	d0a4      	beq.n	8015f80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8016036:	981c      	ldr	r0, [sp, #112]	; 0x70
 8016038:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801603a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801603e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016042:	7b43      	ldrb	r3, [r0, #13]
 8016044:	015b      	lsls	r3, r3, #5
 8016046:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801604a:	7983      	ldrb	r3, [r0, #6]
 801604c:	4429      	add	r1, r5
 801604e:	4313      	orrs	r3, r2
 8016050:	440b      	add	r3, r1
 8016052:	42b3      	cmp	r3, r6
 8016054:	db5b      	blt.n	801610e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 8016056:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016058:	4299      	cmp	r1, r3
 801605a:	da58      	bge.n	801610e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801605c:	f8d8 0000 	ldr.w	r0, [r8]
 8016060:	6803      	ldr	r3, [r0, #0]
 8016062:	42ae      	cmp	r6, r5
 8016064:	bfc8      	it	gt
 8016066:	1b76      	subgt	r6, r6, r5
 8016068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801606a:	bfcc      	ite	gt
 801606c:	b2b6      	uxthgt	r6, r6
 801606e:	2600      	movle	r6, #0
 8016070:	4798      	blx	r3
 8016072:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016074:	7b5a      	ldrb	r2, [r3, #13]
 8016076:	00d1      	lsls	r1, r2, #3
 8016078:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801607c:	7a19      	ldrb	r1, [r3, #8]
 801607e:	4339      	orrs	r1, r7
 8016080:	0657      	lsls	r7, r2, #25
 8016082:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8016084:	bf44      	itt	mi
 8016086:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801608a:	b209      	sxthmi	r1, r1
 801608c:	19c7      	adds	r7, r0, r7
 801608e:	1a7f      	subs	r7, r7, r1
 8016090:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8016092:	b2bf      	uxth	r7, r7
 8016094:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8016098:	fa0f fa87 	sxth.w	sl, r7
 801609c:	4551      	cmp	r1, sl
 801609e:	dd3a      	ble.n	8016116 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 80160a0:	0112      	lsls	r2, r2, #4
 80160a2:	79d8      	ldrb	r0, [r3, #7]
 80160a4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80160a8:	4302      	orrs	r2, r0
 80160aa:	4492      	add	sl, r2
 80160ac:	4551      	cmp	r1, sl
 80160ae:	dc2e      	bgt.n	801610e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 80160b0:	1bcf      	subs	r7, r1, r7
 80160b2:	b2bf      	uxth	r7, r7
 80160b4:	468a      	mov	sl, r1
 80160b6:	9319      	str	r3, [sp, #100]	; 0x64
 80160b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80160ba:	f8d8 0000 	ldr.w	r0, [r8]
 80160be:	681a      	ldr	r2, [r3, #0]
 80160c0:	6801      	ldr	r1, [r0, #0]
 80160c2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80160c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80160c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80160c8:	9218      	str	r2, [sp, #96]	; 0x60
 80160ca:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80160cc:	4788      	blx	r1
 80160ce:	f898 1006 	ldrb.w	r1, [r8, #6]
 80160d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80160d4:	f898 100e 	ldrb.w	r1, [r8, #14]
 80160d8:	910a      	str	r1, [sp, #40]	; 0x28
 80160da:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80160de:	9109      	str	r1, [sp, #36]	; 0x24
 80160e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80160e2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80160e6:	9305      	str	r3, [sp, #20]
 80160e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80160ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80160ec:	9206      	str	r2, [sp, #24]
 80160ee:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80160f2:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80160f6:	e9cd a601 	strd	sl, r6, [sp, #4]
 80160fa:	442e      	add	r6, r5
 80160fc:	b236      	sxth	r6, r6
 80160fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016100:	9600      	str	r6, [sp, #0]
 8016102:	681a      	ldr	r2, [r3, #0]
 8016104:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016106:	685b      	ldr	r3, [r3, #4]
 8016108:	9811      	ldr	r0, [sp, #68]	; 0x44
 801610a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801610c:	47b0      	blx	r6
 801610e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016110:	3301      	adds	r3, #1
 8016112:	930e      	str	r3, [sp, #56]	; 0x38
 8016114:	e6e3      	b.n	8015ede <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8016116:	2700      	movs	r7, #0
 8016118:	e7cd      	b.n	80160b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 801611a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801611c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801611e:	3501      	adds	r5, #1
 8016120:	429d      	cmp	r5, r3
 8016122:	f6bf af77 	bge.w	8016014 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8016126:	4659      	mov	r1, fp
 8016128:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801612a:	f7f8 fb59 	bl	800e7e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801612e:	4604      	mov	r4, r0
 8016130:	b110      	cbz	r0, 8016138 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 8016132:	280a      	cmp	r0, #10
 8016134:	d1f2      	bne.n	801611c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8016136:	e76c      	b.n	8016012 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8016138:	2400      	movs	r4, #0
 801613a:	e76b      	b.n	8016014 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801613c:	f1bb 0f00 	cmp.w	fp, #0
 8016140:	f43f af5c 	beq.w	8015ffc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8016144:	e777      	b.n	8016036 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08016146 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8016146:	b530      	push	{r4, r5, lr}
 8016148:	8a44      	ldrh	r4, [r0, #18]
 801614a:	8ac5      	ldrh	r5, [r0, #22]
 801614c:	82c3      	strh	r3, [r0, #22]
 801614e:	442c      	add	r4, r5
 8016150:	1ae4      	subs	r4, r4, r3
 8016152:	8244      	strh	r4, [r0, #18]
 8016154:	8b03      	ldrh	r3, [r0, #24]
 8016156:	8a84      	ldrh	r4, [r0, #20]
 8016158:	4422      	add	r2, r4
 801615a:	440c      	add	r4, r1
 801615c:	1a59      	subs	r1, r3, r1
 801615e:	8342      	strh	r2, [r0, #26]
 8016160:	8284      	strh	r4, [r0, #20]
 8016162:	8301      	strh	r1, [r0, #24]
 8016164:	bd30      	pop	{r4, r5, pc}

08016166 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8016166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801616a:	7a43      	ldrb	r3, [r0, #9]
 801616c:	1eda      	subs	r2, r3, #3
 801616e:	b087      	sub	sp, #28
 8016170:	4604      	mov	r4, r0
 8016172:	b2d2      	uxtb	r2, r2
 8016174:	460f      	mov	r7, r1
 8016176:	2900      	cmp	r1, #0
 8016178:	d036      	beq.n	80161e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801617a:	2a01      	cmp	r2, #1
 801617c:	d932      	bls.n	80161e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801617e:	1e58      	subs	r0, r3, #1
 8016180:	f1d0 0b00 	rsbs	fp, r0, #0
 8016184:	eb4b 0b00 	adc.w	fp, fp, r0
 8016188:	1e99      	subs	r1, r3, #2
 801618a:	424b      	negs	r3, r1
 801618c:	414b      	adcs	r3, r1
 801618e:	9303      	str	r3, [sp, #12]
 8016190:	2300      	movs	r3, #0
 8016192:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8016196:	2500      	movs	r5, #0
 8016198:	8265      	strh	r5, [r4, #18]
 801619a:	82a5      	strh	r5, [r4, #20]
 801619c:	46a9      	mov	r9, r5
 801619e:	f242 0a0b 	movw	sl, #8203	; 0x200b
 80161a2:	2300      	movs	r3, #0
 80161a4:	9305      	str	r3, [sp, #20]
 80161a6:	8823      	ldrh	r3, [r4, #0]
 80161a8:	2b20      	cmp	r3, #32
 80161aa:	d02b      	beq.n	8016204 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 80161ac:	eba3 020a 	sub.w	r2, r3, sl
 80161b0:	4256      	negs	r6, r2
 80161b2:	4156      	adcs	r6, r2
 80161b4:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80161b8:	4293      	cmp	r3, r2
 80161ba:	d004      	beq.n	80161c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80161bc:	4553      	cmp	r3, sl
 80161be:	bf16      	itet	ne
 80161c0:	4699      	movne	r9, r3
 80161c2:	2601      	moveq	r6, #1
 80161c4:	2600      	movne	r6, #0
 80161c6:	ab05      	add	r3, sp, #20
 80161c8:	68e2      	ldr	r2, [r4, #12]
 80161ca:	7a21      	ldrb	r1, [r4, #8]
 80161cc:	6860      	ldr	r0, [r4, #4]
 80161ce:	f002 fd43 	bl	8018c58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80161d2:	8020      	strh	r0, [r4, #0]
 80161d4:	b9c8      	cbnz	r0, 801620a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80161d6:	8b22      	ldrh	r2, [r4, #24]
 80161d8:	2300      	movs	r3, #0
 80161da:	4611      	mov	r1, r2
 80161dc:	4620      	mov	r0, r4
 80161de:	f7ff ffb2 	bl	8016146 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80161e2:	e066      	b.n	80162b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80161e4:	468b      	mov	fp, r1
 80161e6:	e7cf      	b.n	8016188 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80161e8:	3b01      	subs	r3, #1
 80161ea:	2a01      	cmp	r2, #1
 80161ec:	bf8c      	ite	hi
 80161ee:	2200      	movhi	r2, #0
 80161f0:	2201      	movls	r2, #1
 80161f2:	2b01      	cmp	r3, #1
 80161f4:	bf8c      	ite	hi
 80161f6:	2300      	movhi	r3, #0
 80161f8:	2301      	movls	r3, #1
 80161fa:	9202      	str	r2, [sp, #8]
 80161fc:	9301      	str	r3, [sp, #4]
 80161fe:	9103      	str	r1, [sp, #12]
 8016200:	468b      	mov	fp, r1
 8016202:	e7c8      	b.n	8016196 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8016204:	4699      	mov	r9, r3
 8016206:	2601      	movs	r6, #1
 8016208:	e7dd      	b.n	80161c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801620a:	8ae3      	ldrh	r3, [r4, #22]
 801620c:	280a      	cmp	r0, #10
 801620e:	f103 0301 	add.w	r3, r3, #1
 8016212:	82e3      	strh	r3, [r4, #22]
 8016214:	d0df      	beq.n	80161d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8016216:	9a05      	ldr	r2, [sp, #20]
 8016218:	bb42      	cbnz	r2, 801626c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801621a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801621e:	4298      	cmp	r0, r3
 8016220:	d001      	beq.n	8016226 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8016222:	4550      	cmp	r0, sl
 8016224:	d1bd      	bne.n	80161a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016226:	8823      	ldrh	r3, [r4, #0]
 8016228:	8b21      	ldrh	r1, [r4, #24]
 801622a:	2b20      	cmp	r3, #32
 801622c:	d001      	beq.n	8016232 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801622e:	4553      	cmp	r3, sl
 8016230:	d131      	bne.n	8016296 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8016232:	2e00      	cmp	r6, #0
 8016234:	bf0a      	itet	eq
 8016236:	460d      	moveq	r5, r1
 8016238:	4630      	movne	r0, r6
 801623a:	2001      	moveq	r0, #1
 801623c:	440a      	add	r2, r1
 801623e:	8aa3      	ldrh	r3, [r4, #20]
 8016240:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8016244:	b292      	uxth	r2, r2
 8016246:	8322      	strh	r2, [r4, #24]
 8016248:	4413      	add	r3, r2
 801624a:	2f00      	cmp	r7, #0
 801624c:	d03a      	beq.n	80162c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801624e:	f1bb 0f00 	cmp.w	fp, #0
 8016252:	d102      	bne.n	801625a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8016254:	9903      	ldr	r1, [sp, #12]
 8016256:	b301      	cbz	r1, 801629a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8016258:	b1f8      	cbz	r0, 801629a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801625a:	8ba1      	ldrh	r1, [r4, #28]
 801625c:	4419      	add	r1, r3
 801625e:	458c      	cmp	ip, r1
 8016260:	da2a      	bge.n	80162b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8016262:	8a61      	ldrh	r1, [r4, #18]
 8016264:	b341      	cbz	r1, 80162b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8016266:	4563      	cmp	r3, ip
 8016268:	dd9b      	ble.n	80161a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801626a:	e01c      	b.n	80162a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801626c:	8893      	ldrh	r3, [r2, #4]
 801626e:	8023      	strh	r3, [r4, #0]
 8016270:	f892 800d 	ldrb.w	r8, [r2, #13]
 8016274:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8016278:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801627c:	f892 800a 	ldrb.w	r8, [r2, #10]
 8016280:	ea48 0800 	orr.w	r8, r8, r0
 8016284:	68e0      	ldr	r0, [r4, #12]
 8016286:	6803      	ldr	r3, [r0, #0]
 8016288:	4649      	mov	r1, r9
 801628a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801628c:	4798      	blx	r3
 801628e:	eb08 0200 	add.w	r2, r8, r0
 8016292:	b292      	uxth	r2, r2
 8016294:	e7c7      	b.n	8016226 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8016296:	2000      	movs	r0, #0
 8016298:	e7d0      	b.n	801623c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801629a:	4563      	cmp	r3, ip
 801629c:	dd81      	ble.n	80161a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801629e:	8a63      	ldrh	r3, [r4, #18]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	f43f af7e 	beq.w	80161a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80162a6:	2301      	movs	r3, #1
 80162a8:	77a3      	strb	r3, [r4, #30]
 80162aa:	8ba2      	ldrh	r2, [r4, #28]
 80162ac:	8b63      	ldrh	r3, [r4, #26]
 80162ae:	4413      	add	r3, r2
 80162b0:	8363      	strh	r3, [r4, #26]
 80162b2:	b007      	add	sp, #28
 80162b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162b8:	2300      	movs	r3, #0
 80162ba:	4611      	mov	r1, r2
 80162bc:	4620      	mov	r0, r4
 80162be:	f7ff ff42 	bl	8016146 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80162c2:	e76e      	b.n	80161a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80162c4:	4563      	cmp	r3, ip
 80162c6:	dd14      	ble.n	80162f2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 80162c8:	9b02      	ldr	r3, [sp, #8]
 80162ca:	b113      	cbz	r3, 80162d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 80162cc:	2301      	movs	r3, #1
 80162ce:	460a      	mov	r2, r1
 80162d0:	e783      	b.n	80161da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 80162d2:	9b01      	ldr	r3, [sp, #4]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	f43f af64 	beq.w	80161a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80162da:	2800      	cmp	r0, #0
 80162dc:	f47f af61 	bne.w	80161a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80162e0:	b116      	cbz	r6, 80162e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 80162e2:	2301      	movs	r3, #1
 80162e4:	462a      	mov	r2, r5
 80162e6:	e779      	b.n	80161dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80162e8:	8a63      	ldrh	r3, [r4, #18]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	f43f af59 	beq.w	80161a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80162f0:	e7df      	b.n	80162b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80162f2:	2800      	cmp	r0, #0
 80162f4:	f47f af55 	bne.w	80161a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80162f8:	2e00      	cmp	r6, #0
 80162fa:	f43f af52 	beq.w	80161a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80162fe:	2301      	movs	r3, #1
 8016300:	462a      	mov	r2, r5
 8016302:	e7db      	b.n	80162bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08016304 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8016304:	b530      	push	{r4, r5, lr}
 8016306:	4605      	mov	r5, r0
 8016308:	b08b      	sub	sp, #44	; 0x2c
 801630a:	b191      	cbz	r1, 8016332 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801630c:	e9cd 3100 	strd	r3, r1, [sp]
 8016310:	4613      	mov	r3, r2
 8016312:	4601      	mov	r1, r0
 8016314:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8016318:	a802      	add	r0, sp, #8
 801631a:	f7ff fd09 	bl	8015d30 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801631e:	2401      	movs	r4, #1
 8016320:	2100      	movs	r1, #0
 8016322:	a802      	add	r0, sp, #8
 8016324:	f7ff ff1f 	bl	8016166 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016328:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801632c:	b163      	cbz	r3, 8016348 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801632e:	3401      	adds	r4, #1
 8016330:	e7f6      	b.n	8016320 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8016332:	f002 fd5f 	bl	8018df4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016336:	2401      	movs	r4, #1
 8016338:	280a      	cmp	r0, #10
 801633a:	4628      	mov	r0, r5
 801633c:	bf08      	it	eq
 801633e:	3401      	addeq	r4, #1
 8016340:	f002 fd58 	bl	8018df4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016344:	2800      	cmp	r0, #0
 8016346:	d1f7      	bne.n	8016338 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8016348:	b2a0      	uxth	r0, r4
 801634a:	b00b      	add	sp, #44	; 0x2c
 801634c:	bd30      	pop	{r4, r5, pc}

0801634e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801634e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016352:	b0e5      	sub	sp, #404	; 0x194
 8016354:	4689      	mov	r9, r1
 8016356:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801635a:	900a      	str	r0, [sp, #40]	; 0x28
 801635c:	461c      	mov	r4, r3
 801635e:	f1ba 0f00 	cmp.w	sl, #0
 8016362:	f000 80b4 	beq.w	80164ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	2b00      	cmp	r3, #0
 801636a:	f000 80b0 	beq.w	80164ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801636e:	7ba3      	ldrb	r3, [r4, #14]
 8016370:	2b00      	cmp	r3, #0
 8016372:	f000 80ac 	beq.w	80164ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8016376:	6810      	ldr	r0, [r2, #0]
 8016378:	6851      	ldr	r1, [r2, #4]
 801637a:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801637e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8016382:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8016386:	4643      	mov	r3, r8
 8016388:	c303      	stmia	r3!, {r0, r1}
 801638a:	2500      	movs	r5, #0
 801638c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8016390:	79a2      	ldrb	r2, [r4, #6]
 8016392:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8016396:	a90f      	add	r1, sp, #60	; 0x3c
 8016398:	4640      	mov	r0, r8
 801639a:	950f      	str	r5, [sp, #60]	; 0x3c
 801639c:	f7ff fd40 	bl	8015e20 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80163a0:	a90f      	add	r1, sp, #60	; 0x3c
 80163a2:	4608      	mov	r0, r1
 80163a4:	79a2      	ldrb	r2, [r4, #6]
 80163a6:	af19      	add	r7, sp, #100	; 0x64
 80163a8:	f7ff fd3a 	bl	8015e20 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80163ac:	4638      	mov	r0, r7
 80163ae:	f002 f8f5 	bl	801859c <_ZN8touchgfx12TextProviderC1Ev>
 80163b2:	6820      	ldr	r0, [r4, #0]
 80163b4:	6803      	ldr	r3, [r0, #0]
 80163b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80163b8:	4798      	blx	r3
 80163ba:	4606      	mov	r6, r0
 80163bc:	6820      	ldr	r0, [r4, #0]
 80163be:	6803      	ldr	r3, [r0, #0]
 80163c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80163c2:	4798      	blx	r3
 80163c4:	4633      	mov	r3, r6
 80163c6:	9000      	str	r0, [sp, #0]
 80163c8:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 80163ca:	4651      	mov	r1, sl
 80163cc:	4638      	mov	r0, r7
 80163ce:	f002 f940 	bl	8018652 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80163d2:	6820      	ldr	r0, [r4, #0]
 80163d4:	7923      	ldrb	r3, [r4, #4]
 80163d6:	9308      	str	r3, [sp, #32]
 80163d8:	6803      	ldr	r3, [r0, #0]
 80163da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163dc:	4798      	blx	r3
 80163de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163e2:	181e      	adds	r6, r3, r0
 80163e4:	42ae      	cmp	r6, r5
 80163e6:	dd06      	ble.n	80163f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 80163e8:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 80163ec:	4282      	cmp	r2, r0
 80163ee:	bfa4      	itt	ge
 80163f0:	189d      	addge	r5, r3, r2
 80163f2:	fb95 f5f6 	sdivge	r5, r5, r6
 80163f6:	a832      	add	r0, sp, #200	; 0xc8
 80163f8:	f002 f8d0 	bl	801859c <_ZN8touchgfx12TextProviderC1Ev>
 80163fc:	7c23      	ldrb	r3, [r4, #16]
 80163fe:	b17b      	cbz	r3, 8016420 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8016400:	6820      	ldr	r0, [r4, #0]
 8016402:	6803      	ldr	r3, [r0, #0]
 8016404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016406:	4798      	blx	r3
 8016408:	4683      	mov	fp, r0
 801640a:	6820      	ldr	r0, [r4, #0]
 801640c:	6803      	ldr	r3, [r0, #0]
 801640e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016410:	4798      	blx	r3
 8016412:	465b      	mov	r3, fp
 8016414:	9000      	str	r0, [sp, #0]
 8016416:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8016418:	4651      	mov	r1, sl
 801641a:	a832      	add	r0, sp, #200	; 0xc8
 801641c:	f002 f919 	bl	8018652 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016420:	7be1      	ldrb	r1, [r4, #15]
 8016422:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8016426:	7963      	ldrb	r3, [r4, #5]
 8016428:	1a52      	subs	r2, r2, r1
 801642a:	7c21      	ldrb	r1, [r4, #16]
 801642c:	9101      	str	r1, [sp, #4]
 801642e:	6821      	ldr	r1, [r4, #0]
 8016430:	9100      	str	r1, [sp, #0]
 8016432:	b292      	uxth	r2, r2
 8016434:	a932      	add	r1, sp, #200	; 0xc8
 8016436:	a811      	add	r0, sp, #68	; 0x44
 8016438:	f7ff fc7a 	bl	8015d30 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801643c:	7c23      	ldrb	r3, [r4, #16]
 801643e:	b9bb      	cbnz	r3, 8016470 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8016440:	fa1f fa86 	uxth.w	sl, r6
 8016444:	2d00      	cmp	r5, #0
 8016446:	dd45      	ble.n	80164d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8016448:	4638      	mov	r0, r7
 801644a:	f002 fcd3 	bl	8018df4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801644e:	2800      	cmp	r0, #0
 8016450:	d03d      	beq.n	80164ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8016452:	280a      	cmp	r0, #10
 8016454:	d1f6      	bne.n	8016444 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8016456:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801645a:	4453      	add	r3, sl
 801645c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016460:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8016464:	eba3 030a 	sub.w	r3, r3, sl
 8016468:	3d01      	subs	r5, #1
 801646a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801646e:	e7e9      	b.n	8016444 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8016470:	0073      	lsls	r3, r6, #1
 8016472:	9309      	str	r3, [sp, #36]	; 0x24
 8016474:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8016478:	fa1f fa86 	uxth.w	sl, r6
 801647c:	2d00      	cmp	r5, #0
 801647e:	dd29      	ble.n	80164d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8016480:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8016484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016486:	428b      	cmp	r3, r1
 8016488:	bfd4      	ite	le
 801648a:	2100      	movle	r1, #0
 801648c:	2101      	movgt	r1, #1
 801648e:	a811      	add	r0, sp, #68	; 0x44
 8016490:	f7ff fe69 	bl	8016166 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016494:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8016498:	3b01      	subs	r3, #1
 801649a:	b29b      	uxth	r3, r3
 801649c:	455b      	cmp	r3, fp
 801649e:	930b      	str	r3, [sp, #44]	; 0x2c
 80164a0:	d005      	beq.n	80164ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 80164a2:	7961      	ldrb	r1, [r4, #5]
 80164a4:	4638      	mov	r0, r7
 80164a6:	f7f8 f99b 	bl	800e7e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80164aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164ac:	e7f4      	b.n	8016498 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 80164ae:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80164b2:	4453      	add	r3, sl
 80164b4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80164b8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80164bc:	eba3 030a 	sub.w	r3, r3, sl
 80164c0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80164c4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80164c8:	3d01      	subs	r5, #1
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d1d6      	bne.n	801647c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 80164ce:	b065      	add	sp, #404	; 0x194
 80164d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164d4:	0075      	lsls	r5, r6, #1
 80164d6:	f04f 0a00 	mov.w	sl, #0
 80164da:	7c23      	ldrb	r3, [r4, #16]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d066      	beq.n	80165ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 80164e0:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80164e4:	428d      	cmp	r5, r1
 80164e6:	bfd4      	ite	le
 80164e8:	2100      	movle	r1, #0
 80164ea:	2101      	movgt	r1, #1
 80164ec:	a811      	add	r0, sp, #68	; 0x44
 80164ee:	f7ff fe3a 	bl	8016166 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80164f2:	9b08      	ldr	r3, [sp, #32]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d055      	beq.n	80165a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80164f8:	f894 b010 	ldrb.w	fp, [r4, #16]
 80164fc:	2264      	movs	r2, #100	; 0x64
 80164fe:	4639      	mov	r1, r7
 8016500:	a84b      	add	r0, sp, #300	; 0x12c
 8016502:	f010 fbc3 	bl	8026c8c <memcpy>
 8016506:	f1bb 0f00 	cmp.w	fp, #0
 801650a:	d058      	beq.n	80165be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801650c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8016510:	7922      	ldrb	r2, [r4, #4]
 8016512:	2a01      	cmp	r2, #1
 8016514:	d13c      	bne.n	8016590 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8016516:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801651a:	1ac0      	subs	r0, r0, r3
 801651c:	2302      	movs	r3, #2
 801651e:	fb90 f0f3 	sdiv	r0, r0, r3
 8016522:	b200      	sxth	r0, r0
 8016524:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016528:	4418      	add	r0, r3
 801652a:	7c23      	ldrb	r3, [r4, #16]
 801652c:	b200      	sxth	r0, r0
 801652e:	2b00      	cmp	r3, #0
 8016530:	d03a      	beq.n	80165a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8016532:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8016536:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801653a:	9000      	str	r0, [sp, #0]
 801653c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8016540:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8016544:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016546:	e9cd a703 	strd	sl, r7, [sp, #12]
 801654a:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801654e:	464a      	mov	r2, r9
 8016550:	2100      	movs	r1, #0
 8016552:	f7ff fc96 	bl	8015e82 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8016556:	2800      	cmp	r0, #0
 8016558:	d1b9      	bne.n	80164ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801655a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801655e:	b2b2      	uxth	r2, r6
 8016560:	4611      	mov	r1, r2
 8016562:	4413      	add	r3, r2
 8016564:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8016568:	1a52      	subs	r2, r2, r1
 801656a:	7c21      	ldrb	r1, [r4, #16]
 801656c:	b21b      	sxth	r3, r3
 801656e:	b212      	sxth	r2, r2
 8016570:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016574:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8016578:	b109      	cbz	r1, 801657e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801657a:	42b2      	cmp	r2, r6
 801657c:	dba7      	blt.n	80164ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801657e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8016582:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8016586:	440a      	add	r2, r1
 8016588:	b212      	sxth	r2, r2
 801658a:	4293      	cmp	r3, r2
 801658c:	dda5      	ble.n	80164da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 801658e:	e79e      	b.n	80164ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8016590:	2a02      	cmp	r2, #2
 8016592:	d105      	bne.n	80165a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8016594:	7be2      	ldrb	r2, [r4, #15]
 8016596:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801659a:	1a80      	subs	r0, r0, r2
 801659c:	1ac0      	subs	r0, r0, r3
 801659e:	e7c0      	b.n	8016522 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 80165a0:	2000      	movs	r0, #0
 80165a2:	e7bf      	b.n	8016524 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 80165a4:	7be0      	ldrb	r0, [r4, #15]
 80165a6:	e7bd      	b.n	8016524 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 80165a8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80165ac:	e7c3      	b.n	8016536 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 80165ae:	9b08      	ldr	r3, [sp, #32]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d0f7      	beq.n	80165a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80165b4:	2264      	movs	r2, #100	; 0x64
 80165b6:	4639      	mov	r1, r7
 80165b8:	a84b      	add	r0, sp, #300	; 0x12c
 80165ba:	f010 fb67 	bl	8026c8c <memcpy>
 80165be:	2300      	movs	r3, #0
 80165c0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80165c4:	6821      	ldr	r1, [r4, #0]
 80165c6:	a84b      	add	r0, sp, #300	; 0x12c
 80165c8:	f7ff fbee 	bl	8015da8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80165cc:	b203      	sxth	r3, r0
 80165ce:	e79f      	b.n	8016510 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

080165d0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80165d0:	2b03      	cmp	r3, #3
 80165d2:	d818      	bhi.n	8016606 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80165d4:	e8df f003 	tbb	[pc, r3]
 80165d8:	130d0602 	.word	0x130d0602
 80165dc:	f9b0 2000 	ldrsh.w	r2, [r0]
 80165e0:	1850      	adds	r0, r2, r1
 80165e2:	4770      	bx	lr
 80165e4:	8803      	ldrh	r3, [r0, #0]
 80165e6:	8880      	ldrh	r0, [r0, #4]
 80165e8:	4418      	add	r0, r3
 80165ea:	b200      	sxth	r0, r0
 80165ec:	1a80      	subs	r0, r0, r2
 80165ee:	3801      	subs	r0, #1
 80165f0:	4770      	bx	lr
 80165f2:	8803      	ldrh	r3, [r0, #0]
 80165f4:	8880      	ldrh	r0, [r0, #4]
 80165f6:	4418      	add	r0, r3
 80165f8:	b200      	sxth	r0, r0
 80165fa:	1a40      	subs	r0, r0, r1
 80165fc:	e7f7      	b.n	80165ee <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80165fe:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016602:	4410      	add	r0, r2
 8016604:	4770      	bx	lr
 8016606:	2000      	movs	r0, #0
 8016608:	4770      	bx	lr

0801660a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801660a:	2b03      	cmp	r3, #3
 801660c:	d817      	bhi.n	801663e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801660e:	e8df f003 	tbb	[pc, r3]
 8016612:	0602      	.short	0x0602
 8016614:	1009      	.short	0x1009
 8016616:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801661a:	1850      	adds	r0, r2, r1
 801661c:	4770      	bx	lr
 801661e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016622:	e7fa      	b.n	801661a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8016624:	8843      	ldrh	r3, [r0, #2]
 8016626:	88c0      	ldrh	r0, [r0, #6]
 8016628:	4418      	add	r0, r3
 801662a:	b200      	sxth	r0, r0
 801662c:	1a80      	subs	r0, r0, r2
 801662e:	3801      	subs	r0, #1
 8016630:	4770      	bx	lr
 8016632:	8843      	ldrh	r3, [r0, #2]
 8016634:	88c0      	ldrh	r0, [r0, #6]
 8016636:	4418      	add	r0, r3
 8016638:	b200      	sxth	r0, r0
 801663a:	1a40      	subs	r0, r0, r1
 801663c:	e7f7      	b.n	801662e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801663e:	2000      	movs	r0, #0
 8016640:	4770      	bx	lr
	...

08016644 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016644:	4b01      	ldr	r3, [pc, #4]	; (801664c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016646:	2200      	movs	r2, #0
 8016648:	601a      	str	r2, [r3, #0]
 801664a:	4770      	bx	lr
 801664c:	20008818 	.word	0x20008818

08016650 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8016650:	4603      	mov	r3, r0
 8016652:	b1c8      	cbz	r0, 8016688 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016654:	0c02      	lsrs	r2, r0, #16
 8016656:	0412      	lsls	r2, r2, #16
 8016658:	b9a2      	cbnz	r2, 8016684 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801665a:	0403      	lsls	r3, r0, #16
 801665c:	2010      	movs	r0, #16
 801665e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016662:	bf04      	itt	eq
 8016664:	021b      	lsleq	r3, r3, #8
 8016666:	3008      	addeq	r0, #8
 8016668:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801666c:	bf04      	itt	eq
 801666e:	011b      	lsleq	r3, r3, #4
 8016670:	3004      	addeq	r0, #4
 8016672:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016676:	bf04      	itt	eq
 8016678:	009b      	lsleq	r3, r3, #2
 801667a:	3002      	addeq	r0, #2
 801667c:	2b00      	cmp	r3, #0
 801667e:	db04      	blt.n	801668a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8016680:	3001      	adds	r0, #1
 8016682:	4770      	bx	lr
 8016684:	2000      	movs	r0, #0
 8016686:	e7ea      	b.n	801665e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8016688:	2020      	movs	r0, #32
 801668a:	4770      	bx	lr

0801668c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801668c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016690:	b087      	sub	sp, #28
 8016692:	4681      	mov	r9, r0
 8016694:	4698      	mov	r8, r3
 8016696:	4610      	mov	r0, r2
 8016698:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801669c:	460d      	mov	r5, r1
 801669e:	b981      	cbnz	r1, 80166c2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80166a0:	b14b      	cbz	r3, 80166b6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80166a2:	460b      	mov	r3, r1
 80166a4:	e9cd 4700 	strd	r4, r7, [sp]
 80166a8:	464a      	mov	r2, r9
 80166aa:	4641      	mov	r1, r8
 80166ac:	f7ff ffee 	bl	801668c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80166b0:	b007      	add	sp, #28
 80166b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166b6:	f04f 33ff 	mov.w	r3, #4294967295
 80166ba:	603b      	str	r3, [r7, #0]
 80166bc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80166c0:	e7f6      	b.n	80166b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80166c2:	fa32 fa01 	lsrs.w	sl, r2, r1
 80166c6:	d107      	bne.n	80166d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 80166c8:	fb09 f602 	mul.w	r6, r9, r2
 80166cc:	fbb6 f0f4 	udiv	r0, r6, r4
 80166d0:	fb04 6610 	mls	r6, r4, r0, r6
 80166d4:	603e      	str	r6, [r7, #0]
 80166d6:	e7eb      	b.n	80166b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80166d8:	2601      	movs	r6, #1
 80166da:	408e      	lsls	r6, r1
 80166dc:	3e01      	subs	r6, #1
 80166de:	4016      	ands	r6, r2
 80166e0:	fa09 fb01 	lsl.w	fp, r9, r1
 80166e4:	4630      	mov	r0, r6
 80166e6:	fbbb f3f4 	udiv	r3, fp, r4
 80166ea:	9302      	str	r3, [sp, #8]
 80166ec:	fb0a f303 	mul.w	r3, sl, r3
 80166f0:	9303      	str	r3, [sp, #12]
 80166f2:	f7ff ffad 	bl	8016650 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80166f6:	464a      	mov	r2, r9
 80166f8:	460b      	mov	r3, r1
 80166fa:	e9cd 4700 	strd	r4, r7, [sp]
 80166fe:	4601      	mov	r1, r0
 8016700:	4630      	mov	r0, r6
 8016702:	f7ff ffc3 	bl	801668c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016706:	9b02      	ldr	r3, [sp, #8]
 8016708:	fb04 bb13 	mls	fp, r4, r3, fp
 801670c:	4606      	mov	r6, r0
 801670e:	4658      	mov	r0, fp
 8016710:	eb05 0108 	add.w	r1, r5, r8
 8016714:	f7ff ff9c 	bl	8016650 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016718:	ab05      	add	r3, sp, #20
 801671a:	e9cd 4300 	strd	r4, r3, [sp]
 801671e:	465a      	mov	r2, fp
 8016720:	4603      	mov	r3, r0
 8016722:	4650      	mov	r0, sl
 8016724:	f7ff ffb2 	bl	801668c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016728:	6839      	ldr	r1, [r7, #0]
 801672a:	9a05      	ldr	r2, [sp, #20]
 801672c:	9b03      	ldr	r3, [sp, #12]
 801672e:	4411      	add	r1, r2
 8016730:	fbb1 f2f4 	udiv	r2, r1, r4
 8016734:	18d3      	adds	r3, r2, r3
 8016736:	441e      	add	r6, r3
 8016738:	fb04 1412 	mls	r4, r4, r2, r1
 801673c:	4430      	add	r0, r6
 801673e:	603c      	str	r4, [r7, #0]
 8016740:	e7b6      	b.n	80166b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08016742 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8016742:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016746:	b085      	sub	sp, #20
 8016748:	f1b0 0900 	subs.w	r9, r0, #0
 801674c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801674e:	461d      	mov	r5, r3
 8016750:	bfbf      	itttt	lt
 8016752:	6823      	ldrlt	r3, [r4, #0]
 8016754:	425b      	neglt	r3, r3
 8016756:	f1c9 0900 	rsblt	r9, r9, #0
 801675a:	6023      	strlt	r3, [r4, #0]
 801675c:	bfb4      	ite	lt
 801675e:	f04f 36ff 	movlt.w	r6, #4294967295
 8016762:	2601      	movge	r6, #1
 8016764:	2a00      	cmp	r2, #0
 8016766:	4617      	mov	r7, r2
 8016768:	da04      	bge.n	8016774 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801676a:	6823      	ldr	r3, [r4, #0]
 801676c:	425b      	negs	r3, r3
 801676e:	4257      	negs	r7, r2
 8016770:	4276      	negs	r6, r6
 8016772:	6023      	str	r3, [r4, #0]
 8016774:	2d00      	cmp	r5, #0
 8016776:	4638      	mov	r0, r7
 8016778:	bfba      	itte	lt
 801677a:	426d      	neglt	r5, r5
 801677c:	f04f 38ff 	movlt.w	r8, #4294967295
 8016780:	f04f 0801 	movge.w	r8, #1
 8016784:	f7ff ff64 	bl	8016650 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016788:	ab03      	add	r3, sp, #12
 801678a:	e9cd 5300 	strd	r5, r3, [sp]
 801678e:	463a      	mov	r2, r7
 8016790:	4603      	mov	r3, r0
 8016792:	4648      	mov	r0, r9
 8016794:	f7ff ff7a 	bl	801668c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016798:	6823      	ldr	r3, [r4, #0]
 801679a:	9a03      	ldr	r2, [sp, #12]
 801679c:	4546      	cmp	r6, r8
 801679e:	441a      	add	r2, r3
 80167a0:	fb92 f3f5 	sdiv	r3, r2, r5
 80167a4:	4418      	add	r0, r3
 80167a6:	bf18      	it	ne
 80167a8:	4240      	negne	r0, r0
 80167aa:	fb05 2313 	mls	r3, r5, r3, r2
 80167ae:	1c72      	adds	r2, r6, #1
 80167b0:	6023      	str	r3, [r4, #0]
 80167b2:	d105      	bne.n	80167c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	f1c3 0200 	rsb	r2, r3, #0
 80167ba:	db0b      	blt.n	80167d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80167bc:	6022      	str	r2, [r4, #0]
 80167be:	e006      	b.n	80167ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80167c0:	2e01      	cmp	r6, #1
 80167c2:	d104      	bne.n	80167ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	da02      	bge.n	80167ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80167c8:	442b      	add	r3, r5
 80167ca:	3801      	subs	r0, #1
 80167cc:	6023      	str	r3, [r4, #0]
 80167ce:	b005      	add	sp, #20
 80167d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167d4:	3801      	subs	r0, #1
 80167d6:	1b52      	subs	r2, r2, r5
 80167d8:	e7f0      	b.n	80167bc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080167dc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80167dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80167e0:	4c1c      	ldr	r4, [pc, #112]	; (8016854 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80167e2:	6807      	ldr	r7, [r0, #0]
 80167e4:	69a3      	ldr	r3, [r4, #24]
 80167e6:	4605      	mov	r5, r0
 80167e8:	b92b      	cbnz	r3, 80167f6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80167ea:	6840      	ldr	r0, [r0, #4]
 80167ec:	e9c5 7000 	strd	r7, r0, [r5]
 80167f0:	b004      	add	sp, #16
 80167f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167f6:	68a2      	ldr	r2, [r4, #8]
 80167f8:	6820      	ldr	r0, [r4, #0]
 80167fa:	ae04      	add	r6, sp, #16
 80167fc:	f04f 0802 	mov.w	r8, #2
 8016800:	fb93 f1f8 	sdiv	r1, r3, r8
 8016804:	440a      	add	r2, r1
 8016806:	f846 2d04 	str.w	r2, [r6, #-4]!
 801680a:	69e1      	ldr	r1, [r4, #28]
 801680c:	9600      	str	r6, [sp, #0]
 801680e:	463a      	mov	r2, r7
 8016810:	f7ff ff97 	bl	8016742 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016814:	69a3      	ldr	r3, [r4, #24]
 8016816:	686a      	ldr	r2, [r5, #4]
 8016818:	6a21      	ldr	r1, [r4, #32]
 801681a:	9600      	str	r6, [sp, #0]
 801681c:	4607      	mov	r7, r0
 801681e:	6860      	ldr	r0, [r4, #4]
 8016820:	f7ff ff8f 	bl	8016742 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016824:	6962      	ldr	r2, [r4, #20]
 8016826:	69a3      	ldr	r3, [r4, #24]
 8016828:	fb93 f8f8 	sdiv	r8, r3, r8
 801682c:	4442      	add	r2, r8
 801682e:	9203      	str	r2, [sp, #12]
 8016830:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016832:	682a      	ldr	r2, [r5, #0]
 8016834:	9600      	str	r6, [sp, #0]
 8016836:	4407      	add	r7, r0
 8016838:	68e0      	ldr	r0, [r4, #12]
 801683a:	f7ff ff82 	bl	8016742 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801683e:	9600      	str	r6, [sp, #0]
 8016840:	4680      	mov	r8, r0
 8016842:	69a3      	ldr	r3, [r4, #24]
 8016844:	686a      	ldr	r2, [r5, #4]
 8016846:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016848:	6920      	ldr	r0, [r4, #16]
 801684a:	f7ff ff7a 	bl	8016742 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801684e:	4440      	add	r0, r8
 8016850:	e7cc      	b.n	80167ec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8016852:	bf00      	nop
 8016854:	2000881c 	.word	0x2000881c

08016858 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016858:	4b07      	ldr	r3, [pc, #28]	; (8016878 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801685a:	781b      	ldrb	r3, [r3, #0]
 801685c:	2b01      	cmp	r3, #1
 801685e:	d109      	bne.n	8016874 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8016860:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016864:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016868:	8003      	strh	r3, [r0, #0]
 801686a:	4b04      	ldr	r3, [pc, #16]	; (801687c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801686c:	881b      	ldrh	r3, [r3, #0]
 801686e:	3b01      	subs	r3, #1
 8016870:	1a9b      	subs	r3, r3, r2
 8016872:	800b      	strh	r3, [r1, #0]
 8016874:	4770      	bx	lr
 8016876:	bf00      	nop
 8016878:	20008800 	.word	0x20008800
 801687c:	200087fc 	.word	0x200087fc

08016880 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8016880:	b510      	push	{r4, lr}
 8016882:	4b07      	ldr	r3, [pc, #28]	; (80168a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8016884:	781b      	ldrb	r3, [r3, #0]
 8016886:	2b01      	cmp	r3, #1
 8016888:	d108      	bne.n	801689c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801688a:	4b06      	ldr	r3, [pc, #24]	; (80168a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801688c:	880c      	ldrh	r4, [r1, #0]
 801688e:	881b      	ldrh	r3, [r3, #0]
 8016890:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016894:	3b01      	subs	r3, #1
 8016896:	1b1b      	subs	r3, r3, r4
 8016898:	8003      	strh	r3, [r0, #0]
 801689a:	800a      	strh	r2, [r1, #0]
 801689c:	bd10      	pop	{r4, pc}
 801689e:	bf00      	nop
 80168a0:	20008800 	.word	0x20008800
 80168a4:	200087fc 	.word	0x200087fc

080168a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80168a8:	b510      	push	{r4, lr}
 80168aa:	4b0a      	ldr	r3, [pc, #40]	; (80168d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80168ac:	781b      	ldrb	r3, [r3, #0]
 80168ae:	2b01      	cmp	r3, #1
 80168b0:	d10e      	bne.n	80168d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80168b2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80168b6:	8843      	ldrh	r3, [r0, #2]
 80168b8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80168bc:	8044      	strh	r4, [r0, #2]
 80168be:	18ca      	adds	r2, r1, r3
 80168c0:	4b05      	ldr	r3, [pc, #20]	; (80168d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80168c2:	881b      	ldrh	r3, [r3, #0]
 80168c4:	1a9b      	subs	r3, r3, r2
 80168c6:	8003      	strh	r3, [r0, #0]
 80168c8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80168cc:	80c3      	strh	r3, [r0, #6]
 80168ce:	8081      	strh	r1, [r0, #4]
 80168d0:	bd10      	pop	{r4, pc}
 80168d2:	bf00      	nop
 80168d4:	20008800 	.word	0x20008800
 80168d8:	200087fc 	.word	0x200087fc

080168dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80168dc:	4b08      	ldr	r3, [pc, #32]	; (8016900 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80168de:	781b      	ldrb	r3, [r3, #0]
 80168e0:	2b01      	cmp	r3, #1
 80168e2:	d10c      	bne.n	80168fe <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80168e4:	8803      	ldrh	r3, [r0, #0]
 80168e6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80168ea:	8842      	ldrh	r2, [r0, #2]
 80168ec:	8002      	strh	r2, [r0, #0]
 80168ee:	185a      	adds	r2, r3, r1
 80168f0:	4b04      	ldr	r3, [pc, #16]	; (8016904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80168f2:	881b      	ldrh	r3, [r3, #0]
 80168f4:	1a9b      	subs	r3, r3, r2
 80168f6:	8043      	strh	r3, [r0, #2]
 80168f8:	88c3      	ldrh	r3, [r0, #6]
 80168fa:	8083      	strh	r3, [r0, #4]
 80168fc:	80c1      	strh	r1, [r0, #6]
 80168fe:	4770      	bx	lr
 8016900:	20008800 	.word	0x20008800
 8016904:	200087fc 	.word	0x200087fc

08016908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016908:	b510      	push	{r4, lr}
 801690a:	4b07      	ldr	r3, [pc, #28]	; (8016928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801690c:	781b      	ldrb	r3, [r3, #0]
 801690e:	2b01      	cmp	r3, #1
 8016910:	d108      	bne.n	8016924 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8016912:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016916:	f9b0 4000 	ldrsh.w	r4, [r0]
 801691a:	8003      	strh	r3, [r0, #0]
 801691c:	8893      	ldrh	r3, [r2, #4]
 801691e:	3b01      	subs	r3, #1
 8016920:	1b1b      	subs	r3, r3, r4
 8016922:	800b      	strh	r3, [r1, #0]
 8016924:	bd10      	pop	{r4, pc}
 8016926:	bf00      	nop
 8016928:	20008800 	.word	0x20008800

0801692c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801692c:	b510      	push	{r4, lr}
 801692e:	4b0a      	ldr	r3, [pc, #40]	; (8016958 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016930:	781b      	ldrb	r3, [r3, #0]
 8016932:	2b01      	cmp	r3, #1
 8016934:	460a      	mov	r2, r1
 8016936:	d10d      	bne.n	8016954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016938:	8881      	ldrh	r1, [r0, #4]
 801693a:	8803      	ldrh	r3, [r0, #0]
 801693c:	440b      	add	r3, r1
 801693e:	4601      	mov	r1, r0
 8016940:	3b01      	subs	r3, #1
 8016942:	f821 3b02 	strh.w	r3, [r1], #2
 8016946:	f7ff ffdf 	bl	8016908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801694a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801694e:	88c2      	ldrh	r2, [r0, #6]
 8016950:	8082      	strh	r2, [r0, #4]
 8016952:	80c3      	strh	r3, [r0, #6]
 8016954:	bd10      	pop	{r4, pc}
 8016956:	bf00      	nop
 8016958:	20008800 	.word	0x20008800

0801695c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801695c:	b570      	push	{r4, r5, r6, lr}
 801695e:	4c0b      	ldr	r4, [pc, #44]	; (801698c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8016960:	2300      	movs	r3, #0
 8016962:	4605      	mov	r5, r0
 8016964:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8016968:	6820      	ldr	r0, [r4, #0]
 801696a:	460e      	mov	r6, r1
 801696c:	b110      	cbz	r0, 8016974 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 801696e:	6803      	ldr	r3, [r0, #0]
 8016970:	695b      	ldr	r3, [r3, #20]
 8016972:	4798      	blx	r3
 8016974:	6026      	str	r6, [r4, #0]
 8016976:	6833      	ldr	r3, [r6, #0]
 8016978:	4630      	mov	r0, r6
 801697a:	68db      	ldr	r3, [r3, #12]
 801697c:	4798      	blx	r3
 801697e:	682b      	ldr	r3, [r5, #0]
 8016980:	4628      	mov	r0, r5
 8016982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016988:	4718      	bx	r3
 801698a:	bf00      	nop
 801698c:	2000884c 	.word	0x2000884c

08016990 <_ZN8touchgfx11Application13requestRedrawEv>:
 8016990:	4b06      	ldr	r3, [pc, #24]	; (80169ac <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8016992:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016996:	4b06      	ldr	r3, [pc, #24]	; (80169b0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8016998:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801699c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169a0:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 80169a4:	2100      	movs	r1, #0
 80169a6:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 80169aa:	4770      	bx	lr
 80169ac:	200087fc 	.word	0x200087fc
 80169b0:	200087fe 	.word	0x200087fe

080169b4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80169b4:	4b03      	ldr	r3, [pc, #12]	; (80169c4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80169b6:	6818      	ldr	r0, [r3, #0]
 80169b8:	b110      	cbz	r0, 80169c0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80169ba:	6803      	ldr	r3, [r0, #0]
 80169bc:	699b      	ldr	r3, [r3, #24]
 80169be:	4718      	bx	r3
 80169c0:	4770      	bx	lr
 80169c2:	bf00      	nop
 80169c4:	2000884c 	.word	0x2000884c

080169c8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80169c8:	4770      	bx	lr
	...

080169cc <_ZN8touchgfx11Application4drawEv>:
 80169cc:	b507      	push	{r0, r1, r2, lr}
 80169ce:	4b09      	ldr	r3, [pc, #36]	; (80169f4 <_ZN8touchgfx11Application4drawEv+0x28>)
 80169d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80169d4:	4b08      	ldr	r3, [pc, #32]	; (80169f8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80169d6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80169da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169de:	f8ad 3006 	strh.w	r3, [sp, #6]
 80169e2:	6803      	ldr	r3, [r0, #0]
 80169e4:	2100      	movs	r1, #0
 80169e6:	9100      	str	r1, [sp, #0]
 80169e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169ea:	4669      	mov	r1, sp
 80169ec:	4798      	blx	r3
 80169ee:	b003      	add	sp, #12
 80169f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80169f4:	200087fc 	.word	0x200087fc
 80169f8:	200087fe 	.word	0x200087fe

080169fc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80169fc:	4b03      	ldr	r3, [pc, #12]	; (8016a0c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80169fe:	6818      	ldr	r0, [r3, #0]
 8016a00:	b110      	cbz	r0, 8016a08 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016a02:	6803      	ldr	r3, [r0, #0]
 8016a04:	69db      	ldr	r3, [r3, #28]
 8016a06:	4718      	bx	r3
 8016a08:	4770      	bx	lr
 8016a0a:	bf00      	nop
 8016a0c:	2000884c 	.word	0x2000884c

08016a10 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016a10:	4b03      	ldr	r3, [pc, #12]	; (8016a20 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016a12:	6818      	ldr	r0, [r3, #0]
 8016a14:	b110      	cbz	r0, 8016a1c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8016a16:	6803      	ldr	r3, [r0, #0]
 8016a18:	6a1b      	ldr	r3, [r3, #32]
 8016a1a:	4718      	bx	r3
 8016a1c:	4770      	bx	lr
 8016a1e:	bf00      	nop
 8016a20:	2000884c 	.word	0x2000884c

08016a24 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8016a24:	2300      	movs	r3, #0
 8016a26:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8016a2a:	4770      	bx	lr

08016a2c <_ZN8touchgfx11Application14handleKeyEventEh>:
 8016a2c:	4b03      	ldr	r3, [pc, #12]	; (8016a3c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8016a2e:	6818      	ldr	r0, [r3, #0]
 8016a30:	b110      	cbz	r0, 8016a38 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016a32:	6803      	ldr	r3, [r0, #0]
 8016a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a36:	4718      	bx	r3
 8016a38:	4770      	bx	lr
 8016a3a:	bf00      	nop
 8016a3c:	2000884c 	.word	0x2000884c

08016a40 <_ZN8touchgfx11Application15handleTickEventEv>:
 8016a40:	b570      	push	{r4, r5, r6, lr}
 8016a42:	4d32      	ldr	r5, [pc, #200]	; (8016b0c <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8016a44:	4604      	mov	r4, r0
 8016a46:	6828      	ldr	r0, [r5, #0]
 8016a48:	b140      	cbz	r0, 8016a5c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016a4a:	7a03      	ldrb	r3, [r0, #8]
 8016a4c:	b933      	cbnz	r3, 8016a5c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016a4e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8016a52:	6803      	ldr	r3, [r0, #0]
 8016a54:	689b      	ldr	r3, [r3, #8]
 8016a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a5a:	4718      	bx	r3
 8016a5c:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8016a60:	b97b      	cbnz	r3, 8016a82 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016a62:	b170      	cbz	r0, 8016a82 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016a64:	7a03      	ldrb	r3, [r0, #8]
 8016a66:	b163      	cbz	r3, 8016a82 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016a68:	4b29      	ldr	r3, [pc, #164]	; (8016b10 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8016a6a:	6818      	ldr	r0, [r3, #0]
 8016a6c:	b110      	cbz	r0, 8016a74 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8016a6e:	6803      	ldr	r3, [r0, #0]
 8016a70:	691b      	ldr	r3, [r3, #16]
 8016a72:	4798      	blx	r3
 8016a74:	6828      	ldr	r0, [r5, #0]
 8016a76:	6803      	ldr	r3, [r0, #0]
 8016a78:	68db      	ldr	r3, [r3, #12]
 8016a7a:	4798      	blx	r3
 8016a7c:	2301      	movs	r3, #1
 8016a7e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8016a82:	2500      	movs	r5, #0
 8016a84:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8016a88:	42a8      	cmp	r0, r5
 8016a8a:	dd0c      	ble.n	8016aa6 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8016a8c:	1963      	adds	r3, r4, r5
 8016a8e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8016a92:	b132      	cbz	r2, 8016aa2 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8016a94:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8016a98:	4413      	add	r3, r2
 8016a9a:	6858      	ldr	r0, [r3, #4]
 8016a9c:	6803      	ldr	r3, [r0, #0]
 8016a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016aa0:	4798      	blx	r3
 8016aa2:	3501      	adds	r5, #1
 8016aa4:	e7ee      	b.n	8016a84 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	461a      	mov	r2, r3
 8016aaa:	4298      	cmp	r0, r3
 8016aac:	d015      	beq.n	8016ada <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8016aae:	18e1      	adds	r1, r4, r3
 8016ab0:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8016ab4:	b16d      	cbz	r5, 8016ad2 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	d00a      	beq.n	8016ad0 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 8016aba:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8016abe:	4431      	add	r1, r6
 8016ac0:	684e      	ldr	r6, [r1, #4]
 8016ac2:	b291      	uxth	r1, r2
 8016ac4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8016ac8:	604e      	str	r6, [r1, #4]
 8016aca:	18a1      	adds	r1, r4, r2
 8016acc:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8016ad0:	3201      	adds	r2, #1
 8016ad2:	3301      	adds	r3, #1
 8016ad4:	e7e9      	b.n	8016aaa <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8016ad6:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8016ada:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8016ade:	4295      	cmp	r5, r2
 8016ae0:	dd0d      	ble.n	8016afe <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8016ae2:	1e6b      	subs	r3, r5, #1
 8016ae4:	b29b      	uxth	r3, r3
 8016ae6:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8016aea:	4618      	mov	r0, r3
 8016aec:	3104      	adds	r1, #4
 8016aee:	4285      	cmp	r5, r0
 8016af0:	ddf1      	ble.n	8016ad6 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8016af2:	f851 6f04 	ldr.w	r6, [r1, #4]!
 8016af6:	f841 6c04 	str.w	r6, [r1, #-4]
 8016afa:	3001      	adds	r0, #1
 8016afc:	e7f7      	b.n	8016aee <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8016afe:	4b04      	ldr	r3, [pc, #16]	; (8016b10 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8016b00:	6818      	ldr	r0, [r3, #0]
 8016b02:	b110      	cbz	r0, 8016b0a <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8016b04:	6803      	ldr	r3, [r0, #0]
 8016b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b08:	e7a5      	b.n	8016a56 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8016b0a:	bd70      	pop	{r4, r5, r6, pc}
 8016b0c:	20008850 	.word	0x20008850
 8016b10:	2000884c 	.word	0x2000884c

08016b14 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016b14:	b510      	push	{r4, lr}
 8016b16:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016b1a:	888a      	ldrh	r2, [r1, #4]
 8016b1c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016b20:	4422      	add	r2, r4
 8016b22:	b212      	sxth	r2, r2
 8016b24:	4293      	cmp	r3, r2
 8016b26:	da15      	bge.n	8016b54 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016b28:	8882      	ldrh	r2, [r0, #4]
 8016b2a:	4413      	add	r3, r2
 8016b2c:	b21b      	sxth	r3, r3
 8016b2e:	429c      	cmp	r4, r3
 8016b30:	da10      	bge.n	8016b54 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016b32:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016b36:	88c9      	ldrh	r1, [r1, #6]
 8016b38:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016b3c:	4419      	add	r1, r3
 8016b3e:	b209      	sxth	r1, r1
 8016b40:	428a      	cmp	r2, r1
 8016b42:	da07      	bge.n	8016b54 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016b44:	88c0      	ldrh	r0, [r0, #6]
 8016b46:	4410      	add	r0, r2
 8016b48:	b200      	sxth	r0, r0
 8016b4a:	4283      	cmp	r3, r0
 8016b4c:	bfac      	ite	ge
 8016b4e:	2000      	movge	r0, #0
 8016b50:	2001      	movlt	r0, #1
 8016b52:	bd10      	pop	{r4, pc}
 8016b54:	2000      	movs	r0, #0
 8016b56:	e7fc      	b.n	8016b52 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016b58 <_ZN8touchgfx4Rect10restrictToEss>:
 8016b58:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	b510      	push	{r4, lr}
 8016b60:	da04      	bge.n	8016b6c <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8016b62:	8884      	ldrh	r4, [r0, #4]
 8016b64:	4423      	add	r3, r4
 8016b66:	8083      	strh	r3, [r0, #4]
 8016b68:	2300      	movs	r3, #0
 8016b6a:	8003      	strh	r3, [r0, #0]
 8016b6c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016b70:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016b74:	1b09      	subs	r1, r1, r4
 8016b76:	428b      	cmp	r3, r1
 8016b78:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016b7c:	bfc8      	it	gt
 8016b7e:	8081      	strhgt	r1, [r0, #4]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	da04      	bge.n	8016b8e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8016b84:	88c1      	ldrh	r1, [r0, #6]
 8016b86:	440b      	add	r3, r1
 8016b88:	80c3      	strh	r3, [r0, #6]
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	8043      	strh	r3, [r0, #2]
 8016b8e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016b92:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016b96:	1a52      	subs	r2, r2, r1
 8016b98:	4293      	cmp	r3, r2
 8016b9a:	bfc8      	it	gt
 8016b9c:	80c2      	strhgt	r2, [r0, #6]
 8016b9e:	bd10      	pop	{r4, pc}

08016ba0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016ba0:	b510      	push	{r4, lr}
 8016ba2:	4b10      	ldr	r3, [pc, #64]	; (8016be4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8016ba4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016ba8:	4b0f      	ldr	r3, [pc, #60]	; (8016be8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8016baa:	460c      	mov	r4, r1
 8016bac:	4620      	mov	r0, r4
 8016bae:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016bb2:	f7ff ffd1 	bl	8016b58 <_ZN8touchgfx4Rect10restrictToEss>
 8016bb6:	4b0d      	ldr	r3, [pc, #52]	; (8016bec <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8016bb8:	6818      	ldr	r0, [r3, #0]
 8016bba:	b190      	cbz	r0, 8016be2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8016bbc:	6803      	ldr	r3, [r0, #0]
 8016bbe:	4621      	mov	r1, r4
 8016bc0:	689b      	ldr	r3, [r3, #8]
 8016bc2:	4798      	blx	r3
 8016bc4:	4b0a      	ldr	r3, [pc, #40]	; (8016bf0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8016bc6:	6818      	ldr	r0, [r3, #0]
 8016bc8:	b118      	cbz	r0, 8016bd2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8016bca:	6803      	ldr	r3, [r0, #0]
 8016bcc:	4621      	mov	r1, r4
 8016bce:	689b      	ldr	r3, [r3, #8]
 8016bd0:	4798      	blx	r3
 8016bd2:	4b08      	ldr	r3, [pc, #32]	; (8016bf4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8016bd4:	6818      	ldr	r0, [r3, #0]
 8016bd6:	6803      	ldr	r3, [r0, #0]
 8016bd8:	4621      	mov	r1, r4
 8016bda:	69db      	ldr	r3, [r3, #28]
 8016bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016be0:	4718      	bx	r3
 8016be2:	bd10      	pop	{r4, pc}
 8016be4:	200087fe 	.word	0x200087fe
 8016be8:	200087fc 	.word	0x200087fc
 8016bec:	2000884c 	.word	0x2000884c
 8016bf0:	20008848 	.word	0x20008848
 8016bf4:	20008808 	.word	0x20008808

08016bf8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8016bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bfa:	4606      	mov	r6, r0
 8016bfc:	4608      	mov	r0, r1
 8016bfe:	460f      	mov	r7, r1
 8016c00:	f7fa fc15 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016c04:	b9e8      	cbnz	r0, 8016c42 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016c06:	f9b7 5000 	ldrsh.w	r5, [r7]
 8016c0a:	f9b6 4000 	ldrsh.w	r4, [r6]
 8016c0e:	42a5      	cmp	r5, r4
 8016c10:	db17      	blt.n	8016c42 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016c12:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016c16:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8016c1a:	429a      	cmp	r2, r3
 8016c1c:	db11      	blt.n	8016c42 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016c1e:	88b9      	ldrh	r1, [r7, #4]
 8016c20:	440d      	add	r5, r1
 8016c22:	88b1      	ldrh	r1, [r6, #4]
 8016c24:	440c      	add	r4, r1
 8016c26:	b22d      	sxth	r5, r5
 8016c28:	b224      	sxth	r4, r4
 8016c2a:	42a5      	cmp	r5, r4
 8016c2c:	dc09      	bgt.n	8016c42 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016c2e:	88f8      	ldrh	r0, [r7, #6]
 8016c30:	4410      	add	r0, r2
 8016c32:	88f2      	ldrh	r2, [r6, #6]
 8016c34:	4413      	add	r3, r2
 8016c36:	b200      	sxth	r0, r0
 8016c38:	b21b      	sxth	r3, r3
 8016c3a:	4298      	cmp	r0, r3
 8016c3c:	bfcc      	ite	gt
 8016c3e:	2000      	movgt	r0, #0
 8016c40:	2001      	movle	r0, #1
 8016c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016c44 <_ZN8touchgfx11Application11getInstanceEv>:
 8016c44:	4b01      	ldr	r3, [pc, #4]	; (8016c4c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8016c46:	6818      	ldr	r0, [r3, #0]
 8016c48:	4770      	bx	lr
 8016c4a:	bf00      	nop
 8016c4c:	2000885c 	.word	0x2000885c

08016c50 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8016c50:	2300      	movs	r3, #0
 8016c52:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8016c56:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8016c5a:	30a8      	adds	r0, #168	; 0xa8
 8016c5c:	f802 3b01 	strb.w	r3, [r2], #1
 8016c60:	4282      	cmp	r2, r0
 8016c62:	d1fb      	bne.n	8016c5c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8016c64:	4770      	bx	lr

08016c66 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8016c66:	4603      	mov	r3, r0
 8016c68:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	801a      	strh	r2, [r3, #0]
 8016c70:	805a      	strh	r2, [r3, #2]
 8016c72:	809a      	strh	r2, [r3, #4]
 8016c74:	80da      	strh	r2, [r3, #6]
 8016c76:	3308      	adds	r3, #8
 8016c78:	428b      	cmp	r3, r1
 8016c7a:	d1f8      	bne.n	8016c6e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8016c7c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8016c80:	4770      	bx	lr
	...

08016c84 <_ZN8touchgfx11ApplicationC1Ev>:
 8016c84:	b570      	push	{r4, r5, r6, lr}
 8016c86:	4b19      	ldr	r3, [pc, #100]	; (8016cec <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8016c88:	6003      	str	r3, [r0, #0]
 8016c8a:	2500      	movs	r5, #0
 8016c8c:	4604      	mov	r4, r0
 8016c8e:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 8016c92:	30a8      	adds	r0, #168	; 0xa8
 8016c94:	f7ff ffe7 	bl	8016c66 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016c98:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8016c9c:	f7ff ffe3 	bl	8016c66 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016ca0:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8016ca4:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8016ca8:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8016cac:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8016cb0:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8016cb4:	490e      	ldr	r1, [pc, #56]	; (8016cf0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8016cb6:	480f      	ldr	r0, [pc, #60]	; (8016cf4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8016cb8:	4e0f      	ldr	r6, [pc, #60]	; (8016cf8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8016cba:	f00e fcc7 	bl	802564c <CRC_Lock>
 8016cbe:	4b0f      	ldr	r3, [pc, #60]	; (8016cfc <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8016cc0:	b158      	cbz	r0, 8016cda <_ZN8touchgfx11ApplicationC1Ev+0x56>
 8016cc2:	801d      	strh	r5, [r3, #0]
 8016cc4:	4a0e      	ldr	r2, [pc, #56]	; (8016d00 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	6013      	str	r3, [r2, #0]
 8016cca:	4a0e      	ldr	r2, [pc, #56]	; (8016d04 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8016ccc:	6033      	str	r3, [r6, #0]
 8016cce:	4620      	mov	r0, r4
 8016cd0:	6013      	str	r3, [r2, #0]
 8016cd2:	f7ff ffbd 	bl	8016c50 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8016cd6:	4620      	mov	r0, r4
 8016cd8:	bd70      	pop	{r4, r5, r6, pc}
 8016cda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016cde:	2002      	movs	r0, #2
 8016ce0:	801a      	strh	r2, [r3, #0]
 8016ce2:	6030      	str	r0, [r6, #0]
 8016ce4:	f001 fae0 	bl	80182a8 <_ZN8touchgfx6Screen4drawEv>
 8016ce8:	e7ec      	b.n	8016cc4 <_ZN8touchgfx11ApplicationC1Ev+0x40>
 8016cea:	bf00      	nop
 8016cec:	0802af1c 	.word	0x0802af1c
 8016cf0:	b5e8b5cd 	.word	0xb5e8b5cd
 8016cf4:	f407a5c2 	.word	0xf407a5c2
 8016cf8:	2000884c 	.word	0x2000884c
 8016cfc:	20000020 	.word	0x20000020
 8016d00:	2000885c 	.word	0x2000885c
 8016d04:	20008850 	.word	0x20008850

08016d08 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8016d08:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8016d0c:	3b01      	subs	r3, #1
 8016d0e:	b29b      	uxth	r3, r3
 8016d10:	428b      	cmp	r3, r1
 8016d12:	b510      	push	{r4, lr}
 8016d14:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8016d18:	d908      	bls.n	8016d2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8016d1a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8016d1e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8016d22:	681a      	ldr	r2, [r3, #0]
 8016d24:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016d28:	685a      	ldr	r2, [r3, #4]
 8016d2a:	6062      	str	r2, [r4, #4]
 8016d2c:	bd10      	pop	{r4, pc}
	...

08016d30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d34:	4b94      	ldr	r3, [pc, #592]	; (8016f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8016d36:	b08f      	sub	sp, #60	; 0x3c
 8016d38:	ac0a      	add	r4, sp, #40	; 0x28
 8016d3a:	e884 0006 	stmia.w	r4, {r1, r2}
 8016d3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016d42:	4b92      	ldr	r3, [pc, #584]	; (8016f8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8016d44:	4683      	mov	fp, r0
 8016d46:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016d4a:	4620      	mov	r0, r4
 8016d4c:	f7ff ff04 	bl	8016b58 <_ZN8touchgfx4Rect10restrictToEss>
 8016d50:	4620      	mov	r0, r4
 8016d52:	f7fa fb6c 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016d56:	2800      	cmp	r0, #0
 8016d58:	d16a      	bne.n	8016e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016d5a:	9403      	str	r4, [sp, #12]
 8016d5c:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8016d60:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8016d64:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8016d68:	2400      	movs	r4, #0
 8016d6a:	9301      	str	r3, [sp, #4]
 8016d6c:	36a0      	adds	r6, #160	; 0xa0
 8016d6e:	42a5      	cmp	r5, r4
 8016d70:	d00d      	beq.n	8016d8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8016d72:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8016d76:	9803      	ldr	r0, [sp, #12]
 8016d78:	f7ff ff3e 	bl	8016bf8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016d7c:	b128      	cbz	r0, 8016d8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8016d7e:	1e69      	subs	r1, r5, #1
 8016d80:	1b09      	subs	r1, r1, r4
 8016d82:	b289      	uxth	r1, r1
 8016d84:	9801      	ldr	r0, [sp, #4]
 8016d86:	f7ff ffbf 	bl	8016d08 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016d8a:	3401      	adds	r4, #1
 8016d8c:	e7ef      	b.n	8016d6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 8016d8e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8016d92:	9704      	str	r7, [sp, #16]
 8016d94:	1e7b      	subs	r3, r7, #1
 8016d96:	9302      	str	r3, [sp, #8]
 8016d98:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8016d9c:	2400      	movs	r4, #0
 8016d9e:	4655      	mov	r5, sl
 8016da0:	9705      	str	r7, [sp, #20]
 8016da2:	4626      	mov	r6, r4
 8016da4:	9b05      	ldr	r3, [sp, #20]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d078      	beq.n	8016e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 8016daa:	9903      	ldr	r1, [sp, #12]
 8016dac:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8016db0:	f7ff feb0 	bl	8016b14 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016db4:	b360      	cbz	r0, 8016e10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016db6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8016dba:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8016dbe:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 8016dc2:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8016dc6:	45e6      	cmp	lr, ip
 8016dc8:	db35      	blt.n	8016e36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016dca:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8016dce:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8016dd2:	4472      	add	r2, lr
 8016dd4:	4463      	add	r3, ip
 8016dd6:	b212      	sxth	r2, r2
 8016dd8:	b21b      	sxth	r3, r3
 8016dda:	429a      	cmp	r2, r3
 8016ddc:	dc2b      	bgt.n	8016e36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016dde:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8016de2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8016de6:	fa1f f288 	uxth.w	r2, r8
 8016dea:	4413      	add	r3, r2
 8016dec:	b29b      	uxth	r3, r3
 8016dee:	45c1      	cmp	r9, r8
 8016df0:	fa0f fe83 	sxth.w	lr, r3
 8016df4:	fa1f fc89 	uxth.w	ip, r9
 8016df8:	db0f      	blt.n	8016e1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8016dfa:	eba3 030c 	sub.w	r3, r3, ip
 8016dfe:	1ac9      	subs	r1, r1, r3
 8016e00:	b209      	sxth	r1, r1
 8016e02:	2900      	cmp	r1, #0
 8016e04:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016e08:	dd12      	ble.n	8016e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016e0a:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8016e0e:	4604      	mov	r4, r0
 8016e10:	9b05      	ldr	r3, [sp, #20]
 8016e12:	3b01      	subs	r3, #1
 8016e14:	9305      	str	r3, [sp, #20]
 8016e16:	3d08      	subs	r5, #8
 8016e18:	e7c4      	b.n	8016da4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8016e1a:	4461      	add	r1, ip
 8016e1c:	b209      	sxth	r1, r1
 8016e1e:	4571      	cmp	r1, lr
 8016e20:	dc3a      	bgt.n	8016e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016e22:	eba2 020c 	sub.w	r2, r2, ip
 8016e26:	b212      	sxth	r2, r2
 8016e28:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8016e2c:	2a00      	cmp	r2, #0
 8016e2e:	dcee      	bgt.n	8016e0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016e30:	b00f      	add	sp, #60	; 0x3c
 8016e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e36:	45c1      	cmp	r9, r8
 8016e38:	db2e      	blt.n	8016e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016e3a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8016e3e:	4499      	add	r9, r3
 8016e40:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8016e44:	4498      	add	r8, r3
 8016e46:	fa0f f989 	sxth.w	r9, r9
 8016e4a:	fa0f f888 	sxth.w	r8, r8
 8016e4e:	45c1      	cmp	r9, r8
 8016e50:	dc22      	bgt.n	8016e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016e52:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8016e56:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8016e5a:	fa1f f28c 	uxth.w	r2, ip
 8016e5e:	4413      	add	r3, r2
 8016e60:	b29b      	uxth	r3, r3
 8016e62:	45e6      	cmp	lr, ip
 8016e64:	fa1f f88e 	uxth.w	r8, lr
 8016e68:	fa0f f983 	sxth.w	r9, r3
 8016e6c:	db0a      	blt.n	8016e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 8016e6e:	eba3 0308 	sub.w	r3, r3, r8
 8016e72:	1ac9      	subs	r1, r1, r3
 8016e74:	b209      	sxth	r1, r1
 8016e76:	2900      	cmp	r1, #0
 8016e78:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8016e7c:	ddd8      	ble.n	8016e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016e7e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8016e82:	e7c4      	b.n	8016e0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016e84:	4441      	add	r1, r8
 8016e86:	b209      	sxth	r1, r1
 8016e88:	4549      	cmp	r1, r9
 8016e8a:	dc05      	bgt.n	8016e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016e8c:	eba2 0208 	sub.w	r2, r2, r8
 8016e90:	b212      	sxth	r2, r2
 8016e92:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8016e96:	e7c9      	b.n	8016e2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8016e98:	4606      	mov	r6, r0
 8016e9a:	e7b9      	b.n	8016e10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016e9c:	2c00      	cmp	r4, #0
 8016e9e:	f47f af7d 	bne.w	8016d9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8016ea2:	2e00      	cmp	r6, #0
 8016ea4:	f000 81e1 	beq.w	801726a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8016ea8:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8016eac:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8016eb0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8016eb4:	b2b9      	uxth	r1, r7
 8016eb6:	9105      	str	r1, [sp, #20]
 8016eb8:	9805      	ldr	r0, [sp, #20]
 8016eba:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8016ebe:	4401      	add	r1, r0
 8016ec0:	b2b3      	uxth	r3, r6
 8016ec2:	b289      	uxth	r1, r1
 8016ec4:	441a      	add	r2, r3
 8016ec6:	9106      	str	r1, [sp, #24]
 8016ec8:	b292      	uxth	r2, r2
 8016eca:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 8016ece:	fa0f f882 	sxth.w	r8, r2
 8016ed2:	4655      	mov	r5, sl
 8016ed4:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8016ed8:	9b04      	ldr	r3, [sp, #16]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d058      	beq.n	8016f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 8016ede:	9903      	ldr	r1, [sp, #12]
 8016ee0:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8016ee4:	f7ff fe16 	bl	8016b14 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016ee8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016eec:	b1d8      	cbz	r0, 8016f26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8016eee:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8016ef2:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8016ef6:	4576      	cmp	r6, lr
 8016ef8:	dc26      	bgt.n	8016f48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8016efa:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8016efe:	44f4      	add	ip, lr
 8016f00:	fa0f fc8c 	sxth.w	ip, ip
 8016f04:	45e0      	cmp	r8, ip
 8016f06:	db1f      	blt.n	8016f48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8016f08:	428f      	cmp	r7, r1
 8016f0a:	fa1f fc81 	uxth.w	ip, r1
 8016f0e:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8016f12:	dc0f      	bgt.n	8016f34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8016f14:	9806      	ldr	r0, [sp, #24]
 8016f16:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8016f1a:	eba0 0c0c 	sub.w	ip, r0, ip
 8016f1e:	eba1 010c 	sub.w	r1, r1, ip
 8016f22:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8016f26:	4620      	mov	r0, r4
 8016f28:	9904      	ldr	r1, [sp, #16]
 8016f2a:	3901      	subs	r1, #1
 8016f2c:	9104      	str	r1, [sp, #16]
 8016f2e:	3d08      	subs	r5, #8
 8016f30:	4604      	mov	r4, r0
 8016f32:	e7cf      	b.n	8016ed4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8016f34:	4461      	add	r1, ip
 8016f36:	b209      	sxth	r1, r1
 8016f38:	4549      	cmp	r1, r9
 8016f3a:	dcf5      	bgt.n	8016f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8016f3c:	9905      	ldr	r1, [sp, #20]
 8016f3e:	eba1 0c0c 	sub.w	ip, r1, ip
 8016f42:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8016f46:	e7ee      	b.n	8016f26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8016f48:	428f      	cmp	r7, r1
 8016f4a:	dced      	bgt.n	8016f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8016f4c:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8016f50:	4461      	add	r1, ip
 8016f52:	b209      	sxth	r1, r1
 8016f54:	4589      	cmp	r9, r1
 8016f56:	dbe7      	blt.n	8016f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8016f58:	4576      	cmp	r6, lr
 8016f5a:	fa1f fc8e 	uxth.w	ip, lr
 8016f5e:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8016f62:	dc08      	bgt.n	8016f76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8016f64:	eba2 0c0c 	sub.w	ip, r2, ip
 8016f68:	eba1 010c 	sub.w	r1, r1, ip
 8016f6c:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8016f70:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8016f74:	e7d7      	b.n	8016f26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8016f76:	4461      	add	r1, ip
 8016f78:	b209      	sxth	r1, r1
 8016f7a:	4588      	cmp	r8, r1
 8016f7c:	dbd4      	blt.n	8016f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8016f7e:	eba3 0c0c 	sub.w	ip, r3, ip
 8016f82:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8016f86:	e7ce      	b.n	8016f26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8016f88:	200087fe 	.word	0x200087fe
 8016f8c:	200087fc 	.word	0x200087fc
 8016f90:	2c00      	cmp	r4, #0
 8016f92:	f000 816a 	beq.w	801726a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8016f96:	9b02      	ldr	r3, [sp, #8]
 8016f98:	3301      	adds	r3, #1
 8016f9a:	f000 8166 	beq.w	801726a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8016f9e:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8016fa2:	4621      	mov	r1, r4
 8016fa4:	9803      	ldr	r0, [sp, #12]
 8016fa6:	f7ff fe27 	bl	8016bf8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016faa:	b120      	cbz	r0, 8016fb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8016fac:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8016fb0:	9801      	ldr	r0, [sp, #4]
 8016fb2:	f7ff fea9 	bl	8016d08 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016fb6:	9903      	ldr	r1, [sp, #12]
 8016fb8:	4620      	mov	r0, r4
 8016fba:	f7ff fdab 	bl	8016b14 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016fbe:	2800      	cmp	r0, #0
 8016fc0:	f000 809b 	beq.w	80170fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8016fc4:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8016fc8:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 8016fcc:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8016fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8016fd2:	b281      	uxth	r1, r0
 8016fd4:	eb01 0c03 	add.w	ip, r1, r3
 8016fd8:	fa1f f98c 	uxth.w	r9, ip
 8016fdc:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8016fe0:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8016fe4:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 8016fe8:	b2ab      	uxth	r3, r5
 8016fea:	eb03 040c 	add.w	r4, r3, ip
 8016fee:	b2a4      	uxth	r4, r4
 8016ff0:	9405      	str	r4, [sp, #20]
 8016ff2:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8016ff6:	9404      	str	r4, [sp, #16]
 8016ff8:	4285      	cmp	r5, r0
 8016ffa:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 8016ffe:	f340 809a 	ble.w	8017136 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 8017002:	1a5b      	subs	r3, r3, r1
 8017004:	b29b      	uxth	r3, r3
 8017006:	4596      	cmp	lr, r2
 8017008:	fa0f f589 	sxth.w	r5, r9
 801700c:	b21e      	sxth	r6, r3
 801700e:	dd2e      	ble.n	801706e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8017010:	9f02      	ldr	r7, [sp, #8]
 8017012:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8017016:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801701a:	9f04      	ldr	r7, [sp, #16]
 801701c:	1b7f      	subs	r7, r7, r5
 801701e:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 8017022:	fa1f fe8e 	uxth.w	lr, lr
 8017026:	b292      	uxth	r2, r2
 8017028:	ebae 0102 	sub.w	r1, lr, r2
 801702c:	4486      	add	lr, r0
 801702e:	442a      	add	r2, r5
 8017030:	b289      	uxth	r1, r1
 8017032:	fa0f fe8e 	sxth.w	lr, lr
 8017036:	b212      	sxth	r2, r2
 8017038:	b20c      	sxth	r4, r1
 801703a:	ebae 0202 	sub.w	r2, lr, r2
 801703e:	4367      	muls	r7, r4
 8017040:	4372      	muls	r2, r6
 8017042:	4297      	cmp	r7, r2
 8017044:	db09      	blt.n	801705a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8017046:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801704a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801704e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8017052:	449c      	add	ip, r3
 8017054:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8017058:	e680      	b.n	8016d5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801705a:	4401      	add	r1, r0
 801705c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8017060:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8017064:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017068:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801706c:	e676      	b.n	8016d5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801706e:	9f04      	ldr	r7, [sp, #16]
 8017070:	42bd      	cmp	r5, r7
 8017072:	da27      	bge.n	80170c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8017074:	9902      	ldr	r1, [sp, #8]
 8017076:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801707a:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801707e:	eb04 010e 	add.w	r1, r4, lr
 8017082:	fa1f f881 	uxth.w	r8, r1
 8017086:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801708a:	4411      	add	r1, r2
 801708c:	eba1 0108 	sub.w	r1, r1, r8
 8017090:	b289      	uxth	r1, r1
 8017092:	fa0f f988 	sxth.w	r9, r8
 8017096:	eba2 020e 	sub.w	r2, r2, lr
 801709a:	fa0f f881 	sxth.w	r8, r1
 801709e:	1b7f      	subs	r7, r7, r5
 80170a0:	4372      	muls	r2, r6
 80170a2:	fb08 f707 	mul.w	r7, r8, r7
 80170a6:	42ba      	cmp	r2, r7
 80170a8:	dc06      	bgt.n	80170b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80170aa:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 80170ae:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 80170b2:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 80170b6:	e7ca      	b.n	801704e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 80170b8:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 80170bc:	4421      	add	r1, r4
 80170be:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80170c2:	e64b      	b.n	8016d5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80170c4:	9d05      	ldr	r5, [sp, #20]
 80170c6:	eba9 0505 	sub.w	r5, r9, r5
 80170ca:	b2ad      	uxth	r5, r5
 80170cc:	2c06      	cmp	r4, #6
 80170ce:	fa0f fe85 	sxth.w	lr, r5
 80170d2:	d818      	bhi.n	8017106 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 80170d4:	9b04      	ldr	r3, [sp, #16]
 80170d6:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 80170da:	1c63      	adds	r3, r4, #1
 80170dc:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 80170e0:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 80170e4:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 80170e8:	9b01      	ldr	r3, [sp, #4]
 80170ea:	9d01      	ldr	r5, [sp, #4]
 80170ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80170f0:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 80170f4:	805a      	strh	r2, [r3, #2]
 80170f6:	809e      	strh	r6, [r3, #4]
 80170f8:	80d9      	strh	r1, [r3, #6]
 80170fa:	9b02      	ldr	r3, [sp, #8]
 80170fc:	3b01      	subs	r3, #1
 80170fe:	9302      	str	r3, [sp, #8]
 8017100:	f1aa 0a08 	sub.w	sl, sl, #8
 8017104:	e747      	b.n	8016f96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8017106:	9a02      	ldr	r2, [sp, #8]
 8017108:	45b6      	cmp	lr, r6
 801710a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801710e:	db0d      	blt.n	801712c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 8017110:	449c      	add	ip, r3
 8017112:	fa1f fc8c 	uxth.w	ip, ip
 8017116:	445a      	add	r2, fp
 8017118:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801711c:	448c      	add	ip, r1
 801711e:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8017122:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 8017126:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801712a:	e617      	b.n	8016d5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801712c:	445a      	add	r2, fp
 801712e:	44ac      	add	ip, r5
 8017130:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8017134:	e78e      	b.n	8017054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8017136:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801713a:	fa1f f18e 	uxth.w	r1, lr
 801713e:	eb01 0806 	add.w	r8, r1, r6
 8017142:	b293      	uxth	r3, r2
 8017144:	fa1f f888 	uxth.w	r8, r8
 8017148:	9306      	str	r3, [sp, #24]
 801714a:	fa0f f388 	sxth.w	r3, r8
 801714e:	9307      	str	r3, [sp, #28]
 8017150:	9f06      	ldr	r7, [sp, #24]
 8017152:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 8017156:	443b      	add	r3, r7
 8017158:	b29b      	uxth	r3, r3
 801715a:	4596      	cmp	lr, r2
 801715c:	9308      	str	r3, [sp, #32]
 801715e:	da25      	bge.n	80171ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8017160:	9905      	ldr	r1, [sp, #20]
 8017162:	eba3 0308 	sub.w	r3, r3, r8
 8017166:	eba9 0401 	sub.w	r4, r9, r1
 801716a:	b2a4      	uxth	r4, r4
 801716c:	b29b      	uxth	r3, r3
 801716e:	fa0f f984 	sxth.w	r9, r4
 8017172:	b219      	sxth	r1, r3
 8017174:	eba2 020e 	sub.w	r2, r2, lr
 8017178:	1b40      	subs	r0, r0, r5
 801717a:	fb09 f202 	mul.w	r2, r9, r2
 801717e:	4348      	muls	r0, r1
 8017180:	4282      	cmp	r2, r0
 8017182:	9a02      	ldr	r2, [sp, #8]
 8017184:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017188:	445a      	add	r2, fp
 801718a:	dc06      	bgt.n	801719a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801718c:	9b07      	ldr	r3, [sp, #28]
 801718e:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 8017192:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 8017196:	44a4      	add	ip, r4
 8017198:	e75c      	b.n	8017054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801719a:	9904      	ldr	r1, [sp, #16]
 801719c:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 80171a0:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 80171a4:	4433      	add	r3, r6
 80171a6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80171aa:	e5d7      	b.n	8016d5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80171ac:	9f06      	ldr	r7, [sp, #24]
 80171ae:	9b04      	ldr	r3, [sp, #16]
 80171b0:	1bc9      	subs	r1, r1, r7
 80171b2:	fa0f f789 	sxth.w	r7, r9
 80171b6:	b289      	uxth	r1, r1
 80171b8:	429f      	cmp	r7, r3
 80171ba:	fa0f fe81 	sxth.w	lr, r1
 80171be:	dd22      	ble.n	8017206 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 80171c0:	9a05      	ldr	r2, [sp, #20]
 80171c2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80171c6:	1b40      	subs	r0, r0, r5
 80171c8:	eba9 0202 	sub.w	r2, r9, r2
 80171cc:	9d07      	ldr	r5, [sp, #28]
 80171ce:	b292      	uxth	r2, r2
 80171d0:	eba5 0a03 	sub.w	sl, r5, r3
 80171d4:	b214      	sxth	r4, r2
 80171d6:	9b02      	ldr	r3, [sp, #8]
 80171d8:	fb0e f000 	mul.w	r0, lr, r0
 80171dc:	fb04 fa0a 	mul.w	sl, r4, sl
 80171e0:	00db      	lsls	r3, r3, #3
 80171e2:	4550      	cmp	r0, sl
 80171e4:	445b      	add	r3, fp
 80171e6:	db03      	blt.n	80171f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 80171e8:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 80171ec:	4494      	add	ip, r2
 80171ee:	e731      	b.n	8017054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 80171f0:	9a04      	ldr	r2, [sp, #16]
 80171f2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80171f6:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 80171fa:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80171fe:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8017202:	4431      	add	r1, r6
 8017204:	e75b      	b.n	80170be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 8017206:	9b08      	ldr	r3, [sp, #32]
 8017208:	eba3 0308 	sub.w	r3, r3, r8
 801720c:	b29b      	uxth	r3, r3
 801720e:	2c06      	cmp	r4, #6
 8017210:	b21d      	sxth	r5, r3
 8017212:	d813      	bhi.n	801723c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 8017214:	9b07      	ldr	r3, [sp, #28]
 8017216:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801721a:	1c63      	adds	r3, r4, #1
 801721c:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 8017220:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8017224:	9b01      	ldr	r3, [sp, #4]
 8017226:	9901      	ldr	r1, [sp, #4]
 8017228:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801722c:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 8017230:	805a      	strh	r2, [r3, #2]
 8017232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017234:	809a      	strh	r2, [r3, #4]
 8017236:	f8a3 e006 	strh.w	lr, [r3, #6]
 801723a:	e75e      	b.n	80170fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801723c:	9802      	ldr	r0, [sp, #8]
 801723e:	4575      	cmp	r5, lr
 8017240:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8017244:	db0d      	blt.n	8017262 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 8017246:	4431      	add	r1, r6
 8017248:	9b06      	ldr	r3, [sp, #24]
 801724a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801724e:	b289      	uxth	r1, r1
 8017250:	4458      	add	r0, fp
 8017252:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017256:	4419      	add	r1, r3
 8017258:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801725c:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 8017260:	e57c      	b.n	8016d5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017262:	4458      	add	r0, fp
 8017264:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8017268:	e79c      	b.n	80171a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801726a:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801726e:	2e07      	cmp	r6, #7
 8017270:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8017274:	d812      	bhi.n	801729c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 8017276:	1c75      	adds	r5, r6, #1
 8017278:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 801727c:	9d01      	ldr	r5, [sp, #4]
 801727e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8017282:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8017286:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801728a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801728e:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8017292:	442c      	add	r4, r5
 8017294:	8061      	strh	r1, [r4, #2]
 8017296:	80a2      	strh	r2, [r4, #4]
 8017298:	80e3      	strh	r3, [r4, #6]
 801729a:	e5c9      	b.n	8016e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801729c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80172a0:	3e01      	subs	r6, #1
 80172a2:	445c      	add	r4, fp
 80172a4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80172a8:	f04f 37ff 	mov.w	r7, #4294967295
 80172ac:	2500      	movs	r5, #0
 80172ae:	9305      	str	r3, [sp, #20]
 80172b0:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 80172b4:	9302      	str	r3, [sp, #8]
 80172b6:	1e72      	subs	r2, r6, #1
 80172b8:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 80172bc:	9304      	str	r3, [sp, #16]
 80172be:	4691      	mov	r9, r2
 80172c0:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 80172c4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80172c8:	bf14      	ite	ne
 80172ca:	9905      	ldrne	r1, [sp, #20]
 80172cc:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80172d0:	6818      	ldr	r0, [r3, #0]
 80172d2:	9207      	str	r2, [sp, #28]
 80172d4:	bf18      	it	ne
 80172d6:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80172da:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80172de:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80172e2:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80172e6:	9306      	str	r3, [sp, #24]
 80172e8:	fb18 f801 	smulbb	r8, r8, r1
 80172ec:	6859      	ldr	r1, [r3, #4]
 80172ee:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80172f2:	4671      	mov	r1, lr
 80172f4:	a80c      	add	r0, sp, #48	; 0x30
 80172f6:	f7fb fd6f 	bl	8012dd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80172fa:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80172fe:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8017302:	9b04      	ldr	r3, [sp, #16]
 8017304:	9a02      	ldr	r2, [sp, #8]
 8017306:	fb10 f001 	smulbb	r0, r0, r1
 801730a:	fb02 8803 	mla	r8, r2, r3, r8
 801730e:	eba0 0108 	sub.w	r1, r0, r8
 8017312:	f04f 0c08 	mov.w	ip, #8
 8017316:	fb90 f0fc 	sdiv	r0, r0, ip
 801731a:	4288      	cmp	r0, r1
 801731c:	dc20      	bgt.n	8017360 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 801731e:	4551      	cmp	r1, sl
 8017320:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017324:	da03      	bge.n	801732e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 8017326:	b1d9      	cbz	r1, 8017360 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 8017328:	468a      	mov	sl, r1
 801732a:	464f      	mov	r7, r9
 801732c:	4635      	mov	r5, r6
 801732e:	f109 39ff 	add.w	r9, r9, #4294967295
 8017332:	f119 0f02 	cmn.w	r9, #2
 8017336:	d1c5      	bne.n	80172c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8017338:	4616      	mov	r6, r2
 801733a:	3201      	adds	r2, #1
 801733c:	f1a4 0408 	sub.w	r4, r4, #8
 8017340:	d1b6      	bne.n	80172b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 8017342:	9b01      	ldr	r3, [sp, #4]
 8017344:	b2ac      	uxth	r4, r5
 8017346:	00ed      	lsls	r5, r5, #3
 8017348:	1958      	adds	r0, r3, r5
 801734a:	1c7b      	adds	r3, r7, #1
 801734c:	d10b      	bne.n	8017366 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x636>
 801734e:	4601      	mov	r1, r0
 8017350:	9803      	ldr	r0, [sp, #12]
 8017352:	f7fb fd41 	bl	8012dd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017356:	4621      	mov	r1, r4
 8017358:	9801      	ldr	r0, [sp, #4]
 801735a:	f7ff fcd5 	bl	8016d08 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801735e:	e4fd      	b.n	8016d5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017360:	464f      	mov	r7, r9
 8017362:	4635      	mov	r5, r6
 8017364:	e7ed      	b.n	8017342 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 8017366:	9b01      	ldr	r3, [sp, #4]
 8017368:	00ff      	lsls	r7, r7, #3
 801736a:	19d9      	adds	r1, r3, r7
 801736c:	f7fb fd34 	bl	8012dd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017370:	9b03      	ldr	r3, [sp, #12]
 8017372:	cb03      	ldmia	r3!, {r0, r1}
 8017374:	445f      	add	r7, fp
 8017376:	445d      	add	r5, fp
 8017378:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801737c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8017380:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 8017384:	9b03      	ldr	r3, [sp, #12]
 8017386:	6869      	ldr	r1, [r5, #4]
 8017388:	c303      	stmia	r3!, {r0, r1}
 801738a:	e7e4      	b.n	8017356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>

0801738c <_ZN8touchgfx11Application10invalidateEv>:
 801738c:	4b09      	ldr	r3, [pc, #36]	; (80173b4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801738e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017392:	4b09      	ldr	r3, [pc, #36]	; (80173b8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8017394:	b082      	sub	sp, #8
 8017396:	f9b3 3000 	ldrsh.w	r3, [r3]
 801739a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801739e:	2100      	movs	r1, #0
 80173a0:	9100      	str	r1, [sp, #0]
 80173a2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80173a6:	ab02      	add	r3, sp, #8
 80173a8:	e913 0006 	ldmdb	r3, {r1, r2}
 80173ac:	b002      	add	sp, #8
 80173ae:	f7ff bcbf 	b.w	8016d30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80173b2:	bf00      	nop
 80173b4:	200087fc 	.word	0x200087fc
 80173b8:	200087fe 	.word	0x200087fe

080173bc <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80173bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173c0:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 80173c4:	b09b      	sub	sp, #108	; 0x6c
 80173c6:	4604      	mov	r4, r0
 80173c8:	4630      	mov	r0, r6
 80173ca:	f7fa f830 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 80173ce:	4605      	mov	r5, r0
 80173d0:	b940      	cbnz	r0, 80173e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 80173d2:	e896 0006 	ldmia.w	r6, {r1, r2}
 80173d6:	4620      	mov	r0, r4
 80173d8:	f7ff fcaa 	bl	8016d30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80173dc:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80173e0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80173e4:	4bc9      	ldr	r3, [pc, #804]	; (801770c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d03e      	beq.n	801746a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80173ec:	4dc8      	ldr	r5, [pc, #800]	; (8017710 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80173ee:	4628      	mov	r0, r5
 80173f0:	f7fa f81d 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 80173f4:	4606      	mov	r6, r0
 80173f6:	2800      	cmp	r0, #0
 80173f8:	d137      	bne.n	801746a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80173fa:	4628      	mov	r0, r5
 80173fc:	f7ff fa54 	bl	80168a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017400:	6829      	ldr	r1, [r5, #0]
 8017402:	686a      	ldr	r2, [r5, #4]
 8017404:	4620      	mov	r0, r4
 8017406:	f7ff fc93 	bl	8016d30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801740a:	802e      	strh	r6, [r5, #0]
 801740c:	806e      	strh	r6, [r5, #2]
 801740e:	80ae      	strh	r6, [r5, #4]
 8017410:	80ee      	strh	r6, [r5, #6]
 8017412:	ae09      	add	r6, sp, #36	; 0x24
 8017414:	4630      	mov	r0, r6
 8017416:	f7ff fc26 	bl	8016c66 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801741a:	4abe      	ldr	r2, [pc, #760]	; (8017714 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801741c:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8017420:	8815      	ldrh	r5, [r2, #0]
 8017422:	9202      	str	r2, [sp, #8]
 8017424:	462b      	mov	r3, r5
 8017426:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801742a:	429f      	cmp	r7, r3
 801742c:	d924      	bls.n	8017478 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801742e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8017432:	2907      	cmp	r1, #7
 8017434:	d816      	bhi.n	8017464 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8017436:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801743a:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801743e:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8017442:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8017446:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801744a:	1c4a      	adds	r2, r1, #1
 801744c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8017450:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8017454:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8017458:	f8a2 9002 	strh.w	r9, [r2, #2]
 801745c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8017460:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017464:	3301      	adds	r3, #1
 8017466:	b29b      	uxth	r3, r3
 8017468:	e7df      	b.n	801742a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801746a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801746e:	2b00      	cmp	r3, #0
 8017470:	d1cf      	bne.n	8017412 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8017472:	b01b      	add	sp, #108	; 0x6c
 8017474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017478:	462f      	mov	r7, r5
 801747a:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801747e:	42bb      	cmp	r3, r7
 8017480:	d90b      	bls.n	801749a <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8017482:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8017486:	4620      	mov	r0, r4
 8017488:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801748c:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8017490:	3701      	adds	r7, #1
 8017492:	f7ff fc4d 	bl	8016d30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017496:	b2bf      	uxth	r7, r7
 8017498:	e7ef      	b.n	801747a <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801749a:	4a9f      	ldr	r2, [pc, #636]	; (8017718 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801749c:	6813      	ldr	r3, [r2, #0]
 801749e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80174a2:	2b01      	cmp	r3, #1
 80174a4:	4690      	mov	r8, r2
 80174a6:	f040 80e6 	bne.w	8017676 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 80174aa:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80174ae:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 80174b2:	4629      	mov	r1, r5
 80174b4:	33aa      	adds	r3, #170	; 0xaa
 80174b6:	2500      	movs	r5, #0
 80174b8:	428f      	cmp	r7, r1
 80174ba:	f103 0308 	add.w	r3, r3, #8
 80174be:	dd0a      	ble.n	80174d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80174c0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80174c4:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80174c8:	4402      	add	r2, r0
 80174ca:	b212      	sxth	r2, r2
 80174cc:	4295      	cmp	r5, r2
 80174ce:	bfb8      	it	lt
 80174d0:	4615      	movlt	r5, r2
 80174d2:	3101      	adds	r1, #1
 80174d4:	e7f0      	b.n	80174b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80174d6:	4b91      	ldr	r3, [pc, #580]	; (801771c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 80174d8:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8017718 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 80174dc:	881b      	ldrh	r3, [r3, #0]
 80174de:	2b0f      	cmp	r3, #15
 80174e0:	bf88      	it	hi
 80174e2:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 80174e6:	f04f 0300 	mov.w	r3, #0
 80174ea:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80174ee:	bf98      	it	ls
 80174f0:	f04f 0a01 	movls.w	sl, #1
 80174f4:	46d8      	mov	r8, fp
 80174f6:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 80174fa:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80174fe:	4438      	add	r0, r7
 8017500:	b207      	sxth	r7, r0
 8017502:	f8db 0000 	ldr.w	r0, [fp]
 8017506:	42bd      	cmp	r5, r7
 8017508:	6803      	ldr	r3, [r0, #0]
 801750a:	f340 8084 	ble.w	8017616 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801750e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017512:	4798      	blx	r3
 8017514:	eb07 030a 	add.w	r3, r7, sl
 8017518:	4298      	cmp	r0, r3
 801751a:	da07      	bge.n	801752c <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 801751c:	4285      	cmp	r5, r0
 801751e:	dd05      	ble.n	801752c <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8017520:	4287      	cmp	r7, r0
 8017522:	dd6d      	ble.n	8017600 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8017524:	2f00      	cmp	r7, #0
 8017526:	dd6b      	ble.n	8017600 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8017528:	4628      	mov	r0, r5
 801752a:	e004      	b.n	8017536 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 801752c:	4287      	cmp	r7, r0
 801752e:	dcfb      	bgt.n	8017528 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8017530:	42a8      	cmp	r0, r5
 8017532:	bfa8      	it	ge
 8017534:	4628      	movge	r0, r5
 8017536:	4b7a      	ldr	r3, [pc, #488]	; (8017720 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8017538:	f8ad 7016 	strh.w	r7, [sp, #22]
 801753c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017540:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017544:	9b02      	ldr	r3, [sp, #8]
 8017546:	1bc0      	subs	r0, r0, r7
 8017548:	2200      	movs	r2, #0
 801754a:	881f      	ldrh	r7, [r3, #0]
 801754c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017550:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017554:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017558:	42bb      	cmp	r3, r7
 801755a:	d9cc      	bls.n	80174f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 801755c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8017560:	ab07      	add	r3, sp, #28
 8017562:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8017566:	6851      	ldr	r1, [r2, #4]
 8017568:	c303      	stmia	r3!, {r0, r1}
 801756a:	a905      	add	r1, sp, #20
 801756c:	a807      	add	r0, sp, #28
 801756e:	f7ff fad1 	bl	8016b14 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017572:	2800      	cmp	r0, #0
 8017574:	d04c      	beq.n	8017610 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 8017576:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801757a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801757e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8017582:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8017586:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801758a:	9303      	str	r3, [sp, #12]
 801758c:	4686      	mov	lr, r0
 801758e:	4290      	cmp	r0, r2
 8017590:	4448      	add	r0, r9
 8017592:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8017596:	bfb8      	it	lt
 8017598:	4696      	movlt	lr, r2
 801759a:	444a      	add	r2, r9
 801759c:	4299      	cmp	r1, r3
 801759e:	b280      	uxth	r0, r0
 80175a0:	b292      	uxth	r2, r2
 80175a2:	468c      	mov	ip, r1
 80175a4:	fa0f f982 	sxth.w	r9, r2
 80175a8:	bfb8      	it	lt
 80175aa:	469c      	movlt	ip, r3
 80175ac:	b203      	sxth	r3, r0
 80175ae:	454b      	cmp	r3, r9
 80175b0:	bfb8      	it	lt
 80175b2:	4602      	movlt	r2, r0
 80175b4:	eba2 020e 	sub.w	r2, r2, lr
 80175b8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80175bc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80175c0:	9b03      	ldr	r3, [sp, #12]
 80175c2:	f8ad e01c 	strh.w	lr, [sp, #28]
 80175c6:	4411      	add	r1, r2
 80175c8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80175cc:	f8ad c01e 	strh.w	ip, [sp, #30]
 80175d0:	4413      	add	r3, r2
 80175d2:	b289      	uxth	r1, r1
 80175d4:	b29b      	uxth	r3, r3
 80175d6:	b208      	sxth	r0, r1
 80175d8:	b21a      	sxth	r2, r3
 80175da:	4290      	cmp	r0, r2
 80175dc:	bfb8      	it	lt
 80175de:	460b      	movlt	r3, r1
 80175e0:	eba3 030c 	sub.w	r3, r3, ip
 80175e4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80175e8:	a807      	add	r0, sp, #28
 80175ea:	f7f9 ff20 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 80175ee:	b920      	cbnz	r0, 80175fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 80175f0:	6823      	ldr	r3, [r4, #0]
 80175f2:	a907      	add	r1, sp, #28
 80175f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80175f6:	4620      	mov	r0, r4
 80175f8:	4798      	blx	r3
 80175fa:	3701      	adds	r7, #1
 80175fc:	b2bf      	uxth	r7, r7
 80175fe:	e7a9      	b.n	8017554 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 8017600:	f8d8 0000 	ldr.w	r0, [r8]
 8017604:	6803      	ldr	r3, [r0, #0]
 8017606:	2101      	movs	r1, #1
 8017608:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801760c:	4798      	blx	r3
 801760e:	e772      	b.n	80174f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8017610:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017614:	e7e8      	b.n	80175e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8017616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017618:	4798      	blx	r3
 801761a:	4b42      	ldr	r3, [pc, #264]	; (8017724 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801761c:	781b      	ldrb	r3, [r3, #0]
 801761e:	2b00      	cmp	r3, #0
 8017620:	f43f af27 	beq.w	8017472 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8017624:	2300      	movs	r3, #0
 8017626:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801762a:	9b02      	ldr	r3, [sp, #8]
 801762c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8017630:	881b      	ldrh	r3, [r3, #0]
 8017632:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8017636:	429d      	cmp	r5, r3
 8017638:	f67f af1b 	bls.w	8017472 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801763c:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 8017640:	2907      	cmp	r1, #7
 8017642:	d815      	bhi.n	8017670 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 8017644:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8017648:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801764c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8017650:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8017654:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8017658:	1c4a      	adds	r2, r1, #1
 801765a:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801765e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8017662:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8017666:	f8a2 e002 	strh.w	lr, [r2, #2]
 801766a:	f8a2 c004 	strh.w	ip, [r2, #4]
 801766e:	80d7      	strh	r7, [r2, #6]
 8017670:	3301      	adds	r3, #1
 8017672:	b29b      	uxth	r3, r3
 8017674:	e7df      	b.n	8017636 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 8017676:	2b02      	cmp	r3, #2
 8017678:	f040 8136 	bne.w	80178e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 801767c:	4b2a      	ldr	r3, [pc, #168]	; (8017728 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 801767e:	781b      	ldrb	r3, [r3, #0]
 8017680:	2b01      	cmp	r3, #1
 8017682:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8017686:	f000 809c 	beq.w	80177c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801768a:	9b02      	ldr	r3, [sp, #8]
 801768c:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 8017690:	f8b3 b000 	ldrh.w	fp, [r3]
 8017694:	f10b 0b01 	add.w	fp, fp, #1
 8017698:	fa1f fb8b 	uxth.w	fp, fp
 801769c:	2a00      	cmp	r2, #0
 801769e:	d0bc      	beq.n	801761a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80176a0:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 80176a4:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 80176a8:	441d      	add	r5, r3
 80176aa:	b22d      	sxth	r5, r5
 80176ac:	4659      	mov	r1, fp
 80176ae:	f04f 0800 	mov.w	r8, #0
 80176b2:	b28b      	uxth	r3, r1
 80176b4:	429a      	cmp	r2, r3
 80176b6:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80176ba:	f240 80c1 	bls.w	8017840 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 80176be:	4427      	add	r7, r4
 80176c0:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80176c4:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 80176c8:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 80176cc:	4563      	cmp	r3, ip
 80176ce:	4608      	mov	r0, r1
 80176d0:	f340 80a3 	ble.w	801781a <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 80176d4:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 80176d8:	4465      	add	r5, ip
 80176da:	b22d      	sxth	r5, r5
 80176dc:	429d      	cmp	r5, r3
 80176de:	bfa8      	it	ge
 80176e0:	461d      	movge	r5, r3
 80176e2:	3101      	adds	r1, #1
 80176e4:	4680      	mov	r8, r0
 80176e6:	e7e4      	b.n	80176b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 80176e8:	d10b      	bne.n	8017702 <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 80176ea:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 80176ee:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 80176f2:	458c      	cmp	ip, r1
 80176f4:	bfb4      	ite	lt
 80176f6:	469c      	movlt	ip, r3
 80176f8:	46bc      	movge	ip, r7
 80176fa:	4572      	cmp	r2, lr
 80176fc:	bfb8      	it	lt
 80176fe:	4672      	movlt	r2, lr
 8017700:	e088      	b.n	8017814 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8017702:	428a      	cmp	r2, r1
 8017704:	bfb8      	it	lt
 8017706:	460a      	movlt	r2, r1
 8017708:	46bc      	mov	ip, r7
 801770a:	e083      	b.n	8017814 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801770c:	20008848 	.word	0x20008848
 8017710:	20008854 	.word	0x20008854
 8017714:	20000020 	.word	0x20000020
 8017718:	20008808 	.word	0x20008808
 801771c:	200087fe 	.word	0x200087fe
 8017720:	200087fc 	.word	0x200087fc
 8017724:	20008806 	.word	0x20008806
 8017728:	20008800 	.word	0x20008800
 801772c:	1961      	adds	r1, r4, r5
 801772e:	ab07      	add	r3, sp, #28
 8017730:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8017734:	6849      	ldr	r1, [r1, #4]
 8017736:	c303      	stmia	r3!, {r0, r1}
 8017738:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801773c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017740:	2b13      	cmp	r3, #19
 8017742:	bfd8      	it	le
 8017744:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8017748:	f8ad 201c 	strh.w	r2, [sp, #28]
 801774c:	440b      	add	r3, r1
 801774e:	1a9b      	subs	r3, r3, r2
 8017750:	a807      	add	r0, sp, #28
 8017752:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017756:	f7ff f8c1 	bl	80168dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801775a:	a807      	add	r0, sp, #28
 801775c:	f7f9 fe67 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017760:	bb78      	cbnz	r0, 80177c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8017762:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8017766:	f8d8 0000 	ldr.w	r0, [r8]
 801776a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801776e:	f8d0 e000 	ldr.w	lr, [r0]
 8017772:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8017776:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801777a:	f1bc 0f14 	cmp.w	ip, #20
 801777e:	bfa8      	it	ge
 8017780:	f04f 0c14 	movge.w	ip, #20
 8017784:	fa1f fc8c 	uxth.w	ip, ip
 8017788:	f8cd c000 	str.w	ip, [sp]
 801778c:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8017790:	47d0      	blx	sl
 8017792:	4682      	mov	sl, r0
 8017794:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017798:	a807      	add	r0, sp, #28
 801779a:	f7ff f885 	bl	80168a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801779e:	6823      	ldr	r3, [r4, #0]
 80177a0:	4425      	add	r5, r4
 80177a2:	4620      	mov	r0, r4
 80177a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177a6:	a907      	add	r1, sp, #28
 80177a8:	4798      	blx	r3
 80177aa:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80177ae:	eba0 000a 	sub.w	r0, r0, sl
 80177b2:	b200      	sxth	r0, r0
 80177b4:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 80177b8:	b918      	cbnz	r0, 80177c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80177ba:	b2b9      	uxth	r1, r7
 80177bc:	4648      	mov	r0, r9
 80177be:	f7ff faa3 	bl	8016d08 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80177c2:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 80177c6:	f1bb 0f00 	cmp.w	fp, #0
 80177ca:	f43f af26 	beq.w	801761a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80177ce:	9b02      	ldr	r3, [sp, #8]
 80177d0:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 80177d4:	881b      	ldrh	r3, [r3, #0]
 80177d6:	3301      	adds	r3, #1
 80177d8:	b29b      	uxth	r3, r3
 80177da:	2700      	movs	r7, #0
 80177dc:	b299      	uxth	r1, r3
 80177de:	458b      	cmp	fp, r1
 80177e0:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 80177e4:	d9a2      	bls.n	801772c <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 80177e6:	4425      	add	r5, r4
 80177e8:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80177ec:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 80177f0:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 80177f4:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 80177f8:	4408      	add	r0, r1
 80177fa:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 80177fe:	4471      	add	r1, lr
 8017800:	b200      	sxth	r0, r0
 8017802:	b209      	sxth	r1, r1
 8017804:	4288      	cmp	r0, r1
 8017806:	469c      	mov	ip, r3
 8017808:	f6bf af6e 	bge.w	80176e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 801780c:	4586      	cmp	lr, r0
 801780e:	4672      	mov	r2, lr
 8017810:	bfb8      	it	lt
 8017812:	4602      	movlt	r2, r0
 8017814:	3301      	adds	r3, #1
 8017816:	4667      	mov	r7, ip
 8017818:	e7e0      	b.n	80177dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 801781a:	d10c      	bne.n	8017836 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 801781c:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8017820:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8017824:	4287      	cmp	r7, r0
 8017826:	bfb4      	ite	lt
 8017828:	4608      	movlt	r0, r1
 801782a:	4640      	movge	r0, r8
 801782c:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 8017830:	443b      	add	r3, r7
 8017832:	b21b      	sxth	r3, r3
 8017834:	e752      	b.n	80176dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8017836:	4565      	cmp	r5, ip
 8017838:	bfa8      	it	ge
 801783a:	4665      	movge	r5, ip
 801783c:	4640      	mov	r0, r8
 801783e:	e750      	b.n	80176e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 8017840:	eb09 0007 	add.w	r0, r9, r7
 8017844:	4427      	add	r7, r4
 8017846:	9203      	str	r2, [sp, #12]
 8017848:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801784c:	f1ba 0f13 	cmp.w	sl, #19
 8017850:	bfde      	ittt	le
 8017852:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8017856:	4455      	addle	r5, sl
 8017858:	b22d      	sxthle	r5, r5
 801785a:	f7f9 fde8 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 801785e:	9a03      	ldr	r2, [sp, #12]
 8017860:	2800      	cmp	r0, #0
 8017862:	f47f af1b 	bne.w	801769c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 8017866:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801786a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801786e:	482a      	ldr	r0, [pc, #168]	; (8017918 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 8017870:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8017874:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8017878:	6800      	ldr	r0, [r0, #0]
 801787a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801787e:	1aad      	subs	r5, r5, r2
 8017880:	2d14      	cmp	r5, #20
 8017882:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017886:	f8ad 3020 	strh.w	r3, [sp, #32]
 801788a:	bfa8      	it	ge
 801788c:	2514      	movge	r5, #20
 801788e:	f8d0 c000 	ldr.w	ip, [r0]
 8017892:	b2ad      	uxth	r5, r5
 8017894:	fa1f fa8a 	uxth.w	sl, sl
 8017898:	4555      	cmp	r5, sl
 801789a:	bf94      	ite	ls
 801789c:	9500      	strls	r5, [sp, #0]
 801789e:	f8cd a000 	strhi.w	sl, [sp]
 80178a2:	b292      	uxth	r2, r2
 80178a4:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 80178a8:	b29b      	uxth	r3, r3
 80178aa:	b289      	uxth	r1, r1
 80178ac:	47a8      	blx	r5
 80178ae:	6823      	ldr	r3, [r4, #0]
 80178b0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80178b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178b6:	a907      	add	r1, sp, #28
 80178b8:	4620      	mov	r0, r4
 80178ba:	4798      	blx	r3
 80178bc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80178c0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80178c4:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 80178c8:	1a5b      	subs	r3, r3, r1
 80178ca:	440a      	add	r2, r1
 80178cc:	b21b      	sxth	r3, r3
 80178ce:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 80178d2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	f47f aed7 	bne.w	801768a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 80178dc:	fa1f f188 	uxth.w	r1, r8
 80178e0:	4648      	mov	r0, r9
 80178e2:	f7ff fa11 	bl	8016d08 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80178e6:	e6d0      	b.n	801768a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 80178e8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80178ec:	42ab      	cmp	r3, r5
 80178ee:	f67f ae94 	bls.w	801761a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80178f2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80178f6:	ab07      	add	r3, sp, #28
 80178f8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80178fc:	6851      	ldr	r1, [r2, #4]
 80178fe:	c303      	stmia	r3!, {r0, r1}
 8017900:	a807      	add	r0, sp, #28
 8017902:	f7f9 fd94 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017906:	b920      	cbnz	r0, 8017912 <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 8017908:	6823      	ldr	r3, [r4, #0]
 801790a:	a907      	add	r1, sp, #28
 801790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801790e:	4620      	mov	r0, r4
 8017910:	4798      	blx	r3
 8017912:	3501      	adds	r5, #1
 8017914:	b2ad      	uxth	r5, r5
 8017916:	e7e7      	b.n	80178e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8017918:	20008808 	.word	0x20008808

0801791c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801791c:	4b03      	ldr	r3, [pc, #12]	; (801792c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801791e:	2200      	movs	r2, #0
 8017920:	801a      	strh	r2, [r3, #0]
 8017922:	805a      	strh	r2, [r3, #2]
 8017924:	809a      	strh	r2, [r3, #4]
 8017926:	80da      	strh	r2, [r3, #6]
 8017928:	4770      	bx	lr
 801792a:	bf00      	nop
 801792c:	20008854 	.word	0x20008854

08017930 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017934:	4606      	mov	r6, r0
 8017936:	b09d      	sub	sp, #116	; 0x74
 8017938:	a803      	add	r0, sp, #12
 801793a:	4614      	mov	r4, r2
 801793c:	468a      	mov	sl, r1
 801793e:	461d      	mov	r5, r3
 8017940:	f000 fe2c 	bl	801859c <_ZN8touchgfx12TextProviderC1Ev>
 8017944:	6833      	ldr	r3, [r6, #0]
 8017946:	4630      	mov	r0, r6
 8017948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801794a:	4798      	blx	r3
 801794c:	6833      	ldr	r3, [r6, #0]
 801794e:	4607      	mov	r7, r0
 8017950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017952:	4630      	mov	r0, r6
 8017954:	4798      	blx	r3
 8017956:	462a      	mov	r2, r5
 8017958:	9000      	str	r0, [sp, #0]
 801795a:	4621      	mov	r1, r4
 801795c:	463b      	mov	r3, r7
 801795e:	a803      	add	r0, sp, #12
 8017960:	f000 fe77 	bl	8018652 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017964:	2500      	movs	r5, #0
 8017966:	462c      	mov	r4, r5
 8017968:	46a9      	mov	r9, r5
 801796a:	46a8      	mov	r8, r5
 801796c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017970:	2300      	movs	r3, #0
 8017972:	9302      	str	r3, [sp, #8]
 8017974:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017978:	429c      	cmp	r4, r3
 801797a:	d002      	beq.n	8017982 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801797c:	455c      	cmp	r4, fp
 801797e:	bf18      	it	ne
 8017980:	4625      	movne	r5, r4
 8017982:	ab02      	add	r3, sp, #8
 8017984:	4632      	mov	r2, r6
 8017986:	4651      	mov	r1, sl
 8017988:	a803      	add	r0, sp, #12
 801798a:	f001 f965 	bl	8018c58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801798e:	4604      	mov	r4, r0
 8017990:	b108      	cbz	r0, 8017996 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8017992:	280a      	cmp	r0, #10
 8017994:	d10a      	bne.n	80179ac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8017996:	45c1      	cmp	r9, r8
 8017998:	bf38      	it	cc
 801799a:	46c1      	movcc	r9, r8
 801799c:	f04f 0800 	mov.w	r8, #0
 80179a0:	2c00      	cmp	r4, #0
 80179a2:	d1e5      	bne.n	8017970 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80179a4:	4648      	mov	r0, r9
 80179a6:	b01d      	add	sp, #116	; 0x74
 80179a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179ac:	9a02      	ldr	r2, [sp, #8]
 80179ae:	2a00      	cmp	r2, #0
 80179b0:	d0de      	beq.n	8017970 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80179b2:	7b57      	ldrb	r7, [r2, #13]
 80179b4:	6833      	ldr	r3, [r6, #0]
 80179b6:	8894      	ldrh	r4, [r2, #4]
 80179b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179ba:	007f      	lsls	r7, r7, #1
 80179bc:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80179c0:	7a97      	ldrb	r7, [r2, #10]
 80179c2:	4629      	mov	r1, r5
 80179c4:	4307      	orrs	r7, r0
 80179c6:	4630      	mov	r0, r6
 80179c8:	4798      	blx	r3
 80179ca:	4438      	add	r0, r7
 80179cc:	4480      	add	r8, r0
 80179ce:	fa1f f888 	uxth.w	r8, r8
 80179d2:	e7e5      	b.n	80179a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080179d4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80179d4:	b508      	push	{r3, lr}
 80179d6:	6803      	ldr	r3, [r0, #0]
 80179d8:	68db      	ldr	r3, [r3, #12]
 80179da:	4798      	blx	r3
 80179dc:	b128      	cbz	r0, 80179ea <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80179de:	7b43      	ldrb	r3, [r0, #13]
 80179e0:	7a80      	ldrb	r0, [r0, #10]
 80179e2:	005b      	lsls	r3, r3, #1
 80179e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80179e8:	4318      	orrs	r0, r3
 80179ea:	bd08      	pop	{r3, pc}

080179ec <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80179ec:	b40e      	push	{r1, r2, r3}
 80179ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179f0:	b09e      	sub	sp, #120	; 0x78
 80179f2:	ab23      	add	r3, sp, #140	; 0x8c
 80179f4:	4605      	mov	r5, r0
 80179f6:	f853 4b04 	ldr.w	r4, [r3], #4
 80179fa:	9303      	str	r3, [sp, #12]
 80179fc:	a805      	add	r0, sp, #20
 80179fe:	f000 fdcd 	bl	801859c <_ZN8touchgfx12TextProviderC1Ev>
 8017a02:	682b      	ldr	r3, [r5, #0]
 8017a04:	4628      	mov	r0, r5
 8017a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a08:	4798      	blx	r3
 8017a0a:	682b      	ldr	r3, [r5, #0]
 8017a0c:	4606      	mov	r6, r0
 8017a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017a10:	4628      	mov	r0, r5
 8017a12:	4798      	blx	r3
 8017a14:	4633      	mov	r3, r6
 8017a16:	ae1e      	add	r6, sp, #120	; 0x78
 8017a18:	4621      	mov	r1, r4
 8017a1a:	9000      	str	r0, [sp, #0]
 8017a1c:	9a03      	ldr	r2, [sp, #12]
 8017a1e:	2400      	movs	r4, #0
 8017a20:	a805      	add	r0, sp, #20
 8017a22:	f000 fe16 	bl	8018652 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017a26:	f846 4d68 	str.w	r4, [r6, #-104]!
 8017a2a:	462a      	mov	r2, r5
 8017a2c:	4633      	mov	r3, r6
 8017a2e:	4621      	mov	r1, r4
 8017a30:	a805      	add	r0, sp, #20
 8017a32:	f001 f911 	bl	8018c58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017a36:	b1f0      	cbz	r0, 8017a76 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8017a38:	280a      	cmp	r0, #10
 8017a3a:	d018      	beq.n	8017a6e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8017a3c:	9f04      	ldr	r7, [sp, #16]
 8017a3e:	b1b7      	cbz	r7, 8017a6e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8017a40:	7b78      	ldrb	r0, [r7, #13]
 8017a42:	7a3b      	ldrb	r3, [r7, #8]
 8017a44:	88aa      	ldrh	r2, [r5, #4]
 8017a46:	00c1      	lsls	r1, r0, #3
 8017a48:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017a4c:	4319      	orrs	r1, r3
 8017a4e:	0643      	lsls	r3, r0, #25
 8017a50:	bf44      	itt	mi
 8017a52:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8017a56:	b219      	sxthmi	r1, r3
 8017a58:	0100      	lsls	r0, r0, #4
 8017a5a:	79fb      	ldrb	r3, [r7, #7]
 8017a5c:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017a60:	4303      	orrs	r3, r0
 8017a62:	4413      	add	r3, r2
 8017a64:	1a5b      	subs	r3, r3, r1
 8017a66:	b29b      	uxth	r3, r3
 8017a68:	42a3      	cmp	r3, r4
 8017a6a:	bfc8      	it	gt
 8017a6c:	b21c      	sxthgt	r4, r3
 8017a6e:	4633      	mov	r3, r6
 8017a70:	462a      	mov	r2, r5
 8017a72:	2100      	movs	r1, #0
 8017a74:	e7dc      	b.n	8017a30 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8017a76:	b2a0      	uxth	r0, r4
 8017a78:	b01e      	add	sp, #120	; 0x78
 8017a7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017a7e:	b003      	add	sp, #12
 8017a80:	4770      	bx	lr

08017a82 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017a82:	b40e      	push	{r1, r2, r3}
 8017a84:	b570      	push	{r4, r5, r6, lr}
 8017a86:	b09d      	sub	sp, #116	; 0x74
 8017a88:	ab21      	add	r3, sp, #132	; 0x84
 8017a8a:	4604      	mov	r4, r0
 8017a8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017a90:	9302      	str	r3, [sp, #8]
 8017a92:	a803      	add	r0, sp, #12
 8017a94:	f000 fd82 	bl	801859c <_ZN8touchgfx12TextProviderC1Ev>
 8017a98:	6823      	ldr	r3, [r4, #0]
 8017a9a:	4620      	mov	r0, r4
 8017a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a9e:	4798      	blx	r3
 8017aa0:	6823      	ldr	r3, [r4, #0]
 8017aa2:	4606      	mov	r6, r0
 8017aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017aa6:	4620      	mov	r0, r4
 8017aa8:	4798      	blx	r3
 8017aaa:	4633      	mov	r3, r6
 8017aac:	9000      	str	r0, [sp, #0]
 8017aae:	9a02      	ldr	r2, [sp, #8]
 8017ab0:	4629      	mov	r1, r5
 8017ab2:	a803      	add	r0, sp, #12
 8017ab4:	f000 fdcd 	bl	8018652 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017ab8:	a803      	add	r0, sp, #12
 8017aba:	f001 f99b 	bl	8018df4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017abe:	2401      	movs	r4, #1
 8017ac0:	b2a3      	uxth	r3, r4
 8017ac2:	b140      	cbz	r0, 8017ad6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8017ac4:	280a      	cmp	r0, #10
 8017ac6:	bf08      	it	eq
 8017ac8:	3301      	addeq	r3, #1
 8017aca:	a803      	add	r0, sp, #12
 8017acc:	bf08      	it	eq
 8017ace:	b21c      	sxtheq	r4, r3
 8017ad0:	f001 f990 	bl	8018df4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017ad4:	e7f4      	b.n	8017ac0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	b01d      	add	sp, #116	; 0x74
 8017ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ade:	b003      	add	sp, #12
 8017ae0:	4770      	bx	lr

08017ae2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017ae2:	b40e      	push	{r1, r2, r3}
 8017ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ae6:	b09e      	sub	sp, #120	; 0x78
 8017ae8:	ab23      	add	r3, sp, #140	; 0x8c
 8017aea:	4604      	mov	r4, r0
 8017aec:	f853 5b04 	ldr.w	r5, [r3], #4
 8017af0:	9303      	str	r3, [sp, #12]
 8017af2:	a805      	add	r0, sp, #20
 8017af4:	f000 fd52 	bl	801859c <_ZN8touchgfx12TextProviderC1Ev>
 8017af8:	6823      	ldr	r3, [r4, #0]
 8017afa:	4620      	mov	r0, r4
 8017afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017afe:	4798      	blx	r3
 8017b00:	6823      	ldr	r3, [r4, #0]
 8017b02:	4606      	mov	r6, r0
 8017b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b06:	4620      	mov	r0, r4
 8017b08:	4798      	blx	r3
 8017b0a:	4633      	mov	r3, r6
 8017b0c:	4629      	mov	r1, r5
 8017b0e:	9000      	str	r0, [sp, #0]
 8017b10:	9a03      	ldr	r2, [sp, #12]
 8017b12:	a805      	add	r0, sp, #20
 8017b14:	ad1e      	add	r5, sp, #120	; 0x78
 8017b16:	f000 fd9c 	bl	8018652 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017b1a:	2100      	movs	r1, #0
 8017b1c:	f845 1d68 	str.w	r1, [r5, #-104]!
 8017b20:	4622      	mov	r2, r4
 8017b22:	462b      	mov	r3, r5
 8017b24:	a805      	add	r0, sp, #20
 8017b26:	f001 f897 	bl	8018c58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017b2a:	26ff      	movs	r6, #255	; 0xff
 8017b2c:	b1d8      	cbz	r0, 8017b66 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8017b2e:	280a      	cmp	r0, #10
 8017b30:	d012      	beq.n	8017b58 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8017b32:	9804      	ldr	r0, [sp, #16]
 8017b34:	b180      	cbz	r0, 8017b58 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8017b36:	7b47      	ldrb	r7, [r0, #13]
 8017b38:	7922      	ldrb	r2, [r4, #4]
 8017b3a:	00fb      	lsls	r3, r7, #3
 8017b3c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017b40:	7a03      	ldrb	r3, [r0, #8]
 8017b42:	430b      	orrs	r3, r1
 8017b44:	0679      	lsls	r1, r7, #25
 8017b46:	bf44      	itt	mi
 8017b48:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017b4c:	b21b      	sxthmi	r3, r3
 8017b4e:	1ad3      	subs	r3, r2, r3
 8017b50:	b2db      	uxtb	r3, r3
 8017b52:	429e      	cmp	r6, r3
 8017b54:	bf28      	it	cs
 8017b56:	461e      	movcs	r6, r3
 8017b58:	462b      	mov	r3, r5
 8017b5a:	4622      	mov	r2, r4
 8017b5c:	2100      	movs	r1, #0
 8017b5e:	a805      	add	r0, sp, #20
 8017b60:	f001 f87a 	bl	8018c58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017b64:	e7e2      	b.n	8017b2c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8017b66:	4630      	mov	r0, r6
 8017b68:	b01e      	add	sp, #120	; 0x78
 8017b6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017b6e:	b003      	add	sp, #12
 8017b70:	4770      	bx	lr

08017b72 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017b72:	b513      	push	{r0, r1, r4, lr}
 8017b74:	6803      	ldr	r3, [r0, #0]
 8017b76:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017b7a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017b7e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017b82:	2400      	movs	r4, #0
 8017b84:	9400      	str	r4, [sp, #0]
 8017b86:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017b8a:	691b      	ldr	r3, [r3, #16]
 8017b8c:	4669      	mov	r1, sp
 8017b8e:	4798      	blx	r3
 8017b90:	b002      	add	sp, #8
 8017b92:	bd10      	pop	{r4, pc}

08017b94 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017b94:	b538      	push	{r3, r4, r5, lr}
 8017b96:	680b      	ldr	r3, [r1, #0]
 8017b98:	460c      	mov	r4, r1
 8017b9a:	68db      	ldr	r3, [r3, #12]
 8017b9c:	4605      	mov	r5, r0
 8017b9e:	4798      	blx	r3
 8017ba0:	6823      	ldr	r3, [r4, #0]
 8017ba2:	4620      	mov	r0, r4
 8017ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ba6:	4629      	mov	r1, r5
 8017ba8:	4798      	blx	r3
 8017baa:	4628      	mov	r0, r5
 8017bac:	bd38      	pop	{r3, r4, r5, pc}

08017bae <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017bae:	b410      	push	{r4}
 8017bb0:	880a      	ldrh	r2, [r1, #0]
 8017bb2:	8884      	ldrh	r4, [r0, #4]
 8017bb4:	4422      	add	r2, r4
 8017bb6:	800a      	strh	r2, [r1, #0]
 8017bb8:	88c4      	ldrh	r4, [r0, #6]
 8017bba:	884a      	ldrh	r2, [r1, #2]
 8017bbc:	4422      	add	r2, r4
 8017bbe:	804a      	strh	r2, [r1, #2]
 8017bc0:	6940      	ldr	r0, [r0, #20]
 8017bc2:	b120      	cbz	r0, 8017bce <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8017bc4:	6803      	ldr	r3, [r0, #0]
 8017bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bcc:	4718      	bx	r3
 8017bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bd2:	4770      	bx	lr

08017bd4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8017bd4:	b570      	push	{r4, r5, r6, lr}
 8017bd6:	8882      	ldrh	r2, [r0, #4]
 8017bd8:	880b      	ldrh	r3, [r1, #0]
 8017bda:	4413      	add	r3, r2
 8017bdc:	800b      	strh	r3, [r1, #0]
 8017bde:	88c2      	ldrh	r2, [r0, #6]
 8017be0:	884b      	ldrh	r3, [r1, #2]
 8017be2:	460c      	mov	r4, r1
 8017be4:	4413      	add	r3, r2
 8017be6:	804b      	strh	r3, [r1, #2]
 8017be8:	4605      	mov	r5, r0
 8017bea:	1d01      	adds	r1, r0, #4
 8017bec:	4620      	mov	r0, r4
 8017bee:	f7f9 fbdb 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 8017bf2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	dd0b      	ble.n	8017c12 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017bfa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	dd07      	ble.n	8017c12 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017c02:	6968      	ldr	r0, [r5, #20]
 8017c04:	b128      	cbz	r0, 8017c12 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017c06:	6803      	ldr	r3, [r0, #0]
 8017c08:	4621      	mov	r1, r4
 8017c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c10:	4718      	bx	r3
 8017c12:	bd70      	pop	{r4, r5, r6, pc}

08017c14 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8017c14:	b570      	push	{r4, r5, r6, lr}
 8017c16:	8882      	ldrh	r2, [r0, #4]
 8017c18:	880b      	ldrh	r3, [r1, #0]
 8017c1a:	4413      	add	r3, r2
 8017c1c:	800b      	strh	r3, [r1, #0]
 8017c1e:	88c2      	ldrh	r2, [r0, #6]
 8017c20:	884b      	ldrh	r3, [r1, #2]
 8017c22:	460c      	mov	r4, r1
 8017c24:	4413      	add	r3, r2
 8017c26:	804b      	strh	r3, [r1, #2]
 8017c28:	4605      	mov	r5, r0
 8017c2a:	1d01      	adds	r1, r0, #4
 8017c2c:	4620      	mov	r0, r4
 8017c2e:	f7f9 fbbb 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 8017c32:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	dd18      	ble.n	8017c6c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017c3a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	dd14      	ble.n	8017c6c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017c42:	6968      	ldr	r0, [r5, #20]
 8017c44:	b128      	cbz	r0, 8017c52 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8017c46:	6803      	ldr	r3, [r0, #0]
 8017c48:	4621      	mov	r1, r4
 8017c4a:	691b      	ldr	r3, [r3, #16]
 8017c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c50:	4718      	bx	r3
 8017c52:	4b07      	ldr	r3, [pc, #28]	; (8017c70 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	3304      	adds	r3, #4
 8017c58:	429d      	cmp	r5, r3
 8017c5a:	d107      	bne.n	8017c6c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017c5c:	f7fe fff2 	bl	8016c44 <_ZN8touchgfx11Application11getInstanceEv>
 8017c60:	6821      	ldr	r1, [r4, #0]
 8017c62:	6862      	ldr	r2, [r4, #4]
 8017c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c68:	f7ff b862 	b.w	8016d30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017c6c:	bd70      	pop	{r4, r5, r6, pc}
 8017c6e:	bf00      	nop
 8017c70:	2000884c 	.word	0x2000884c

08017c74 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017c74:	b570      	push	{r4, r5, r6, lr}
 8017c76:	4604      	mov	r4, r0
 8017c78:	4616      	mov	r6, r2
 8017c7a:	460d      	mov	r5, r1
 8017c7c:	b901      	cbnz	r1, 8017c80 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8017c7e:	b192      	cbz	r2, 8017ca6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8017c80:	6823      	ldr	r3, [r4, #0]
 8017c82:	4620      	mov	r0, r4
 8017c84:	699b      	ldr	r3, [r3, #24]
 8017c86:	4798      	blx	r3
 8017c88:	88e2      	ldrh	r2, [r4, #6]
 8017c8a:	88a1      	ldrh	r1, [r4, #4]
 8017c8c:	4432      	add	r2, r6
 8017c8e:	4429      	add	r1, r5
 8017c90:	4620      	mov	r0, r4
 8017c92:	b212      	sxth	r2, r2
 8017c94:	b209      	sxth	r1, r1
 8017c96:	f7f2 fefe 	bl	800aa96 <_ZN8touchgfx8Drawable5setXYEss>
 8017c9a:	6823      	ldr	r3, [r4, #0]
 8017c9c:	4620      	mov	r0, r4
 8017c9e:	699b      	ldr	r3, [r3, #24]
 8017ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ca4:	4718      	bx	r3
 8017ca6:	bd70      	pop	{r4, r5, r6, pc}

08017ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017ca8:	b510      	push	{r4, lr}
 8017caa:	4604      	mov	r4, r0
 8017cac:	4608      	mov	r0, r1
 8017cae:	2300      	movs	r3, #0
 8017cb0:	8023      	strh	r3, [r4, #0]
 8017cb2:	8063      	strh	r3, [r4, #2]
 8017cb4:	6803      	ldr	r3, [r0, #0]
 8017cb6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017cba:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8017cbe:	80a1      	strh	r1, [r4, #4]
 8017cc0:	80e2      	strh	r2, [r4, #6]
 8017cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cc4:	4621      	mov	r1, r4
 8017cc6:	4798      	blx	r3
 8017cc8:	4620      	mov	r0, r4
 8017cca:	bd10      	pop	{r4, pc}

08017ccc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8017ccc:	b530      	push	{r4, r5, lr}
 8017cce:	8083      	strh	r3, [r0, #4]
 8017cd0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8017cd4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8017cd8:	7183      	strb	r3, [r0, #6]
 8017cda:	79c3      	ldrb	r3, [r0, #7]
 8017cdc:	6101      	str	r1, [r0, #16]
 8017cde:	f365 0306 	bfi	r3, r5, #0, #7
 8017ce2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8017ce6:	8282      	strh	r2, [r0, #20]
 8017ce8:	f365 13c7 	bfi	r3, r5, #7, #1
 8017cec:	71c3      	strb	r3, [r0, #7]
 8017cee:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8017cf2:	7203      	strb	r3, [r0, #8]
 8017cf4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8017cf8:	7243      	strb	r3, [r0, #9]
 8017cfa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017cfe:	8143      	strh	r3, [r0, #10]
 8017d00:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8017d04:	8183      	strh	r3, [r0, #12]
 8017d06:	4b01      	ldr	r3, [pc, #4]	; (8017d0c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8017d08:	6003      	str	r3, [r0, #0]
 8017d0a:	bd30      	pop	{r4, r5, pc}
 8017d0c:	0802afd0 	.word	0x0802afd0

08017d10 <_ZNK8touchgfx9ConstFont4findEt>:
 8017d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d12:	6904      	ldr	r4, [r0, #16]
 8017d14:	b3bc      	cbz	r4, 8017d86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017d16:	88a3      	ldrh	r3, [r4, #4]
 8017d18:	8a82      	ldrh	r2, [r0, #20]
 8017d1a:	1acb      	subs	r3, r1, r3
 8017d1c:	f102 32ff 	add.w	r2, r2, #4294967295
 8017d20:	d431      	bmi.n	8017d86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017d22:	4293      	cmp	r3, r2
 8017d24:	dd0c      	ble.n	8017d40 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8017d26:	230e      	movs	r3, #14
 8017d28:	fb03 4302 	mla	r3, r3, r2, r4
 8017d2c:	889b      	ldrh	r3, [r3, #4]
 8017d2e:	1a5b      	subs	r3, r3, r1
 8017d30:	1ad3      	subs	r3, r2, r3
 8017d32:	429a      	cmp	r2, r3
 8017d34:	db27      	blt.n	8017d86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	bfbc      	itt	lt
 8017d3a:	2302      	movlt	r3, #2
 8017d3c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017d40:	2500      	movs	r5, #0
 8017d42:	260e      	movs	r6, #14
 8017d44:	4295      	cmp	r5, r2
 8017d46:	dc1e      	bgt.n	8017d86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017d48:	fb06 4003 	mla	r0, r6, r3, r4
 8017d4c:	8887      	ldrh	r7, [r0, #4]
 8017d4e:	42b9      	cmp	r1, r7
 8017d50:	d01a      	beq.n	8017d88 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8017d52:	d20d      	bcs.n	8017d70 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8017d54:	1e5a      	subs	r2, r3, #1
 8017d56:	4295      	cmp	r5, r2
 8017d58:	dc15      	bgt.n	8017d86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017d5a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8017d5e:	1a5b      	subs	r3, r3, r1
 8017d60:	1ad3      	subs	r3, r2, r3
 8017d62:	429a      	cmp	r2, r3
 8017d64:	db0f      	blt.n	8017d86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017d66:	429d      	cmp	r5, r3
 8017d68:	ddec      	ble.n	8017d44 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017d6a:	1953      	adds	r3, r2, r5
 8017d6c:	105b      	asrs	r3, r3, #1
 8017d6e:	e7e9      	b.n	8017d44 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017d70:	1c5d      	adds	r5, r3, #1
 8017d72:	42aa      	cmp	r2, r5
 8017d74:	db07      	blt.n	8017d86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017d76:	8a43      	ldrh	r3, [r0, #18]
 8017d78:	1acb      	subs	r3, r1, r3
 8017d7a:	442b      	add	r3, r5
 8017d7c:	429d      	cmp	r5, r3
 8017d7e:	dc02      	bgt.n	8017d86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017d80:	429a      	cmp	r2, r3
 8017d82:	dadf      	bge.n	8017d44 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017d84:	e7f1      	b.n	8017d6a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8017d86:	2000      	movs	r0, #0
 8017d88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d8a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8017d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d8c:	4604      	mov	r4, r0
 8017d8e:	4617      	mov	r7, r2
 8017d90:	461e      	mov	r6, r3
 8017d92:	b911      	cbnz	r1, 8017d9a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017d94:	2500      	movs	r5, #0
 8017d96:	4628      	mov	r0, r5
 8017d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d9a:	290a      	cmp	r1, #10
 8017d9c:	d0fa      	beq.n	8017d94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017d9e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8017da2:	4291      	cmp	r1, r2
 8017da4:	d0f6      	beq.n	8017d94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017da6:	f242 020b 	movw	r2, #8203	; 0x200b
 8017daa:	4291      	cmp	r1, r2
 8017dac:	d0f2      	beq.n	8017d94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017dae:	f7ff ffaf 	bl	8017d10 <_ZNK8touchgfx9ConstFont4findEt>
 8017db2:	4605      	mov	r5, r0
 8017db4:	b950      	cbnz	r0, 8017dcc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8017db6:	6823      	ldr	r3, [r4, #0]
 8017db8:	4620      	mov	r0, r4
 8017dba:	691b      	ldr	r3, [r3, #16]
 8017dbc:	4798      	blx	r3
 8017dbe:	4601      	mov	r1, r0
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	f7ff ffa5 	bl	8017d10 <_ZNK8touchgfx9ConstFont4findEt>
 8017dc6:	4605      	mov	r5, r0
 8017dc8:	2800      	cmp	r0, #0
 8017dca:	d0e3      	beq.n	8017d94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017dcc:	6823      	ldr	r3, [r4, #0]
 8017dce:	4629      	mov	r1, r5
 8017dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017dd2:	4620      	mov	r0, r4
 8017dd4:	4798      	blx	r3
 8017dd6:	6038      	str	r0, [r7, #0]
 8017dd8:	6823      	ldr	r3, [r4, #0]
 8017dda:	4620      	mov	r0, r4
 8017ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017dde:	4798      	blx	r3
 8017de0:	7030      	strb	r0, [r6, #0]
 8017de2:	e7d8      	b.n	8017d96 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08017de4 <_ZN8touchgfx4clzuEm>:
 8017de4:	4603      	mov	r3, r0
 8017de6:	b1c8      	cbz	r0, 8017e1c <_ZN8touchgfx4clzuEm+0x38>
 8017de8:	0c02      	lsrs	r2, r0, #16
 8017dea:	0412      	lsls	r2, r2, #16
 8017dec:	b9a2      	cbnz	r2, 8017e18 <_ZN8touchgfx4clzuEm+0x34>
 8017dee:	0403      	lsls	r3, r0, #16
 8017df0:	2010      	movs	r0, #16
 8017df2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017df6:	bf04      	itt	eq
 8017df8:	021b      	lsleq	r3, r3, #8
 8017dfa:	3008      	addeq	r0, #8
 8017dfc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017e00:	bf04      	itt	eq
 8017e02:	011b      	lsleq	r3, r3, #4
 8017e04:	3004      	addeq	r0, #4
 8017e06:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017e0a:	bf04      	itt	eq
 8017e0c:	009b      	lsleq	r3, r3, #2
 8017e0e:	3002      	addeq	r0, #2
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	db04      	blt.n	8017e1e <_ZN8touchgfx4clzuEm+0x3a>
 8017e14:	3001      	adds	r0, #1
 8017e16:	4770      	bx	lr
 8017e18:	2000      	movs	r0, #0
 8017e1a:	e7ea      	b.n	8017df2 <_ZN8touchgfx4clzuEm+0xe>
 8017e1c:	2020      	movs	r0, #32
 8017e1e:	4770      	bx	lr

08017e20 <_ZN8touchgfx7muldivuEmmmRm>:
 8017e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e24:	4680      	mov	r8, r0
 8017e26:	460f      	mov	r7, r1
 8017e28:	4615      	mov	r5, r2
 8017e2a:	461e      	mov	r6, r3
 8017e2c:	f7ff ffda 	bl	8017de4 <_ZN8touchgfx4clzuEm>
 8017e30:	b998      	cbnz	r0, 8017e5a <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8017e32:	4608      	mov	r0, r1
 8017e34:	f7ff ffd6 	bl	8017de4 <_ZN8touchgfx4clzuEm>
 8017e38:	2800      	cmp	r0, #0
 8017e3a:	dd08      	ble.n	8017e4e <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8017e3c:	4633      	mov	r3, r6
 8017e3e:	462a      	mov	r2, r5
 8017e40:	4641      	mov	r1, r8
 8017e42:	4638      	mov	r0, r7
 8017e44:	f7ff ffec 	bl	8017e20 <_ZN8touchgfx7muldivuEmmmRm>
 8017e48:	b003      	add	sp, #12
 8017e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8017e52:	6033      	str	r3, [r6, #0]
 8017e54:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017e58:	e7f6      	b.n	8017e48 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8017e5a:	fa31 f900 	lsrs.w	r9, r1, r0
 8017e5e:	fb01 f308 	mul.w	r3, r1, r8
 8017e62:	d105      	bne.n	8017e70 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8017e64:	fbb3 f0f5 	udiv	r0, r3, r5
 8017e68:	fb05 3510 	mls	r5, r5, r0, r3
 8017e6c:	6035      	str	r5, [r6, #0]
 8017e6e:	e7eb      	b.n	8017e48 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8017e70:	2301      	movs	r3, #1
 8017e72:	fa08 fb00 	lsl.w	fp, r8, r0
 8017e76:	fa03 f000 	lsl.w	r0, r3, r0
 8017e7a:	3801      	subs	r0, #1
 8017e7c:	462a      	mov	r2, r5
 8017e7e:	4633      	mov	r3, r6
 8017e80:	4641      	mov	r1, r8
 8017e82:	4038      	ands	r0, r7
 8017e84:	f7ff ffcc 	bl	8017e20 <_ZN8touchgfx7muldivuEmmmRm>
 8017e88:	fbbb faf5 	udiv	sl, fp, r5
 8017e8c:	462a      	mov	r2, r5
 8017e8e:	4607      	mov	r7, r0
 8017e90:	ab01      	add	r3, sp, #4
 8017e92:	fb05 b11a 	mls	r1, r5, sl, fp
 8017e96:	4648      	mov	r0, r9
 8017e98:	f7ff ffc2 	bl	8017e20 <_ZN8touchgfx7muldivuEmmmRm>
 8017e9c:	9b01      	ldr	r3, [sp, #4]
 8017e9e:	6832      	ldr	r2, [r6, #0]
 8017ea0:	fb09 f40a 	mul.w	r4, r9, sl
 8017ea4:	441a      	add	r2, r3
 8017ea6:	fbb2 f3f5 	udiv	r3, r2, r5
 8017eaa:	441c      	add	r4, r3
 8017eac:	443c      	add	r4, r7
 8017eae:	4420      	add	r0, r4
 8017eb0:	fb05 2513 	mls	r5, r5, r3, r2
 8017eb4:	e7da      	b.n	8017e6c <_ZN8touchgfx7muldivuEmmmRm+0x4c>

08017eb6 <_ZN8touchgfx6muldivElllRl>:
 8017eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017eb8:	2800      	cmp	r0, #0
 8017eba:	bfba      	itte	lt
 8017ebc:	4240      	neglt	r0, r0
 8017ebe:	f04f 34ff 	movlt.w	r4, #4294967295
 8017ec2:	2401      	movge	r4, #1
 8017ec4:	2900      	cmp	r1, #0
 8017ec6:	bfbc      	itt	lt
 8017ec8:	4249      	neglt	r1, r1
 8017eca:	4264      	neglt	r4, r4
 8017ecc:	2a00      	cmp	r2, #0
 8017ece:	bfb6      	itet	lt
 8017ed0:	4265      	neglt	r5, r4
 8017ed2:	4625      	movge	r5, r4
 8017ed4:	4252      	neglt	r2, r2
 8017ed6:	4288      	cmp	r0, r1
 8017ed8:	461e      	mov	r6, r3
 8017eda:	bfc2      	ittt	gt
 8017edc:	4603      	movgt	r3, r0
 8017ede:	4608      	movgt	r0, r1
 8017ee0:	4619      	movgt	r1, r3
 8017ee2:	ab01      	add	r3, sp, #4
 8017ee4:	f7ff ff9c 	bl	8017e20 <_ZN8touchgfx7muldivuEmmmRm>
 8017ee8:	9b01      	ldr	r3, [sp, #4]
 8017eea:	4368      	muls	r0, r5
 8017eec:	435c      	muls	r4, r3
 8017eee:	6034      	str	r4, [r6, #0]
 8017ef0:	b002      	add	sp, #8
 8017ef2:	bd70      	pop	{r4, r5, r6, pc}

08017ef4 <_ZN8touchgfx6muldivElll>:
 8017ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017ef6:	4606      	mov	r6, r0
 8017ef8:	ab01      	add	r3, sp, #4
 8017efa:	460d      	mov	r5, r1
 8017efc:	4614      	mov	r4, r2
 8017efe:	f7ff ffda 	bl	8017eb6 <_ZN8touchgfx6muldivElllRl>
 8017f02:	2e00      	cmp	r6, #0
 8017f04:	db20      	blt.n	8017f48 <_ZN8touchgfx6muldivElll+0x54>
 8017f06:	bf14      	ite	ne
 8017f08:	2301      	movne	r3, #1
 8017f0a:	2300      	moveq	r3, #0
 8017f0c:	2d00      	cmp	r5, #0
 8017f0e:	db1e      	blt.n	8017f4e <_ZN8touchgfx6muldivElll+0x5a>
 8017f10:	bf14      	ite	ne
 8017f12:	2201      	movne	r2, #1
 8017f14:	2200      	moveq	r2, #0
 8017f16:	2c00      	cmp	r4, #0
 8017f18:	fb03 f202 	mul.w	r2, r3, r2
 8017f1c:	db1a      	blt.n	8017f54 <_ZN8touchgfx6muldivElll+0x60>
 8017f1e:	bf14      	ite	ne
 8017f20:	2301      	movne	r3, #1
 8017f22:	2300      	moveq	r3, #0
 8017f24:	4353      	muls	r3, r2
 8017f26:	2b01      	cmp	r3, #1
 8017f28:	d117      	bne.n	8017f5a <_ZN8touchgfx6muldivElll+0x66>
 8017f2a:	9b01      	ldr	r3, [sp, #4]
 8017f2c:	2c00      	cmp	r4, #0
 8017f2e:	bfb8      	it	lt
 8017f30:	4264      	neglt	r4, r4
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	f104 0401 	add.w	r4, r4, #1
 8017f38:	bfb8      	it	lt
 8017f3a:	425b      	neglt	r3, r3
 8017f3c:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8017f40:	db00      	blt.n	8017f44 <_ZN8touchgfx6muldivElll+0x50>
 8017f42:	3001      	adds	r0, #1
 8017f44:	b002      	add	sp, #8
 8017f46:	bd70      	pop	{r4, r5, r6, pc}
 8017f48:	f04f 33ff 	mov.w	r3, #4294967295
 8017f4c:	e7de      	b.n	8017f0c <_ZN8touchgfx6muldivElll+0x18>
 8017f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8017f52:	e7e0      	b.n	8017f16 <_ZN8touchgfx6muldivElll+0x22>
 8017f54:	f04f 33ff 	mov.w	r3, #4294967295
 8017f58:	e7e4      	b.n	8017f24 <_ZN8touchgfx6muldivElll+0x30>
 8017f5a:	3301      	adds	r3, #1
 8017f5c:	d1f2      	bne.n	8017f44 <_ZN8touchgfx6muldivElll+0x50>
 8017f5e:	9b01      	ldr	r3, [sp, #4]
 8017f60:	2c00      	cmp	r4, #0
 8017f62:	bfb8      	it	lt
 8017f64:	4264      	neglt	r4, r4
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	bfb8      	it	lt
 8017f6a:	425b      	neglt	r3, r3
 8017f6c:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8017f70:	bfc8      	it	gt
 8017f72:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8017f76:	e7e5      	b.n	8017f44 <_ZN8touchgfx6muldivElll+0x50>

08017f78 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8017f78:	2000      	movs	r0, #0
 8017f7a:	4770      	bx	lr

08017f7c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8017f7c:	2001      	movs	r0, #1
 8017f7e:	4770      	bx	lr

08017f80 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8017f80:	2002      	movs	r0, #2
 8017f82:	4770      	bx	lr

08017f84 <_ZN8touchgfx12GestureEventD1Ev>:
 8017f84:	4770      	bx	lr

08017f86 <_ZN8touchgfx9DragEventD1Ev>:
 8017f86:	4770      	bx	lr

08017f88 <_ZN8touchgfx10ClickEventD1Ev>:
 8017f88:	4770      	bx	lr

08017f8a <_ZN8touchgfx10ClickEventD0Ev>:
 8017f8a:	b510      	push	{r4, lr}
 8017f8c:	210c      	movs	r1, #12
 8017f8e:	4604      	mov	r4, r0
 8017f90:	f00d ff78 	bl	8025e84 <_ZdlPvj>
 8017f94:	4620      	mov	r0, r4
 8017f96:	bd10      	pop	{r4, pc}

08017f98 <_ZN8touchgfx9DragEventD0Ev>:
 8017f98:	b510      	push	{r4, lr}
 8017f9a:	2110      	movs	r1, #16
 8017f9c:	4604      	mov	r4, r0
 8017f9e:	f00d ff71 	bl	8025e84 <_ZdlPvj>
 8017fa2:	4620      	mov	r0, r4
 8017fa4:	bd10      	pop	{r4, pc}

08017fa6 <_ZN8touchgfx12GestureEventD0Ev>:
 8017fa6:	b510      	push	{r4, lr}
 8017fa8:	210c      	movs	r1, #12
 8017faa:	4604      	mov	r4, r0
 8017fac:	f00d ff6a 	bl	8025e84 <_ZdlPvj>
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	bd10      	pop	{r4, pc}

08017fb4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8017fb4:	b530      	push	{r4, r5, lr}
 8017fb6:	460d      	mov	r5, r1
 8017fb8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017fba:	b087      	sub	sp, #28
 8017fbc:	4604      	mov	r4, r0
 8017fbe:	b301      	cbz	r1, 8018002 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8017fc0:	a801      	add	r0, sp, #4
 8017fc2:	f7ff fe71 	bl	8017ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017fc6:	892a      	ldrh	r2, [r5, #8]
 8017fc8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017fcc:	7928      	ldrb	r0, [r5, #4]
 8017fce:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017fd2:	f88d 0010 	strb.w	r0, [sp, #16]
 8017fd6:	1ad2      	subs	r2, r2, r3
 8017fd8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017fda:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017fdc:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017fe0:	441a      	add	r2, r3
 8017fe2:	896b      	ldrh	r3, [r5, #10]
 8017fe4:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8017fe8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017fec:	1b5b      	subs	r3, r3, r5
 8017fee:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8017ff0:	442b      	add	r3, r5
 8017ff2:	4d05      	ldr	r5, [pc, #20]	; (8018008 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8017ff4:	9503      	str	r5, [sp, #12]
 8017ff6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017ffa:	6803      	ldr	r3, [r0, #0]
 8017ffc:	a903      	add	r1, sp, #12
 8017ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018000:	4798      	blx	r3
 8018002:	b007      	add	sp, #28
 8018004:	bd30      	pop	{r4, r5, pc}
 8018006:	bf00      	nop
 8018008:	0802b050 	.word	0x0802b050

0801800c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801800c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018010:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018012:	b08a      	sub	sp, #40	; 0x28
 8018014:	4604      	mov	r4, r0
 8018016:	460d      	mov	r5, r1
 8018018:	b113      	cbz	r3, 8018020 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801801a:	790b      	ldrb	r3, [r1, #4]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d044      	beq.n	80180aa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018020:	f104 0804 	add.w	r8, r4, #4
 8018024:	4641      	mov	r1, r8
 8018026:	a803      	add	r0, sp, #12
 8018028:	f7ff fe3e 	bl	8017ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801802c:	792b      	ldrb	r3, [r5, #4]
 801802e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8018032:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8018036:	b983      	cbnz	r3, 801805a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8018038:	892a      	ldrh	r2, [r5, #8]
 801803a:	88e9      	ldrh	r1, [r5, #6]
 801803c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8018040:	1b92      	subs	r2, r2, r6
 8018042:	1bc9      	subs	r1, r1, r7
 8018044:	9301      	str	r3, [sp, #4]
 8018046:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801804a:	9300      	str	r3, [sp, #0]
 801804c:	b212      	sxth	r2, r2
 801804e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8018052:	b209      	sxth	r1, r1
 8018054:	4640      	mov	r0, r8
 8018056:	f7f9 f8c3 	bl	80111e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801805a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801805c:	b329      	cbz	r1, 80180aa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801805e:	a805      	add	r0, sp, #20
 8018060:	f7ff fe22 	bl	8017ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018064:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018068:	792b      	ldrb	r3, [r5, #4]
 801806a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801806c:	f88d 3020 	strb.w	r3, [sp, #32]
 8018070:	1abf      	subs	r7, r7, r2
 8018072:	88ea      	ldrh	r2, [r5, #6]
 8018074:	4417      	add	r7, r2
 8018076:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8018078:	4417      	add	r7, r2
 801807a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801807e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8018082:	1ab6      	subs	r6, r6, r2
 8018084:	892a      	ldrh	r2, [r5, #8]
 8018086:	4416      	add	r6, r2
 8018088:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801808a:	4416      	add	r6, r2
 801808c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8018090:	4a07      	ldr	r2, [pc, #28]	; (80180b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8018092:	9207      	str	r2, [sp, #28]
 8018094:	2600      	movs	r6, #0
 8018096:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801809a:	6803      	ldr	r3, [r0, #0]
 801809c:	a907      	add	r1, sp, #28
 801809e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180a0:	4798      	blx	r3
 80180a2:	792b      	ldrb	r3, [r5, #4]
 80180a4:	b10b      	cbz	r3, 80180aa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80180a6:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80180aa:	b00a      	add	sp, #40	; 0x28
 80180ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180b0:	0802b028 	.word	0x0802b028

080180b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80180b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180b8:	460c      	mov	r4, r1
 80180ba:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80180bc:	b088      	sub	sp, #32
 80180be:	4605      	mov	r5, r0
 80180c0:	2900      	cmp	r1, #0
 80180c2:	d06d      	beq.n	80181a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80180c4:	4668      	mov	r0, sp
 80180c6:	f7ff fdef 	bl	8017ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80180ca:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80180cc:	88e3      	ldrh	r3, [r4, #6]
 80180ce:	f9bd 8000 	ldrsh.w	r8, [sp]
 80180d2:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80180d6:	440b      	add	r3, r1
 80180d8:	b21b      	sxth	r3, r3
 80180da:	4543      	cmp	r3, r8
 80180dc:	db31      	blt.n	8018142 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80180de:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80180e2:	44c4      	add	ip, r8
 80180e4:	fa0f fc8c 	sxth.w	ip, ip
 80180e8:	4563      	cmp	r3, ip
 80180ea:	da2a      	bge.n	8018142 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80180ec:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 80180ee:	8926      	ldrh	r6, [r4, #8]
 80180f0:	4416      	add	r6, r2
 80180f2:	b236      	sxth	r6, r6
 80180f4:	42be      	cmp	r6, r7
 80180f6:	db24      	blt.n	8018142 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80180f8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80180fc:	4438      	add	r0, r7
 80180fe:	b200      	sxth	r0, r0
 8018100:	4286      	cmp	r6, r0
 8018102:	da1e      	bge.n	8018142 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018104:	8963      	ldrh	r3, [r4, #10]
 8018106:	4419      	add	r1, r3
 8018108:	b209      	sxth	r1, r1
 801810a:	4541      	cmp	r1, r8
 801810c:	db08      	blt.n	8018120 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801810e:	4561      	cmp	r1, ip
 8018110:	da06      	bge.n	8018120 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018112:	89a3      	ldrh	r3, [r4, #12]
 8018114:	441a      	add	r2, r3
 8018116:	b212      	sxth	r2, r2
 8018118:	42ba      	cmp	r2, r7
 801811a:	db01      	blt.n	8018120 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801811c:	4282      	cmp	r2, r0
 801811e:	db10      	blt.n	8018142 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018120:	4b21      	ldr	r3, [pc, #132]	; (80181a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8018122:	9304      	str	r3, [sp, #16]
 8018124:	2302      	movs	r3, #2
 8018126:	f88d 3014 	strb.w	r3, [sp, #20]
 801812a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801812c:	2300      	movs	r3, #0
 801812e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018132:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018136:	f8ad 301a 	strh.w	r3, [sp, #26]
 801813a:	6803      	ldr	r3, [r0, #0]
 801813c:	a904      	add	r1, sp, #16
 801813e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018140:	4798      	blx	r3
 8018142:	1d29      	adds	r1, r5, #4
 8018144:	a802      	add	r0, sp, #8
 8018146:	f7ff fdaf 	bl	8017ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801814a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801814e:	88e0      	ldrh	r0, [r4, #6]
 8018150:	7921      	ldrb	r1, [r4, #4]
 8018152:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8018156:	8922      	ldrh	r2, [r4, #8]
 8018158:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801815a:	f88d 1014 	strb.w	r1, [sp, #20]
 801815e:	eba3 0808 	sub.w	r8, r3, r8
 8018162:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018166:	1bdf      	subs	r7, r3, r7
 8018168:	b2bb      	uxth	r3, r7
 801816a:	fa1f f888 	uxth.w	r8, r8
 801816e:	8967      	ldrh	r7, [r4, #10]
 8018170:	89a4      	ldrh	r4, [r4, #12]
 8018172:	4440      	add	r0, r8
 8018174:	4460      	add	r0, ip
 8018176:	441a      	add	r2, r3
 8018178:	44b8      	add	r8, r7
 801817a:	4423      	add	r3, r4
 801817c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018180:	4433      	add	r3, r6
 8018182:	4432      	add	r2, r6
 8018184:	44e0      	add	r8, ip
 8018186:	4c09      	ldr	r4, [pc, #36]	; (80181ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8018188:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801818a:	9404      	str	r4, [sp, #16]
 801818c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018190:	f8ad 801a 	strh.w	r8, [sp, #26]
 8018194:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018198:	6803      	ldr	r3, [r0, #0]
 801819a:	a904      	add	r1, sp, #16
 801819c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801819e:	4798      	blx	r3
 80181a0:	b008      	add	sp, #32
 80181a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181a6:	bf00      	nop
 80181a8:	0802b028 	.word	0x0802b028
 80181ac:	0802b03c 	.word	0x0802b03c

080181b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80181b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80181b2:	4604      	mov	r4, r0
 80181b4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80181b8:	3201      	adds	r2, #1
 80181ba:	d112      	bne.n	80181e2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80181bc:	6803      	ldr	r3, [r0, #0]
 80181be:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80181c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80181c6:	f8ad 1004 	strh.w	r1, [sp, #4]
 80181ca:	2500      	movs	r5, #0
 80181cc:	9500      	str	r5, [sp, #0]
 80181ce:	466d      	mov	r5, sp
 80181d0:	4629      	mov	r1, r5
 80181d2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80181d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181d8:	4798      	blx	r3
 80181da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80181de:	e884 0003 	stmia.w	r4, {r0, r1}
 80181e2:	4620      	mov	r0, r4
 80181e4:	b003      	add	sp, #12
 80181e6:	bd30      	pop	{r4, r5, pc}

080181e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80181e8:	b513      	push	{r0, r1, r4, lr}
 80181ea:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80181ee:	3301      	adds	r3, #1
 80181f0:	4604      	mov	r4, r0
 80181f2:	d109      	bne.n	8018208 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80181f4:	4601      	mov	r1, r0
 80181f6:	4668      	mov	r0, sp
 80181f8:	f7ff fd56 	bl	8017ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80181fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8018200:	8423      	strh	r3, [r4, #32]
 8018202:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018206:	8463      	strh	r3, [r4, #34]	; 0x22
 8018208:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801820c:	b002      	add	sp, #8
 801820e:	bd10      	pop	{r4, pc}

08018210 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018210:	b513      	push	{r0, r1, r4, lr}
 8018212:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8018216:	3301      	adds	r3, #1
 8018218:	4604      	mov	r4, r0
 801821a:	d109      	bne.n	8018230 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801821c:	4601      	mov	r1, r0
 801821e:	4668      	mov	r0, sp
 8018220:	f7ff fd42 	bl	8017ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018224:	f8bd 3000 	ldrh.w	r3, [sp]
 8018228:	8423      	strh	r3, [r4, #32]
 801822a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801822e:	8463      	strh	r3, [r4, #34]	; 0x22
 8018230:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8018234:	b002      	add	sp, #8
 8018236:	bd10      	pop	{r4, pc}

08018238 <_ZN8touchgfx6ScreenC1Ev>:
 8018238:	b570      	push	{r4, r5, r6, lr}
 801823a:	4605      	mov	r5, r0
 801823c:	4b16      	ldr	r3, [pc, #88]	; (8018298 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801823e:	f845 3b04 	str.w	r3, [r5], #4
 8018242:	2300      	movs	r3, #0
 8018244:	8103      	strh	r3, [r0, #8]
 8018246:	8143      	strh	r3, [r0, #10]
 8018248:	8183      	strh	r3, [r0, #12]
 801824a:	81c3      	strh	r3, [r0, #14]
 801824c:	8203      	strh	r3, [r0, #16]
 801824e:	8243      	strh	r3, [r0, #18]
 8018250:	8283      	strh	r3, [r0, #20]
 8018252:	82c3      	strh	r3, [r0, #22]
 8018254:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018258:	6203      	str	r3, [r0, #32]
 801825a:	8483      	strh	r3, [r0, #36]	; 0x24
 801825c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801825e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8018262:	4a0e      	ldr	r2, [pc, #56]	; (801829c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8018264:	6343      	str	r3, [r0, #52]	; 0x34
 8018266:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801826a:	4b0d      	ldr	r3, [pc, #52]	; (80182a0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801826c:	6042      	str	r2, [r0, #4]
 801826e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018272:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8018274:	4a0b      	ldr	r2, [pc, #44]	; (80182a4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8018276:	4604      	mov	r4, r0
 8018278:	2101      	movs	r1, #1
 801827a:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801827e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8018282:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018286:	4628      	mov	r0, r5
 8018288:	4798      	blx	r3
 801828a:	6863      	ldr	r3, [r4, #4]
 801828c:	4628      	mov	r0, r5
 801828e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018290:	4631      	mov	r1, r6
 8018292:	4798      	blx	r3
 8018294:	4620      	mov	r0, r4
 8018296:	bd70      	pop	{r4, r5, r6, pc}
 8018298:	0802b064 	.word	0x0802b064
 801829c:	0802a340 	.word	0x0802a340
 80182a0:	200087fe 	.word	0x200087fe
 80182a4:	200087fc 	.word	0x200087fc

080182a8 <_ZN8touchgfx6Screen4drawEv>:
 80182a8:	b507      	push	{r0, r1, r2, lr}
 80182aa:	4b09      	ldr	r3, [pc, #36]	; (80182d0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80182ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80182b0:	4b08      	ldr	r3, [pc, #32]	; (80182d4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80182b2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80182b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80182ba:	f8ad 3006 	strh.w	r3, [sp, #6]
 80182be:	6803      	ldr	r3, [r0, #0]
 80182c0:	2100      	movs	r1, #0
 80182c2:	9100      	str	r1, [sp, #0]
 80182c4:	689b      	ldr	r3, [r3, #8]
 80182c6:	4669      	mov	r1, sp
 80182c8:	4798      	blx	r3
 80182ca:	b003      	add	sp, #12
 80182cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80182d0:	200087fc 	.word	0x200087fc
 80182d4:	200087fe 	.word	0x200087fe

080182d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80182d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182dc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	b089      	sub	sp, #36	; 0x24
 80182e4:	4680      	mov	r8, r0
 80182e6:	460c      	mov	r4, r1
 80182e8:	4615      	mov	r5, r2
 80182ea:	dd0e      	ble.n	801830a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80182ec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	dd0a      	ble.n	801830a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80182f4:	4628      	mov	r0, r5
 80182f6:	f7ff ff5b 	bl	80181b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80182fa:	4621      	mov	r1, r4
 80182fc:	f7fe fc0a 	bl	8016b14 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018300:	69eb      	ldr	r3, [r5, #28]
 8018302:	b928      	cbnz	r0, 8018310 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8018304:	461d      	mov	r5, r3
 8018306:	2b00      	cmp	r3, #0
 8018308:	d1f4      	bne.n	80182f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801830a:	b009      	add	sp, #36	; 0x24
 801830c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018310:	ae04      	add	r6, sp, #16
 8018312:	2b00      	cmp	r3, #0
 8018314:	f000 80b5 	beq.w	8018482 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018318:	682b      	ldr	r3, [r5, #0]
 801831a:	4629      	mov	r1, r5
 801831c:	68db      	ldr	r3, [r3, #12]
 801831e:	a802      	add	r0, sp, #8
 8018320:	4798      	blx	r3
 8018322:	4628      	mov	r0, r5
 8018324:	f7ff ff60 	bl	80181e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018328:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801832c:	4407      	add	r7, r0
 801832e:	4628      	mov	r0, r5
 8018330:	f7ff ff6e 	bl	8018210 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018334:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018338:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801833c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018340:	4418      	add	r0, r3
 8018342:	4621      	mov	r1, r4
 8018344:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018348:	f8ad 0012 	strh.w	r0, [sp, #18]
 801834c:	b23f      	sxth	r7, r7
 801834e:	4630      	mov	r0, r6
 8018350:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018354:	f8ad 7010 	strh.w	r7, [sp, #16]
 8018358:	f7f9 f826 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 801835c:	4628      	mov	r0, r5
 801835e:	f7ff ff27 	bl	80181b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018362:	4602      	mov	r2, r0
 8018364:	e896 0003 	ldmia.w	r6, {r0, r1}
 8018368:	ab06      	add	r3, sp, #24
 801836a:	e883 0003 	stmia.w	r3, {r0, r1}
 801836e:	4611      	mov	r1, r2
 8018370:	4618      	mov	r0, r3
 8018372:	f7f9 f819 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 8018376:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801837a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801837e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8018382:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8018386:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801838a:	4299      	cmp	r1, r3
 801838c:	d10b      	bne.n	80183a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801838e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018392:	4552      	cmp	r2, sl
 8018394:	d107      	bne.n	80183a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018396:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801839a:	455a      	cmp	r2, fp
 801839c:	d103      	bne.n	80183a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801839e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80183a2:	454a      	cmp	r2, r9
 80183a4:	d06d      	beq.n	8018482 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80183a6:	f1bb 0f00 	cmp.w	fp, #0
 80183aa:	dd65      	ble.n	8018478 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80183ac:	f1b9 0f00 	cmp.w	r9, #0
 80183b0:	dd62      	ble.n	8018478 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80183b2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80183b6:	fa1f f08a 	uxth.w	r0, sl
 80183ba:	4552      	cmp	r2, sl
 80183bc:	9000      	str	r0, [sp, #0]
 80183be:	da12      	bge.n	80183e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80183c0:	9301      	str	r3, [sp, #4]
 80183c2:	9b00      	ldr	r3, [sp, #0]
 80183c4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80183c8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80183cc:	1a9a      	subs	r2, r3, r2
 80183ce:	f8ad 1010 	strh.w	r1, [sp, #16]
 80183d2:	f8ad 0014 	strh.w	r0, [sp, #20]
 80183d6:	f8ad 2016 	strh.w	r2, [sp, #22]
 80183da:	69ea      	ldr	r2, [r5, #28]
 80183dc:	4631      	mov	r1, r6
 80183de:	4640      	mov	r0, r8
 80183e0:	f7ff ff7a 	bl	80182d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80183e4:	9b01      	ldr	r3, [sp, #4]
 80183e6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80183ea:	429a      	cmp	r2, r3
 80183ec:	b29f      	uxth	r7, r3
 80183ee:	da0d      	bge.n	801840c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80183f0:	f8ad 2010 	strh.w	r2, [sp, #16]
 80183f4:	1aba      	subs	r2, r7, r2
 80183f6:	f8ad a012 	strh.w	sl, [sp, #18]
 80183fa:	f8ad 2014 	strh.w	r2, [sp, #20]
 80183fe:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018402:	69ea      	ldr	r2, [r5, #28]
 8018404:	4631      	mov	r1, r6
 8018406:	4640      	mov	r0, r8
 8018408:	f7ff ff66 	bl	80182d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801840c:	8822      	ldrh	r2, [r4, #0]
 801840e:	88a3      	ldrh	r3, [r4, #4]
 8018410:	445f      	add	r7, fp
 8018412:	4413      	add	r3, r2
 8018414:	b29b      	uxth	r3, r3
 8018416:	b2bf      	uxth	r7, r7
 8018418:	b23a      	sxth	r2, r7
 801841a:	b219      	sxth	r1, r3
 801841c:	4291      	cmp	r1, r2
 801841e:	dd0d      	ble.n	801843c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8018420:	1bdb      	subs	r3, r3, r7
 8018422:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018426:	f8ad a012 	strh.w	sl, [sp, #18]
 801842a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801842e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018432:	69ea      	ldr	r2, [r5, #28]
 8018434:	4631      	mov	r1, r6
 8018436:	4640      	mov	r0, r8
 8018438:	f7ff ff4e 	bl	80182d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801843c:	88e2      	ldrh	r2, [r4, #6]
 801843e:	8863      	ldrh	r3, [r4, #2]
 8018440:	4413      	add	r3, r2
 8018442:	9a00      	ldr	r2, [sp, #0]
 8018444:	444a      	add	r2, r9
 8018446:	b29b      	uxth	r3, r3
 8018448:	fa1f f982 	uxth.w	r9, r2
 801844c:	fa0f f289 	sxth.w	r2, r9
 8018450:	b219      	sxth	r1, r3
 8018452:	428a      	cmp	r2, r1
 8018454:	da15      	bge.n	8018482 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018456:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801845a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801845e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018462:	eba3 0309 	sub.w	r3, r3, r9
 8018466:	f8ad 0010 	strh.w	r0, [sp, #16]
 801846a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801846e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018472:	69ea      	ldr	r2, [r5, #28]
 8018474:	4631      	mov	r1, r6
 8018476:	e001      	b.n	801847c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8018478:	69ea      	ldr	r2, [r5, #28]
 801847a:	4621      	mov	r1, r4
 801847c:	4640      	mov	r0, r8
 801847e:	f7ff ff2b 	bl	80182d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018482:	4628      	mov	r0, r5
 8018484:	f7ff fe94 	bl	80181b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018488:	6861      	ldr	r1, [r4, #4]
 801848a:	4602      	mov	r2, r0
 801848c:	6820      	ldr	r0, [r4, #0]
 801848e:	4633      	mov	r3, r6
 8018490:	c303      	stmia	r3!, {r0, r1}
 8018492:	4611      	mov	r1, r2
 8018494:	4630      	mov	r0, r6
 8018496:	f7f8 ff87 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 801849a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	f77f af33 	ble.w	801830a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80184a4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	f77f af2e 	ble.w	801830a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80184ae:	4628      	mov	r0, r5
 80184b0:	f7ff fe9a 	bl	80181e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80184b4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80184b8:	1a18      	subs	r0, r3, r0
 80184ba:	f8ad 0010 	strh.w	r0, [sp, #16]
 80184be:	4628      	mov	r0, r5
 80184c0:	f7ff fea6 	bl	8018210 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80184c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80184c8:	1a18      	subs	r0, r3, r0
 80184ca:	f8ad 0012 	strh.w	r0, [sp, #18]
 80184ce:	682b      	ldr	r3, [r5, #0]
 80184d0:	4631      	mov	r1, r6
 80184d2:	689b      	ldr	r3, [r3, #8]
 80184d4:	4628      	mov	r0, r5
 80184d6:	4798      	blx	r3
 80184d8:	e717      	b.n	801830a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080184da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80184da:	b570      	push	{r4, r5, r6, lr}
 80184dc:	460c      	mov	r4, r1
 80184de:	b086      	sub	sp, #24
 80184e0:	1d06      	adds	r6, r0, #4
 80184e2:	2300      	movs	r3, #0
 80184e4:	4631      	mov	r1, r6
 80184e6:	4605      	mov	r5, r0
 80184e8:	a802      	add	r0, sp, #8
 80184ea:	9301      	str	r3, [sp, #4]
 80184ec:	f7ff fbdc 	bl	8017ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80184f0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80184f4:	8822      	ldrh	r2, [r4, #0]
 80184f6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80184fa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80184fe:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018502:	1ad2      	subs	r2, r2, r3
 8018504:	8863      	ldrh	r3, [r4, #2]
 8018506:	f8ad 2010 	strh.w	r2, [sp, #16]
 801850a:	1a5b      	subs	r3, r3, r1
 801850c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8018510:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018514:	aa01      	add	r2, sp, #4
 8018516:	a904      	add	r1, sp, #16
 8018518:	4630      	mov	r0, r6
 801851a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801851e:	f7f9 f81b 	bl	8011558 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8018522:	9a01      	ldr	r2, [sp, #4]
 8018524:	b11a      	cbz	r2, 801852e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8018526:	4621      	mov	r1, r4
 8018528:	4628      	mov	r0, r5
 801852a:	f7ff fed5 	bl	80182d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801852e:	b006      	add	sp, #24
 8018530:	bd70      	pop	{r4, r5, r6, pc}

08018532 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8018532:	b530      	push	{r4, r5, lr}
 8018534:	4602      	mov	r2, r0
 8018536:	4604      	mov	r4, r0
 8018538:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801853c:	b085      	sub	sp, #20
 801853e:	460d      	mov	r5, r1
 8018540:	6851      	ldr	r1, [r2, #4]
 8018542:	466b      	mov	r3, sp
 8018544:	c303      	stmia	r3!, {r0, r1}
 8018546:	4629      	mov	r1, r5
 8018548:	4668      	mov	r0, sp
 801854a:	f7f8 ff2d 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 801854e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018552:	b12b      	cbz	r3, 8018560 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8018554:	4669      	mov	r1, sp
 8018556:	4620      	mov	r0, r4
 8018558:	f7ff ffbf 	bl	80184da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801855c:	b005      	add	sp, #20
 801855e:	bd30      	pop	{r4, r5, pc}
 8018560:	3404      	adds	r4, #4
 8018562:	4621      	mov	r1, r4
 8018564:	a802      	add	r0, sp, #8
 8018566:	f7ff fb9f 	bl	8017ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801856a:	f8bd 3000 	ldrh.w	r3, [sp]
 801856e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018572:	1a9b      	subs	r3, r3, r2
 8018574:	f8ad 3000 	strh.w	r3, [sp]
 8018578:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801857c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018580:	4669      	mov	r1, sp
 8018582:	1a9b      	subs	r3, r3, r2
 8018584:	4620      	mov	r0, r4
 8018586:	f8ad 3002 	strh.w	r3, [sp, #2]
 801858a:	f7f8 ffac 	bl	80114e6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801858e:	e7e5      	b.n	801855c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08018590 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8018590:	680a      	ldr	r2, [r1, #0]
 8018592:	460b      	mov	r3, r1
 8018594:	6992      	ldr	r2, [r2, #24]
 8018596:	1d01      	adds	r1, r0, #4
 8018598:	4618      	mov	r0, r3
 801859a:	4710      	bx	r2

0801859c <_ZN8touchgfx12TextProviderC1Ev>:
 801859c:	b538      	push	{r3, r4, r5, lr}
 801859e:	2500      	movs	r5, #0
 80185a0:	2302      	movs	r3, #2
 80185a2:	4604      	mov	r4, r0
 80185a4:	e9c0 5500 	strd	r5, r5, [r0]
 80185a8:	7403      	strb	r3, [r0, #16]
 80185aa:	6145      	str	r5, [r0, #20]
 80185ac:	7605      	strb	r5, [r0, #24]
 80185ae:	83c5      	strh	r5, [r0, #30]
 80185b0:	8405      	strh	r5, [r0, #32]
 80185b2:	86c5      	strh	r5, [r0, #54]	; 0x36
 80185b4:	8705      	strh	r5, [r0, #56]	; 0x38
 80185b6:	87c5      	strh	r5, [r0, #62]	; 0x3e
 80185b8:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80185bc:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80185c0:	220e      	movs	r2, #14
 80185c2:	4629      	mov	r1, r5
 80185c4:	304c      	adds	r0, #76	; 0x4c
 80185c6:	f00e fb6f 	bl	8026ca8 <memset>
 80185ca:	2301      	movs	r3, #1
 80185cc:	4620      	mov	r0, r4
 80185ce:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80185d2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80185d6:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80185da:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80185de:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80185e2:	f7f6 f9a3 	bl	800e92c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80185e6:	4620      	mov	r0, r4
 80185e8:	bd38      	pop	{r3, r4, r5, pc}

080185ea <_ZN8touchgfx12TextProvider11endOfStringEv>:
 80185ea:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80185ec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80185f0:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 80185f2:	fab0 f080 	clz	r0, r0
 80185f6:	0940      	lsrs	r0, r0, #5
 80185f8:	4770      	bx	lr

080185fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80185fa:	b530      	push	{r4, r5, lr}
 80185fc:	2500      	movs	r5, #0
 80185fe:	2401      	movs	r4, #1
 8018600:	6843      	ldr	r3, [r0, #4]
 8018602:	b913      	cbnz	r3, 801860a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8018604:	6803      	ldr	r3, [r0, #0]
 8018606:	b313      	cbz	r3, 801864e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018608:	6043      	str	r3, [r0, #4]
 801860a:	7e03      	ldrb	r3, [r0, #24]
 801860c:	b143      	cbz	r3, 8018620 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801860e:	6943      	ldr	r3, [r0, #20]
 8018610:	b12b      	cbz	r3, 801861e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018612:	881a      	ldrh	r2, [r3, #0]
 8018614:	b11a      	cbz	r2, 801861e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018616:	1c9a      	adds	r2, r3, #2
 8018618:	6142      	str	r2, [r0, #20]
 801861a:	8818      	ldrh	r0, [r3, #0]
 801861c:	bd30      	pop	{r4, r5, pc}
 801861e:	7605      	strb	r5, [r0, #24]
 8018620:	6843      	ldr	r3, [r0, #4]
 8018622:	8819      	ldrh	r1, [r3, #0]
 8018624:	b199      	cbz	r1, 801864e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018626:	1c9a      	adds	r2, r3, #2
 8018628:	2902      	cmp	r1, #2
 801862a:	6042      	str	r2, [r0, #4]
 801862c:	d1f5      	bne.n	801861a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801862e:	7c03      	ldrb	r3, [r0, #16]
 8018630:	2b01      	cmp	r3, #1
 8018632:	d8e5      	bhi.n	8018600 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018634:	1c5a      	adds	r2, r3, #1
 8018636:	3302      	adds	r3, #2
 8018638:	7402      	strb	r2, [r0, #16]
 801863a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801863e:	6143      	str	r3, [r0, #20]
 8018640:	2b00      	cmp	r3, #0
 8018642:	d0dd      	beq.n	8018600 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018644:	881b      	ldrh	r3, [r3, #0]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d0da      	beq.n	8018600 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801864a:	7604      	strb	r4, [r0, #24]
 801864c:	e7d8      	b.n	8018600 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801864e:	2000      	movs	r0, #0
 8018650:	e7e4      	b.n	801861c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08018652 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8018652:	b430      	push	{r4, r5}
 8018654:	6001      	str	r1, [r0, #0]
 8018656:	2100      	movs	r1, #0
 8018658:	6041      	str	r1, [r0, #4]
 801865a:	6815      	ldr	r5, [r2, #0]
 801865c:	6085      	str	r5, [r0, #8]
 801865e:	6852      	ldr	r2, [r2, #4]
 8018660:	6443      	str	r3, [r0, #68]	; 0x44
 8018662:	9b02      	ldr	r3, [sp, #8]
 8018664:	60c2      	str	r2, [r0, #12]
 8018666:	7401      	strb	r1, [r0, #16]
 8018668:	6141      	str	r1, [r0, #20]
 801866a:	7601      	strb	r1, [r0, #24]
 801866c:	8701      	strh	r1, [r0, #56]	; 0x38
 801866e:	8401      	strh	r1, [r0, #32]
 8018670:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018674:	6483      	str	r3, [r0, #72]	; 0x48
 8018676:	bc30      	pop	{r4, r5}
 8018678:	f7f6 b958 	b.w	800e92c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801867c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801867c:	b408      	push	{r3}
 801867e:	b510      	push	{r4, lr}
 8018680:	b085      	sub	sp, #20
 8018682:	ac07      	add	r4, sp, #28
 8018684:	f854 3b04 	ldr.w	r3, [r4], #4
 8018688:	9300      	str	r3, [sp, #0]
 801868a:	4613      	mov	r3, r2
 801868c:	4622      	mov	r2, r4
 801868e:	9403      	str	r4, [sp, #12]
 8018690:	f7ff ffdf 	bl	8018652 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018694:	b005      	add	sp, #20
 8018696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801869a:	b001      	add	sp, #4
 801869c:	4770      	bx	lr

0801869e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801869e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186a0:	4605      	mov	r5, r0
 80186a2:	4608      	mov	r0, r1
 80186a4:	b1e9      	cbz	r1, 80186e2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80186a6:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80186aa:	460b      	mov	r3, r1
 80186ac:	f101 0708 	add.w	r7, r1, #8
 80186b0:	4622      	mov	r2, r4
 80186b2:	6818      	ldr	r0, [r3, #0]
 80186b4:	6859      	ldr	r1, [r3, #4]
 80186b6:	4626      	mov	r6, r4
 80186b8:	c603      	stmia	r6!, {r0, r1}
 80186ba:	3308      	adds	r3, #8
 80186bc:	42bb      	cmp	r3, r7
 80186be:	4634      	mov	r4, r6
 80186c0:	d1f7      	bne.n	80186b2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80186c2:	6818      	ldr	r0, [r3, #0]
 80186c4:	6030      	str	r0, [r6, #0]
 80186c6:	889b      	ldrh	r3, [r3, #4]
 80186c8:	80b3      	strh	r3, [r6, #4]
 80186ca:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80186ce:	015b      	lsls	r3, r3, #5
 80186d0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80186d4:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 80186d8:	430b      	orrs	r3, r1
 80186da:	425b      	negs	r3, r3
 80186dc:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80186e0:	4610      	mov	r0, r2
 80186e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080186e4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80186e4:	b538      	push	{r3, r4, r5, lr}
 80186e6:	460c      	mov	r4, r1
 80186e8:	6811      	ldr	r1, [r2, #0]
 80186ea:	4610      	mov	r0, r2
 80186ec:	68cd      	ldr	r5, [r1, #12]
 80186ee:	4619      	mov	r1, r3
 80186f0:	47a8      	blx	r5
 80186f2:	2800      	cmp	r0, #0
 80186f4:	bf08      	it	eq
 80186f6:	4620      	moveq	r0, r4
 80186f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080186fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80186fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186fe:	4604      	mov	r4, r0
 8018700:	4615      	mov	r5, r2
 8018702:	4608      	mov	r0, r1
 8018704:	b93a      	cbnz	r2, 8018716 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8018706:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801870a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801870e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8018712:	4628      	mov	r0, r5
 8018714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018716:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801871a:	8893      	ldrh	r3, [r2, #4]
 801871c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8018720:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018724:	79ee      	ldrb	r6, [r5, #7]
 8018726:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801872a:	4316      	orrs	r6, r2
 801872c:	19da      	adds	r2, r3, r7
 801872e:	b291      	uxth	r1, r2
 8018730:	291d      	cmp	r1, #29
 8018732:	b2b7      	uxth	r7, r6
 8018734:	d87a      	bhi.n	801882c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 8018736:	2201      	movs	r2, #1
 8018738:	408a      	lsls	r2, r1
 801873a:	4975      	ldr	r1, [pc, #468]	; (8018910 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801873c:	420a      	tst	r2, r1
 801873e:	ea4f 06e6 	mov.w	r6, r6, asr #3
 8018742:	d12d      	bne.n	80187a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8018744:	f412 7f60 	tst.w	r2, #896	; 0x380
 8018748:	d070      	beq.n	801882c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 801874a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801874e:	462b      	mov	r3, r5
 8018750:	f105 0e08 	add.w	lr, r5, #8
 8018754:	4615      	mov	r5, r2
 8018756:	6818      	ldr	r0, [r3, #0]
 8018758:	6859      	ldr	r1, [r3, #4]
 801875a:	4694      	mov	ip, r2
 801875c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018760:	3308      	adds	r3, #8
 8018762:	4573      	cmp	r3, lr
 8018764:	4662      	mov	r2, ip
 8018766:	d1f6      	bne.n	8018756 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8018768:	6818      	ldr	r0, [r3, #0]
 801876a:	f8cc 0000 	str.w	r0, [ip]
 801876e:	889b      	ldrh	r3, [r3, #4]
 8018770:	f8ac 3004 	strh.w	r3, [ip, #4]
 8018774:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018778:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801877c:	b2b3      	uxth	r3, r6
 801877e:	1aca      	subs	r2, r1, r3
 8018780:	b292      	uxth	r2, r2
 8018782:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8018786:	10d2      	asrs	r2, r2, #3
 8018788:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801878c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8018790:	4302      	orrs	r2, r0
 8018792:	1bcf      	subs	r7, r1, r7
 8018794:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8018798:	1afb      	subs	r3, r7, r3
 801879a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801879e:	e7b8      	b.n	8018712 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80187a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80187a2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80187a6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80187a8:	f640 6333 	movw	r3, #3635	; 0xe33
 80187ac:	4299      	cmp	r1, r3
 80187ae:	d110      	bne.n	80187d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 80187b0:	6803      	ldr	r3, [r0, #0]
 80187b2:	68db      	ldr	r3, [r3, #12]
 80187b4:	4798      	blx	r3
 80187b6:	7b41      	ldrb	r1, [r0, #13]
 80187b8:	00cb      	lsls	r3, r1, #3
 80187ba:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80187be:	7a03      	ldrb	r3, [r0, #8]
 80187c0:	0648      	lsls	r0, r1, #25
 80187c2:	ea43 0302 	orr.w	r3, r3, r2
 80187c6:	bf44      	itt	mi
 80187c8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80187cc:	b21b      	sxthmi	r3, r3
 80187ce:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80187d2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80187d6:	443b      	add	r3, r7
 80187d8:	4433      	add	r3, r6
 80187da:	b29b      	uxth	r3, r3
 80187dc:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 80187e0:	462a      	mov	r2, r5
 80187e2:	f105 0c08 	add.w	ip, r5, #8
 80187e6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80187ea:	4635      	mov	r5, r6
 80187ec:	6810      	ldr	r0, [r2, #0]
 80187ee:	6851      	ldr	r1, [r2, #4]
 80187f0:	4637      	mov	r7, r6
 80187f2:	c703      	stmia	r7!, {r0, r1}
 80187f4:	3208      	adds	r2, #8
 80187f6:	4562      	cmp	r2, ip
 80187f8:	463e      	mov	r6, r7
 80187fa:	d1f7      	bne.n	80187ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 80187fc:	6810      	ldr	r0, [r2, #0]
 80187fe:	6038      	str	r0, [r7, #0]
 8018800:	8892      	ldrh	r2, [r2, #4]
 8018802:	80ba      	strh	r2, [r7, #4]
 8018804:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018808:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801880c:	10db      	asrs	r3, r3, #3
 801880e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018812:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018816:	4313      	orrs	r3, r2
 8018818:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801881c:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8018820:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8018824:	1a9b      	subs	r3, r3, r2
 8018826:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801882a:	e772      	b.n	8018712 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801882c:	f023 0204 	bic.w	r2, r3, #4
 8018830:	f640 611b 	movw	r1, #3611	; 0xe1b
 8018834:	428a      	cmp	r2, r1
 8018836:	d003      	beq.n	8018840 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8018838:	f640 621d 	movw	r2, #3613	; 0xe1d
 801883c:	4293      	cmp	r3, r2
 801883e:	d120      	bne.n	8018882 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 8018840:	3b01      	subs	r3, #1
 8018842:	4602      	mov	r2, r0
 8018844:	b29b      	uxth	r3, r3
 8018846:	4629      	mov	r1, r5
 8018848:	4620      	mov	r0, r4
 801884a:	f7ff ff4b 	bl	80186e4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801884e:	7b41      	ldrb	r1, [r0, #13]
 8018850:	00cb      	lsls	r3, r1, #3
 8018852:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018856:	7a03      	ldrb	r3, [r0, #8]
 8018858:	0649      	lsls	r1, r1, #25
 801885a:	ea43 0302 	orr.w	r3, r3, r2
 801885e:	bf44      	itt	mi
 8018860:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018864:	b21b      	sxthmi	r3, r3
 8018866:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801886a:	7b6b      	ldrb	r3, [r5, #13]
 801886c:	7aaa      	ldrb	r2, [r5, #10]
 801886e:	005b      	lsls	r3, r3, #1
 8018870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018874:	4313      	orrs	r3, r2
 8018876:	115a      	asrs	r2, r3, #5
 8018878:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801887c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018880:	e036      	b.n	80188f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8018882:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8018886:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801888a:	7a2a      	ldrb	r2, [r5, #8]
 801888c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8018890:	ea42 0201 	orr.w	r2, r2, r1
 8018894:	bf1c      	itt	ne
 8018896:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801889a:	b212      	sxthne	r2, r2
 801889c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80188a0:	f640 6109 	movw	r1, #3593	; 0xe09
 80188a4:	f023 0210 	bic.w	r2, r3, #16
 80188a8:	428a      	cmp	r2, r1
 80188aa:	d003      	beq.n	80188b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 80188ac:	f640 6213 	movw	r2, #3603	; 0xe13
 80188b0:	4293      	cmp	r3, r2
 80188b2:	d12a      	bne.n	801890a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 80188b4:	7b6e      	ldrb	r6, [r5, #13]
 80188b6:	0076      	lsls	r6, r6, #1
 80188b8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80188bc:	7aae      	ldrb	r6, [r5, #10]
 80188be:	4316      	orrs	r6, r2
 80188c0:	f640 6213 	movw	r2, #3603	; 0xe13
 80188c4:	4293      	cmp	r3, r2
 80188c6:	bf18      	it	ne
 80188c8:	f103 33ff 	addne.w	r3, r3, #4294967295
 80188cc:	4602      	mov	r2, r0
 80188ce:	bf14      	ite	ne
 80188d0:	b29b      	uxthne	r3, r3
 80188d2:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80188d6:	4629      	mov	r1, r5
 80188d8:	4620      	mov	r0, r4
 80188da:	f7ff ff03 	bl	80186e4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80188de:	7b43      	ldrb	r3, [r0, #13]
 80188e0:	7a82      	ldrb	r2, [r0, #10]
 80188e2:	005b      	lsls	r3, r3, #1
 80188e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80188e8:	4313      	orrs	r3, r2
 80188ea:	1af6      	subs	r6, r6, r3
 80188ec:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 80188f0:	7b69      	ldrb	r1, [r5, #13]
 80188f2:	00cb      	lsls	r3, r1, #3
 80188f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80188f8:	7a2b      	ldrb	r3, [r5, #8]
 80188fa:	4313      	orrs	r3, r2
 80188fc:	064a      	lsls	r2, r1, #25
 80188fe:	bf44      	itt	mi
 8018900:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018904:	b21b      	sxthmi	r3, r3
 8018906:	1bdb      	subs	r3, r3, r7
 8018908:	e747      	b.n	801879a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801890a:	2300      	movs	r3, #0
 801890c:	e7b6      	b.n	801887c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 801890e:	bf00      	nop
 8018910:	3fc00079 	.word	0x3fc00079

08018914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018918:	4604      	mov	r4, r0
 801891a:	b942      	cbnz	r2, 801892e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801891c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018920:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8018924:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8018928:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801892c:	e047      	b.n	80189be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801892e:	7b51      	ldrb	r1, [r2, #13]
 8018930:	8893      	ldrh	r3, [r2, #4]
 8018932:	010d      	lsls	r5, r1, #4
 8018934:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8018938:	79d5      	ldrb	r5, [r2, #7]
 801893a:	4305      	orrs	r5, r0
 801893c:	2d04      	cmp	r5, #4
 801893e:	bfcc      	ite	gt
 8018940:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8018944:	f04f 0e01 	movle.w	lr, #1
 8018948:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801894c:	f200 80ab 	bhi.w	8018aa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8018950:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8018954:	4283      	cmp	r3, r0
 8018956:	d216      	bcs.n	8018986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018958:	f240 605b 	movw	r0, #1627	; 0x65b
 801895c:	4283      	cmp	r3, r0
 801895e:	d859      	bhi.n	8018a14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8018960:	f240 6057 	movw	r0, #1623	; 0x657
 8018964:	4283      	cmp	r3, r0
 8018966:	d20e      	bcs.n	8018986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018968:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801896c:	d24a      	bcs.n	8018a04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801896e:	f240 604e 	movw	r0, #1614	; 0x64e
 8018972:	4283      	cmp	r3, r0
 8018974:	d207      	bcs.n	8018986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018976:	f240 601a 	movw	r0, #1562	; 0x61a
 801897a:	4283      	cmp	r3, r0
 801897c:	d02a      	beq.n	80189d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801897e:	d821      	bhi.n	80189c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8018980:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8018984:	d35b      	bcc.n	8018a3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018986:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801898a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801898e:	f040 80d0 	bne.w	8018b32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018992:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8018996:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801899a:	f040 80ca 	bne.w	8018b32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801899e:	00cb      	lsls	r3, r1, #3
 80189a0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80189a4:	7a13      	ldrb	r3, [r2, #8]
 80189a6:	0649      	lsls	r1, r1, #25
 80189a8:	ea43 0300 	orr.w	r3, r3, r0
 80189ac:	bf44      	itt	mi
 80189ae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80189b2:	b21b      	sxthmi	r3, r3
 80189b4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80189b8:	1b5d      	subs	r5, r3, r5
 80189ba:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80189be:	4610      	mov	r0, r2
 80189c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189c4:	f240 604b 	movw	r0, #1611	; 0x64b
 80189c8:	4283      	cmp	r3, r0
 80189ca:	d338      	bcc.n	8018a3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80189cc:	f240 604c 	movw	r0, #1612	; 0x64c
 80189d0:	4283      	cmp	r3, r0
 80189d2:	d9d8      	bls.n	8018986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80189d4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 80189d8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 80189dc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80189e0:	f040 80f2 	bne.w	8018bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 80189e4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80189e8:	f040 80ee 	bne.w	8018bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 80189ec:	00cb      	lsls	r3, r1, #3
 80189ee:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80189f2:	7a13      	ldrb	r3, [r2, #8]
 80189f4:	064e      	lsls	r6, r1, #25
 80189f6:	ea43 0300 	orr.w	r3, r3, r0
 80189fa:	bf44      	itt	mi
 80189fc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018a00:	b21b      	sxthmi	r3, r3
 8018a02:	e7d9      	b.n	80189b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8018a04:	f240 6054 	movw	r0, #1620	; 0x654
 8018a08:	4283      	cmp	r3, r0
 8018a0a:	d8e3      	bhi.n	80189d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018a0c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018a10:	d9e0      	bls.n	80189d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018a12:	e7b8      	b.n	8018986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018a14:	f240 6074 	movw	r0, #1652	; 0x674
 8018a18:	4283      	cmp	r3, r0
 8018a1a:	d0b4      	beq.n	8018986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018a1c:	d82d      	bhi.n	8018a7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8018a1e:	f240 605e 	movw	r0, #1630	; 0x65e
 8018a22:	4283      	cmp	r3, r0
 8018a24:	d804      	bhi.n	8018a30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8018a26:	f240 605d 	movw	r0, #1629	; 0x65d
 8018a2a:	4283      	cmp	r3, r0
 8018a2c:	d3d2      	bcc.n	80189d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018a2e:	e7aa      	b.n	8018986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018a30:	f240 605f 	movw	r0, #1631	; 0x65f
 8018a34:	4283      	cmp	r3, r0
 8018a36:	d0cd      	beq.n	80189d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018a38:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8018a3c:	d0a3      	beq.n	8018986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018a3e:	00cb      	lsls	r3, r1, #3
 8018a40:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018a44:	7a13      	ldrb	r3, [r2, #8]
 8018a46:	0649      	lsls	r1, r1, #25
 8018a48:	ea43 0300 	orr.w	r3, r3, r0
 8018a4c:	bf44      	itt	mi
 8018a4e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018a52:	b21b      	sxthmi	r3, r3
 8018a54:	1b5d      	subs	r5, r3, r5
 8018a56:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018a5a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018a5e:	7b53      	ldrb	r3, [r2, #13]
 8018a60:	015b      	lsls	r3, r3, #5
 8018a62:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018a66:	7993      	ldrb	r3, [r2, #6]
 8018a68:	430b      	orrs	r3, r1
 8018a6a:	005b      	lsls	r3, r3, #1
 8018a6c:	2105      	movs	r1, #5
 8018a6e:	fb93 f3f1 	sdiv	r3, r3, r1
 8018a72:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8018a76:	440b      	add	r3, r1
 8018a78:	e756      	b.n	8018928 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8018a7a:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8018a7e:	4283      	cmp	r3, r0
 8018a80:	d809      	bhi.n	8018a96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8018a82:	f240 60df 	movw	r0, #1759	; 0x6df
 8018a86:	4283      	cmp	r3, r0
 8018a88:	f4bf af7d 	bcs.w	8018986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018a8c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8018a90:	2b05      	cmp	r3, #5
 8018a92:	d8d4      	bhi.n	8018a3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018a94:	e777      	b.n	8018986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018a96:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8018a9a:	4283      	cmp	r3, r0
 8018a9c:	d09a      	beq.n	80189d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018a9e:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8018aa2:	4283      	cmp	r3, r0
 8018aa4:	e7ca      	b.n	8018a3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018aa6:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8018aaa:	d22b      	bcs.n	8018b04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8018aac:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8018ab0:	4283      	cmp	r3, r0
 8018ab2:	d28f      	bcs.n	80189d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018ab4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018ab8:	4283      	cmp	r3, r0
 8018aba:	d816      	bhi.n	8018aea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8018abc:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8018ac0:	4283      	cmp	r3, r0
 8018ac2:	f4bf af60 	bcs.w	8018986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018ac6:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8018aca:	4283      	cmp	r3, r0
 8018acc:	d80a      	bhi.n	8018ae4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8018ace:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8018ad2:	4283      	cmp	r3, r0
 8018ad4:	f4bf af57 	bcs.w	8018986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018ad8:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8018adc:	4283      	cmp	r3, r0
 8018ade:	f43f af79 	beq.w	80189d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018ae2:	e7ac      	b.n	8018a3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018ae4:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8018ae8:	e7f8      	b.n	8018adc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8018aea:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8018aee:	4283      	cmp	r3, r0
 8018af0:	d802      	bhi.n	8018af8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8018af2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018af6:	e798      	b.n	8018a2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8018af8:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8018afc:	4283      	cmp	r3, r0
 8018afe:	f47f af42 	bne.w	8018986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b02:	e767      	b.n	80189d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b04:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8018b08:	4283      	cmp	r3, r0
 8018b0a:	f43f af63 	beq.w	80189d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b0e:	d802      	bhi.n	8018b16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8018b10:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8018b14:	e7f2      	b.n	8018afc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8018b16:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8018b1a:	4283      	cmp	r3, r0
 8018b1c:	d805      	bhi.n	8018b2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8018b1e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8018b22:	4283      	cmp	r3, r0
 8018b24:	f4ff af2f 	bcc.w	8018986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018b28:	e754      	b.n	80189d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018b2a:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8018b2e:	4283      	cmp	r3, r0
 8018b30:	e7af      	b.n	8018a92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8018b32:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8018b36:	4617      	mov	r7, r2
 8018b38:	f102 0808 	add.w	r8, r2, #8
 8018b3c:	4666      	mov	r6, ip
 8018b3e:	6838      	ldr	r0, [r7, #0]
 8018b40:	6879      	ldr	r1, [r7, #4]
 8018b42:	46e6      	mov	lr, ip
 8018b44:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018b48:	3708      	adds	r7, #8
 8018b4a:	4547      	cmp	r7, r8
 8018b4c:	46f4      	mov	ip, lr
 8018b4e:	d1f6      	bne.n	8018b3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8018b50:	6838      	ldr	r0, [r7, #0]
 8018b52:	f8ce 0000 	str.w	r0, [lr]
 8018b56:	88b9      	ldrh	r1, [r7, #4]
 8018b58:	f8ae 1004 	strh.w	r1, [lr, #4]
 8018b5c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018b60:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018b64:	d009      	beq.n	8018b7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8018b66:	7b51      	ldrb	r1, [r2, #13]
 8018b68:	7992      	ldrb	r2, [r2, #6]
 8018b6a:	0149      	lsls	r1, r1, #5
 8018b6c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018b70:	4311      	orrs	r1, r2
 8018b72:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018b76:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018b7a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018b7e:	b2ad      	uxth	r5, r5
 8018b80:	d00d      	beq.n	8018b9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 8018b82:	442b      	add	r3, r5
 8018b84:	b29b      	uxth	r3, r3
 8018b86:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018b8a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018b8e:	10db      	asrs	r3, r3, #3
 8018b90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018b94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018b98:	4313      	orrs	r3, r2
 8018b9a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018b9e:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018ba2:	00cb      	lsls	r3, r1, #3
 8018ba4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018ba8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018bac:	064f      	lsls	r7, r1, #25
 8018bae:	ea43 0302 	orr.w	r3, r3, r2
 8018bb2:	bf44      	itt	mi
 8018bb4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018bb8:	b21b      	sxthmi	r3, r3
 8018bba:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018bbe:	1b5b      	subs	r3, r3, r5
 8018bc0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8018bc4:	4632      	mov	r2, r6
 8018bc6:	e6fa      	b.n	80189be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018bc8:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8018bcc:	4617      	mov	r7, r2
 8018bce:	f102 0908 	add.w	r9, r2, #8
 8018bd2:	4666      	mov	r6, ip
 8018bd4:	6838      	ldr	r0, [r7, #0]
 8018bd6:	6879      	ldr	r1, [r7, #4]
 8018bd8:	46e0      	mov	r8, ip
 8018bda:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8018bde:	3708      	adds	r7, #8
 8018be0:	454f      	cmp	r7, r9
 8018be2:	46c4      	mov	ip, r8
 8018be4:	d1f6      	bne.n	8018bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8018be6:	6838      	ldr	r0, [r7, #0]
 8018be8:	f8c8 0000 	str.w	r0, [r8]
 8018bec:	88b9      	ldrh	r1, [r7, #4]
 8018bee:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018bf2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018bf6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018bfa:	d009      	beq.n	8018c10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8018bfc:	7b51      	ldrb	r1, [r2, #13]
 8018bfe:	7992      	ldrb	r2, [r2, #6]
 8018c00:	0149      	lsls	r1, r1, #5
 8018c02:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018c06:	4311      	orrs	r1, r2
 8018c08:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018c0c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018c10:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018c14:	d00e      	beq.n	8018c34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8018c16:	eba3 030e 	sub.w	r3, r3, lr
 8018c1a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018c1e:	b29b      	uxth	r3, r3
 8018c20:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018c24:	10db      	asrs	r3, r3, #3
 8018c26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018c2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018c2e:	4313      	orrs	r3, r2
 8018c30:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018c34:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018c38:	00cb      	lsls	r3, r1, #3
 8018c3a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018c3e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018c42:	0648      	lsls	r0, r1, #25
 8018c44:	ea43 0302 	orr.w	r3, r3, r2
 8018c48:	bf44      	itt	mi
 8018c4a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018c4e:	b21b      	sxthmi	r3, r3
 8018c50:	1b5d      	subs	r5, r3, r5
 8018c52:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018c56:	e7b5      	b.n	8018bc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08018c58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c5c:	461e      	mov	r6, r3
 8018c5e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018c60:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018c64:	4604      	mov	r4, r0
 8018c66:	4617      	mov	r7, r2
 8018c68:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018c6c:	f7f5 fdb8 	bl	800e7e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018c70:	4605      	mov	r5, r0
 8018c72:	b918      	cbnz	r0, 8018c7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8018c74:	6030      	str	r0, [r6, #0]
 8018c76:	4628      	mov	r0, r5
 8018c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c7c:	683b      	ldr	r3, [r7, #0]
 8018c7e:	4601      	mov	r1, r0
 8018c80:	68db      	ldr	r3, [r3, #12]
 8018c82:	4638      	mov	r0, r7
 8018c84:	4798      	blx	r3
 8018c86:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018c8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018c8e:	4602      	mov	r2, r0
 8018c90:	6030      	str	r0, [r6, #0]
 8018c92:	d213      	bcs.n	8018cbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8018c94:	4643      	mov	r3, r8
 8018c96:	4639      	mov	r1, r7
 8018c98:	4620      	mov	r0, r4
 8018c9a:	f7ff fe3b 	bl	8018914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018c9e:	6030      	str	r0, [r6, #0]
 8018ca0:	6833      	ldr	r3, [r6, #0]
 8018ca2:	b143      	cbz	r3, 8018cb6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8018ca4:	7b5a      	ldrb	r2, [r3, #13]
 8018ca6:	7a9b      	ldrb	r3, [r3, #10]
 8018ca8:	0052      	lsls	r2, r2, #1
 8018caa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018cae:	4313      	orrs	r3, r2
 8018cb0:	bf0c      	ite	eq
 8018cb2:	2301      	moveq	r3, #1
 8018cb4:	2300      	movne	r3, #0
 8018cb6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8018cba:	e7dc      	b.n	8018c76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8018cbc:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018cc0:	b29b      	uxth	r3, r3
 8018cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8018cc4:	d804      	bhi.n	8018cd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8018cc6:	4639      	mov	r1, r7
 8018cc8:	4620      	mov	r0, r4
 8018cca:	f7ff fd17 	bl	80186fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018cce:	e7e6      	b.n	8018c9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8018cd0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d0e3      	beq.n	8018ca0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018cd8:	f640 1302 	movw	r3, #2306	; 0x902
 8018cdc:	429d      	cmp	r5, r3
 8018cde:	d1df      	bne.n	8018ca0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018ce0:	4601      	mov	r1, r0
 8018ce2:	4620      	mov	r0, r4
 8018ce4:	f7ff fcdb 	bl	801869e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018ce8:	e7d9      	b.n	8018c9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08018cea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8018cea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018cee:	461e      	mov	r6, r3
 8018cf0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018cf2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018cf6:	4604      	mov	r4, r0
 8018cf8:	4617      	mov	r7, r2
 8018cfa:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018cfe:	f7f5 fd6f 	bl	800e7e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018d02:	4605      	mov	r5, r0
 8018d04:	b918      	cbnz	r0, 8018d0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8018d06:	6030      	str	r0, [r6, #0]
 8018d08:	4628      	mov	r0, r5
 8018d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d0e:	683b      	ldr	r3, [r7, #0]
 8018d10:	4601      	mov	r1, r0
 8018d12:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8018d16:	4638      	mov	r0, r7
 8018d18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018d1c:	47c8      	blx	r9
 8018d1e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018d26:	4602      	mov	r2, r0
 8018d28:	6030      	str	r0, [r6, #0]
 8018d2a:	d213      	bcs.n	8018d54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8018d2c:	4643      	mov	r3, r8
 8018d2e:	4639      	mov	r1, r7
 8018d30:	4620      	mov	r0, r4
 8018d32:	f7ff fdef 	bl	8018914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018d36:	6030      	str	r0, [r6, #0]
 8018d38:	6833      	ldr	r3, [r6, #0]
 8018d3a:	b143      	cbz	r3, 8018d4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8018d3c:	7b5a      	ldrb	r2, [r3, #13]
 8018d3e:	7a9b      	ldrb	r3, [r3, #10]
 8018d40:	0052      	lsls	r2, r2, #1
 8018d42:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018d46:	4313      	orrs	r3, r2
 8018d48:	bf0c      	ite	eq
 8018d4a:	2301      	moveq	r3, #1
 8018d4c:	2300      	movne	r3, #0
 8018d4e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8018d52:	e7d9      	b.n	8018d08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8018d54:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018d58:	b29b      	uxth	r3, r3
 8018d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8018d5c:	d804      	bhi.n	8018d68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8018d5e:	4639      	mov	r1, r7
 8018d60:	4620      	mov	r0, r4
 8018d62:	f7ff fccb 	bl	80186fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018d66:	e7e6      	b.n	8018d36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8018d68:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d0e3      	beq.n	8018d38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018d70:	f640 1302 	movw	r3, #2306	; 0x902
 8018d74:	429d      	cmp	r5, r3
 8018d76:	d1df      	bne.n	8018d38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018d78:	4601      	mov	r1, r0
 8018d7a:	4620      	mov	r0, r4
 8018d7c:	f7ff fc8f 	bl	801869e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018d80:	e7d9      	b.n	8018d36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08018d82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8018d82:	b510      	push	{r4, lr}
 8018d84:	4604      	mov	r4, r0
 8018d86:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8018d8a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018d8c:	b1f1      	cbz	r1, 8018dcc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8018d8e:	2b0a      	cmp	r3, #10
 8018d90:	d02f      	beq.n	8018df2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8018d92:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8018d94:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8018d98:	3901      	subs	r1, #1
 8018d9a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8018d9c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8018da0:	1c51      	adds	r1, r2, #1
 8018da2:	b289      	uxth	r1, r1
 8018da4:	2901      	cmp	r1, #1
 8018da6:	bf84      	itt	hi
 8018da8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018dac:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8018dae:	f103 0201 	add.w	r2, r3, #1
 8018db2:	8722      	strh	r2, [r4, #56]	; 0x38
 8018db4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018db6:	bf98      	it	ls
 8018db8:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8018dba:	4413      	add	r3, r2
 8018dbc:	b29b      	uxth	r3, r3
 8018dbe:	2b09      	cmp	r3, #9
 8018dc0:	bf88      	it	hi
 8018dc2:	3b0a      	subhi	r3, #10
 8018dc4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018dc8:	8458      	strh	r0, [r3, #34]	; 0x22
 8018dca:	e7dc      	b.n	8018d86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8018dcc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018dce:	2b0a      	cmp	r3, #10
 8018dd0:	d00f      	beq.n	8018df2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8018dd2:	4620      	mov	r0, r4
 8018dd4:	f7ff fc11 	bl	80185fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8018dd8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018dda:	1c5a      	adds	r2, r3, #1
 8018ddc:	8722      	strh	r2, [r4, #56]	; 0x38
 8018dde:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018de0:	4413      	add	r3, r2
 8018de2:	b29b      	uxth	r3, r3
 8018de4:	2b09      	cmp	r3, #9
 8018de6:	bf88      	it	hi
 8018de8:	3b0a      	subhi	r3, #10
 8018dea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018dee:	8458      	strh	r0, [r3, #34]	; 0x22
 8018df0:	e7ec      	b.n	8018dcc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8018df2:	bd10      	pop	{r4, pc}

08018df4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018df4:	b538      	push	{r3, r4, r5, lr}
 8018df6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018df8:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8018dfc:	4604      	mov	r4, r0
 8018dfe:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8018e00:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8018e02:	3a01      	subs	r2, #1
 8018e04:	8702      	strh	r2, [r0, #56]	; 0x38
 8018e06:	1c5a      	adds	r2, r3, #1
 8018e08:	b292      	uxth	r2, r2
 8018e0a:	2a09      	cmp	r2, #9
 8018e0c:	bf86      	itte	hi
 8018e0e:	3b09      	subhi	r3, #9
 8018e10:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8018e12:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8018e14:	f7ff ffb5 	bl	8018d82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018e18:	8c23      	ldrh	r3, [r4, #32]
 8018e1a:	2b01      	cmp	r3, #1
 8018e1c:	bf9c      	itt	ls
 8018e1e:	3301      	addls	r3, #1
 8018e20:	8423      	strhls	r3, [r4, #32]
 8018e22:	8be3      	ldrh	r3, [r4, #30]
 8018e24:	b90b      	cbnz	r3, 8018e2a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8018e26:	2302      	movs	r3, #2
 8018e28:	83e3      	strh	r3, [r4, #30]
 8018e2a:	8be3      	ldrh	r3, [r4, #30]
 8018e2c:	3b01      	subs	r3, #1
 8018e2e:	b29b      	uxth	r3, r3
 8018e30:	83e3      	strh	r3, [r4, #30]
 8018e32:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018e36:	4628      	mov	r0, r5
 8018e38:	8365      	strh	r5, [r4, #26]
 8018e3a:	bd38      	pop	{r3, r4, r5, pc}

08018e3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018e3c:	428a      	cmp	r2, r1
 8018e3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e42:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8018e44:	d931      	bls.n	8018eaa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8018e46:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8018e48:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8018e4c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8018e50:	19ee      	adds	r6, r5, r7
 8018e52:	1a54      	subs	r4, r2, r1
 8018e54:	3e01      	subs	r6, #1
 8018e56:	fa1f fe84 	uxth.w	lr, r4
 8018e5a:	b2b4      	uxth	r4, r6
 8018e5c:	eba4 090e 	sub.w	r9, r4, lr
 8018e60:	fa1f f989 	uxth.w	r9, r9
 8018e64:	2c09      	cmp	r4, #9
 8018e66:	4626      	mov	r6, r4
 8018e68:	bf88      	it	hi
 8018e6a:	f1a4 060a 	subhi.w	r6, r4, #10
 8018e6e:	f1bc 0f00 	cmp.w	ip, #0
 8018e72:	bf08      	it	eq
 8018e74:	f04f 0c02 	moveq.w	ip, #2
 8018e78:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8018e7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018e80:	fa1f fc8c 	uxth.w	ip, ip
 8018e84:	3c01      	subs	r4, #1
 8018e86:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8018e8a:	b2a4      	uxth	r4, r4
 8018e8c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8018e90:	454c      	cmp	r4, r9
 8018e92:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8018e96:	d1e5      	bne.n	8018e64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8018e98:	eba5 050e 	sub.w	r5, r5, lr
 8018e9c:	eb0e 0408 	add.w	r4, lr, r8
 8018ea0:	8705      	strh	r5, [r0, #56]	; 0x38
 8018ea2:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8018ea6:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8018eaa:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8018eac:	1a64      	subs	r4, r4, r1
 8018eae:	4439      	add	r1, r7
 8018eb0:	b289      	uxth	r1, r1
 8018eb2:	2909      	cmp	r1, #9
 8018eb4:	bf88      	it	hi
 8018eb6:	390a      	subhi	r1, #10
 8018eb8:	8704      	strh	r4, [r0, #56]	; 0x38
 8018eba:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018ebc:	250a      	movs	r5, #10
 8018ebe:	b18a      	cbz	r2, 8018ee4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8018ec0:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8018ec2:	3a01      	subs	r2, #1
 8018ec4:	b292      	uxth	r2, r2
 8018ec6:	3101      	adds	r1, #1
 8018ec8:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8018ecc:	8701      	strh	r1, [r0, #56]	; 0x38
 8018ece:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8018ed0:	b901      	cbnz	r1, 8018ed4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8018ed2:	86c5      	strh	r5, [r0, #54]	; 0x36
 8018ed4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8018ed6:	3901      	subs	r1, #1
 8018ed8:	b289      	uxth	r1, r1
 8018eda:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018edc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018ee0:	844c      	strh	r4, [r1, #34]	; 0x22
 8018ee2:	e7ec      	b.n	8018ebe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8018ee4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ee8:	f7ff bf4b 	b.w	8018d82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08018eec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8018eec:	b570      	push	{r4, r5, r6, lr}
 8018eee:	2500      	movs	r5, #0
 8018ef0:	4295      	cmp	r5, r2
 8018ef2:	d011      	beq.n	8018f18 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8018ef4:	8bc4      	ldrh	r4, [r0, #30]
 8018ef6:	f831 6b02 	ldrh.w	r6, [r1], #2
 8018efa:	4414      	add	r4, r2
 8018efc:	3c01      	subs	r4, #1
 8018efe:	1b64      	subs	r4, r4, r5
 8018f00:	b2a4      	uxth	r4, r4
 8018f02:	2c01      	cmp	r4, #1
 8018f04:	bf88      	it	hi
 8018f06:	3c02      	subhi	r4, #2
 8018f08:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018f0c:	8b64      	ldrh	r4, [r4, #26]
 8018f0e:	42b4      	cmp	r4, r6
 8018f10:	d117      	bne.n	8018f42 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8018f12:	3501      	adds	r5, #1
 8018f14:	b2ad      	uxth	r5, r5
 8018f16:	e7eb      	b.n	8018ef0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8018f18:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018f1c:	2400      	movs	r4, #0
 8018f1e:	4413      	add	r3, r2
 8018f20:	b2a2      	uxth	r2, r4
 8018f22:	429a      	cmp	r2, r3
 8018f24:	da0f      	bge.n	8018f46 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8018f26:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8018f28:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8018f2c:	4432      	add	r2, r6
 8018f2e:	b292      	uxth	r2, r2
 8018f30:	2a09      	cmp	r2, #9
 8018f32:	bf88      	it	hi
 8018f34:	3a0a      	subhi	r2, #10
 8018f36:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018f3a:	3401      	adds	r4, #1
 8018f3c:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8018f3e:	42aa      	cmp	r2, r5
 8018f40:	d0ee      	beq.n	8018f20 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8018f42:	2000      	movs	r0, #0
 8018f44:	bd70      	pop	{r4, r5, r6, pc}
 8018f46:	2001      	movs	r0, #1
 8018f48:	e7fc      	b.n	8018f44 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08018f4a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8018f4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f4e:	4605      	mov	r5, r0
 8018f50:	4616      	mov	r6, r2
 8018f52:	1c8c      	adds	r4, r1, #2
 8018f54:	8809      	ldrh	r1, [r1, #0]
 8018f56:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8018f5a:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8018f5e:	42b3      	cmp	r3, r6
 8018f60:	d124      	bne.n	8018fac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8018f62:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8018f66:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8018f6a:	f001 070f 	and.w	r7, r1, #15
 8018f6e:	f8cd 8000 	str.w	r8, [sp]
 8018f72:	464b      	mov	r3, r9
 8018f74:	4652      	mov	r2, sl
 8018f76:	4621      	mov	r1, r4
 8018f78:	4628      	mov	r0, r5
 8018f7a:	f7ff ffb7 	bl	8018eec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8018f7e:	4683      	mov	fp, r0
 8018f80:	b168      	cbz	r0, 8018f9e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8018f82:	eb0a 0109 	add.w	r1, sl, r9
 8018f86:	4441      	add	r1, r8
 8018f88:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8018f8c:	463a      	mov	r2, r7
 8018f8e:	4649      	mov	r1, r9
 8018f90:	4628      	mov	r0, r5
 8018f92:	f7ff ff53 	bl	8018e3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8018f96:	4658      	mov	r0, fp
 8018f98:	b003      	add	sp, #12
 8018f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f9e:	eb07 010a 	add.w	r1, r7, sl
 8018fa2:	4449      	add	r1, r9
 8018fa4:	4441      	add	r1, r8
 8018fa6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8018faa:	e7d2      	b.n	8018f52 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8018fac:	f04f 0b00 	mov.w	fp, #0
 8018fb0:	e7f1      	b.n	8018f96 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08018fb2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8018fb2:	b570      	push	{r4, r5, r6, lr}
 8018fb4:	8810      	ldrh	r0, [r2, #0]
 8018fb6:	4298      	cmp	r0, r3
 8018fb8:	d817      	bhi.n	8018fea <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018fba:	1e48      	subs	r0, r1, #1
 8018fbc:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8018fc0:	4298      	cmp	r0, r3
 8018fc2:	d312      	bcc.n	8018fea <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018fc4:	2400      	movs	r4, #0
 8018fc6:	428c      	cmp	r4, r1
 8018fc8:	d20f      	bcs.n	8018fea <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018fca:	1860      	adds	r0, r4, r1
 8018fcc:	1040      	asrs	r0, r0, #1
 8018fce:	0085      	lsls	r5, r0, #2
 8018fd0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8018fd4:	42b3      	cmp	r3, r6
 8018fd6:	d902      	bls.n	8018fde <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8018fd8:	3001      	adds	r0, #1
 8018fda:	b284      	uxth	r4, r0
 8018fdc:	e7f3      	b.n	8018fc6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018fde:	d201      	bcs.n	8018fe4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8018fe0:	b281      	uxth	r1, r0
 8018fe2:	e7f0      	b.n	8018fc6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018fe4:	442a      	add	r2, r5
 8018fe6:	8850      	ldrh	r0, [r2, #2]
 8018fe8:	bd70      	pop	{r4, r5, r6, pc}
 8018fea:	2000      	movs	r0, #0
 8018fec:	e7fc      	b.n	8018fe8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08018fee <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8018fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ff2:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8018ff4:	886f      	ldrh	r7, [r5, #2]
 8018ff6:	4604      	mov	r4, r0
 8018ff8:	087f      	lsrs	r7, r7, #1
 8018ffa:	260b      	movs	r6, #11
 8018ffc:	3e01      	subs	r6, #1
 8018ffe:	d013      	beq.n	8019028 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019000:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019002:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019006:	462a      	mov	r2, r5
 8019008:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801900c:	4639      	mov	r1, r7
 801900e:	4643      	mov	r3, r8
 8019010:	4620      	mov	r0, r4
 8019012:	f7ff ffce 	bl	8018fb2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019016:	b138      	cbz	r0, 8019028 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019018:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801901c:	4642      	mov	r2, r8
 801901e:	4620      	mov	r0, r4
 8019020:	f7ff ff93 	bl	8018f4a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019024:	2800      	cmp	r0, #0
 8019026:	d1e9      	bne.n	8018ffc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801902c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801902c:	b570      	push	{r4, r5, r6, lr}
 801902e:	694a      	ldr	r2, [r1, #20]
 8019030:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8019032:	684b      	ldr	r3, [r1, #4]
 8019034:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8019036:	1b54      	subs	r4, r2, r5
 8019038:	f000 8106 	beq.w	8019248 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801903c:	1b9b      	subs	r3, r3, r6
 801903e:	d003      	beq.n	8019048 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019040:	4363      	muls	r3, r4
 8019042:	2210      	movs	r2, #16
 8019044:	fb93 f3f2 	sdiv	r3, r3, r2
 8019048:	680c      	ldr	r4, [r1, #0]
 801904a:	698a      	ldr	r2, [r1, #24]
 801904c:	1b65      	subs	r5, r4, r5
 801904e:	f000 80fd 	beq.w	801924c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8019052:	1b92      	subs	r2, r2, r6
 8019054:	d003      	beq.n	801905e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019056:	436a      	muls	r2, r5
 8019058:	2410      	movs	r4, #16
 801905a:	fb92 f2f4 	sdiv	r2, r2, r4
 801905e:	1a9b      	subs	r3, r3, r2
 8019060:	ee07 3a90 	vmov	s15, r3
 8019064:	ed9f 4a88 	vldr	s8, [pc, #544]	; 8019288 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8019068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801906c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019070:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019074:	460a      	mov	r2, r1
 8019076:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801907a:	4603      	mov	r3, r0
 801907c:	f100 040c 	add.w	r4, r0, #12
 8019080:	eeb1 6a43 	vneg.f32	s12, s6
 8019084:	edd2 7a02 	vldr	s15, [r2, #8]
 8019088:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801908c:	3214      	adds	r2, #20
 801908e:	ece3 6a01 	vstmia	r3!, {s13}
 8019092:	ed52 7a02 	vldr	s15, [r2, #-8]
 8019096:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801909a:	429c      	cmp	r4, r3
 801909c:	edc3 7a02 	vstr	s15, [r3, #8]
 80190a0:	ed52 7a01 	vldr	s15, [r2, #-4]
 80190a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80190a8:	edc3 7a05 	vstr	s15, [r3, #20]
 80190ac:	d1ea      	bne.n	8019084 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80190ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80190b0:	698b      	ldr	r3, [r1, #24]
 80190b2:	edd0 4a02 	vldr	s9, [r0, #8]
 80190b6:	edd0 3a00 	vldr	s7, [r0]
 80190ba:	edd0 6a01 	vldr	s13, [r0, #4]
 80190be:	ed90 5a05 	vldr	s10, [r0, #20]
 80190c2:	ed90 2a03 	vldr	s4, [r0, #12]
 80190c6:	edd0 5a04 	vldr	s11, [r0, #16]
 80190ca:	ed90 1a07 	vldr	s2, [r0, #28]
 80190ce:	edd0 2a06 	vldr	s5, [r0, #24]
 80190d2:	1a9b      	subs	r3, r3, r2
 80190d4:	ee07 3a90 	vmov	s15, r3
 80190d8:	684b      	ldr	r3, [r1, #4]
 80190da:	1a9b      	subs	r3, r3, r2
 80190dc:	ee07 3a10 	vmov	s14, r3
 80190e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80190e4:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80190e8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80190ec:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80190f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80190f4:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80190f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80190fc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019100:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019104:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019108:	ee67 7a83 	vmul.f32	s15, s15, s6
 801910c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8019110:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019112:	694a      	ldr	r2, [r1, #20]
 8019114:	1b13      	subs	r3, r2, r4
 8019116:	ee07 3a10 	vmov	s14, r3
 801911a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801911e:	680b      	ldr	r3, [r1, #0]
 8019120:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019124:	1b1b      	subs	r3, r3, r4
 8019126:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801912a:	ee07 3a10 	vmov	s14, r3
 801912e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019132:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019136:	eee6 4a87 	vfma.f32	s9, s13, s14
 801913a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801913e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8019142:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019144:	698b      	ldr	r3, [r1, #24]
 8019146:	1a9b      	subs	r3, r3, r2
 8019148:	ee06 3a90 	vmov	s13, r3
 801914c:	684b      	ldr	r3, [r1, #4]
 801914e:	1a9b      	subs	r3, r3, r2
 8019150:	ee07 3a10 	vmov	s14, r3
 8019154:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019158:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801915c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019160:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019164:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019168:	eee5 6a87 	vfma.f32	s13, s11, s14
 801916c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019170:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8019174:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019176:	694a      	ldr	r2, [r1, #20]
 8019178:	1b13      	subs	r3, r2, r4
 801917a:	ee07 3a10 	vmov	s14, r3
 801917e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019182:	680b      	ldr	r3, [r1, #0]
 8019184:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019188:	1b1b      	subs	r3, r3, r4
 801918a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801918e:	ee07 3a10 	vmov	s14, r3
 8019192:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019196:	ee27 7a04 	vmul.f32	s14, s14, s8
 801919a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801919e:	edd0 5a08 	vldr	s11, [r0, #32]
 80191a2:	ee25 5a06 	vmul.f32	s10, s10, s12
 80191a6:	ee31 1a65 	vsub.f32	s2, s2, s11
 80191aa:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80191ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80191b0:	698b      	ldr	r3, [r1, #24]
 80191b2:	1a9b      	subs	r3, r3, r2
 80191b4:	ee07 3a10 	vmov	s14, r3
 80191b8:	684b      	ldr	r3, [r1, #4]
 80191ba:	1a9b      	subs	r3, r3, r2
 80191bc:	ee01 3a90 	vmov	s3, r3
 80191c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80191c4:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80191c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80191cc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80191d0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80191d4:	ee61 1a84 	vmul.f32	s3, s3, s8
 80191d8:	eea1 7a21 	vfma.f32	s14, s2, s3
 80191dc:	ee27 7a03 	vmul.f32	s14, s14, s6
 80191e0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80191e4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80191e6:	694a      	ldr	r2, [r1, #20]
 80191e8:	1b13      	subs	r3, r2, r4
 80191ea:	ee03 3a10 	vmov	s6, r3
 80191ee:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80191f2:	680b      	ldr	r3, [r1, #0]
 80191f4:	ee23 3a04 	vmul.f32	s6, s6, s8
 80191f8:	1b1b      	subs	r3, r3, r4
 80191fa:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80191fe:	ee03 3a10 	vmov	s6, r3
 8019202:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019206:	ee23 4a04 	vmul.f32	s8, s6, s8
 801920a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801920e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019212:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8019216:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801921a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801921e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019226:	dd13      	ble.n	8019250 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8019228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801922c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019230:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019232:	eee3 7a87 	vfma.f32	s15, s7, s14
 8019236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801923a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801923e:	dd15      	ble.n	801926c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8019240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019244:	6403      	str	r3, [r0, #64]	; 0x40
 8019246:	bd70      	pop	{r4, r5, r6, pc}
 8019248:	4623      	mov	r3, r4
 801924a:	e6fd      	b.n	8019048 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801924c:	462a      	mov	r2, r5
 801924e:	e706      	b.n	801905e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019250:	d502      	bpl.n	8019258 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8019252:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019256:	e7e9      	b.n	801922c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8019258:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801925c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8019260:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019268:	dade      	bge.n	8019228 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801926a:	e7f2      	b.n	8019252 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801926c:	d502      	bpl.n	8019274 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801926e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019272:	e7e7      	b.n	8019244 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8019274:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019278:	eee3 4a86 	vfma.f32	s9, s7, s12
 801927c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019284:	dadc      	bge.n	8019240 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8019286:	e7f2      	b.n	801926e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8019288:	3d800000 	.word	0x3d800000

0801928c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801928c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019290:	2714      	movs	r7, #20
 8019292:	435f      	muls	r7, r3
 8019294:	eb02 0c07 	add.w	ip, r2, r7
 8019298:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801929c:	f115 0e0f 	adds.w	lr, r5, #15
 80192a0:	f100 80a2 	bmi.w	80193e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80192a4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80192a8:	9c08      	ldr	r4, [sp, #32]
 80192aa:	f8c0 e014 	str.w	lr, [r0, #20]
 80192ae:	2614      	movs	r6, #20
 80192b0:	4366      	muls	r6, r4
 80192b2:	eb02 0806 	add.w	r8, r2, r6
 80192b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80192ba:	f115 040f 	adds.w	r4, r5, #15
 80192be:	f100 809f 	bmi.w	8019400 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80192c2:	1124      	asrs	r4, r4, #4
 80192c4:	eba4 040e 	sub.w	r4, r4, lr
 80192c8:	6184      	str	r4, [r0, #24]
 80192ca:	2c00      	cmp	r4, #0
 80192cc:	f000 808a 	beq.w	80193e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80192d0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80192d4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80192d8:	5995      	ldr	r5, [r2, r6]
 80192da:	eba4 0809 	sub.w	r8, r4, r9
 80192de:	59d4      	ldr	r4, [r2, r7]
 80192e0:	eba5 0a04 	sub.w	sl, r5, r4
 80192e4:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80192e8:	fb0e fe05 	mul.w	lr, lr, r5
 80192ec:	fb0a ee19 	mls	lr, sl, r9, lr
 80192f0:	fb08 e404 	mla	r4, r8, r4, lr
 80192f4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80192f8:	3c01      	subs	r4, #1
 80192fa:	19a4      	adds	r4, r4, r6
 80192fc:	f100 808c 	bmi.w	8019418 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8019300:	fb94 fef6 	sdiv	lr, r4, r6
 8019304:	f8c0 e000 	str.w	lr, [r0]
 8019308:	fb06 441e 	mls	r4, r6, lr, r4
 801930c:	6104      	str	r4, [r0, #16]
 801930e:	2d00      	cmp	r5, #0
 8019310:	f2c0 8095 	blt.w	801943e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8019314:	fb95 f4f6 	sdiv	r4, r5, r6
 8019318:	6044      	str	r4, [r0, #4]
 801931a:	fb06 5514 	mls	r5, r6, r4, r5
 801931e:	6085      	str	r5, [r0, #8]
 8019320:	60c6      	str	r6, [r0, #12]
 8019322:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8019326:	6945      	ldr	r5, [r0, #20]
 8019328:	59d2      	ldr	r2, [r2, r7]
 801932a:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8019460 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801932e:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8019332:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8019336:	ee07 4a10 	vmov	s14, r4
 801933a:	6804      	ldr	r4, [r0, #0]
 801933c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8019340:	ee07 2a90 	vmov	s15, r2
 8019344:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801934c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019350:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019354:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019358:	edd3 6a00 	vldr	s13, [r3]
 801935c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019360:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8019364:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019368:	edc0 6a07 	vstr	s13, [r0, #28]
 801936c:	edd0 6a01 	vldr	s13, [r0, #4]
 8019370:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8019374:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8019378:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801937c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019380:	ed80 6a08 	vstr	s12, [r0, #32]
 8019384:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8019386:	6242      	str	r2, [r0, #36]	; 0x24
 8019388:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801938c:	ed93 6a03 	vldr	s12, [r3, #12]
 8019390:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019394:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8019398:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801939c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 80193a0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80193a4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80193a8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80193ac:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 80193b0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80193b2:	6302      	str	r2, [r0, #48]	; 0x30
 80193b4:	ed93 6a06 	vldr	s12, [r3, #24]
 80193b8:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 80193bc:	eea5 6a87 	vfma.f32	s12, s11, s14
 80193c0:	eeb0 7a46 	vmov.f32	s14, s12
 80193c4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80193c8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80193cc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80193d0:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80193d4:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80193d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80193dc:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 80193e0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80193e2:	63c3      	str	r3, [r0, #60]	; 0x3c
 80193e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193e8:	f1c5 0501 	rsb	r5, r5, #1
 80193ec:	f015 050f 	ands.w	r5, r5, #15
 80193f0:	bf18      	it	ne
 80193f2:	2501      	movne	r5, #1
 80193f4:	2410      	movs	r4, #16
 80193f6:	fb9e fef4 	sdiv	lr, lr, r4
 80193fa:	ebae 0e05 	sub.w	lr, lr, r5
 80193fe:	e753      	b.n	80192a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8019400:	f1c5 0501 	rsb	r5, r5, #1
 8019404:	f015 050f 	ands.w	r5, r5, #15
 8019408:	bf18      	it	ne
 801940a:	2501      	movne	r5, #1
 801940c:	f04f 0910 	mov.w	r9, #16
 8019410:	fb94 f4f9 	sdiv	r4, r4, r9
 8019414:	1b64      	subs	r4, r4, r5
 8019416:	e755      	b.n	80192c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8019418:	4264      	negs	r4, r4
 801941a:	fb94 fef6 	sdiv	lr, r4, r6
 801941e:	f1ce 0800 	rsb	r8, lr, #0
 8019422:	fb06 441e 	mls	r4, r6, lr, r4
 8019426:	f8c0 8000 	str.w	r8, [r0]
 801942a:	6104      	str	r4, [r0, #16]
 801942c:	2c00      	cmp	r4, #0
 801942e:	f43f af6e 	beq.w	801930e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8019432:	ea6f 0e0e 	mvn.w	lr, lr
 8019436:	f8c0 e000 	str.w	lr, [r0]
 801943a:	1b34      	subs	r4, r6, r4
 801943c:	e766      	b.n	801930c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801943e:	426d      	negs	r5, r5
 8019440:	fb95 f4f6 	sdiv	r4, r5, r6
 8019444:	f1c4 0e00 	rsb	lr, r4, #0
 8019448:	fb06 5514 	mls	r5, r6, r4, r5
 801944c:	f8c0 e004 	str.w	lr, [r0, #4]
 8019450:	6085      	str	r5, [r0, #8]
 8019452:	2d00      	cmp	r5, #0
 8019454:	f43f af64 	beq.w	8019320 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8019458:	43e4      	mvns	r4, r4
 801945a:	6044      	str	r4, [r0, #4]
 801945c:	1b75      	subs	r5, r6, r5
 801945e:	e75e      	b.n	801931e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8019460:	3d800000 	.word	0x3d800000

08019464 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8019464:	4602      	mov	r2, r0
 8019466:	b148      	cbz	r0, 801947c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8019468:	2300      	movs	r3, #0
 801946a:	b298      	uxth	r0, r3
 801946c:	3301      	adds	r3, #1
 801946e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019472:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8019476:	2900      	cmp	r1, #0
 8019478:	d1f7      	bne.n	801946a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801947a:	4770      	bx	lr
 801947c:	4770      	bx	lr

0801947e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801947e:	b530      	push	{r4, r5, lr}
 8019480:	4604      	mov	r4, r0
 8019482:	b159      	cbz	r1, 801949c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8019484:	b148      	cbz	r0, 801949a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8019486:	2300      	movs	r3, #0
 8019488:	b298      	uxth	r0, r3
 801948a:	4282      	cmp	r2, r0
 801948c:	d905      	bls.n	801949a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801948e:	5ccd      	ldrb	r5, [r1, r3]
 8019490:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8019494:	3301      	adds	r3, #1
 8019496:	2d00      	cmp	r5, #0
 8019498:	d1f6      	bne.n	8019488 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801949a:	bd30      	pop	{r4, r5, pc}
 801949c:	4608      	mov	r0, r1
 801949e:	e7fc      	b.n	801949a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

080194a0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 80194a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194a2:	b08b      	sub	sp, #44	; 0x2c
 80194a4:	468c      	mov	ip, r1
 80194a6:	2100      	movs	r1, #0
 80194a8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80194ac:	ae01      	add	r6, sp, #4
 80194ae:	211f      	movs	r1, #31
 80194b0:	fbb0 f7f3 	udiv	r7, r0, r3
 80194b4:	fb03 0517 	mls	r5, r3, r7, r0
 80194b8:	b2ec      	uxtb	r4, r5
 80194ba:	2d09      	cmp	r5, #9
 80194bc:	bfd4      	ite	le
 80194be:	3430      	addle	r4, #48	; 0x30
 80194c0:	3457      	addgt	r4, #87	; 0x57
 80194c2:	b2e4      	uxtb	r4, r4
 80194c4:	558c      	strb	r4, [r1, r6]
 80194c6:	4638      	mov	r0, r7
 80194c8:	1e4c      	subs	r4, r1, #1
 80194ca:	b92f      	cbnz	r7, 80194d8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 80194cc:	4431      	add	r1, r6
 80194ce:	4660      	mov	r0, ip
 80194d0:	f7ff ffd5 	bl	801947e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80194d4:	b00b      	add	sp, #44	; 0x2c
 80194d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80194d8:	4621      	mov	r1, r4
 80194da:	e7e9      	b.n	80194b0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

080194dc <_ZN8touchgfx7Unicode4itoaElPtti>:
 80194dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194de:	4607      	mov	r7, r0
 80194e0:	b08b      	sub	sp, #44	; 0x2c
 80194e2:	4608      	mov	r0, r1
 80194e4:	b341      	cbz	r1, 8019538 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80194e6:	1e99      	subs	r1, r3, #2
 80194e8:	2922      	cmp	r1, #34	; 0x22
 80194ea:	d825      	bhi.n	8019538 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80194ec:	2100      	movs	r1, #0
 80194ee:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80194f2:	463c      	mov	r4, r7
 80194f4:	261f      	movs	r6, #31
 80194f6:	f10d 0c04 	add.w	ip, sp, #4
 80194fa:	fb94 fef3 	sdiv	lr, r4, r3
 80194fe:	fb03 441e 	mls	r4, r3, lr, r4
 8019502:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8019506:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801950a:	b2ec      	uxtb	r4, r5
 801950c:	2d09      	cmp	r5, #9
 801950e:	bfd4      	ite	le
 8019510:	3430      	addle	r4, #48	; 0x30
 8019512:	3457      	addgt	r4, #87	; 0x57
 8019514:	b2e4      	uxtb	r4, r4
 8019516:	f80c 4006 	strb.w	r4, [ip, r6]
 801951a:	4674      	mov	r4, lr
 801951c:	1e71      	subs	r1, r6, #1
 801951e:	b96c      	cbnz	r4, 801953c <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8019520:	2f00      	cmp	r7, #0
 8019522:	da05      	bge.n	8019530 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8019524:	ab0a      	add	r3, sp, #40	; 0x28
 8019526:	4419      	add	r1, r3
 8019528:	232d      	movs	r3, #45	; 0x2d
 801952a:	f801 3c24 	strb.w	r3, [r1, #-36]
 801952e:	1eb1      	subs	r1, r6, #2
 8019530:	3101      	adds	r1, #1
 8019532:	4461      	add	r1, ip
 8019534:	f7ff ffa3 	bl	801947e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8019538:	b00b      	add	sp, #44	; 0x2c
 801953a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801953c:	460e      	mov	r6, r1
 801953e:	e7dc      	b.n	80194fa <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08019540 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8019540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019544:	4691      	mov	r9, r2
 8019546:	b085      	sub	sp, #20
 8019548:	6802      	ldr	r2, [r0, #0]
 801954a:	9201      	str	r2, [sp, #4]
 801954c:	4688      	mov	r8, r1
 801954e:	4683      	mov	fp, r0
 8019550:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8019554:	9103      	str	r1, [sp, #12]
 8019556:	4610      	mov	r0, r2
 8019558:	461c      	mov	r4, r3
 801955a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801955e:	9302      	str	r3, [sp, #8]
 8019560:	f7ff ff80 	bl	8019464 <_ZN8touchgfx7Unicode6strlenEPKt>
 8019564:	f1b8 0f00 	cmp.w	r8, #0
 8019568:	bf0c      	ite	eq
 801956a:	4684      	moveq	ip, r0
 801956c:	f100 0c01 	addne.w	ip, r0, #1
 8019570:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8019574:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8019578:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801957a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801957c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8019580:	9903      	ldr	r1, [sp, #12]
 8019582:	fa1f fc8c 	uxth.w	ip, ip
 8019586:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801958a:	d041      	beq.n	8019610 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801958c:	d834      	bhi.n	80195f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801958e:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8019592:	d059      	beq.n	8019648 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8019594:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8019598:	d03a      	beq.n	8019610 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801959a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801959e:	d034      	beq.n	801960a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80195a0:	2400      	movs	r4, #0
 80195a2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80195a6:	3a01      	subs	r2, #1
 80195a8:	b169      	cbz	r1, 80195c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80195aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80195ac:	458c      	cmp	ip, r1
 80195ae:	da09      	bge.n	80195c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80195b0:	eba1 010c 	sub.w	r1, r1, ip
 80195b4:	b289      	uxth	r1, r1
 80195b6:	b933      	cbnz	r3, 80195c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80195b8:	2e00      	cmp	r6, #0
 80195ba:	d051      	beq.n	8019660 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80195bc:	2800      	cmp	r0, #0
 80195be:	d04f      	beq.n	8019660 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80195c0:	440c      	add	r4, r1
 80195c2:	b2a4      	uxth	r4, r4
 80195c4:	2100      	movs	r1, #0
 80195c6:	682b      	ldr	r3, [r5, #0]
 80195c8:	4293      	cmp	r3, r2
 80195ca:	da07      	bge.n	80195dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80195cc:	f1b8 0f00 	cmp.w	r8, #0
 80195d0:	d004      	beq.n	80195dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80195d2:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 80195d6:	682b      	ldr	r3, [r5, #0]
 80195d8:	3301      	adds	r3, #1
 80195da:	602b      	str	r3, [r5, #0]
 80195dc:	2730      	movs	r7, #48	; 0x30
 80195de:	2c00      	cmp	r4, #0
 80195e0:	d04e      	beq.n	8019680 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80195e2:	682e      	ldr	r6, [r5, #0]
 80195e4:	3c01      	subs	r4, #1
 80195e6:	42b2      	cmp	r2, r6
 80195e8:	b2a4      	uxth	r4, r4
 80195ea:	dd49      	ble.n	8019680 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80195ec:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80195f0:	682b      	ldr	r3, [r5, #0]
 80195f2:	3301      	adds	r3, #1
 80195f4:	602b      	str	r3, [r5, #0]
 80195f6:	e7f2      	b.n	80195de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 80195f8:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 80195fc:	d01d      	beq.n	801963a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 80195fe:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8019602:	d002      	beq.n	801960a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8019604:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8019608:	e7c9      	b.n	801959e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801960a:	4684      	mov	ip, r0
 801960c:	f04f 0800 	mov.w	r8, #0
 8019610:	2c00      	cmp	r4, #0
 8019612:	d0c6      	beq.n	80195a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8019614:	b947      	cbnz	r7, 8019628 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8019616:	2801      	cmp	r0, #1
 8019618:	d106      	bne.n	8019628 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801961a:	8814      	ldrh	r4, [r2, #0]
 801961c:	2c30      	cmp	r4, #48	; 0x30
 801961e:	bf02      	ittt	eq
 8019620:	3202      	addeq	r2, #2
 8019622:	f8cb 2000 	streq.w	r2, [fp]
 8019626:	4638      	moveq	r0, r7
 8019628:	45bc      	cmp	ip, r7
 801962a:	da14      	bge.n	8019656 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801962c:	b2bf      	uxth	r7, r7
 801962e:	eba7 040c 	sub.w	r4, r7, ip
 8019632:	b2a4      	uxth	r4, r4
 8019634:	46bc      	mov	ip, r7
 8019636:	2600      	movs	r6, #0
 8019638:	e7b3      	b.n	80195a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801963a:	4684      	mov	ip, r0
 801963c:	b16c      	cbz	r4, 801965a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801963e:	42b8      	cmp	r0, r7
 8019640:	dd00      	ble.n	8019644 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8019642:	b2b8      	uxth	r0, r7
 8019644:	2400      	movs	r4, #0
 8019646:	e003      	b.n	8019650 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8019648:	f04f 0c01 	mov.w	ip, #1
 801964c:	2400      	movs	r4, #0
 801964e:	4660      	mov	r0, ip
 8019650:	4626      	mov	r6, r4
 8019652:	46a0      	mov	r8, r4
 8019654:	e7a5      	b.n	80195a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8019656:	2400      	movs	r4, #0
 8019658:	e7ed      	b.n	8019636 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801965a:	4626      	mov	r6, r4
 801965c:	46a0      	mov	r8, r4
 801965e:	e7a0      	b.n	80195a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8019660:	2900      	cmp	r1, #0
 8019662:	d0b0      	beq.n	80195c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8019664:	2720      	movs	r7, #32
 8019666:	682e      	ldr	r6, [r5, #0]
 8019668:	2900      	cmp	r1, #0
 801966a:	d0ac      	beq.n	80195c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801966c:	3901      	subs	r1, #1
 801966e:	4296      	cmp	r6, r2
 8019670:	b289      	uxth	r1, r1
 8019672:	daa7      	bge.n	80195c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8019674:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8019678:	682b      	ldr	r3, [r5, #0]
 801967a:	3301      	adds	r3, #1
 801967c:	602b      	str	r3, [r5, #0]
 801967e:	e7f2      	b.n	8019666 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8019680:	b188      	cbz	r0, 80196a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8019682:	682b      	ldr	r3, [r5, #0]
 8019684:	3801      	subs	r0, #1
 8019686:	429a      	cmp	r2, r3
 8019688:	b280      	uxth	r0, r0
 801968a:	dd0c      	ble.n	80196a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801968c:	f8db 3000 	ldr.w	r3, [fp]
 8019690:	1c9c      	adds	r4, r3, #2
 8019692:	f8cb 4000 	str.w	r4, [fp]
 8019696:	881c      	ldrh	r4, [r3, #0]
 8019698:	682b      	ldr	r3, [r5, #0]
 801969a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801969e:	682b      	ldr	r3, [r5, #0]
 80196a0:	3301      	adds	r3, #1
 80196a2:	602b      	str	r3, [r5, #0]
 80196a4:	e7ec      	b.n	8019680 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80196a6:	2620      	movs	r6, #32
 80196a8:	b151      	cbz	r1, 80196c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80196aa:	6828      	ldr	r0, [r5, #0]
 80196ac:	3901      	subs	r1, #1
 80196ae:	4282      	cmp	r2, r0
 80196b0:	b289      	uxth	r1, r1
 80196b2:	dd05      	ble.n	80196c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80196b4:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 80196b8:	682b      	ldr	r3, [r5, #0]
 80196ba:	3301      	adds	r3, #1
 80196bc:	602b      	str	r3, [r5, #0]
 80196be:	e7f3      	b.n	80196a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 80196c0:	b005      	add	sp, #20
 80196c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080196c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 80196c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80196ca:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 80196ce:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 80196d2:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 80196d6:	2400      	movs	r4, #0
 80196d8:	8014      	strh	r4, [r2, #0]
 80196da:	701c      	strb	r4, [r3, #0]
 80196dc:	f888 4000 	strb.w	r4, [r8]
 80196e0:	f88c 4000 	strb.w	r4, [ip]
 80196e4:	f88e 4000 	strb.w	r4, [lr]
 80196e8:	703c      	strb	r4, [r7, #0]
 80196ea:	6804      	ldr	r4, [r0, #0]
 80196ec:	b1a4      	cbz	r4, 8019718 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 80196ee:	8824      	ldrh	r4, [r4, #0]
 80196f0:	f04f 0901 	mov.w	r9, #1
 80196f4:	b314      	cbz	r4, 801973c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80196f6:	2c2b      	cmp	r4, #43	; 0x2b
 80196f8:	d001      	beq.n	80196fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 80196fa:	2c20      	cmp	r4, #32
 80196fc:	d110      	bne.n	8019720 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 80196fe:	8014      	strh	r4, [r2, #0]
 8019700:	6804      	ldr	r4, [r0, #0]
 8019702:	b10c      	cbz	r4, 8019708 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8019704:	3402      	adds	r4, #2
 8019706:	6004      	str	r4, [r0, #0]
 8019708:	680c      	ldr	r4, [r1, #0]
 801970a:	b10c      	cbz	r4, 8019710 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801970c:	3401      	adds	r4, #1
 801970e:	600c      	str	r4, [r1, #0]
 8019710:	6804      	ldr	r4, [r0, #0]
 8019712:	b17c      	cbz	r4, 8019734 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8019714:	8824      	ldrh	r4, [r4, #0]
 8019716:	e7ed      	b.n	80196f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8019718:	680c      	ldr	r4, [r1, #0]
 801971a:	b17c      	cbz	r4, 801973c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801971c:	7824      	ldrb	r4, [r4, #0]
 801971e:	e7e7      	b.n	80196f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8019720:	2c2d      	cmp	r4, #45	; 0x2d
 8019722:	d102      	bne.n	801972a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8019724:	f883 9000 	strb.w	r9, [r3]
 8019728:	e7ea      	b.n	8019700 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801972a:	2c23      	cmp	r4, #35	; 0x23
 801972c:	d107      	bne.n	801973e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801972e:	f888 9000 	strb.w	r9, [r8]
 8019732:	e7e5      	b.n	8019700 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8019734:	680c      	ldr	r4, [r1, #0]
 8019736:	b10c      	cbz	r4, 801973c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8019738:	7824      	ldrb	r4, [r4, #0]
 801973a:	e7db      	b.n	80196f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801973c:	2400      	movs	r4, #0
 801973e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8019742:	2b09      	cmp	r3, #9
 8019744:	d901      	bls.n	801974a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8019746:	2c2a      	cmp	r4, #42	; 0x2a
 8019748:	d122      	bne.n	8019790 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801974a:	2301      	movs	r3, #1
 801974c:	2c30      	cmp	r4, #48	; 0x30
 801974e:	f88e 3000 	strb.w	r3, [lr]
 8019752:	d10d      	bne.n	8019770 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8019754:	f88c 3000 	strb.w	r3, [ip]
 8019758:	6803      	ldr	r3, [r0, #0]
 801975a:	b10b      	cbz	r3, 8019760 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801975c:	3302      	adds	r3, #2
 801975e:	6003      	str	r3, [r0, #0]
 8019760:	680b      	ldr	r3, [r1, #0]
 8019762:	b10b      	cbz	r3, 8019768 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8019764:	3301      	adds	r3, #1
 8019766:	600b      	str	r3, [r1, #0]
 8019768:	6803      	ldr	r3, [r0, #0]
 801976a:	2b00      	cmp	r3, #0
 801976c:	d02f      	beq.n	80197ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801976e:	881c      	ldrh	r4, [r3, #0]
 8019770:	2c2a      	cmp	r4, #42	; 0x2a
 8019772:	d135      	bne.n	80197e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8019774:	f04f 33ff 	mov.w	r3, #4294967295
 8019778:	6033      	str	r3, [r6, #0]
 801977a:	6803      	ldr	r3, [r0, #0]
 801977c:	b10b      	cbz	r3, 8019782 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801977e:	3302      	adds	r3, #2
 8019780:	6003      	str	r3, [r0, #0]
 8019782:	680b      	ldr	r3, [r1, #0]
 8019784:	b10b      	cbz	r3, 801978a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8019786:	3301      	adds	r3, #1
 8019788:	600b      	str	r3, [r1, #0]
 801978a:	6803      	ldr	r3, [r0, #0]
 801978c:	b31b      	cbz	r3, 80197d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801978e:	881c      	ldrh	r4, [r3, #0]
 8019790:	2c2e      	cmp	r4, #46	; 0x2e
 8019792:	d11a      	bne.n	80197ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019794:	2301      	movs	r3, #1
 8019796:	703b      	strb	r3, [r7, #0]
 8019798:	6803      	ldr	r3, [r0, #0]
 801979a:	b10b      	cbz	r3, 80197a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801979c:	3302      	adds	r3, #2
 801979e:	6003      	str	r3, [r0, #0]
 80197a0:	680b      	ldr	r3, [r1, #0]
 80197a2:	b10b      	cbz	r3, 80197a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 80197a4:	3301      	adds	r3, #1
 80197a6:	600b      	str	r3, [r1, #0]
 80197a8:	6803      	ldr	r3, [r0, #0]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d036      	beq.n	801981c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 80197ae:	881b      	ldrh	r3, [r3, #0]
 80197b0:	2b2a      	cmp	r3, #42	; 0x2a
 80197b2:	d137      	bne.n	8019824 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80197b4:	f04f 33ff 	mov.w	r3, #4294967295
 80197b8:	602b      	str	r3, [r5, #0]
 80197ba:	6803      	ldr	r3, [r0, #0]
 80197bc:	b10b      	cbz	r3, 80197c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 80197be:	3302      	adds	r3, #2
 80197c0:	6003      	str	r3, [r0, #0]
 80197c2:	680b      	ldr	r3, [r1, #0]
 80197c4:	b10b      	cbz	r3, 80197ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80197c6:	3301      	adds	r3, #1
 80197c8:	600b      	str	r3, [r1, #0]
 80197ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80197ce:	680c      	ldr	r4, [r1, #0]
 80197d0:	b134      	cbz	r4, 80197e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80197d2:	7824      	ldrb	r4, [r4, #0]
 80197d4:	e7cc      	b.n	8019770 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80197d6:	680b      	ldr	r3, [r1, #0]
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d0f6      	beq.n	80197ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80197dc:	781c      	ldrb	r4, [r3, #0]
 80197de:	e7d7      	b.n	8019790 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80197e0:	2300      	movs	r3, #0
 80197e2:	6033      	str	r3, [r6, #0]
 80197e4:	220a      	movs	r2, #10
 80197e6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80197ea:	fa1f f38c 	uxth.w	r3, ip
 80197ee:	2b09      	cmp	r3, #9
 80197f0:	d8ce      	bhi.n	8019790 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80197f2:	6833      	ldr	r3, [r6, #0]
 80197f4:	fb02 c303 	mla	r3, r2, r3, ip
 80197f8:	6033      	str	r3, [r6, #0]
 80197fa:	6803      	ldr	r3, [r0, #0]
 80197fc:	b10b      	cbz	r3, 8019802 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 80197fe:	3302      	adds	r3, #2
 8019800:	6003      	str	r3, [r0, #0]
 8019802:	680b      	ldr	r3, [r1, #0]
 8019804:	b10b      	cbz	r3, 801980a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8019806:	3301      	adds	r3, #1
 8019808:	600b      	str	r3, [r1, #0]
 801980a:	6803      	ldr	r3, [r0, #0]
 801980c:	b10b      	cbz	r3, 8019812 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801980e:	881c      	ldrh	r4, [r3, #0]
 8019810:	e7e9      	b.n	80197e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019812:	680c      	ldr	r4, [r1, #0]
 8019814:	2c00      	cmp	r4, #0
 8019816:	d0e6      	beq.n	80197e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019818:	7824      	ldrb	r4, [r4, #0]
 801981a:	e7e4      	b.n	80197e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801981c:	680b      	ldr	r3, [r1, #0]
 801981e:	b10b      	cbz	r3, 8019824 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8019820:	781b      	ldrb	r3, [r3, #0]
 8019822:	e7c5      	b.n	80197b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8019824:	2200      	movs	r2, #0
 8019826:	602a      	str	r2, [r5, #0]
 8019828:	240a      	movs	r4, #10
 801982a:	3b30      	subs	r3, #48	; 0x30
 801982c:	b29e      	uxth	r6, r3
 801982e:	2e09      	cmp	r6, #9
 8019830:	682a      	ldr	r2, [r5, #0]
 8019832:	d813      	bhi.n	801985c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8019834:	fb04 3302 	mla	r3, r4, r2, r3
 8019838:	602b      	str	r3, [r5, #0]
 801983a:	6803      	ldr	r3, [r0, #0]
 801983c:	b10b      	cbz	r3, 8019842 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801983e:	3302      	adds	r3, #2
 8019840:	6003      	str	r3, [r0, #0]
 8019842:	680b      	ldr	r3, [r1, #0]
 8019844:	b10b      	cbz	r3, 801984a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8019846:	3301      	adds	r3, #1
 8019848:	600b      	str	r3, [r1, #0]
 801984a:	6803      	ldr	r3, [r0, #0]
 801984c:	b10b      	cbz	r3, 8019852 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801984e:	881b      	ldrh	r3, [r3, #0]
 8019850:	e7eb      	b.n	801982a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8019852:	680b      	ldr	r3, [r1, #0]
 8019854:	2b00      	cmp	r3, #0
 8019856:	d0e8      	beq.n	801982a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8019858:	781b      	ldrb	r3, [r3, #0]
 801985a:	e7e6      	b.n	801982a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801985c:	2a06      	cmp	r2, #6
 801985e:	bfa8      	it	ge
 8019860:	2206      	movge	r2, #6
 8019862:	602a      	str	r2, [r5, #0]
 8019864:	e7b1      	b.n	80197ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08019866 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8019866:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801986a:	b0a3      	sub	sp, #140	; 0x8c
 801986c:	2600      	movs	r6, #0
 801986e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8019872:	4607      	mov	r7, r0
 8019874:	4688      	mov	r8, r1
 8019876:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801987a:	4631      	mov	r1, r6
 801987c:	2242      	movs	r2, #66	; 0x42
 801987e:	4648      	mov	r0, r9
 8019880:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8019882:	960d      	str	r6, [sp, #52]	; 0x34
 8019884:	f00d fa10 	bl	8026ca8 <memset>
 8019888:	b15f      	cbz	r7, 80198a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801988a:	f108 3aff 	add.w	sl, r8, #4294967295
 801988e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019892:	b152      	cbz	r2, 80198aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8019894:	8812      	ldrh	r2, [r2, #0]
 8019896:	b10a      	cbz	r2, 801989c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8019898:	459a      	cmp	sl, r3
 801989a:	dc2e      	bgt.n	80198fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801989c:	2200      	movs	r2, #0
 801989e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80198a2:	4638      	mov	r0, r7
 80198a4:	b023      	add	sp, #140	; 0x8c
 80198a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198aa:	9a08      	ldr	r2, [sp, #32]
 80198ac:	2a00      	cmp	r2, #0
 80198ae:	d0f5      	beq.n	801989c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80198b0:	7812      	ldrb	r2, [r2, #0]
 80198b2:	e7f0      	b.n	8019896 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 80198b4:	2d00      	cmp	r5, #0
 80198b6:	d0ea      	beq.n	801988e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80198b8:	782a      	ldrb	r2, [r5, #0]
 80198ba:	b142      	cbz	r2, 80198ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 80198bc:	2a25      	cmp	r2, #37	; 0x25
 80198be:	d001      	beq.n	80198c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 80198c0:	459a      	cmp	sl, r3
 80198c2:	dc08      	bgt.n	80198d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 80198c4:	f1bb 0f00 	cmp.w	fp, #0
 80198c8:	d121      	bne.n	801990e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 80198ca:	2d00      	cmp	r5, #0
 80198cc:	d0df      	beq.n	801988e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80198ce:	782a      	ldrb	r2, [r5, #0]
 80198d0:	f04f 0b00 	mov.w	fp, #0
 80198d4:	e01d      	b.n	8019912 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 80198d6:	f1bb 0f00 	cmp.w	fp, #0
 80198da:	d078      	beq.n	80199ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 80198dc:	f8bb 2000 	ldrh.w	r2, [fp]
 80198e0:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80198e4:	f1bb 0f00 	cmp.w	fp, #0
 80198e8:	d002      	beq.n	80198f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 80198ea:	f10b 0202 	add.w	r2, fp, #2
 80198ee:	9209      	str	r2, [sp, #36]	; 0x24
 80198f0:	b10d      	cbz	r5, 80198f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 80198f2:	3501      	adds	r5, #1
 80198f4:	9508      	str	r5, [sp, #32]
 80198f6:	3301      	adds	r3, #1
 80198f8:	930d      	str	r3, [sp, #52]	; 0x34
 80198fa:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 80198fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019900:	f1bb 0f00 	cmp.w	fp, #0
 8019904:	d0d6      	beq.n	80198b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8019906:	f8bb 2000 	ldrh.w	r2, [fp]
 801990a:	2a00      	cmp	r2, #0
 801990c:	d1d6      	bne.n	80198bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801990e:	f8bb 2000 	ldrh.w	r2, [fp]
 8019912:	2a00      	cmp	r2, #0
 8019914:	d0bb      	beq.n	801988e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019916:	459a      	cmp	sl, r3
 8019918:	ddb9      	ble.n	801988e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801991a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801991e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8019922:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8019926:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801992a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801992e:	960e      	str	r6, [sp, #56]	; 0x38
 8019930:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8019934:	960f      	str	r6, [sp, #60]	; 0x3c
 8019936:	f1bb 0f00 	cmp.w	fp, #0
 801993a:	d002      	beq.n	8019942 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801993c:	f10b 0302 	add.w	r3, fp, #2
 8019940:	9309      	str	r3, [sp, #36]	; 0x24
 8019942:	b10d      	cbz	r5, 8019948 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8019944:	1c6b      	adds	r3, r5, #1
 8019946:	9308      	str	r3, [sp, #32]
 8019948:	ab0f      	add	r3, sp, #60	; 0x3c
 801994a:	9305      	str	r3, [sp, #20]
 801994c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8019950:	9304      	str	r3, [sp, #16]
 8019952:	ab0e      	add	r3, sp, #56	; 0x38
 8019954:	9303      	str	r3, [sp, #12]
 8019956:	ab0c      	add	r3, sp, #48	; 0x30
 8019958:	9302      	str	r3, [sp, #8]
 801995a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801995e:	9301      	str	r3, [sp, #4]
 8019960:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8019964:	9300      	str	r3, [sp, #0]
 8019966:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801996a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801996e:	a908      	add	r1, sp, #32
 8019970:	a809      	add	r0, sp, #36	; 0x24
 8019972:	f7ff fea8 	bl	80196c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8019976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019978:	2b00      	cmp	r3, #0
 801997a:	bfbe      	ittt	lt
 801997c:	6823      	ldrlt	r3, [r4, #0]
 801997e:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8019982:	930e      	strlt	r3, [sp, #56]	; 0x38
 8019984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019986:	bfb8      	it	lt
 8019988:	3404      	addlt	r4, #4
 801998a:	2b00      	cmp	r3, #0
 801998c:	bfb8      	it	lt
 801998e:	6823      	ldrlt	r3, [r4, #0]
 8019990:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8019994:	bfbe      	ittt	lt
 8019996:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801999a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801999c:	3404      	addlt	r4, #4
 801999e:	b1d9      	cbz	r1, 80199d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 80199a0:	880b      	ldrh	r3, [r1, #0]
 80199a2:	2b69      	cmp	r3, #105	; 0x69
 80199a4:	d01f      	beq.n	80199e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 80199a6:	d82f      	bhi.n	8019a08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 80199a8:	2b58      	cmp	r3, #88	; 0x58
 80199aa:	d01c      	beq.n	80199e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 80199ac:	d818      	bhi.n	80199e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 80199ae:	2b25      	cmp	r3, #37	; 0x25
 80199b0:	d034      	beq.n	8019a1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 80199b2:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 80199b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80199b8:	f1bb 0f00 	cmp.w	fp, #0
 80199bc:	f000 80b8 	beq.w	8019b30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 80199c0:	f8bb 5000 	ldrh.w	r5, [fp]
 80199c4:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 80199c8:	3301      	adds	r3, #1
 80199ca:	930d      	str	r3, [sp, #52]	; 0x34
 80199cc:	e029      	b.n	8019a22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 80199ce:	b10d      	cbz	r5, 80199d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 80199d0:	782a      	ldrb	r2, [r5, #0]
 80199d2:	e785      	b.n	80198e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80199d4:	462a      	mov	r2, r5
 80199d6:	e783      	b.n	80198e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80199d8:	2a00      	cmp	r2, #0
 80199da:	d0ea      	beq.n	80199b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 80199dc:	7813      	ldrb	r3, [r2, #0]
 80199de:	e7e0      	b.n	80199a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 80199e0:	3b63      	subs	r3, #99	; 0x63
 80199e2:	2b01      	cmp	r3, #1
 80199e4:	d8e5      	bhi.n	80199b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 80199e6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80199ea:	b329      	cbz	r1, 8019a38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 80199ec:	880b      	ldrh	r3, [r1, #0]
 80199ee:	2b69      	cmp	r3, #105	; 0x69
 80199f0:	d063      	beq.n	8019aba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 80199f2:	d825      	bhi.n	8019a40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 80199f4:	2b63      	cmp	r3, #99	; 0x63
 80199f6:	d038      	beq.n	8019a6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 80199f8:	2b64      	cmp	r3, #100	; 0x64
 80199fa:	d05e      	beq.n	8019aba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 80199fc:	2b58      	cmp	r3, #88	; 0x58
 80199fe:	d07b      	beq.n	8019af8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 8019a00:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8019a04:	4625      	mov	r5, r4
 8019a06:	e036      	b.n	8019a76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8019a08:	2b73      	cmp	r3, #115	; 0x73
 8019a0a:	d0ec      	beq.n	80199e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8019a0c:	d802      	bhi.n	8019a14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 8019a0e:	2b6f      	cmp	r3, #111	; 0x6f
 8019a10:	d1cf      	bne.n	80199b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8019a12:	e7e8      	b.n	80199e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8019a14:	2b75      	cmp	r3, #117	; 0x75
 8019a16:	d0e6      	beq.n	80199e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8019a18:	2b78      	cmp	r3, #120	; 0x78
 8019a1a:	e7f9      	b.n	8019a10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 8019a1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019a1e:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8019a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a24:	b10b      	cbz	r3, 8019a2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 8019a26:	3302      	adds	r3, #2
 8019a28:	9309      	str	r3, [sp, #36]	; 0x24
 8019a2a:	9b08      	ldr	r3, [sp, #32]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	f43f af2e 	beq.w	801988e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019a32:	3301      	adds	r3, #1
 8019a34:	9308      	str	r3, [sp, #32]
 8019a36:	e72a      	b.n	801988e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019a38:	2a00      	cmp	r2, #0
 8019a3a:	d0e1      	beq.n	8019a00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8019a3c:	7813      	ldrb	r3, [r2, #0]
 8019a3e:	e7d6      	b.n	80199ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 8019a40:	2b73      	cmp	r3, #115	; 0x73
 8019a42:	d036      	beq.n	8019ab2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 8019a44:	d807      	bhi.n	8019a56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 8019a46:	2b6f      	cmp	r3, #111	; 0x6f
 8019a48:	d1da      	bne.n	8019a00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8019a4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019a4c:	1d25      	adds	r5, r4, #4
 8019a4e:	eba8 0202 	sub.w	r2, r8, r2
 8019a52:	2308      	movs	r3, #8
 8019a54:	e04a      	b.n	8019aec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8019a56:	2b75      	cmp	r3, #117	; 0x75
 8019a58:	d043      	beq.n	8019ae2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 8019a5a:	2b78      	cmp	r3, #120	; 0x78
 8019a5c:	d1d0      	bne.n	8019a00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8019a5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019a60:	1d25      	adds	r5, r4, #4
 8019a62:	eba8 0202 	sub.w	r2, r8, r2
 8019a66:	2310      	movs	r3, #16
 8019a68:	e040      	b.n	8019aec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8019a6a:	6823      	ldr	r3, [r4, #0]
 8019a6c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8019a70:	1d25      	adds	r5, r4, #4
 8019a72:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8019a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a78:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d052      	beq.n	8019b26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 8019a80:	881a      	ldrh	r2, [r3, #0]
 8019a82:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8019a86:	a80d      	add	r0, sp, #52	; 0x34
 8019a88:	9005      	str	r0, [sp, #20]
 8019a8a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 8019a8e:	9004      	str	r0, [sp, #16]
 8019a90:	980e      	ldr	r0, [sp, #56]	; 0x38
 8019a92:	9003      	str	r0, [sp, #12]
 8019a94:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8019a98:	9002      	str	r0, [sp, #8]
 8019a9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019a9c:	9001      	str	r0, [sp, #4]
 8019a9e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8019aa2:	9000      	str	r0, [sp, #0]
 8019aa4:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8019aa8:	a810      	add	r0, sp, #64	; 0x40
 8019aaa:	f7ff fd49 	bl	8019540 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8019aae:	462c      	mov	r4, r5
 8019ab0:	e7b7      	b.n	8019a22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 8019ab2:	6823      	ldr	r3, [r4, #0]
 8019ab4:	1d25      	adds	r5, r4, #4
 8019ab6:	9310      	str	r3, [sp, #64]	; 0x40
 8019ab8:	e7dd      	b.n	8019a76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8019aba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019abc:	6820      	ldr	r0, [r4, #0]
 8019abe:	eba8 0202 	sub.w	r2, r8, r2
 8019ac2:	230a      	movs	r3, #10
 8019ac4:	b292      	uxth	r2, r2
 8019ac6:	4649      	mov	r1, r9
 8019ac8:	f7ff fd08 	bl	80194dc <_ZN8touchgfx7Unicode4itoaElPtti>
 8019acc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019ad0:	2b2d      	cmp	r3, #45	; 0x2d
 8019ad2:	f104 0504 	add.w	r5, r4, #4
 8019ad6:	d1ce      	bne.n	8019a76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8019ad8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ade:	3302      	adds	r3, #2
 8019ae0:	e7e9      	b.n	8019ab6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 8019ae2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019ae4:	1d25      	adds	r5, r4, #4
 8019ae6:	eba8 0202 	sub.w	r2, r8, r2
 8019aea:	230a      	movs	r3, #10
 8019aec:	b292      	uxth	r2, r2
 8019aee:	4649      	mov	r1, r9
 8019af0:	6820      	ldr	r0, [r4, #0]
 8019af2:	f7ff fcd5 	bl	80194a0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8019af6:	e7be      	b.n	8019a76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8019af8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019afa:	6820      	ldr	r0, [r4, #0]
 8019afc:	eba8 0202 	sub.w	r2, r8, r2
 8019b00:	b292      	uxth	r2, r2
 8019b02:	2310      	movs	r3, #16
 8019b04:	4649      	mov	r1, r9
 8019b06:	f7ff fccb 	bl	80194a0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8019b0a:	1d25      	adds	r5, r4, #4
 8019b0c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8019b10:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d0ae      	beq.n	8019a76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8019b18:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8019b1c:	2919      	cmp	r1, #25
 8019b1e:	d8f7      	bhi.n	8019b10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8019b20:	3b20      	subs	r3, #32
 8019b22:	8013      	strh	r3, [r2, #0]
 8019b24:	e7f4      	b.n	8019b10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8019b26:	9a08      	ldr	r2, [sp, #32]
 8019b28:	2a00      	cmp	r2, #0
 8019b2a:	d0aa      	beq.n	8019a82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8019b2c:	7812      	ldrb	r2, [r2, #0]
 8019b2e:	e7a8      	b.n	8019a82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8019b30:	2d00      	cmp	r5, #0
 8019b32:	f43f af47 	beq.w	80199c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 8019b36:	782d      	ldrb	r5, [r5, #0]
 8019b38:	e744      	b.n	80199c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

08019b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8019b3a:	b507      	push	{r0, r1, r2, lr}
 8019b3c:	9300      	str	r3, [sp, #0]
 8019b3e:	4613      	mov	r3, r2
 8019b40:	2200      	movs	r2, #0
 8019b42:	f7ff fe90 	bl	8019866 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8019b46:	b003      	add	sp, #12
 8019b48:	f85d fb04 	ldr.w	pc, [sp], #4

08019b4c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8019b4c:	b40c      	push	{r2, r3}
 8019b4e:	b507      	push	{r0, r1, r2, lr}
 8019b50:	ab04      	add	r3, sp, #16
 8019b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b56:	9301      	str	r3, [sp, #4]
 8019b58:	f7ff ffef 	bl	8019b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8019b5c:	b003      	add	sp, #12
 8019b5e:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b62:	b002      	add	sp, #8
 8019b64:	4770      	bx	lr
	...

08019b68 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8019b68:	4b01      	ldr	r3, [pc, #4]	; (8019b70 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8019b6a:	6018      	str	r0, [r3, #0]
 8019b6c:	4770      	bx	lr
 8019b6e:	bf00      	nop
 8019b70:	20008870 	.word	0x20008870

08019b74 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8019b74:	4b06      	ldr	r3, [pc, #24]	; (8019b90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8019b76:	881a      	ldrh	r2, [r3, #0]
 8019b78:	4282      	cmp	r2, r0
 8019b7a:	d807      	bhi.n	8019b8c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019b7c:	4b05      	ldr	r3, [pc, #20]	; (8019b94 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8019b7e:	881b      	ldrh	r3, [r3, #0]
 8019b80:	4413      	add	r3, r2
 8019b82:	4298      	cmp	r0, r3
 8019b84:	bfac      	ite	ge
 8019b86:	2000      	movge	r0, #0
 8019b88:	2001      	movlt	r0, #1
 8019b8a:	4770      	bx	lr
 8019b8c:	2000      	movs	r0, #0
 8019b8e:	4770      	bx	lr
 8019b90:	20008890 	.word	0x20008890
 8019b94:	20008894 	.word	0x20008894

08019b98 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019b98:	b508      	push	{r3, lr}
 8019b9a:	4601      	mov	r1, r0
 8019b9c:	f7ff ffea 	bl	8019b74 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019ba0:	b118      	cbz	r0, 8019baa <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8019ba2:	4b02      	ldr	r3, [pc, #8]	; (8019bac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8019baa:	bd08      	pop	{r3, pc}
 8019bac:	20008874 	.word	0x20008874

08019bb0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019bb2:	4c24      	ldr	r4, [pc, #144]	; (8019c44 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8019bb4:	6823      	ldr	r3, [r4, #0]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d042      	beq.n	8019c40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019bba:	4a23      	ldr	r2, [pc, #140]	; (8019c48 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8019bbc:	4d23      	ldr	r5, [pc, #140]	; (8019c4c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8019bbe:	8811      	ldrh	r1, [r2, #0]
 8019bc0:	f8b5 c000 	ldrh.w	ip, [r5]
 8019bc4:	4822      	ldr	r0, [pc, #136]	; (8019c50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8019bc6:	4461      	add	r1, ip
 8019bc8:	1c4a      	adds	r2, r1, #1
 8019bca:	f022 0201 	bic.w	r2, r2, #1
 8019bce:	008f      	lsls	r7, r1, #2
 8019bd0:	0412      	lsls	r2, r2, #16
 8019bd2:	19de      	adds	r6, r3, r7
 8019bd4:	0c12      	lsrs	r2, r2, #16
 8019bd6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8019bda:	6006      	str	r6, [r0, #0]
 8019bdc:	4e1d      	ldr	r6, [pc, #116]	; (8019c54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8019bde:	19da      	adds	r2, r3, r7
 8019be0:	6032      	str	r2, [r6, #0]
 8019be2:	220e      	movs	r2, #14
 8019be4:	fb02 f20c 	mul.w	r2, r2, ip
 8019be8:	3203      	adds	r2, #3
 8019bea:	f022 0203 	bic.w	r2, r2, #3
 8019bee:	443a      	add	r2, r7
 8019bf0:	4f19      	ldr	r7, [pc, #100]	; (8019c58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8019bf2:	4413      	add	r3, r2
 8019bf4:	603b      	str	r3, [r7, #0]
 8019bf6:	4f19      	ldr	r7, [pc, #100]	; (8019c5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	803b      	strh	r3, [r7, #0]
 8019bfc:	4f18      	ldr	r7, [pc, #96]	; (8019c60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8019bfe:	683f      	ldr	r7, [r7, #0]
 8019c00:	1aba      	subs	r2, r7, r2
 8019c02:	4f18      	ldr	r7, [pc, #96]	; (8019c64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8019c04:	603a      	str	r2, [r7, #0]
 8019c06:	4a18      	ldr	r2, [pc, #96]	; (8019c68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8019c08:	469c      	mov	ip, r3
 8019c0a:	8013      	strh	r3, [r2, #0]
 8019c0c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8019c10:	428b      	cmp	r3, r1
 8019c12:	d10d      	bne.n	8019c30 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8019c14:	882d      	ldrh	r5, [r5, #0]
 8019c16:	6830      	ldr	r0, [r6, #0]
 8019c18:	2300      	movs	r3, #0
 8019c1a:	240e      	movs	r4, #14
 8019c1c:	429d      	cmp	r5, r3
 8019c1e:	d90f      	bls.n	8019c40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019c20:	fb04 0203 	mla	r2, r4, r3, r0
 8019c24:	3301      	adds	r3, #1
 8019c26:	7b11      	ldrb	r1, [r2, #12]
 8019c28:	f36f 1145 	bfc	r1, #5, #1
 8019c2c:	7311      	strb	r1, [r2, #12]
 8019c2e:	e7f5      	b.n	8019c1c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8019c30:	6822      	ldr	r2, [r4, #0]
 8019c32:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8019c36:	6802      	ldr	r2, [r0, #0]
 8019c38:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8019c3c:	3301      	adds	r3, #1
 8019c3e:	e7e7      	b.n	8019c10 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8019c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c42:	bf00      	nop
 8019c44:	20008874 	.word	0x20008874
 8019c48:	20008890 	.word	0x20008890
 8019c4c:	20008894 	.word	0x20008894
 8019c50:	20008888 	.word	0x20008888
 8019c54:	20008878 	.word	0x20008878
 8019c58:	20008880 	.word	0x20008880
 8019c5c:	20008892 	.word	0x20008892
 8019c60:	2000887c 	.word	0x2000887c
 8019c64:	2000888c 	.word	0x2000888c
 8019c68:	20008884 	.word	0x20008884

08019c6c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019c6c:	4b06      	ldr	r3, [pc, #24]	; (8019c88 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	b943      	cbnz	r3, 8019c84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019c72:	b139      	cbz	r1, 8019c84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019c74:	4b05      	ldr	r3, [pc, #20]	; (8019c8c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8019c76:	801a      	strh	r2, [r3, #0]
 8019c78:	4b05      	ldr	r3, [pc, #20]	; (8019c90 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8019c7a:	6019      	str	r1, [r3, #0]
 8019c7c:	4b05      	ldr	r3, [pc, #20]	; (8019c94 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8019c7e:	6018      	str	r0, [r3, #0]
 8019c80:	f7ff bf96 	b.w	8019bb0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019c84:	4770      	bx	lr
 8019c86:	bf00      	nop
 8019c88:	20008880 	.word	0x20008880
 8019c8c:	20008894 	.word	0x20008894
 8019c90:	2000887c 	.word	0x2000887c
 8019c94:	20008874 	.word	0x20008874

08019c98 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019c98:	b470      	push	{r4, r5, r6}
 8019c9a:	4c07      	ldr	r4, [pc, #28]	; (8019cb8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019c9c:	6826      	ldr	r6, [r4, #0]
 8019c9e:	4605      	mov	r5, r0
 8019ca0:	4610      	mov	r0, r2
 8019ca2:	9a03      	ldr	r2, [sp, #12]
 8019ca4:	b936      	cbnz	r6, 8019cb4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8019ca6:	6025      	str	r5, [r4, #0]
 8019ca8:	4c04      	ldr	r4, [pc, #16]	; (8019cbc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8019caa:	8021      	strh	r1, [r4, #0]
 8019cac:	bc70      	pop	{r4, r5, r6}
 8019cae:	4619      	mov	r1, r3
 8019cb0:	f7ff bfdc 	b.w	8019c6c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019cb4:	bc70      	pop	{r4, r5, r6}
 8019cb6:	4770      	bx	lr
 8019cb8:	20008898 	.word	0x20008898
 8019cbc:	20008890 	.word	0x20008890

08019cc0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019cc0:	4a12      	ldr	r2, [pc, #72]	; (8019d0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8019cc2:	8803      	ldrh	r3, [r0, #0]
 8019cc4:	8812      	ldrh	r2, [r2, #0]
 8019cc6:	4293      	cmp	r3, r2
 8019cc8:	d207      	bcs.n	8019cda <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8019cca:	4a11      	ldr	r2, [pc, #68]	; (8019d10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8019ccc:	6812      	ldr	r2, [r2, #0]
 8019cce:	2114      	movs	r1, #20
 8019cd0:	fb01 2303 	mla	r3, r1, r3, r2
 8019cd4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8019cd8:	4770      	bx	lr
 8019cda:	490e      	ldr	r1, [pc, #56]	; (8019d14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019cdc:	8809      	ldrh	r1, [r1, #0]
 8019cde:	4411      	add	r1, r2
 8019ce0:	428b      	cmp	r3, r1
 8019ce2:	da04      	bge.n	8019cee <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8019ce4:	1a9b      	subs	r3, r3, r2
 8019ce6:	4a0c      	ldr	r2, [pc, #48]	; (8019d18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8019ce8:	210e      	movs	r1, #14
 8019cea:	6812      	ldr	r2, [r2, #0]
 8019cec:	e7f0      	b.n	8019cd0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8019cee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019cf2:	4293      	cmp	r3, r2
 8019cf4:	d108      	bne.n	8019d08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8019cf6:	4b09      	ldr	r3, [pc, #36]	; (8019d1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8019cf8:	781b      	ldrb	r3, [r3, #0]
 8019cfa:	b91b      	cbnz	r3, 8019d04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8019cfc:	4b08      	ldr	r3, [pc, #32]	; (8019d20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8019cfe:	f9b3 0000 	ldrsh.w	r0, [r3]
 8019d02:	4770      	bx	lr
 8019d04:	4b07      	ldr	r3, [pc, #28]	; (8019d24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8019d06:	e7fa      	b.n	8019cfe <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8019d08:	2000      	movs	r0, #0
 8019d0a:	4770      	bx	lr
 8019d0c:	20008890 	.word	0x20008890
 8019d10:	20008898 	.word	0x20008898
 8019d14:	20008894 	.word	0x20008894
 8019d18:	20008878 	.word	0x20008878
 8019d1c:	20008800 	.word	0x20008800
 8019d20:	20008802 	.word	0x20008802
 8019d24:	20008804 	.word	0x20008804

08019d28 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8019d28:	4a12      	ldr	r2, [pc, #72]	; (8019d74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8019d2a:	8803      	ldrh	r3, [r0, #0]
 8019d2c:	8812      	ldrh	r2, [r2, #0]
 8019d2e:	4293      	cmp	r3, r2
 8019d30:	d207      	bcs.n	8019d42 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8019d32:	4a11      	ldr	r2, [pc, #68]	; (8019d78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8019d34:	6812      	ldr	r2, [r2, #0]
 8019d36:	2114      	movs	r1, #20
 8019d38:	fb01 2303 	mla	r3, r1, r3, r2
 8019d3c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8019d40:	4770      	bx	lr
 8019d42:	490e      	ldr	r1, [pc, #56]	; (8019d7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019d44:	8809      	ldrh	r1, [r1, #0]
 8019d46:	4411      	add	r1, r2
 8019d48:	428b      	cmp	r3, r1
 8019d4a:	da04      	bge.n	8019d56 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8019d4c:	1a9b      	subs	r3, r3, r2
 8019d4e:	4a0c      	ldr	r2, [pc, #48]	; (8019d80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8019d50:	210e      	movs	r1, #14
 8019d52:	6812      	ldr	r2, [r2, #0]
 8019d54:	e7f0      	b.n	8019d38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8019d56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019d5a:	4293      	cmp	r3, r2
 8019d5c:	d108      	bne.n	8019d70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8019d5e:	4b09      	ldr	r3, [pc, #36]	; (8019d84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019d60:	781b      	ldrb	r3, [r3, #0]
 8019d62:	b91b      	cbnz	r3, 8019d6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8019d64:	4b08      	ldr	r3, [pc, #32]	; (8019d88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8019d66:	f9b3 0000 	ldrsh.w	r0, [r3]
 8019d6a:	4770      	bx	lr
 8019d6c:	4b07      	ldr	r3, [pc, #28]	; (8019d8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8019d6e:	e7fa      	b.n	8019d66 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8019d70:	2000      	movs	r0, #0
 8019d72:	4770      	bx	lr
 8019d74:	20008890 	.word	0x20008890
 8019d78:	20008898 	.word	0x20008898
 8019d7c:	20008894 	.word	0x20008894
 8019d80:	20008878 	.word	0x20008878
 8019d84:	20008800 	.word	0x20008800
 8019d88:	20008804 	.word	0x20008804
 8019d8c:	20008802 	.word	0x20008802

08019d90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8019d90:	b510      	push	{r4, lr}
 8019d92:	4a1f      	ldr	r2, [pc, #124]	; (8019e10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8019d94:	880b      	ldrh	r3, [r1, #0]
 8019d96:	8812      	ldrh	r2, [r2, #0]
 8019d98:	4293      	cmp	r3, r2
 8019d9a:	d213      	bcs.n	8019dc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8019d9c:	4a1d      	ldr	r2, [pc, #116]	; (8019e14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8019d9e:	6812      	ldr	r2, [r2, #0]
 8019da0:	2114      	movs	r1, #20
 8019da2:	fb01 2303 	mla	r3, r1, r3, r2
 8019da6:	8a1a      	ldrh	r2, [r3, #16]
 8019da8:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8019dac:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8019db0:	8a5b      	ldrh	r3, [r3, #18]
 8019db2:	8004      	strh	r4, [r0, #0]
 8019db4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019dbc:	8041      	strh	r1, [r0, #2]
 8019dbe:	8082      	strh	r2, [r0, #4]
 8019dc0:	80c3      	strh	r3, [r0, #6]
 8019dc2:	e00e      	b.n	8019de2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8019dc4:	4914      	ldr	r1, [pc, #80]	; (8019e18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8019dc6:	8809      	ldrh	r1, [r1, #0]
 8019dc8:	4411      	add	r1, r2
 8019dca:	428b      	cmp	r3, r1
 8019dcc:	da0a      	bge.n	8019de4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8019dce:	1a9b      	subs	r3, r3, r2
 8019dd0:	4a12      	ldr	r2, [pc, #72]	; (8019e1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8019dd2:	6812      	ldr	r2, [r2, #0]
 8019dd4:	210e      	movs	r1, #14
 8019dd6:	fb01 2303 	mla	r3, r1, r3, r2
 8019dda:	681a      	ldr	r2, [r3, #0]
 8019ddc:	6002      	str	r2, [r0, #0]
 8019dde:	685a      	ldr	r2, [r3, #4]
 8019de0:	6042      	str	r2, [r0, #4]
 8019de2:	bd10      	pop	{r4, pc}
 8019de4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019de8:	4293      	cmp	r3, r2
 8019dea:	d10b      	bne.n	8019e04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8019dec:	4b0c      	ldr	r3, [pc, #48]	; (8019e20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8019dee:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019df2:	4b0c      	ldr	r3, [pc, #48]	; (8019e24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8019df4:	8081      	strh	r1, [r0, #4]
 8019df6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019dfa:	80c2      	strh	r2, [r0, #6]
 8019dfc:	2300      	movs	r3, #0
 8019dfe:	8003      	strh	r3, [r0, #0]
 8019e00:	8043      	strh	r3, [r0, #2]
 8019e02:	e7ee      	b.n	8019de2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8019e04:	2300      	movs	r3, #0
 8019e06:	8003      	strh	r3, [r0, #0]
 8019e08:	8043      	strh	r3, [r0, #2]
 8019e0a:	8083      	strh	r3, [r0, #4]
 8019e0c:	e7d8      	b.n	8019dc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8019e0e:	bf00      	nop
 8019e10:	20008890 	.word	0x20008890
 8019e14:	20008898 	.word	0x20008898
 8019e18:	20008894 	.word	0x20008894
 8019e1c:	20008878 	.word	0x20008878
 8019e20:	200087fc 	.word	0x200087fc
 8019e24:	200087fe 	.word	0x200087fe

08019e28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8019e28:	4a17      	ldr	r2, [pc, #92]	; (8019e88 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8019e2a:	8803      	ldrh	r3, [r0, #0]
 8019e2c:	8812      	ldrh	r2, [r2, #0]
 8019e2e:	4293      	cmp	r3, r2
 8019e30:	d213      	bcs.n	8019e5a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8019e32:	4a16      	ldr	r2, [pc, #88]	; (8019e8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8019e34:	6812      	ldr	r2, [r2, #0]
 8019e36:	2114      	movs	r1, #20
 8019e38:	fb01 2303 	mla	r3, r1, r3, r2
 8019e3c:	8a1a      	ldrh	r2, [r3, #16]
 8019e3e:	8919      	ldrh	r1, [r3, #8]
 8019e40:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019e44:	428a      	cmp	r2, r1
 8019e46:	db1d      	blt.n	8019e84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8019e48:	8a58      	ldrh	r0, [r3, #18]
 8019e4a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8019e4e:	895b      	ldrh	r3, [r3, #10]
 8019e50:	4298      	cmp	r0, r3
 8019e52:	bfac      	ite	ge
 8019e54:	2000      	movge	r0, #0
 8019e56:	2001      	movlt	r0, #1
 8019e58:	4770      	bx	lr
 8019e5a:	490d      	ldr	r1, [pc, #52]	; (8019e90 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8019e5c:	8809      	ldrh	r1, [r1, #0]
 8019e5e:	4411      	add	r1, r2
 8019e60:	428b      	cmp	r3, r1
 8019e62:	da0d      	bge.n	8019e80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8019e64:	1a9b      	subs	r3, r3, r2
 8019e66:	4a0b      	ldr	r2, [pc, #44]	; (8019e94 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8019e68:	6812      	ldr	r2, [r2, #0]
 8019e6a:	210e      	movs	r1, #14
 8019e6c:	fb01 2303 	mla	r3, r1, r3, r2
 8019e70:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8019e74:	891a      	ldrh	r2, [r3, #8]
 8019e76:	4291      	cmp	r1, r2
 8019e78:	db04      	blt.n	8019e84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8019e7a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8019e7e:	e7e6      	b.n	8019e4e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8019e80:	2000      	movs	r0, #0
 8019e82:	4770      	bx	lr
 8019e84:	2001      	movs	r0, #1
 8019e86:	4770      	bx	lr
 8019e88:	20008890 	.word	0x20008890
 8019e8c:	20008898 	.word	0x20008898
 8019e90:	20008894 	.word	0x20008894
 8019e94:	20008878 	.word	0x20008878

08019e98 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8019e98:	4a12      	ldr	r2, [pc, #72]	; (8019ee4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8019e9a:	8803      	ldrh	r3, [r0, #0]
 8019e9c:	8811      	ldrh	r1, [r2, #0]
 8019e9e:	428b      	cmp	r3, r1
 8019ea0:	d20b      	bcs.n	8019eba <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8019ea2:	4a11      	ldr	r2, [pc, #68]	; (8019ee8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019ea4:	6812      	ldr	r2, [r2, #0]
 8019ea6:	b112      	cbz	r2, 8019eae <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8019ea8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019eac:	b9c0      	cbnz	r0, 8019ee0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8019eae:	4a0f      	ldr	r2, [pc, #60]	; (8019eec <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8019eb0:	6811      	ldr	r1, [r2, #0]
 8019eb2:	2214      	movs	r2, #20
 8019eb4:	4353      	muls	r3, r2
 8019eb6:	58c8      	ldr	r0, [r1, r3]
 8019eb8:	4770      	bx	lr
 8019eba:	4a0d      	ldr	r2, [pc, #52]	; (8019ef0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8019ebc:	8812      	ldrh	r2, [r2, #0]
 8019ebe:	440a      	add	r2, r1
 8019ec0:	4293      	cmp	r3, r2
 8019ec2:	da04      	bge.n	8019ece <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8019ec4:	4a08      	ldr	r2, [pc, #32]	; (8019ee8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019ec6:	6812      	ldr	r2, [r2, #0]
 8019ec8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019ecc:	4770      	bx	lr
 8019ece:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019ed2:	4293      	cmp	r3, r2
 8019ed4:	d103      	bne.n	8019ede <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8019ed6:	4b07      	ldr	r3, [pc, #28]	; (8019ef4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8019edc:	4770      	bx	lr
 8019ede:	2000      	movs	r0, #0
 8019ee0:	4770      	bx	lr
 8019ee2:	bf00      	nop
 8019ee4:	20008890 	.word	0x20008890
 8019ee8:	20008874 	.word	0x20008874
 8019eec:	20008898 	.word	0x20008898
 8019ef0:	20008894 	.word	0x20008894
 8019ef4:	20008808 	.word	0x20008808

08019ef8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8019ef8:	4b24      	ldr	r3, [pc, #144]	; (8019f8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8019efa:	8802      	ldrh	r2, [r0, #0]
 8019efc:	8818      	ldrh	r0, [r3, #0]
 8019efe:	4282      	cmp	r2, r0
 8019f00:	d221      	bcs.n	8019f46 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8019f02:	4b23      	ldr	r3, [pc, #140]	; (8019f90 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8019f04:	6819      	ldr	r1, [r3, #0]
 8019f06:	2314      	movs	r3, #20
 8019f08:	fb03 1302 	mla	r3, r3, r2, r1
 8019f0c:	6858      	ldr	r0, [r3, #4]
 8019f0e:	2800      	cmp	r0, #0
 8019f10:	d03a      	beq.n	8019f88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019f12:	4920      	ldr	r1, [pc, #128]	; (8019f94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019f14:	6809      	ldr	r1, [r1, #0]
 8019f16:	2900      	cmp	r1, #0
 8019f18:	d036      	beq.n	8019f88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019f1a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019f1e:	2900      	cmp	r1, #0
 8019f20:	d032      	beq.n	8019f88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019f22:	891a      	ldrh	r2, [r3, #8]
 8019f24:	8958      	ldrh	r0, [r3, #10]
 8019f26:	4350      	muls	r0, r2
 8019f28:	7c5a      	ldrb	r2, [r3, #17]
 8019f2a:	7cdb      	ldrb	r3, [r3, #19]
 8019f2c:	0952      	lsrs	r2, r2, #5
 8019f2e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8019f32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8019f36:	2b0b      	cmp	r3, #11
 8019f38:	bf18      	it	ne
 8019f3a:	0040      	lslne	r0, r0, #1
 8019f3c:	3003      	adds	r0, #3
 8019f3e:	f020 0003 	bic.w	r0, r0, #3
 8019f42:	4408      	add	r0, r1
 8019f44:	4770      	bx	lr
 8019f46:	4b14      	ldr	r3, [pc, #80]	; (8019f98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019f48:	881b      	ldrh	r3, [r3, #0]
 8019f4a:	4403      	add	r3, r0
 8019f4c:	429a      	cmp	r2, r3
 8019f4e:	da1a      	bge.n	8019f86 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019f50:	4b12      	ldr	r3, [pc, #72]	; (8019f9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	1a10      	subs	r0, r2, r0
 8019f56:	210e      	movs	r1, #14
 8019f58:	fb01 3000 	mla	r0, r1, r0, r3
 8019f5c:	7b03      	ldrb	r3, [r0, #12]
 8019f5e:	f003 031f 	and.w	r3, r3, #31
 8019f62:	2b0b      	cmp	r3, #11
 8019f64:	d10b      	bne.n	8019f7e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8019f66:	8903      	ldrh	r3, [r0, #8]
 8019f68:	8940      	ldrh	r0, [r0, #10]
 8019f6a:	4358      	muls	r0, r3
 8019f6c:	4b09      	ldr	r3, [pc, #36]	; (8019f94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019f6e:	6819      	ldr	r1, [r3, #0]
 8019f70:	3003      	adds	r0, #3
 8019f72:	f020 0303 	bic.w	r3, r0, #3
 8019f76:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8019f7a:	4418      	add	r0, r3
 8019f7c:	4770      	bx	lr
 8019f7e:	2b0d      	cmp	r3, #13
 8019f80:	d101      	bne.n	8019f86 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019f82:	300d      	adds	r0, #13
 8019f84:	4770      	bx	lr
 8019f86:	2000      	movs	r0, #0
 8019f88:	4770      	bx	lr
 8019f8a:	bf00      	nop
 8019f8c:	20008890 	.word	0x20008890
 8019f90:	20008898 	.word	0x20008898
 8019f94:	20008874 	.word	0x20008874
 8019f98:	20008894 	.word	0x20008894
 8019f9c:	20008878 	.word	0x20008878

08019fa0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019fa0:	b510      	push	{r4, lr}
 8019fa2:	4a17      	ldr	r2, [pc, #92]	; (801a000 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8019fa4:	8803      	ldrh	r3, [r0, #0]
 8019fa6:	8812      	ldrh	r2, [r2, #0]
 8019fa8:	4293      	cmp	r3, r2
 8019faa:	d20c      	bcs.n	8019fc6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019fac:	4a15      	ldr	r2, [pc, #84]	; (801a004 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8019fae:	6812      	ldr	r2, [r2, #0]
 8019fb0:	2114      	movs	r1, #20
 8019fb2:	fb01 2303 	mla	r3, r1, r3, r2
 8019fb6:	7c58      	ldrb	r0, [r3, #17]
 8019fb8:	0942      	lsrs	r2, r0, #5
 8019fba:	7cd8      	ldrb	r0, [r3, #19]
 8019fbc:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019fc0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8019fc4:	bd10      	pop	{r4, pc}
 8019fc6:	4910      	ldr	r1, [pc, #64]	; (801a008 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8019fc8:	8809      	ldrh	r1, [r1, #0]
 8019fca:	4411      	add	r1, r2
 8019fcc:	428b      	cmp	r3, r1
 8019fce:	da09      	bge.n	8019fe4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8019fd0:	1a9b      	subs	r3, r3, r2
 8019fd2:	4a0e      	ldr	r2, [pc, #56]	; (801a00c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8019fd4:	6812      	ldr	r2, [r2, #0]
 8019fd6:	210e      	movs	r1, #14
 8019fd8:	fb01 2303 	mla	r3, r1, r3, r2
 8019fdc:	7b18      	ldrb	r0, [r3, #12]
 8019fde:	f000 001f 	and.w	r0, r0, #31
 8019fe2:	e7ef      	b.n	8019fc4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8019fe4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019fe8:	4293      	cmp	r3, r2
 8019fea:	d106      	bne.n	8019ffa <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8019fec:	f7ef ff96 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 8019ff0:	6803      	ldr	r3, [r0, #0]
 8019ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ff8:	4718      	bx	r3
 8019ffa:	2000      	movs	r0, #0
 8019ffc:	e7e2      	b.n	8019fc4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8019ffe:	bf00      	nop
 801a000:	20008890 	.word	0x20008890
 801a004:	20008898 	.word	0x20008898
 801a008:	20008894 	.word	0x20008894
 801a00c:	20008878 	.word	0x20008878

0801a010 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801a010:	2010      	movs	r0, #16
 801a012:	4770      	bx	lr

0801a014 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801a014:	2000      	movs	r0, #0
 801a016:	4770      	bx	lr

0801a018 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801a018:	4b02      	ldr	r3, [pc, #8]	; (801a024 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801a01a:	8818      	ldrh	r0, [r3, #0]
 801a01c:	0040      	lsls	r0, r0, #1
 801a01e:	b280      	uxth	r0, r0
 801a020:	4770      	bx	lr
 801a022:	bf00      	nop
 801a024:	20008802 	.word	0x20008802

0801a028 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a028:	2bff      	cmp	r3, #255	; 0xff
 801a02a:	d050      	beq.n	801a0ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801a02c:	2a0b      	cmp	r2, #11
 801a02e:	d04a      	beq.n	801a0c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a030:	d80e      	bhi.n	801a050 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801a032:	2a03      	cmp	r2, #3
 801a034:	d03f      	beq.n	801a0b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801a036:	d804      	bhi.n	801a042 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a038:	2a01      	cmp	r2, #1
 801a03a:	d03e      	beq.n	801a0ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801a03c:	d93f      	bls.n	801a0be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801a03e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801a040:	4770      	bx	lr
 801a042:	2a09      	cmp	r2, #9
 801a044:	d03f      	beq.n	801a0c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a046:	d83c      	bhi.n	801a0c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a048:	2a08      	cmp	r2, #8
 801a04a:	d03a      	beq.n	801a0c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a04c:	2000      	movs	r0, #0
 801a04e:	4770      	bx	lr
 801a050:	2a2f      	cmp	r2, #47	; 0x2f
 801a052:	d024      	beq.n	801a09e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801a054:	d80d      	bhi.n	801a072 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801a056:	2a2d      	cmp	r2, #45	; 0x2d
 801a058:	d014      	beq.n	801a084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801a05a:	d826      	bhi.n	801a0aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801a05c:	2a2c      	cmp	r2, #44	; 0x2c
 801a05e:	d1f5      	bne.n	801a04c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a060:	684b      	ldr	r3, [r1, #4]
 801a062:	781b      	ldrb	r3, [r3, #0]
 801a064:	2b01      	cmp	r3, #1
 801a066:	d018      	beq.n	801a09a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801a068:	d323      	bcc.n	801a0b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801a06a:	2b02      	cmp	r3, #2
 801a06c:	d1ee      	bne.n	801a04c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a06e:	6880      	ldr	r0, [r0, #8]
 801a070:	4770      	bx	lr
 801a072:	2a31      	cmp	r2, #49	; 0x31
 801a074:	d004      	beq.n	801a080 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801a076:	d328      	bcc.n	801a0ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801a078:	2a32      	cmp	r2, #50	; 0x32
 801a07a:	d026      	beq.n	801a0ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801a07c:	2a33      	cmp	r2, #51	; 0x33
 801a07e:	d1e5      	bne.n	801a04c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a080:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801a082:	4770      	bx	lr
 801a084:	684b      	ldr	r3, [r1, #4]
 801a086:	781b      	ldrb	r3, [r3, #0]
 801a088:	2b01      	cmp	r3, #1
 801a08a:	d004      	beq.n	801a096 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a08c:	d30b      	bcc.n	801a0a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a08e:	2b02      	cmp	r3, #2
 801a090:	d1dc      	bne.n	801a04c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a092:	6900      	ldr	r0, [r0, #16]
 801a094:	4770      	bx	lr
 801a096:	6a00      	ldr	r0, [r0, #32]
 801a098:	4770      	bx	lr
 801a09a:	6980      	ldr	r0, [r0, #24]
 801a09c:	4770      	bx	lr
 801a09e:	684b      	ldr	r3, [r1, #4]
 801a0a0:	781b      	ldrb	r3, [r3, #0]
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d1d2      	bne.n	801a04c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a0a6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a0a8:	4770      	bx	lr
 801a0aa:	684b      	ldr	r3, [r1, #4]
 801a0ac:	781b      	ldrb	r3, [r3, #0]
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d1cc      	bne.n	801a04c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a0b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801a0b4:	4770      	bx	lr
 801a0b6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801a0b8:	4770      	bx	lr
 801a0ba:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a0bc:	4770      	bx	lr
 801a0be:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801a0c0:	4770      	bx	lr
 801a0c2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801a0c4:	4770      	bx	lr
 801a0c6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801a0c8:	4770      	bx	lr
 801a0ca:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801a0cc:	4770      	bx	lr
 801a0ce:	2a0b      	cmp	r2, #11
 801a0d0:	d049      	beq.n	801a166 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801a0d2:	d80e      	bhi.n	801a0f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801a0d4:	2a03      	cmp	r2, #3
 801a0d6:	d040      	beq.n	801a15a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801a0d8:	d804      	bhi.n	801a0e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801a0da:	2a01      	cmp	r2, #1
 801a0dc:	d03f      	beq.n	801a15e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801a0de:	d940      	bls.n	801a162 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801a0e0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801a0e2:	4770      	bx	lr
 801a0e4:	2a09      	cmp	r2, #9
 801a0e6:	d03e      	beq.n	801a166 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801a0e8:	d801      	bhi.n	801a0ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801a0ea:	2a08      	cmp	r2, #8
 801a0ec:	d1ae      	bne.n	801a04c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a0ee:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801a0f0:	4770      	bx	lr
 801a0f2:	2a2f      	cmp	r2, #47	; 0x2f
 801a0f4:	d024      	beq.n	801a140 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801a0f6:	d80d      	bhi.n	801a114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801a0f8:	2a2d      	cmp	r2, #45	; 0x2d
 801a0fa:	d014      	beq.n	801a126 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801a0fc:	d826      	bhi.n	801a14c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801a0fe:	2a2c      	cmp	r2, #44	; 0x2c
 801a100:	d1a4      	bne.n	801a04c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a102:	684b      	ldr	r3, [r1, #4]
 801a104:	781b      	ldrb	r3, [r3, #0]
 801a106:	2b01      	cmp	r3, #1
 801a108:	d018      	beq.n	801a13c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801a10a:	d324      	bcc.n	801a156 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801a10c:	2b02      	cmp	r3, #2
 801a10e:	d19d      	bne.n	801a04c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a110:	68c0      	ldr	r0, [r0, #12]
 801a112:	4770      	bx	lr
 801a114:	2a31      	cmp	r2, #49	; 0x31
 801a116:	d004      	beq.n	801a122 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801a118:	d327      	bcc.n	801a16a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801a11a:	2a32      	cmp	r2, #50	; 0x32
 801a11c:	d025      	beq.n	801a16a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801a11e:	2a33      	cmp	r2, #51	; 0x33
 801a120:	d194      	bne.n	801a04c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a122:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801a124:	4770      	bx	lr
 801a126:	684b      	ldr	r3, [r1, #4]
 801a128:	781b      	ldrb	r3, [r3, #0]
 801a12a:	2b01      	cmp	r3, #1
 801a12c:	d004      	beq.n	801a138 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801a12e:	d30b      	bcc.n	801a148 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801a130:	2b02      	cmp	r3, #2
 801a132:	d18b      	bne.n	801a04c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a134:	6940      	ldr	r0, [r0, #20]
 801a136:	4770      	bx	lr
 801a138:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801a13a:	4770      	bx	lr
 801a13c:	69c0      	ldr	r0, [r0, #28]
 801a13e:	4770      	bx	lr
 801a140:	684b      	ldr	r3, [r1, #4]
 801a142:	781b      	ldrb	r3, [r3, #0]
 801a144:	2b00      	cmp	r3, #0
 801a146:	d181      	bne.n	801a04c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a148:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a14a:	4770      	bx	lr
 801a14c:	684b      	ldr	r3, [r1, #4]
 801a14e:	781b      	ldrb	r3, [r3, #0]
 801a150:	2b00      	cmp	r3, #0
 801a152:	f47f af7b 	bne.w	801a04c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a156:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801a158:	4770      	bx	lr
 801a15a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801a15c:	4770      	bx	lr
 801a15e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801a160:	4770      	bx	lr
 801a162:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801a164:	4770      	bx	lr
 801a166:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801a168:	4770      	bx	lr
 801a16a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801a16c:	4770      	bx	lr

0801a16e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a16e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a172:	b087      	sub	sp, #28
 801a174:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a176:	9205      	str	r2, [sp, #20]
 801a178:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a17c:	9202      	str	r2, [sp, #8]
 801a17e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a182:	9101      	str	r1, [sp, #4]
 801a184:	6841      	ldr	r1, [r0, #4]
 801a186:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801a18a:	fb01 2404 	mla	r4, r1, r4, r2
 801a18e:	6802      	ldr	r2, [r0, #0]
 801a190:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a194:	f8de 2000 	ldr.w	r2, [lr]
 801a198:	9203      	str	r2, [sp, #12]
 801a19a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a19e:	3204      	adds	r2, #4
 801a1a0:	9204      	str	r2, [sp, #16]
 801a1a2:	9a02      	ldr	r2, [sp, #8]
 801a1a4:	43d6      	mvns	r6, r2
 801a1a6:	b2f6      	uxtb	r6, r6
 801a1a8:	9a01      	ldr	r2, [sp, #4]
 801a1aa:	2a00      	cmp	r2, #0
 801a1ac:	dc03      	bgt.n	801a1b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a1ae:	9a05      	ldr	r2, [sp, #20]
 801a1b0:	2a00      	cmp	r2, #0
 801a1b2:	f340 8129 	ble.w	801a408 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a1b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a1b8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801a1bc:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801a1c0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a1c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a1c6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	dd0e      	ble.n	801a1ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a1ce:	1408      	asrs	r0, r1, #16
 801a1d0:	d405      	bmi.n	801a1de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a1d2:	4560      	cmp	r0, ip
 801a1d4:	da03      	bge.n	801a1de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a1d6:	1410      	asrs	r0, r2, #16
 801a1d8:	d401      	bmi.n	801a1de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a1da:	42b8      	cmp	r0, r7
 801a1dc:	db07      	blt.n	801a1ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801a1de:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a1e0:	4401      	add	r1, r0
 801a1e2:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a1e4:	3b01      	subs	r3, #1
 801a1e6:	4402      	add	r2, r0
 801a1e8:	3402      	adds	r4, #2
 801a1ea:	e7ee      	b.n	801a1ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a1ec:	d071      	beq.n	801a2d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a1ee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a1f0:	1e58      	subs	r0, r3, #1
 801a1f2:	fb05 1500 	mla	r5, r5, r0, r1
 801a1f6:	142d      	asrs	r5, r5, #16
 801a1f8:	d45f      	bmi.n	801a2ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a1fa:	4565      	cmp	r5, ip
 801a1fc:	da5d      	bge.n	801a2ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a1fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a200:	fb05 2000 	mla	r0, r5, r0, r2
 801a204:	1400      	asrs	r0, r0, #16
 801a206:	d458      	bmi.n	801a2ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a208:	42b8      	cmp	r0, r7
 801a20a:	da56      	bge.n	801a2ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a20c:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801a210:	4699      	mov	r9, r3
 801a212:	46a2      	mov	sl, r4
 801a214:	f1b9 0f00 	cmp.w	r9, #0
 801a218:	dd57      	ble.n	801a2ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801a21a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a21e:	9803      	ldr	r0, [sp, #12]
 801a220:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a224:	140d      	asrs	r5, r1, #16
 801a226:	fb07 000c 	mla	r0, r7, ip, r0
 801a22a:	f109 39ff 	add.w	r9, r9, #4294967295
 801a22e:	5d40      	ldrb	r0, [r0, r5]
 801a230:	9d04      	ldr	r5, [sp, #16]
 801a232:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a236:	f8ba 5000 	ldrh.w	r5, [sl]
 801a23a:	122f      	asrs	r7, r5, #8
 801a23c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a240:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a244:	fb17 f706 	smulbb	r7, r7, r6
 801a248:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801a24c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a250:	00ed      	lsls	r5, r5, #3
 801a252:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801a256:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801a25a:	10c7      	asrs	r7, r0, #3
 801a25c:	b2ed      	uxtb	r5, r5
 801a25e:	00c0      	lsls	r0, r0, #3
 801a260:	fb18 f806 	smulbb	r8, r8, r6
 801a264:	fb15 f506 	smulbb	r5, r5, r6
 801a268:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a26c:	b2c0      	uxtb	r0, r0
 801a26e:	fa1f fc8c 	uxth.w	ip, ip
 801a272:	fb07 870b 	mla	r7, r7, fp, r8
 801a276:	fb00 500b 	mla	r0, r0, fp, r5
 801a27a:	b280      	uxth	r0, r0
 801a27c:	b2bf      	uxth	r7, r7
 801a27e:	f10c 0501 	add.w	r5, ip, #1
 801a282:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a286:	f107 0801 	add.w	r8, r7, #1
 801a28a:	1c45      	adds	r5, r0, #1
 801a28c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a290:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801a294:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a296:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a29a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a29e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a2a2:	ea45 0c0c 	orr.w	ip, r5, ip
 801a2a6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a2aa:	4401      	add	r1, r0
 801a2ac:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a2ae:	ea4c 0c08 	orr.w	ip, ip, r8
 801a2b2:	f82a cb02 	strh.w	ip, [sl], #2
 801a2b6:	4402      	add	r2, r0
 801a2b8:	e7ac      	b.n	801a214 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a2ba:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801a2be:	f04f 0800 	mov.w	r8, #0
 801a2c2:	eb03 0008 	add.w	r0, r3, r8
 801a2c6:	2800      	cmp	r0, #0
 801a2c8:	dc41      	bgt.n	801a34e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801a2ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a2ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a2d2:	9b01      	ldr	r3, [sp, #4]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	f340 8097 	ble.w	801a408 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a2da:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a2de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a2e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a2e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a2e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a2ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a2f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a2f4:	eef0 6a62 	vmov.f32	s13, s5
 801a2f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a2fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a300:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a304:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801a308:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a30c:	eef0 6a43 	vmov.f32	s13, s6
 801a310:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a314:	ee12 2a90 	vmov	r2, s5
 801a318:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a31c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a320:	ee13 2a10 	vmov	r2, s6
 801a324:	9313      	str	r3, [sp, #76]	; 0x4c
 801a326:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a328:	fb92 f3f3 	sdiv	r3, r2, r3
 801a32c:	9314      	str	r3, [sp, #80]	; 0x50
 801a32e:	9b01      	ldr	r3, [sp, #4]
 801a330:	9a05      	ldr	r2, [sp, #20]
 801a332:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a336:	3b01      	subs	r3, #1
 801a338:	9301      	str	r3, [sp, #4]
 801a33a:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801a33e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a340:	eeb0 3a67 	vmov.f32	s6, s15
 801a344:	bf08      	it	eq
 801a346:	4613      	moveq	r3, r2
 801a348:	eef0 2a47 	vmov.f32	s5, s14
 801a34c:	e72c      	b.n	801a1a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a34e:	140f      	asrs	r7, r1, #16
 801a350:	d453      	bmi.n	801a3fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a352:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a356:	42bd      	cmp	r5, r7
 801a358:	dd4f      	ble.n	801a3fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a35a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a35e:	d44c      	bmi.n	801a3fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a360:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a364:	4560      	cmp	r0, ip
 801a366:	dd48      	ble.n	801a3fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a368:	9803      	ldr	r0, [sp, #12]
 801a36a:	b22d      	sxth	r5, r5
 801a36c:	fb0c 0505 	mla	r5, ip, r5, r0
 801a370:	5de8      	ldrb	r0, [r5, r7]
 801a372:	9d04      	ldr	r5, [sp, #16]
 801a374:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a378:	f06f 0501 	mvn.w	r5, #1
 801a37c:	fb05 fb08 	mul.w	fp, r5, r8
 801a380:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a384:	f834 500b 	ldrh.w	r5, [r4, fp]
 801a388:	122f      	asrs	r7, r5, #8
 801a38a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a38e:	fb17 f706 	smulbb	r7, r7, r6
 801a392:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a396:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a39a:	00ed      	lsls	r5, r5, #3
 801a39c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801a3a0:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a3a4:	10c7      	asrs	r7, r0, #3
 801a3a6:	b2ed      	uxtb	r5, r5
 801a3a8:	00c0      	lsls	r0, r0, #3
 801a3aa:	fb19 f906 	smulbb	r9, r9, r6
 801a3ae:	fb15 f506 	smulbb	r5, r5, r6
 801a3b2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a3b6:	b2c0      	uxtb	r0, r0
 801a3b8:	fa1f fc8c 	uxth.w	ip, ip
 801a3bc:	fb07 970a 	mla	r7, r7, sl, r9
 801a3c0:	fb00 500a 	mla	r0, r0, sl, r5
 801a3c4:	b2bf      	uxth	r7, r7
 801a3c6:	b280      	uxth	r0, r0
 801a3c8:	f10c 0501 	add.w	r5, ip, #1
 801a3cc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a3d0:	f107 0901 	add.w	r9, r7, #1
 801a3d4:	1c45      	adds	r5, r0, #1
 801a3d6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a3da:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801a3de:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a3e2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a3e6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a3ea:	ea45 0c0c 	orr.w	ip, r5, ip
 801a3ee:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a3f2:	ea4c 0c09 	orr.w	ip, ip, r9
 801a3f6:	f824 c00b 	strh.w	ip, [r4, fp]
 801a3fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a3fc:	4401      	add	r1, r0
 801a3fe:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a400:	f108 38ff 	add.w	r8, r8, #4294967295
 801a404:	4402      	add	r2, r0
 801a406:	e75c      	b.n	801a2c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a408:	b007      	add	sp, #28
 801a40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a40e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a40e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a412:	b085      	sub	sp, #20
 801a414:	4693      	mov	fp, r2
 801a416:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a418:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a41a:	6870      	ldr	r0, [r6, #4]
 801a41c:	9100      	str	r1, [sp, #0]
 801a41e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a422:	fb00 2404 	mla	r4, r0, r4, r2
 801a426:	6832      	ldr	r2, [r6, #0]
 801a428:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a42c:	682a      	ldr	r2, [r5, #0]
 801a42e:	9201      	str	r2, [sp, #4]
 801a430:	686a      	ldr	r2, [r5, #4]
 801a432:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801a436:	3204      	adds	r2, #4
 801a438:	9202      	str	r2, [sp, #8]
 801a43a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a43e:	9a00      	ldr	r2, [sp, #0]
 801a440:	2a00      	cmp	r2, #0
 801a442:	dc03      	bgt.n	801a44c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a444:	f1bb 0f00 	cmp.w	fp, #0
 801a448:	f340 80a0 	ble.w	801a58c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801a44c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a44e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a452:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a456:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a45a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a45c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a460:	2b00      	cmp	r3, #0
 801a462:	dd0c      	ble.n	801a47e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a464:	1406      	asrs	r6, r0, #16
 801a466:	d405      	bmi.n	801a474 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a468:	454e      	cmp	r6, r9
 801a46a:	da03      	bge.n	801a474 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a46c:	1416      	asrs	r6, r2, #16
 801a46e:	d401      	bmi.n	801a474 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a470:	4546      	cmp	r6, r8
 801a472:	db05      	blt.n	801a480 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a474:	4470      	add	r0, lr
 801a476:	4462      	add	r2, ip
 801a478:	3b01      	subs	r3, #1
 801a47a:	3402      	adds	r4, #2
 801a47c:	e7f0      	b.n	801a460 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a47e:	d00f      	beq.n	801a4a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a480:	1e5e      	subs	r6, r3, #1
 801a482:	fb0e 0706 	mla	r7, lr, r6, r0
 801a486:	143f      	asrs	r7, r7, #16
 801a488:	d541      	bpl.n	801a50e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801a48a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801a48e:	4698      	mov	r8, r3
 801a490:	9603      	str	r6, [sp, #12]
 801a492:	f1b8 0f00 	cmp.w	r8, #0
 801a496:	dc59      	bgt.n	801a54c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a498:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a49c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a4a0:	9b00      	ldr	r3, [sp, #0]
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	dd72      	ble.n	801a58c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801a4a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a4aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a4ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a4b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a4b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a4b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a4bc:	eeb0 6a62 	vmov.f32	s12, s5
 801a4c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a4c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a4cc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a4d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a4d4:	eeb0 6a43 	vmov.f32	s12, s6
 801a4d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a4dc:	ee12 2a90 	vmov	r2, s5
 801a4e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a4e4:	fb92 fef3 	sdiv	lr, r2, r3
 801a4e8:	ee13 2a10 	vmov	r2, s6
 801a4ec:	fb92 fcf3 	sdiv	ip, r2, r3
 801a4f0:	9b00      	ldr	r3, [sp, #0]
 801a4f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4f6:	3b01      	subs	r3, #1
 801a4f8:	9300      	str	r3, [sp, #0]
 801a4fa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a4fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a500:	eeb0 3a67 	vmov.f32	s6, s15
 801a504:	bf08      	it	eq
 801a506:	465b      	moveq	r3, fp
 801a508:	eef0 2a47 	vmov.f32	s5, s14
 801a50c:	e797      	b.n	801a43e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a50e:	454f      	cmp	r7, r9
 801a510:	dabb      	bge.n	801a48a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a512:	fb0c 2606 	mla	r6, ip, r6, r2
 801a516:	1436      	asrs	r6, r6, #16
 801a518:	d4b7      	bmi.n	801a48a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a51a:	4546      	cmp	r6, r8
 801a51c:	dab5      	bge.n	801a48a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a51e:	461e      	mov	r6, r3
 801a520:	46a0      	mov	r8, r4
 801a522:	2e00      	cmp	r6, #0
 801a524:	ddb8      	ble.n	801a498 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a526:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801a52a:	9901      	ldr	r1, [sp, #4]
 801a52c:	1417      	asrs	r7, r2, #16
 801a52e:	ea4f 4920 	mov.w	r9, r0, asr #16
 801a532:	fb0a 1707 	mla	r7, sl, r7, r1
 801a536:	9902      	ldr	r1, [sp, #8]
 801a538:	f817 7009 	ldrb.w	r7, [r7, r9]
 801a53c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801a540:	f828 7b02 	strh.w	r7, [r8], #2
 801a544:	4470      	add	r0, lr
 801a546:	4462      	add	r2, ip
 801a548:	3e01      	subs	r6, #1
 801a54a:	e7ea      	b.n	801a522 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801a54c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a550:	d417      	bmi.n	801a582 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a552:	68ae      	ldr	r6, [r5, #8]
 801a554:	454e      	cmp	r6, r9
 801a556:	dd14      	ble.n	801a582 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a558:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a55c:	d411      	bmi.n	801a582 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a55e:	68ef      	ldr	r7, [r5, #12]
 801a560:	4557      	cmp	r7, sl
 801a562:	dd0e      	ble.n	801a582 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a564:	9f01      	ldr	r7, [sp, #4]
 801a566:	b236      	sxth	r6, r6
 801a568:	fb0a 7606 	mla	r6, sl, r6, r7
 801a56c:	9f02      	ldr	r7, [sp, #8]
 801a56e:	f816 6009 	ldrb.w	r6, [r6, r9]
 801a572:	f06f 0101 	mvn.w	r1, #1
 801a576:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801a57a:	fb01 f608 	mul.w	r6, r1, r8
 801a57e:	9903      	ldr	r1, [sp, #12]
 801a580:	538f      	strh	r7, [r1, r6]
 801a582:	4470      	add	r0, lr
 801a584:	4462      	add	r2, ip
 801a586:	f108 38ff 	add.w	r8, r8, #4294967295
 801a58a:	e782      	b.n	801a492 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a58c:	b005      	add	sp, #20
 801a58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a592 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a592:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a596:	b087      	sub	sp, #28
 801a598:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a59a:	9205      	str	r2, [sp, #20]
 801a59c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a5a0:	9203      	str	r2, [sp, #12]
 801a5a2:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801a5a6:	9102      	str	r1, [sp, #8]
 801a5a8:	6861      	ldr	r1, [r4, #4]
 801a5aa:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a5ae:	fb01 2000 	mla	r0, r1, r0, r2
 801a5b2:	6822      	ldr	r2, [r4, #0]
 801a5b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801a5b8:	9200      	str	r2, [sp, #0]
 801a5ba:	f8dc 2000 	ldr.w	r2, [ip]
 801a5be:	9204      	str	r2, [sp, #16]
 801a5c0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a5c4:	3204      	adds	r2, #4
 801a5c6:	9201      	str	r2, [sp, #4]
 801a5c8:	9a03      	ldr	r2, [sp, #12]
 801a5ca:	43d5      	mvns	r5, r2
 801a5cc:	b2ed      	uxtb	r5, r5
 801a5ce:	9a02      	ldr	r2, [sp, #8]
 801a5d0:	2a00      	cmp	r2, #0
 801a5d2:	dc03      	bgt.n	801a5dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a5d4:	9a05      	ldr	r2, [sp, #20]
 801a5d6:	2a00      	cmp	r2, #0
 801a5d8:	f340 812c 	ble.w	801a834 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a5dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a5de:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801a5e2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a5e6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a5ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a5ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	dd10      	ble.n	801a616 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a5f4:	140c      	asrs	r4, r1, #16
 801a5f6:	d405      	bmi.n	801a604 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a5f8:	4574      	cmp	r4, lr
 801a5fa:	da03      	bge.n	801a604 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a5fc:	1414      	asrs	r4, r2, #16
 801a5fe:	d401      	bmi.n	801a604 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a600:	42bc      	cmp	r4, r7
 801a602:	db09      	blt.n	801a618 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801a604:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a606:	9800      	ldr	r0, [sp, #0]
 801a608:	4421      	add	r1, r4
 801a60a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a60c:	3002      	adds	r0, #2
 801a60e:	4422      	add	r2, r4
 801a610:	3b01      	subs	r3, #1
 801a612:	9000      	str	r0, [sp, #0]
 801a614:	e7ec      	b.n	801a5f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a616:	d071      	beq.n	801a6fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801a618:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a61a:	1e5c      	subs	r4, r3, #1
 801a61c:	fb06 1604 	mla	r6, r6, r4, r1
 801a620:	1436      	asrs	r6, r6, #16
 801a622:	d45d      	bmi.n	801a6e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a624:	4576      	cmp	r6, lr
 801a626:	da5b      	bge.n	801a6e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a628:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801a62a:	fb06 2404 	mla	r4, r6, r4, r2
 801a62e:	1424      	asrs	r4, r4, #16
 801a630:	d456      	bmi.n	801a6e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a632:	42bc      	cmp	r4, r7
 801a634:	da54      	bge.n	801a6e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a636:	f8dd 9000 	ldr.w	r9, [sp]
 801a63a:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801a63e:	4698      	mov	r8, r3
 801a640:	f1b8 0f00 	cmp.w	r8, #0
 801a644:	dd54      	ble.n	801a6f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a646:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a64a:	9804      	ldr	r0, [sp, #16]
 801a64c:	1414      	asrs	r4, r2, #16
 801a64e:	fb07 0404 	mla	r4, r7, r4, r0
 801a652:	140e      	asrs	r6, r1, #16
 801a654:	9801      	ldr	r0, [sp, #4]
 801a656:	f814 e006 	ldrb.w	lr, [r4, r6]
 801a65a:	f8b9 4000 	ldrh.w	r4, [r9]
 801a65e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a662:	eb00 0b0e 	add.w	fp, r0, lr
 801a666:	1227      	asrs	r7, r4, #8
 801a668:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a66c:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a670:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801a674:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a676:	fb16 f60a 	smulbb	r6, r6, sl
 801a67a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a67e:	fb07 6705 	mla	r7, r7, r5, r6
 801a682:	10e6      	asrs	r6, r4, #3
 801a684:	00e4      	lsls	r4, r4, #3
 801a686:	b2e4      	uxtb	r4, r4
 801a688:	fb1b fb0a 	smulbb	fp, fp, sl
 801a68c:	fb14 f405 	smulbb	r4, r4, r5
 801a690:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a694:	b2bf      	uxth	r7, r7
 801a696:	fb06 b605 	mla	r6, r6, r5, fp
 801a69a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801a69e:	b2b6      	uxth	r6, r6
 801a6a0:	fa1f fe8e 	uxth.w	lr, lr
 801a6a4:	1c7c      	adds	r4, r7, #1
 801a6a6:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a6aa:	f106 0b01 	add.w	fp, r6, #1
 801a6ae:	f10e 0401 	add.w	r4, lr, #1
 801a6b2:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801a6b6:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a6ba:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a6be:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a6c2:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a6c6:	4327      	orrs	r7, r4
 801a6c8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a6cc:	4401      	add	r1, r0
 801a6ce:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a6d0:	ea47 070b 	orr.w	r7, r7, fp
 801a6d4:	f829 7b02 	strh.w	r7, [r9], #2
 801a6d8:	4402      	add	r2, r0
 801a6da:	f108 38ff 	add.w	r8, r8, #4294967295
 801a6de:	e7af      	b.n	801a640 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a6e0:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801a6e4:	f04f 0e00 	mov.w	lr, #0
 801a6e8:	eb03 040e 	add.w	r4, r3, lr
 801a6ec:	2c00      	cmp	r4, #0
 801a6ee:	dc43      	bgt.n	801a778 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a6f0:	9a00      	ldr	r2, [sp, #0]
 801a6f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a6f6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a6fa:	9300      	str	r3, [sp, #0]
 801a6fc:	9b02      	ldr	r3, [sp, #8]
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	f340 8098 	ble.w	801a834 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a704:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a70c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a710:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a712:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a716:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a71a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a71e:	eef0 6a62 	vmov.f32	s13, s5
 801a722:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a726:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a72a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a72e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801a732:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a736:	eef0 6a43 	vmov.f32	s13, s6
 801a73a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a73e:	ee12 2a90 	vmov	r2, s5
 801a742:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a746:	fb92 f3f3 	sdiv	r3, r2, r3
 801a74a:	ee13 2a10 	vmov	r2, s6
 801a74e:	9313      	str	r3, [sp, #76]	; 0x4c
 801a750:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a752:	fb92 f3f3 	sdiv	r3, r2, r3
 801a756:	9314      	str	r3, [sp, #80]	; 0x50
 801a758:	9b02      	ldr	r3, [sp, #8]
 801a75a:	9a05      	ldr	r2, [sp, #20]
 801a75c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a760:	3b01      	subs	r3, #1
 801a762:	9302      	str	r3, [sp, #8]
 801a764:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801a768:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a76a:	eeb0 3a67 	vmov.f32	s6, s15
 801a76e:	bf08      	it	eq
 801a770:	4613      	moveq	r3, r2
 801a772:	eef0 2a47 	vmov.f32	s5, s14
 801a776:	e72a      	b.n	801a5ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a778:	140f      	asrs	r7, r1, #16
 801a77a:	d454      	bmi.n	801a826 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a77c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a780:	42be      	cmp	r6, r7
 801a782:	dd50      	ble.n	801a826 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a784:	ea5f 4822 	movs.w	r8, r2, asr #16
 801a788:	d44d      	bmi.n	801a826 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a78a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801a78e:	4544      	cmp	r4, r8
 801a790:	dd49      	ble.n	801a826 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a792:	9c04      	ldr	r4, [sp, #16]
 801a794:	b236      	sxth	r6, r6
 801a796:	fb08 4606 	mla	r6, r8, r6, r4
 801a79a:	f06f 0001 	mvn.w	r0, #1
 801a79e:	f816 8007 	ldrb.w	r8, [r6, r7]
 801a7a2:	9c01      	ldr	r4, [sp, #4]
 801a7a4:	fb00 fa0e 	mul.w	sl, r0, lr
 801a7a8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a7ac:	9800      	ldr	r0, [sp, #0]
 801a7ae:	eb04 0b08 	add.w	fp, r4, r8
 801a7b2:	f830 400a 	ldrh.w	r4, [r0, sl]
 801a7b6:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a7ba:	9801      	ldr	r0, [sp, #4]
 801a7bc:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a7c0:	f810 8008 	ldrb.w	r8, [r0, r8]
 801a7c4:	9800      	ldr	r0, [sp, #0]
 801a7c6:	1227      	asrs	r7, r4, #8
 801a7c8:	fb16 f609 	smulbb	r6, r6, r9
 801a7cc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a7d0:	fb07 6705 	mla	r7, r7, r5, r6
 801a7d4:	10e6      	asrs	r6, r4, #3
 801a7d6:	00e4      	lsls	r4, r4, #3
 801a7d8:	b2e4      	uxtb	r4, r4
 801a7da:	fb1b fb09 	smulbb	fp, fp, r9
 801a7de:	fb14 f405 	smulbb	r4, r4, r5
 801a7e2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a7e6:	b2bf      	uxth	r7, r7
 801a7e8:	fb06 b605 	mla	r6, r6, r5, fp
 801a7ec:	fb08 4809 	mla	r8, r8, r9, r4
 801a7f0:	b2b6      	uxth	r6, r6
 801a7f2:	fa1f f888 	uxth.w	r8, r8
 801a7f6:	1c7c      	adds	r4, r7, #1
 801a7f8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a7fc:	f106 0b01 	add.w	fp, r6, #1
 801a800:	f108 0401 	add.w	r4, r8, #1
 801a804:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801a808:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a80c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a810:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a814:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a818:	4327      	orrs	r7, r4
 801a81a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a81e:	ea47 070b 	orr.w	r7, r7, fp
 801a822:	f820 700a 	strh.w	r7, [r0, sl]
 801a826:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a828:	4401      	add	r1, r0
 801a82a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a82c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a830:	4402      	add	r2, r0
 801a832:	e759      	b.n	801a6e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801a834:	b007      	add	sp, #28
 801a836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a83c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a840:	b085      	sub	sp, #20
 801a842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a846:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a848:	9203      	str	r2, [sp, #12]
 801a84a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a84e:	6870      	ldr	r0, [r6, #4]
 801a850:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a852:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801a856:	686f      	ldr	r7, [r5, #4]
 801a858:	9101      	str	r1, [sp, #4]
 801a85a:	fb00 2404 	mla	r4, r0, r4, r2
 801a85e:	6832      	ldr	r2, [r6, #0]
 801a860:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a864:	682a      	ldr	r2, [r5, #0]
 801a866:	9202      	str	r2, [sp, #8]
 801a868:	3704      	adds	r7, #4
 801a86a:	9a01      	ldr	r2, [sp, #4]
 801a86c:	2a00      	cmp	r2, #0
 801a86e:	dc03      	bgt.n	801a878 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a870:	9a03      	ldr	r2, [sp, #12]
 801a872:	2a00      	cmp	r2, #0
 801a874:	f340 80cc 	ble.w	801aa10 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a87a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a87e:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a882:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a886:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a888:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	dd0d      	ble.n	801a8ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a890:	1406      	asrs	r6, r0, #16
 801a892:	d405      	bmi.n	801a8a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a894:	454e      	cmp	r6, r9
 801a896:	da03      	bge.n	801a8a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a898:	1416      	asrs	r6, r2, #16
 801a89a:	d401      	bmi.n	801a8a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a89c:	4546      	cmp	r6, r8
 801a89e:	db06      	blt.n	801a8ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a8a0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a8a2:	4460      	add	r0, ip
 801a8a4:	4432      	add	r2, r6
 801a8a6:	3b01      	subs	r3, #1
 801a8a8:	3402      	adds	r4, #2
 801a8aa:	e7ef      	b.n	801a88c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801a8ac:	d00f      	beq.n	801a8ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a8ae:	1e5e      	subs	r6, r3, #1
 801a8b0:	fb0c 0e06 	mla	lr, ip, r6, r0
 801a8b4:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801a8b8:	d543      	bpl.n	801a942 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801a8ba:	4698      	mov	r8, r3
 801a8bc:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801a8c0:	f1b8 0f00 	cmp.w	r8, #0
 801a8c4:	dc71      	bgt.n	801a9aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801a8c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a8ca:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a8ce:	9b01      	ldr	r3, [sp, #4]
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	f340 809d 	ble.w	801aa10 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a8d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a8da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a8de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a8e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a8e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a8e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a8ec:	eeb0 6a62 	vmov.f32	s12, s5
 801a8f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a8f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a8f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a8fc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a900:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a904:	eeb0 6a43 	vmov.f32	s12, s6
 801a908:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a90c:	ee12 2a90 	vmov	r2, s5
 801a910:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a914:	fb92 fcf3 	sdiv	ip, r2, r3
 801a918:	ee13 2a10 	vmov	r2, s6
 801a91c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a920:	9312      	str	r3, [sp, #72]	; 0x48
 801a922:	9b01      	ldr	r3, [sp, #4]
 801a924:	9a03      	ldr	r2, [sp, #12]
 801a926:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a92a:	3b01      	subs	r3, #1
 801a92c:	9301      	str	r3, [sp, #4]
 801a92e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a934:	eeb0 3a67 	vmov.f32	s6, s15
 801a938:	bf08      	it	eq
 801a93a:	4613      	moveq	r3, r2
 801a93c:	eef0 2a47 	vmov.f32	s5, s14
 801a940:	e793      	b.n	801a86a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a942:	45ce      	cmp	lr, r9
 801a944:	dab9      	bge.n	801a8ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a946:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a948:	fb01 2606 	mla	r6, r1, r6, r2
 801a94c:	1436      	asrs	r6, r6, #16
 801a94e:	d4b4      	bmi.n	801a8ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a950:	4546      	cmp	r6, r8
 801a952:	dab2      	bge.n	801a8ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a954:	4698      	mov	r8, r3
 801a956:	46a2      	mov	sl, r4
 801a958:	f1b8 0f00 	cmp.w	r8, #0
 801a95c:	ddb3      	ble.n	801a8c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a95e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a962:	9902      	ldr	r1, [sp, #8]
 801a964:	1416      	asrs	r6, r2, #16
 801a966:	fb09 1606 	mla	r6, r9, r6, r1
 801a96a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801a96e:	492a      	ldr	r1, [pc, #168]	; (801aa18 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801a970:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801a974:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a978:	eb07 0b0e 	add.w	fp, r7, lr
 801a97c:	4460      	add	r0, ip
 801a97e:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801a982:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a986:	00f6      	lsls	r6, r6, #3
 801a988:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801a98c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a990:	ea49 0606 	orr.w	r6, r9, r6
 801a994:	f817 900e 	ldrb.w	r9, [r7, lr]
 801a998:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a99a:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801a99e:	f82a 6b02 	strh.w	r6, [sl], #2
 801a9a2:	440a      	add	r2, r1
 801a9a4:	f108 38ff 	add.w	r8, r8, #4294967295
 801a9a8:	e7d6      	b.n	801a958 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a9aa:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a9ae:	d429      	bmi.n	801aa04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a9b0:	68ae      	ldr	r6, [r5, #8]
 801a9b2:	454e      	cmp	r6, r9
 801a9b4:	dd26      	ble.n	801aa04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a9b6:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801a9ba:	d423      	bmi.n	801aa04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a9bc:	68e9      	ldr	r1, [r5, #12]
 801a9be:	4559      	cmp	r1, fp
 801a9c0:	dd20      	ble.n	801aa04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a9c2:	9902      	ldr	r1, [sp, #8]
 801a9c4:	fa0f fe86 	sxth.w	lr, r6
 801a9c8:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801a9cc:	f06f 0101 	mvn.w	r1, #1
 801a9d0:	f81e e009 	ldrb.w	lr, [lr, r9]
 801a9d4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a9d8:	eb07 060e 	add.w	r6, r7, lr
 801a9dc:	fb01 f908 	mul.w	r9, r1, r8
 801a9e0:	f896 b002 	ldrb.w	fp, [r6, #2]
 801a9e4:	7876      	ldrb	r6, [r6, #1]
 801a9e6:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801a9ea:	00f6      	lsls	r6, r6, #3
 801a9ec:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801a9f0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a9f4:	ea4b 0606 	orr.w	r6, fp, r6
 801a9f8:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801a9fc:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801aa00:	f82a 6009 	strh.w	r6, [sl, r9]
 801aa04:	9912      	ldr	r1, [sp, #72]	; 0x48
 801aa06:	4460      	add	r0, ip
 801aa08:	440a      	add	r2, r1
 801aa0a:	f108 38ff 	add.w	r8, r8, #4294967295
 801aa0e:	e757      	b.n	801a8c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801aa10:	b005      	add	sp, #20
 801aa12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa16:	bf00      	nop
 801aa18:	fffff800 	.word	0xfffff800

0801aa1c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa20:	b087      	sub	sp, #28
 801aa22:	468b      	mov	fp, r1
 801aa24:	9815      	ldr	r0, [sp, #84]	; 0x54
 801aa26:	9204      	str	r2, [sp, #16]
 801aa28:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801aa2c:	9205      	str	r2, [sp, #20]
 801aa2e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801aa32:	6841      	ldr	r1, [r0, #4]
 801aa34:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801aa38:	fb01 2404 	mla	r4, r1, r4, r2
 801aa3c:	6802      	ldr	r2, [r0, #0]
 801aa3e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801aa42:	f8dc 2000 	ldr.w	r2, [ip]
 801aa46:	9201      	str	r2, [sp, #4]
 801aa48:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801aa4c:	3204      	adds	r2, #4
 801aa4e:	9202      	str	r2, [sp, #8]
 801aa50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aa54:	f1bb 0f00 	cmp.w	fp, #0
 801aa58:	dc03      	bgt.n	801aa62 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801aa5a:	9a04      	ldr	r2, [sp, #16]
 801aa5c:	2a00      	cmp	r2, #0
 801aa5e:	f340 8138 	ble.w	801acd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801aa62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aa64:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801aa68:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801aa6c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801aa70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aa72:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	dd0e      	ble.n	801aa98 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aa7a:	1402      	asrs	r2, r0, #16
 801aa7c:	d405      	bmi.n	801aa8a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801aa7e:	42ba      	cmp	r2, r7
 801aa80:	da03      	bge.n	801aa8a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801aa82:	140a      	asrs	r2, r1, #16
 801aa84:	d401      	bmi.n	801aa8a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801aa86:	42b2      	cmp	r2, r6
 801aa88:	db07      	blt.n	801aa9a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801aa8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aa8c:	4410      	add	r0, r2
 801aa8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801aa90:	3b01      	subs	r3, #1
 801aa92:	4411      	add	r1, r2
 801aa94:	3402      	adds	r4, #2
 801aa96:	e7ee      	b.n	801aa76 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801aa98:	d019      	beq.n	801aace <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801aa9a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801aa9c:	1e5a      	subs	r2, r3, #1
 801aa9e:	fb05 0502 	mla	r5, r5, r2, r0
 801aaa2:	142d      	asrs	r5, r5, #16
 801aaa4:	d409      	bmi.n	801aaba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801aaa6:	42bd      	cmp	r5, r7
 801aaa8:	da07      	bge.n	801aaba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801aaaa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801aaac:	fb05 1202 	mla	r2, r5, r2, r1
 801aab0:	1412      	asrs	r2, r2, #16
 801aab2:	d402      	bmi.n	801aaba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801aab4:	42b2      	cmp	r2, r6
 801aab6:	f2c0 80ac 	blt.w	801ac12 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801aaba:	f04f 0e00 	mov.w	lr, #0
 801aabe:	eb03 020e 	add.w	r2, r3, lr
 801aac2:	2a00      	cmp	r2, #0
 801aac4:	dc3e      	bgt.n	801ab44 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801aac6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aaca:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801aace:	f1bb 0f00 	cmp.w	fp, #0
 801aad2:	f340 80fe 	ble.w	801acd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801aad6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aada:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aade:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aae2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aae4:	f1bb 0b01 	subs.w	fp, fp, #1
 801aae8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aaec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aaf0:	eeb0 6a62 	vmov.f32	s12, s5
 801aaf4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aaf8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aafc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab00:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ab04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab08:	eeb0 6a43 	vmov.f32	s12, s6
 801ab0c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab10:	ee12 2a90 	vmov	r2, s5
 801ab14:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab18:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab1c:	ee13 2a10 	vmov	r2, s6
 801ab20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab24:	9313      	str	r3, [sp, #76]	; 0x4c
 801ab26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab28:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab2c:	9a04      	ldr	r2, [sp, #16]
 801ab2e:	9314      	str	r3, [sp, #80]	; 0x50
 801ab30:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ab34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab36:	eeb0 3a67 	vmov.f32	s6, s15
 801ab3a:	bf08      	it	eq
 801ab3c:	4613      	moveq	r3, r2
 801ab3e:	eef0 2a47 	vmov.f32	s5, s14
 801ab42:	e787      	b.n	801aa54 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ab44:	1406      	asrs	r6, r0, #16
 801ab46:	d45d      	bmi.n	801ac04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ab48:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801ab4c:	42b5      	cmp	r5, r6
 801ab4e:	dd59      	ble.n	801ac04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ab50:	140f      	asrs	r7, r1, #16
 801ab52:	d457      	bmi.n	801ac04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ab54:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ab58:	42ba      	cmp	r2, r7
 801ab5a:	dd53      	ble.n	801ac04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ab5c:	9a01      	ldr	r2, [sp, #4]
 801ab5e:	b22d      	sxth	r5, r5
 801ab60:	fb07 2505 	mla	r5, r7, r5, r2
 801ab64:	5daa      	ldrb	r2, [r5, r6]
 801ab66:	9d02      	ldr	r5, [sp, #8]
 801ab68:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ab6c:	0e2e      	lsrs	r6, r5, #24
 801ab6e:	d049      	beq.n	801ac04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ab70:	f06f 0201 	mvn.w	r2, #1
 801ab74:	fb02 f20e 	mul.w	r2, r2, lr
 801ab78:	9203      	str	r2, [sp, #12]
 801ab7a:	f834 8002 	ldrh.w	r8, [r4, r2]
 801ab7e:	9a05      	ldr	r2, [sp, #20]
 801ab80:	4356      	muls	r6, r2
 801ab82:	1c72      	adds	r2, r6, #1
 801ab84:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ab88:	1212      	asrs	r2, r2, #8
 801ab8a:	fa1f f982 	uxth.w	r9, r2
 801ab8e:	ea4f 2728 	mov.w	r7, r8, asr #8
 801ab92:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ab96:	43d2      	mvns	r2, r2
 801ab98:	b2d2      	uxtb	r2, r2
 801ab9a:	fb16 f609 	smulbb	r6, r6, r9
 801ab9e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801aba2:	fb07 6702 	mla	r7, r7, r2, r6
 801aba6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801abaa:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801abae:	b2ed      	uxtb	r5, r5
 801abb0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801abb4:	fa5f f888 	uxtb.w	r8, r8
 801abb8:	fb15 f509 	smulbb	r5, r5, r9
 801abbc:	fb08 5502 	mla	r5, r8, r2, r5
 801abc0:	b2bf      	uxth	r7, r7
 801abc2:	fb1a fa09 	smulbb	sl, sl, r9
 801abc6:	b2ad      	uxth	r5, r5
 801abc8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801abcc:	fb06 a602 	mla	r6, r6, r2, sl
 801abd0:	1c7a      	adds	r2, r7, #1
 801abd2:	f105 0a01 	add.w	sl, r5, #1
 801abd6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801abda:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801abde:	b2b6      	uxth	r6, r6
 801abe0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801abe4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801abe8:	ea4a 0707 	orr.w	r7, sl, r7
 801abec:	f106 0a01 	add.w	sl, r6, #1
 801abf0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801abf4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801abf8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801abfc:	9a03      	ldr	r2, [sp, #12]
 801abfe:	ea47 070a 	orr.w	r7, r7, sl
 801ac02:	52a7      	strh	r7, [r4, r2]
 801ac04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ac06:	4410      	add	r0, r2
 801ac08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ac0a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ac0e:	4411      	add	r1, r2
 801ac10:	e755      	b.n	801aabe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ac12:	f04f 0800 	mov.w	r8, #0
 801ac16:	eba3 0208 	sub.w	r2, r3, r8
 801ac1a:	2a00      	cmp	r2, #0
 801ac1c:	f77f af53 	ble.w	801aac6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801ac20:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801ac24:	9f01      	ldr	r7, [sp, #4]
 801ac26:	140a      	asrs	r2, r1, #16
 801ac28:	1405      	asrs	r5, r0, #16
 801ac2a:	fb06 7202 	mla	r2, r6, r2, r7
 801ac2e:	5d52      	ldrb	r2, [r2, r5]
 801ac30:	9d02      	ldr	r5, [sp, #8]
 801ac32:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ac36:	0e2e      	lsrs	r6, r5, #24
 801ac38:	d044      	beq.n	801acc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ac3a:	9a05      	ldr	r2, [sp, #20]
 801ac3c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801ac40:	4356      	muls	r6, r2
 801ac42:	1c72      	adds	r2, r6, #1
 801ac44:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ac48:	1212      	asrs	r2, r2, #8
 801ac4a:	fa1f f982 	uxth.w	r9, r2
 801ac4e:	ea4f 272e 	mov.w	r7, lr, asr #8
 801ac52:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ac56:	43d2      	mvns	r2, r2
 801ac58:	b2d2      	uxtb	r2, r2
 801ac5a:	fb16 f609 	smulbb	r6, r6, r9
 801ac5e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ac62:	fb07 6702 	mla	r7, r7, r2, r6
 801ac66:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ac6a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ac6e:	b2ed      	uxtb	r5, r5
 801ac70:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ac74:	fa5f fe8e 	uxtb.w	lr, lr
 801ac78:	fb15 f509 	smulbb	r5, r5, r9
 801ac7c:	fb0e 5502 	mla	r5, lr, r2, r5
 801ac80:	b2bf      	uxth	r7, r7
 801ac82:	fb1a fa09 	smulbb	sl, sl, r9
 801ac86:	b2ad      	uxth	r5, r5
 801ac88:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ac8c:	fb06 a602 	mla	r6, r6, r2, sl
 801ac90:	1c7a      	adds	r2, r7, #1
 801ac92:	f105 0a01 	add.w	sl, r5, #1
 801ac96:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ac9a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ac9e:	b2b6      	uxth	r6, r6
 801aca0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801aca4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801aca8:	ea4a 0707 	orr.w	r7, sl, r7
 801acac:	f106 0a01 	add.w	sl, r6, #1
 801acb0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801acb4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801acb8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801acbc:	ea47 070a 	orr.w	r7, r7, sl
 801acc0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801acc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801acc6:	4410      	add	r0, r2
 801acc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801acca:	f108 0801 	add.w	r8, r8, #1
 801acce:	4411      	add	r1, r2
 801acd0:	e7a1      	b.n	801ac16 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801acd2:	b007      	add	sp, #28
 801acd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801acd8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acdc:	b085      	sub	sp, #20
 801acde:	468b      	mov	fp, r1
 801ace0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ace2:	9203      	str	r2, [sp, #12]
 801ace4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ace8:	6841      	ldr	r1, [r0, #4]
 801acea:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801acee:	fb01 2404 	mla	r4, r1, r4, r2
 801acf2:	6802      	ldr	r2, [r0, #0]
 801acf4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801acf8:	f8de 2000 	ldr.w	r2, [lr]
 801acfc:	9200      	str	r2, [sp, #0]
 801acfe:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ad02:	3204      	adds	r2, #4
 801ad04:	9201      	str	r2, [sp, #4]
 801ad06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ad0a:	f1bb 0f00 	cmp.w	fp, #0
 801ad0e:	dc03      	bgt.n	801ad18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ad10:	9a03      	ldr	r2, [sp, #12]
 801ad12:	2a00      	cmp	r2, #0
 801ad14:	f340 8153 	ble.w	801afbe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ad18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ad1a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ad1e:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ad22:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ad26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad28:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	dd0e      	ble.n	801ad4e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ad30:	1408      	asrs	r0, r1, #16
 801ad32:	d405      	bmi.n	801ad40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ad34:	42b8      	cmp	r0, r7
 801ad36:	da03      	bge.n	801ad40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ad38:	1410      	asrs	r0, r2, #16
 801ad3a:	d401      	bmi.n	801ad40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ad3c:	42b0      	cmp	r0, r6
 801ad3e:	db07      	blt.n	801ad50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ad40:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ad42:	4401      	add	r1, r0
 801ad44:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ad46:	3b01      	subs	r3, #1
 801ad48:	4402      	add	r2, r0
 801ad4a:	3402      	adds	r4, #2
 801ad4c:	e7ee      	b.n	801ad2c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ad4e:	d017      	beq.n	801ad80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ad50:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ad52:	1e58      	subs	r0, r3, #1
 801ad54:	fb05 1500 	mla	r5, r5, r0, r1
 801ad58:	142d      	asrs	r5, r5, #16
 801ad5a:	d409      	bmi.n	801ad70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ad5c:	42bd      	cmp	r5, r7
 801ad5e:	da07      	bge.n	801ad70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ad60:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ad62:	fb05 2000 	mla	r0, r5, r0, r2
 801ad66:	1400      	asrs	r0, r0, #16
 801ad68:	d402      	bmi.n	801ad70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ad6a:	42b0      	cmp	r0, r6
 801ad6c:	f2c0 80bc 	blt.w	801aee8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ad70:	2600      	movs	r6, #0
 801ad72:	1998      	adds	r0, r3, r6
 801ad74:	2800      	cmp	r0, #0
 801ad76:	dc3e      	bgt.n	801adf6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ad78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ad7c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ad80:	f1bb 0f00 	cmp.w	fp, #0
 801ad84:	f340 811b 	ble.w	801afbe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ad88:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ad8c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ad90:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ad94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad96:	f1bb 0b01 	subs.w	fp, fp, #1
 801ad9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ad9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ada2:	eeb0 6a62 	vmov.f32	s12, s5
 801ada6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801adaa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801adae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801adb2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801adb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801adba:	eeb0 6a43 	vmov.f32	s12, s6
 801adbe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801adc2:	ee12 2a90 	vmov	r2, s5
 801adc6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801adca:	fb92 f3f3 	sdiv	r3, r2, r3
 801adce:	ee13 2a10 	vmov	r2, s6
 801add2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801add6:	9311      	str	r3, [sp, #68]	; 0x44
 801add8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801adda:	fb92 f3f3 	sdiv	r3, r2, r3
 801adde:	9a03      	ldr	r2, [sp, #12]
 801ade0:	9312      	str	r3, [sp, #72]	; 0x48
 801ade2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ade6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ade8:	eeb0 3a67 	vmov.f32	s6, s15
 801adec:	bf08      	it	eq
 801adee:	4613      	moveq	r3, r2
 801adf0:	eef0 2a47 	vmov.f32	s5, s14
 801adf4:	e789      	b.n	801ad0a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801adf6:	140f      	asrs	r7, r1, #16
 801adf8:	d426      	bmi.n	801ae48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801adfa:	f8de 5008 	ldr.w	r5, [lr, #8]
 801adfe:	42bd      	cmp	r5, r7
 801ae00:	dd22      	ble.n	801ae48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ae02:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ae06:	d41f      	bmi.n	801ae48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ae08:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ae0c:	4560      	cmp	r0, ip
 801ae0e:	dd1b      	ble.n	801ae48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ae10:	9800      	ldr	r0, [sp, #0]
 801ae12:	b22d      	sxth	r5, r5
 801ae14:	fb0c 0505 	mla	r5, ip, r5, r0
 801ae18:	5de8      	ldrb	r0, [r5, r7]
 801ae1a:	9d01      	ldr	r5, [sp, #4]
 801ae1c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ae20:	0e07      	lsrs	r7, r0, #24
 801ae22:	2fff      	cmp	r7, #255	; 0xff
 801ae24:	d116      	bne.n	801ae54 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ae26:	f06f 0501 	mvn.w	r5, #1
 801ae2a:	fb05 f706 	mul.w	r7, r5, r6
 801ae2e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ae32:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ae36:	0945      	lsrs	r5, r0, #5
 801ae38:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ae3c:	ea4c 0505 	orr.w	r5, ip, r5
 801ae40:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ae44:	4305      	orrs	r5, r0
 801ae46:	53e5      	strh	r5, [r4, r7]
 801ae48:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ae4a:	4401      	add	r1, r0
 801ae4c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ae4e:	3e01      	subs	r6, #1
 801ae50:	4402      	add	r2, r0
 801ae52:	e78e      	b.n	801ad72 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ae54:	b2fd      	uxtb	r5, r7
 801ae56:	2f00      	cmp	r7, #0
 801ae58:	d0f6      	beq.n	801ae48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ae5a:	f06f 0701 	mvn.w	r7, #1
 801ae5e:	4377      	muls	r7, r6
 801ae60:	fa1f f985 	uxth.w	r9, r5
 801ae64:	f834 8007 	ldrh.w	r8, [r4, r7]
 801ae68:	9702      	str	r7, [sp, #8]
 801ae6a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ae6e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ae72:	43ed      	mvns	r5, r5
 801ae74:	b2ed      	uxtb	r5, r5
 801ae76:	fb17 f709 	smulbb	r7, r7, r9
 801ae7a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ae7e:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ae82:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ae86:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801ae8a:	b2c0      	uxtb	r0, r0
 801ae8c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ae90:	fa5f f888 	uxtb.w	r8, r8
 801ae94:	fb10 f009 	smulbb	r0, r0, r9
 801ae98:	fb08 0005 	mla	r0, r8, r5, r0
 801ae9c:	b280      	uxth	r0, r0
 801ae9e:	fa1f fc8c 	uxth.w	ip, ip
 801aea2:	fb1a fa09 	smulbb	sl, sl, r9
 801aea6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801aeaa:	fb07 a705 	mla	r7, r7, r5, sl
 801aeae:	f100 0a01 	add.w	sl, r0, #1
 801aeb2:	f10c 0501 	add.w	r5, ip, #1
 801aeb6:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801aeba:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801aebe:	b2bf      	uxth	r7, r7
 801aec0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801aec4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801aec8:	ea4a 0c0c 	orr.w	ip, sl, ip
 801aecc:	f107 0a01 	add.w	sl, r7, #1
 801aed0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801aed4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801aed8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801aedc:	9802      	ldr	r0, [sp, #8]
 801aede:	ea4c 0c0a 	orr.w	ip, ip, sl
 801aee2:	f824 c000 	strh.w	ip, [r4, r0]
 801aee6:	e7af      	b.n	801ae48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801aee8:	f04f 0800 	mov.w	r8, #0
 801aeec:	eba3 0008 	sub.w	r0, r3, r8
 801aef0:	2800      	cmp	r0, #0
 801aef2:	f77f af41 	ble.w	801ad78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801aef6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801aefa:	9f00      	ldr	r7, [sp, #0]
 801aefc:	1410      	asrs	r0, r2, #16
 801aefe:	140d      	asrs	r5, r1, #16
 801af00:	fb06 7000 	mla	r0, r6, r0, r7
 801af04:	5d40      	ldrb	r0, [r0, r5]
 801af06:	9d01      	ldr	r5, [sp, #4]
 801af08:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801af0c:	0e2e      	lsrs	r6, r5, #24
 801af0e:	2eff      	cmp	r6, #255	; 0xff
 801af10:	d112      	bne.n	801af38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801af12:	482c      	ldr	r0, [pc, #176]	; (801afc4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801af14:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801af18:	0968      	lsrs	r0, r5, #5
 801af1a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801af1e:	4330      	orrs	r0, r6
 801af20:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801af24:	4328      	orrs	r0, r5
 801af26:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801af2a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801af2c:	4401      	add	r1, r0
 801af2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801af30:	f108 0801 	add.w	r8, r8, #1
 801af34:	4402      	add	r2, r0
 801af36:	e7d9      	b.n	801aeec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801af38:	b2f0      	uxtb	r0, r6
 801af3a:	2e00      	cmp	r6, #0
 801af3c:	d0f5      	beq.n	801af2a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801af3e:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801af42:	fa1f f980 	uxth.w	r9, r0
 801af46:	ea4f 272c 	mov.w	r7, ip, asr #8
 801af4a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801af4e:	43c0      	mvns	r0, r0
 801af50:	b2c0      	uxtb	r0, r0
 801af52:	fb16 f609 	smulbb	r6, r6, r9
 801af56:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801af5a:	fb07 6700 	mla	r7, r7, r0, r6
 801af5e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801af62:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801af66:	b2ed      	uxtb	r5, r5
 801af68:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801af6c:	fa5f fc8c 	uxtb.w	ip, ip
 801af70:	fb15 f509 	smulbb	r5, r5, r9
 801af74:	fb0c 5500 	mla	r5, ip, r0, r5
 801af78:	b2bf      	uxth	r7, r7
 801af7a:	fb1a fa09 	smulbb	sl, sl, r9
 801af7e:	b2ad      	uxth	r5, r5
 801af80:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801af84:	fb06 a600 	mla	r6, r6, r0, sl
 801af88:	1c78      	adds	r0, r7, #1
 801af8a:	f105 0a01 	add.w	sl, r5, #1
 801af8e:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801af92:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801af96:	b2b6      	uxth	r6, r6
 801af98:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801af9c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801afa0:	ea4a 0707 	orr.w	r7, sl, r7
 801afa4:	f106 0a01 	add.w	sl, r6, #1
 801afa8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801afac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801afb0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801afb4:	ea47 070a 	orr.w	r7, r7, sl
 801afb8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801afbc:	e7b5      	b.n	801af2a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801afbe:	b005      	add	sp, #20
 801afc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afc4:	fffff800 	.word	0xfffff800

0801afc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801afc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afcc:	b087      	sub	sp, #28
 801afce:	468b      	mov	fp, r1
 801afd0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801afd2:	9204      	str	r2, [sp, #16]
 801afd4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801afd8:	9205      	str	r2, [sp, #20]
 801afda:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801afde:	6861      	ldr	r1, [r4, #4]
 801afe0:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801afe4:	fb01 2000 	mla	r0, r1, r0, r2
 801afe8:	6822      	ldr	r2, [r4, #0]
 801afea:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801afee:	f8de 2000 	ldr.w	r2, [lr]
 801aff2:	9201      	str	r2, [sp, #4]
 801aff4:	f8de 2004 	ldr.w	r2, [lr, #4]
 801aff8:	9202      	str	r2, [sp, #8]
 801affa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801affe:	f1bb 0f00 	cmp.w	fp, #0
 801b002:	dc03      	bgt.n	801b00c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801b004:	9a04      	ldr	r2, [sp, #16]
 801b006:	2a00      	cmp	r2, #0
 801b008:	f340 8142 	ble.w	801b290 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801b00c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b00e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b012:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801b016:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b01a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b01c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b020:	2b00      	cmp	r3, #0
 801b022:	dd0e      	ble.n	801b042 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b024:	140c      	asrs	r4, r1, #16
 801b026:	d405      	bmi.n	801b034 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b028:	42bc      	cmp	r4, r7
 801b02a:	da03      	bge.n	801b034 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b02c:	1414      	asrs	r4, r2, #16
 801b02e:	d401      	bmi.n	801b034 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b030:	42b4      	cmp	r4, r6
 801b032:	db07      	blt.n	801b044 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b034:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b036:	4421      	add	r1, r4
 801b038:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b03a:	3b01      	subs	r3, #1
 801b03c:	4422      	add	r2, r4
 801b03e:	3002      	adds	r0, #2
 801b040:	e7ee      	b.n	801b020 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801b042:	d019      	beq.n	801b078 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801b044:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b046:	1e5c      	subs	r4, r3, #1
 801b048:	fb05 1504 	mla	r5, r5, r4, r1
 801b04c:	142d      	asrs	r5, r5, #16
 801b04e:	d409      	bmi.n	801b064 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b050:	42bd      	cmp	r5, r7
 801b052:	da07      	bge.n	801b064 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b054:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b056:	fb05 2404 	mla	r4, r5, r4, r2
 801b05a:	1424      	asrs	r4, r4, #16
 801b05c:	d402      	bmi.n	801b064 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b05e:	42b4      	cmp	r4, r6
 801b060:	f2c0 80b1 	blt.w	801b1c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801b064:	f04f 0800 	mov.w	r8, #0
 801b068:	eb03 0408 	add.w	r4, r3, r8
 801b06c:	2c00      	cmp	r4, #0
 801b06e:	dc3e      	bgt.n	801b0ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b070:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b074:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b078:	f1bb 0f00 	cmp.w	fp, #0
 801b07c:	f340 8108 	ble.w	801b290 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801b080:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b084:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b088:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b08c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b08e:	f1bb 0b01 	subs.w	fp, fp, #1
 801b092:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b096:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b09a:	eeb0 6a62 	vmov.f32	s12, s5
 801b09e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b0a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0aa:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b0ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0b2:	eeb0 6a43 	vmov.f32	s12, s6
 801b0b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0ba:	ee12 2a90 	vmov	r2, s5
 801b0be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0c6:	ee13 2a10 	vmov	r2, s6
 801b0ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b0ce:	9313      	str	r3, [sp, #76]	; 0x4c
 801b0d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b0d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0d6:	9a04      	ldr	r2, [sp, #16]
 801b0d8:	9314      	str	r3, [sp, #80]	; 0x50
 801b0da:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b0de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b0e0:	eeb0 3a67 	vmov.f32	s6, s15
 801b0e4:	bf08      	it	eq
 801b0e6:	4613      	moveq	r3, r2
 801b0e8:	eef0 2a47 	vmov.f32	s5, s14
 801b0ec:	e787      	b.n	801affe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801b0ee:	140e      	asrs	r6, r1, #16
 801b0f0:	d462      	bmi.n	801b1b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b0f2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b0f6:	42b5      	cmp	r5, r6
 801b0f8:	dd5e      	ble.n	801b1b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b0fa:	1417      	asrs	r7, r2, #16
 801b0fc:	d45c      	bmi.n	801b1b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b0fe:	f8de 400c 	ldr.w	r4, [lr, #12]
 801b102:	42bc      	cmp	r4, r7
 801b104:	dd58      	ble.n	801b1b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b106:	b22d      	sxth	r5, r5
 801b108:	fb07 6505 	mla	r5, r7, r5, r6
 801b10c:	9c02      	ldr	r4, [sp, #8]
 801b10e:	5d66      	ldrb	r6, [r4, r5]
 801b110:	2e00      	cmp	r6, #0
 801b112:	d051      	beq.n	801b1b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b114:	9c01      	ldr	r4, [sp, #4]
 801b116:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801b11a:	f06f 0401 	mvn.w	r4, #1
 801b11e:	fb04 f408 	mul.w	r4, r4, r8
 801b122:	9403      	str	r4, [sp, #12]
 801b124:	5b05      	ldrh	r5, [r0, r4]
 801b126:	9c05      	ldr	r4, [sp, #20]
 801b128:	4366      	muls	r6, r4
 801b12a:	1c74      	adds	r4, r6, #1
 801b12c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801b130:	1224      	asrs	r4, r4, #8
 801b132:	b2a7      	uxth	r7, r4
 801b134:	122e      	asrs	r6, r5, #8
 801b136:	43e4      	mvns	r4, r4
 801b138:	b2e4      	uxtb	r4, r4
 801b13a:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801b13e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b142:	fb16 f604 	smulbb	r6, r6, r4
 801b146:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b14a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b14e:	00ed      	lsls	r5, r5, #3
 801b150:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b154:	b2ed      	uxtb	r5, r5
 801b156:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801b15a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801b15e:	fb15 f504 	smulbb	r5, r5, r4
 801b162:	fa5f f989 	uxtb.w	r9, r9
 801b166:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b16a:	fb09 5507 	mla	r5, r9, r7, r5
 801b16e:	fb1a fa04 	smulbb	sl, sl, r4
 801b172:	fa1f fc8c 	uxth.w	ip, ip
 801b176:	b2ad      	uxth	r5, r5
 801b178:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b17c:	fb06 a607 	mla	r6, r6, r7, sl
 801b180:	f10c 0401 	add.w	r4, ip, #1
 801b184:	f105 0a01 	add.w	sl, r5, #1
 801b188:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b18c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b190:	b2b6      	uxth	r6, r6
 801b192:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b196:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b19a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b19e:	f106 0a01 	add.w	sl, r6, #1
 801b1a2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b1a6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b1aa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b1ae:	9c03      	ldr	r4, [sp, #12]
 801b1b0:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b1b4:	f820 c004 	strh.w	ip, [r0, r4]
 801b1b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b1ba:	4421      	add	r1, r4
 801b1bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b1be:	f108 38ff 	add.w	r8, r8, #4294967295
 801b1c2:	4422      	add	r2, r4
 801b1c4:	e750      	b.n	801b068 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b1c6:	f04f 0900 	mov.w	r9, #0
 801b1ca:	eba3 0409 	sub.w	r4, r3, r9
 801b1ce:	2c00      	cmp	r4, #0
 801b1d0:	f77f af4e 	ble.w	801b070 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801b1d4:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801b1d8:	140d      	asrs	r5, r1, #16
 801b1da:	1414      	asrs	r4, r2, #16
 801b1dc:	fb06 5404 	mla	r4, r6, r4, r5
 801b1e0:	9d02      	ldr	r5, [sp, #8]
 801b1e2:	5d2e      	ldrb	r6, [r5, r4]
 801b1e4:	2e00      	cmp	r6, #0
 801b1e6:	d04c      	beq.n	801b282 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801b1e8:	9d01      	ldr	r5, [sp, #4]
 801b1ea:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801b1ee:	9c05      	ldr	r4, [sp, #20]
 801b1f0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801b1f4:	4366      	muls	r6, r4
 801b1f6:	1c74      	adds	r4, r6, #1
 801b1f8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801b1fc:	1224      	asrs	r4, r4, #8
 801b1fe:	b2a7      	uxth	r7, r4
 801b200:	122e      	asrs	r6, r5, #8
 801b202:	43e4      	mvns	r4, r4
 801b204:	b2e4      	uxtb	r4, r4
 801b206:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801b20a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b20e:	fb16 f604 	smulbb	r6, r6, r4
 801b212:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b216:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b21a:	00ed      	lsls	r5, r5, #3
 801b21c:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b220:	b2ed      	uxtb	r5, r5
 801b222:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801b226:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b22a:	fb15 f504 	smulbb	r5, r5, r4
 801b22e:	fa5f f888 	uxtb.w	r8, r8
 801b232:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b236:	fb08 5507 	mla	r5, r8, r7, r5
 801b23a:	fb1a fa04 	smulbb	sl, sl, r4
 801b23e:	fa1f fc8c 	uxth.w	ip, ip
 801b242:	b2ad      	uxth	r5, r5
 801b244:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b248:	fb06 a607 	mla	r6, r6, r7, sl
 801b24c:	f10c 0401 	add.w	r4, ip, #1
 801b250:	f105 0a01 	add.w	sl, r5, #1
 801b254:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b258:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b25c:	b2b6      	uxth	r6, r6
 801b25e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b262:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b266:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b26a:	f106 0a01 	add.w	sl, r6, #1
 801b26e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b272:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b276:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b27a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b27e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801b282:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b284:	4421      	add	r1, r4
 801b286:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b288:	f109 0901 	add.w	r9, r9, #1
 801b28c:	4422      	add	r2, r4
 801b28e:	e79c      	b.n	801b1ca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801b290:	b007      	add	sp, #28
 801b292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b296 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b296:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b29a:	b085      	sub	sp, #20
 801b29c:	468b      	mov	fp, r1
 801b29e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b2a0:	9203      	str	r2, [sp, #12]
 801b2a2:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801b2a6:	6861      	ldr	r1, [r4, #4]
 801b2a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b2ac:	fb01 2000 	mla	r0, r1, r0, r2
 801b2b0:	6822      	ldr	r2, [r4, #0]
 801b2b2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801b2b6:	f8d8 2000 	ldr.w	r2, [r8]
 801b2ba:	9200      	str	r2, [sp, #0]
 801b2bc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801b2c0:	9201      	str	r2, [sp, #4]
 801b2c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b2c6:	f1bb 0f00 	cmp.w	fp, #0
 801b2ca:	dc03      	bgt.n	801b2d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b2cc:	9a03      	ldr	r2, [sp, #12]
 801b2ce:	2a00      	cmp	r2, #0
 801b2d0:	f340 8146 	ble.w	801b560 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801b2d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b2d6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801b2da:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801b2de:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b2e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b2e4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	dd0e      	ble.n	801b30a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b2ec:	140c      	asrs	r4, r1, #16
 801b2ee:	d405      	bmi.n	801b2fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b2f0:	42bc      	cmp	r4, r7
 801b2f2:	da03      	bge.n	801b2fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b2f4:	1414      	asrs	r4, r2, #16
 801b2f6:	d401      	bmi.n	801b2fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b2f8:	42b4      	cmp	r4, r6
 801b2fa:	db07      	blt.n	801b30c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2fc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b2fe:	4421      	add	r1, r4
 801b300:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b302:	3b01      	subs	r3, #1
 801b304:	4422      	add	r2, r4
 801b306:	3002      	adds	r0, #2
 801b308:	e7ee      	b.n	801b2e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b30a:	d017      	beq.n	801b33c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b30c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b30e:	1e5c      	subs	r4, r3, #1
 801b310:	fb05 1504 	mla	r5, r5, r4, r1
 801b314:	142d      	asrs	r5, r5, #16
 801b316:	d409      	bmi.n	801b32c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b318:	42bd      	cmp	r5, r7
 801b31a:	da07      	bge.n	801b32c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b31c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b31e:	fb05 2404 	mla	r4, r5, r4, r2
 801b322:	1424      	asrs	r4, r4, #16
 801b324:	d402      	bmi.n	801b32c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b326:	42b4      	cmp	r4, r6
 801b328:	f2c0 80b3 	blt.w	801b492 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801b32c:	2600      	movs	r6, #0
 801b32e:	199c      	adds	r4, r3, r6
 801b330:	2c00      	cmp	r4, #0
 801b332:	dc3e      	bgt.n	801b3b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b334:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b338:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b33c:	f1bb 0f00 	cmp.w	fp, #0
 801b340:	f340 810e 	ble.w	801b560 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801b344:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b348:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b34c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b352:	f1bb 0b01 	subs.w	fp, fp, #1
 801b356:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b35a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b35e:	eeb0 6a62 	vmov.f32	s12, s5
 801b362:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b366:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b36a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b36e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b372:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b376:	eeb0 6a43 	vmov.f32	s12, s6
 801b37a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b37e:	ee12 2a90 	vmov	r2, s5
 801b382:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b386:	fb92 f3f3 	sdiv	r3, r2, r3
 801b38a:	ee13 2a10 	vmov	r2, s6
 801b38e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b392:	9311      	str	r3, [sp, #68]	; 0x44
 801b394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b396:	fb92 f3f3 	sdiv	r3, r2, r3
 801b39a:	9a03      	ldr	r2, [sp, #12]
 801b39c:	9312      	str	r3, [sp, #72]	; 0x48
 801b39e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b3a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b3a4:	eeb0 3a67 	vmov.f32	s6, s15
 801b3a8:	bf08      	it	eq
 801b3aa:	4613      	moveq	r3, r2
 801b3ac:	eef0 2a47 	vmov.f32	s5, s14
 801b3b0:	e789      	b.n	801b2c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b3b2:	140f      	asrs	r7, r1, #16
 801b3b4:	d418      	bmi.n	801b3e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b3b6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b3ba:	42bd      	cmp	r5, r7
 801b3bc:	dd14      	ble.n	801b3e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b3be:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b3c2:	d411      	bmi.n	801b3e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b3c4:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801b3c8:	4564      	cmp	r4, ip
 801b3ca:	dd0d      	ble.n	801b3e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b3cc:	b22d      	sxth	r5, r5
 801b3ce:	fb0c 7505 	mla	r5, ip, r5, r7
 801b3d2:	9c01      	ldr	r4, [sp, #4]
 801b3d4:	5d64      	ldrb	r4, [r4, r5]
 801b3d6:	2cff      	cmp	r4, #255	; 0xff
 801b3d8:	d10c      	bne.n	801b3f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b3da:	9c00      	ldr	r4, [sp, #0]
 801b3dc:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801b3e0:	f06f 0401 	mvn.w	r4, #1
 801b3e4:	4374      	muls	r4, r6
 801b3e6:	5305      	strh	r5, [r0, r4]
 801b3e8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b3ea:	4421      	add	r1, r4
 801b3ec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b3ee:	3e01      	subs	r6, #1
 801b3f0:	4422      	add	r2, r4
 801b3f2:	e79c      	b.n	801b32e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b3f4:	2c00      	cmp	r4, #0
 801b3f6:	d0f7      	beq.n	801b3e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b3f8:	9f00      	ldr	r7, [sp, #0]
 801b3fa:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801b3fe:	f06f 0501 	mvn.w	r5, #1
 801b402:	4375      	muls	r5, r6
 801b404:	9502      	str	r5, [sp, #8]
 801b406:	5b45      	ldrh	r5, [r0, r5]
 801b408:	fa1f fc84 	uxth.w	ip, r4
 801b40c:	122f      	asrs	r7, r5, #8
 801b40e:	43e4      	mvns	r4, r4
 801b410:	b2e4      	uxtb	r4, r4
 801b412:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801b416:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b41a:	fb17 f704 	smulbb	r7, r7, r4
 801b41e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b422:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b426:	00ed      	lsls	r5, r5, #3
 801b428:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801b42c:	b2ed      	uxtb	r5, r5
 801b42e:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801b432:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801b436:	fb15 f504 	smulbb	r5, r5, r4
 801b43a:	fa5f f989 	uxtb.w	r9, r9
 801b43e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b442:	fb09 550c 	mla	r5, r9, ip, r5
 801b446:	fb1a fa04 	smulbb	sl, sl, r4
 801b44a:	fa1f fe8e 	uxth.w	lr, lr
 801b44e:	b2ad      	uxth	r5, r5
 801b450:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b454:	fb07 a70c 	mla	r7, r7, ip, sl
 801b458:	f10e 0401 	add.w	r4, lr, #1
 801b45c:	f105 0a01 	add.w	sl, r5, #1
 801b460:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801b464:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b468:	b2bf      	uxth	r7, r7
 801b46a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b46e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801b472:	ea4a 0e0e 	orr.w	lr, sl, lr
 801b476:	f107 0a01 	add.w	sl, r7, #1
 801b47a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b47e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b482:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b486:	9c02      	ldr	r4, [sp, #8]
 801b488:	ea4e 0e0a 	orr.w	lr, lr, sl
 801b48c:	f820 e004 	strh.w	lr, [r0, r4]
 801b490:	e7aa      	b.n	801b3e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b492:	f04f 0900 	mov.w	r9, #0
 801b496:	eba3 0409 	sub.w	r4, r3, r9
 801b49a:	2c00      	cmp	r4, #0
 801b49c:	f77f af4a 	ble.w	801b334 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b4a0:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801b4a4:	1414      	asrs	r4, r2, #16
 801b4a6:	140d      	asrs	r5, r1, #16
 801b4a8:	fb06 5504 	mla	r5, r6, r4, r5
 801b4ac:	9c01      	ldr	r4, [sp, #4]
 801b4ae:	5d64      	ldrb	r4, [r4, r5]
 801b4b0:	2cff      	cmp	r4, #255	; 0xff
 801b4b2:	d10b      	bne.n	801b4cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801b4b4:	9c00      	ldr	r4, [sp, #0]
 801b4b6:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801b4ba:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801b4be:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b4c0:	4421      	add	r1, r4
 801b4c2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b4c4:	f109 0901 	add.w	r9, r9, #1
 801b4c8:	4422      	add	r2, r4
 801b4ca:	e7e4      	b.n	801b496 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801b4cc:	2c00      	cmp	r4, #0
 801b4ce:	d0f6      	beq.n	801b4be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801b4d0:	9e00      	ldr	r6, [sp, #0]
 801b4d2:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801b4d6:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801b4da:	b2a7      	uxth	r7, r4
 801b4dc:	122e      	asrs	r6, r5, #8
 801b4de:	43e4      	mvns	r4, r4
 801b4e0:	b2e4      	uxtb	r4, r4
 801b4e2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b4e6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b4ea:	fb16 f604 	smulbb	r6, r6, r4
 801b4ee:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b4f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b4f6:	00ed      	lsls	r5, r5, #3
 801b4f8:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b4fc:	b2ed      	uxtb	r5, r5
 801b4fe:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b502:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b506:	fb15 f504 	smulbb	r5, r5, r4
 801b50a:	fa5f fe8e 	uxtb.w	lr, lr
 801b50e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b512:	fb0e 5507 	mla	r5, lr, r7, r5
 801b516:	fb1a fa04 	smulbb	sl, sl, r4
 801b51a:	fa1f fc8c 	uxth.w	ip, ip
 801b51e:	b2ad      	uxth	r5, r5
 801b520:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b524:	fb06 a607 	mla	r6, r6, r7, sl
 801b528:	f10c 0401 	add.w	r4, ip, #1
 801b52c:	f105 0a01 	add.w	sl, r5, #1
 801b530:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b534:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b538:	b2b6      	uxth	r6, r6
 801b53a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b53e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b542:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b546:	f106 0a01 	add.w	sl, r6, #1
 801b54a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b54e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b552:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b556:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b55a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801b55e:	e7ae      	b.n	801b4be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801b560:	b005      	add	sp, #20
 801b562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b566 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b566:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b56a:	b085      	sub	sp, #20
 801b56c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b56e:	9203      	str	r2, [sp, #12]
 801b570:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801b574:	9201      	str	r2, [sp, #4]
 801b576:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b57a:	9100      	str	r1, [sp, #0]
 801b57c:	6841      	ldr	r1, [r0, #4]
 801b57e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801b582:	fb01 2404 	mla	r4, r1, r4, r2
 801b586:	6802      	ldr	r2, [r0, #0]
 801b588:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b58c:	f8de 2000 	ldr.w	r2, [lr]
 801b590:	9202      	str	r2, [sp, #8]
 801b592:	9a01      	ldr	r2, [sp, #4]
 801b594:	43d6      	mvns	r6, r2
 801b596:	b2f6      	uxtb	r6, r6
 801b598:	9a00      	ldr	r2, [sp, #0]
 801b59a:	2a00      	cmp	r2, #0
 801b59c:	dc03      	bgt.n	801b5a6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b59e:	9a03      	ldr	r2, [sp, #12]
 801b5a0:	2a00      	cmp	r2, #0
 801b5a2:	f340 8124 	ble.w	801b7ee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b5a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b5a8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801b5ac:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801b5b0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b5b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b5b6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	dd0e      	ble.n	801b5dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b5be:	1408      	asrs	r0, r1, #16
 801b5c0:	d405      	bmi.n	801b5ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b5c2:	4560      	cmp	r0, ip
 801b5c4:	da03      	bge.n	801b5ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b5c6:	1410      	asrs	r0, r2, #16
 801b5c8:	d401      	bmi.n	801b5ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b5ca:	42b8      	cmp	r0, r7
 801b5cc:	db07      	blt.n	801b5de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b5ce:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b5d0:	4401      	add	r1, r0
 801b5d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b5d4:	3b01      	subs	r3, #1
 801b5d6:	4402      	add	r2, r0
 801b5d8:	3402      	adds	r4, #2
 801b5da:	e7ee      	b.n	801b5ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801b5dc:	d06e      	beq.n	801b6bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b5de:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b5e0:	1e58      	subs	r0, r3, #1
 801b5e2:	fb05 1500 	mla	r5, r5, r0, r1
 801b5e6:	142d      	asrs	r5, r5, #16
 801b5e8:	d45c      	bmi.n	801b6a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b5ea:	4565      	cmp	r5, ip
 801b5ec:	da5a      	bge.n	801b6a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b5ee:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b5f0:	fb05 2000 	mla	r0, r5, r0, r2
 801b5f4:	1400      	asrs	r0, r0, #16
 801b5f6:	d455      	bmi.n	801b6a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b5f8:	42b8      	cmp	r0, r7
 801b5fa:	da53      	bge.n	801b6a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b5fc:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801b600:	4699      	mov	r9, r3
 801b602:	46a2      	mov	sl, r4
 801b604:	f1b9 0f00 	cmp.w	r9, #0
 801b608:	dd54      	ble.n	801b6b4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b60a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b60e:	140d      	asrs	r5, r1, #16
 801b610:	1410      	asrs	r0, r2, #16
 801b612:	fb07 5000 	mla	r0, r7, r0, r5
 801b616:	9d02      	ldr	r5, [sp, #8]
 801b618:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b61c:	f8ba 5000 	ldrh.w	r5, [sl]
 801b620:	122f      	asrs	r7, r5, #8
 801b622:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b626:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b62a:	fb17 f706 	smulbb	r7, r7, r6
 801b62e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801b632:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b636:	00ed      	lsls	r5, r5, #3
 801b638:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b63c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801b640:	10c7      	asrs	r7, r0, #3
 801b642:	b2ed      	uxtb	r5, r5
 801b644:	00c0      	lsls	r0, r0, #3
 801b646:	fb18 f806 	smulbb	r8, r8, r6
 801b64a:	fb15 f506 	smulbb	r5, r5, r6
 801b64e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b652:	b2c0      	uxtb	r0, r0
 801b654:	fa1f fc8c 	uxth.w	ip, ip
 801b658:	fb07 870b 	mla	r7, r7, fp, r8
 801b65c:	fb00 500b 	mla	r0, r0, fp, r5
 801b660:	b280      	uxth	r0, r0
 801b662:	b2bf      	uxth	r7, r7
 801b664:	f10c 0501 	add.w	r5, ip, #1
 801b668:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b66c:	f107 0801 	add.w	r8, r7, #1
 801b670:	1c45      	adds	r5, r0, #1
 801b672:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b676:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b67a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b67c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b680:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b684:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b688:	ea45 0c0c 	orr.w	ip, r5, ip
 801b68c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b690:	4401      	add	r1, r0
 801b692:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b694:	ea4c 0c08 	orr.w	ip, ip, r8
 801b698:	f82a cb02 	strh.w	ip, [sl], #2
 801b69c:	4402      	add	r2, r0
 801b69e:	f109 39ff 	add.w	r9, r9, #4294967295
 801b6a2:	e7af      	b.n	801b604 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b6a4:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801b6a8:	f04f 0800 	mov.w	r8, #0
 801b6ac:	eb03 0008 	add.w	r0, r3, r8
 801b6b0:	2800      	cmp	r0, #0
 801b6b2:	dc41      	bgt.n	801b738 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801b6b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b6b8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b6bc:	9b00      	ldr	r3, [sp, #0]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	f340 8095 	ble.w	801b7ee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b6c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b6c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b6cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b6d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b6d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b6d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b6da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b6de:	eef0 6a62 	vmov.f32	s13, s5
 801b6e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b6e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b6ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b6ee:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b6f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b6f6:	eef0 6a43 	vmov.f32	s13, s6
 801b6fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b6fe:	ee12 2a90 	vmov	r2, s5
 801b702:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b706:	fb92 f3f3 	sdiv	r3, r2, r3
 801b70a:	ee13 2a10 	vmov	r2, s6
 801b70e:	9311      	str	r3, [sp, #68]	; 0x44
 801b710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b712:	fb92 f3f3 	sdiv	r3, r2, r3
 801b716:	9312      	str	r3, [sp, #72]	; 0x48
 801b718:	9b00      	ldr	r3, [sp, #0]
 801b71a:	9a03      	ldr	r2, [sp, #12]
 801b71c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b720:	3b01      	subs	r3, #1
 801b722:	9300      	str	r3, [sp, #0]
 801b724:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b72a:	eeb0 3a67 	vmov.f32	s6, s15
 801b72e:	bf08      	it	eq
 801b730:	4613      	moveq	r3, r2
 801b732:	eef0 2a47 	vmov.f32	s5, s14
 801b736:	e72f      	b.n	801b598 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801b738:	140f      	asrs	r7, r1, #16
 801b73a:	d451      	bmi.n	801b7e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b73c:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b740:	42bd      	cmp	r5, r7
 801b742:	dd4d      	ble.n	801b7e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b744:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b748:	d44a      	bmi.n	801b7e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b74a:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b74e:	4560      	cmp	r0, ip
 801b750:	dd46      	ble.n	801b7e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b752:	b22d      	sxth	r5, r5
 801b754:	fb0c 7505 	mla	r5, ip, r5, r7
 801b758:	9802      	ldr	r0, [sp, #8]
 801b75a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801b75e:	f06f 0501 	mvn.w	r5, #1
 801b762:	fb05 fb08 	mul.w	fp, r5, r8
 801b766:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b76a:	f834 500b 	ldrh.w	r5, [r4, fp]
 801b76e:	122f      	asrs	r7, r5, #8
 801b770:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b774:	fb17 f706 	smulbb	r7, r7, r6
 801b778:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b77c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b780:	00ed      	lsls	r5, r5, #3
 801b782:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b786:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b78a:	10c7      	asrs	r7, r0, #3
 801b78c:	b2ed      	uxtb	r5, r5
 801b78e:	00c0      	lsls	r0, r0, #3
 801b790:	fb19 f906 	smulbb	r9, r9, r6
 801b794:	fb15 f506 	smulbb	r5, r5, r6
 801b798:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b79c:	b2c0      	uxtb	r0, r0
 801b79e:	fa1f fc8c 	uxth.w	ip, ip
 801b7a2:	fb07 970a 	mla	r7, r7, sl, r9
 801b7a6:	fb00 500a 	mla	r0, r0, sl, r5
 801b7aa:	b2bf      	uxth	r7, r7
 801b7ac:	b280      	uxth	r0, r0
 801b7ae:	f10c 0501 	add.w	r5, ip, #1
 801b7b2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b7b6:	f107 0901 	add.w	r9, r7, #1
 801b7ba:	1c45      	adds	r5, r0, #1
 801b7bc:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b7c0:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801b7c4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b7c8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b7cc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b7d0:	ea45 0c0c 	orr.w	ip, r5, ip
 801b7d4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b7d8:	ea4c 0c09 	orr.w	ip, ip, r9
 801b7dc:	f824 c00b 	strh.w	ip, [r4, fp]
 801b7e0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b7e2:	4401      	add	r1, r0
 801b7e4:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b7e6:	f108 38ff 	add.w	r8, r8, #4294967295
 801b7ea:	4402      	add	r2, r0
 801b7ec:	e75e      	b.n	801b6ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b7ee:	b005      	add	sp, #20
 801b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b7f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7f8:	b085      	sub	sp, #20
 801b7fa:	4693      	mov	fp, r2
 801b7fc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b7fe:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801b800:	6870      	ldr	r0, [r6, #4]
 801b802:	9101      	str	r1, [sp, #4]
 801b804:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b808:	fb00 2404 	mla	r4, r0, r4, r2
 801b80c:	6832      	ldr	r2, [r6, #0]
 801b80e:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801b812:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b816:	682a      	ldr	r2, [r5, #0]
 801b818:	9202      	str	r2, [sp, #8]
 801b81a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b81e:	9a01      	ldr	r2, [sp, #4]
 801b820:	2a00      	cmp	r2, #0
 801b822:	dc03      	bgt.n	801b82c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b824:	f1bb 0f00 	cmp.w	fp, #0
 801b828:	f340 809a 	ble.w	801b960 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b82c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b82e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b832:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b836:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b83a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b83c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b840:	2b00      	cmp	r3, #0
 801b842:	dd0c      	ble.n	801b85e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b844:	1406      	asrs	r6, r0, #16
 801b846:	d405      	bmi.n	801b854 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b848:	454e      	cmp	r6, r9
 801b84a:	da03      	bge.n	801b854 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b84c:	1416      	asrs	r6, r2, #16
 801b84e:	d401      	bmi.n	801b854 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b850:	4546      	cmp	r6, r8
 801b852:	db05      	blt.n	801b860 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b854:	4470      	add	r0, lr
 801b856:	4462      	add	r2, ip
 801b858:	3b01      	subs	r3, #1
 801b85a:	3402      	adds	r4, #2
 801b85c:	e7f0      	b.n	801b840 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b85e:	d00f      	beq.n	801b880 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b860:	1e5e      	subs	r6, r3, #1
 801b862:	fb0e 0706 	mla	r7, lr, r6, r0
 801b866:	143f      	asrs	r7, r7, #16
 801b868:	d541      	bpl.n	801b8ee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801b86a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801b86e:	4698      	mov	r8, r3
 801b870:	9603      	str	r6, [sp, #12]
 801b872:	f1b8 0f00 	cmp.w	r8, #0
 801b876:	dc56      	bgt.n	801b926 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801b878:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b87c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b880:	9b01      	ldr	r3, [sp, #4]
 801b882:	2b00      	cmp	r3, #0
 801b884:	dd6c      	ble.n	801b960 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b886:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b88a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b88e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b894:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b898:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b89c:	eeb0 6a62 	vmov.f32	s12, s5
 801b8a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b8a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b8ac:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b8b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b8b4:	eeb0 6a43 	vmov.f32	s12, s6
 801b8b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b8bc:	ee12 2a90 	vmov	r2, s5
 801b8c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b8c4:	fb92 fef3 	sdiv	lr, r2, r3
 801b8c8:	ee13 2a10 	vmov	r2, s6
 801b8cc:	fb92 fcf3 	sdiv	ip, r2, r3
 801b8d0:	9b01      	ldr	r3, [sp, #4]
 801b8d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8d6:	3b01      	subs	r3, #1
 801b8d8:	9301      	str	r3, [sp, #4]
 801b8da:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b8de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b8e0:	eeb0 3a67 	vmov.f32	s6, s15
 801b8e4:	bf08      	it	eq
 801b8e6:	465b      	moveq	r3, fp
 801b8e8:	eef0 2a47 	vmov.f32	s5, s14
 801b8ec:	e797      	b.n	801b81e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b8ee:	454f      	cmp	r7, r9
 801b8f0:	dabb      	bge.n	801b86a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b8f2:	fb0c 2606 	mla	r6, ip, r6, r2
 801b8f6:	1436      	asrs	r6, r6, #16
 801b8f8:	d4b7      	bmi.n	801b86a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b8fa:	4546      	cmp	r6, r8
 801b8fc:	dab5      	bge.n	801b86a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b8fe:	461e      	mov	r6, r3
 801b900:	46a0      	mov	r8, r4
 801b902:	2e00      	cmp	r6, #0
 801b904:	ddb8      	ble.n	801b878 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b906:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801b90a:	9902      	ldr	r1, [sp, #8]
 801b90c:	1417      	asrs	r7, r2, #16
 801b90e:	ea4f 4920 	mov.w	r9, r0, asr #16
 801b912:	fb0a 9707 	mla	r7, sl, r7, r9
 801b916:	4470      	add	r0, lr
 801b918:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801b91c:	f828 7b02 	strh.w	r7, [r8], #2
 801b920:	4462      	add	r2, ip
 801b922:	3e01      	subs	r6, #1
 801b924:	e7ed      	b.n	801b902 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801b926:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b92a:	d414      	bmi.n	801b956 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b92c:	68ae      	ldr	r6, [r5, #8]
 801b92e:	454e      	cmp	r6, r9
 801b930:	dd11      	ble.n	801b956 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b932:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b936:	d40e      	bmi.n	801b956 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b938:	68ef      	ldr	r7, [r5, #12]
 801b93a:	4557      	cmp	r7, sl
 801b93c:	dd0b      	ble.n	801b956 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b93e:	b236      	sxth	r6, r6
 801b940:	fb0a 9606 	mla	r6, sl, r6, r9
 801b944:	9f02      	ldr	r7, [sp, #8]
 801b946:	f06f 0101 	mvn.w	r1, #1
 801b94a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801b94e:	fb01 f608 	mul.w	r6, r1, r8
 801b952:	9903      	ldr	r1, [sp, #12]
 801b954:	538f      	strh	r7, [r1, r6]
 801b956:	4470      	add	r0, lr
 801b958:	4462      	add	r2, ip
 801b95a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b95e:	e788      	b.n	801b872 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b960:	b005      	add	sp, #20
 801b962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b966 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b966:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b96a:	b087      	sub	sp, #28
 801b96c:	468b      	mov	fp, r1
 801b96e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b970:	9203      	str	r2, [sp, #12]
 801b972:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b976:	9204      	str	r2, [sp, #16]
 801b978:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b97c:	6841      	ldr	r1, [r0, #4]
 801b97e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801b982:	fb01 2505 	mla	r5, r1, r5, r2
 801b986:	6802      	ldr	r2, [r0, #0]
 801b988:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801b98c:	f8d9 2000 	ldr.w	r2, [r9]
 801b990:	9201      	str	r2, [sp, #4]
 801b992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b996:	f1bb 0f00 	cmp.w	fp, #0
 801b99a:	dc03      	bgt.n	801b9a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b99c:	9a03      	ldr	r2, [sp, #12]
 801b99e:	2a00      	cmp	r2, #0
 801b9a0:	f340 8159 	ble.w	801bc56 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801b9a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b9a6:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b9aa:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b9ae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b9b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b9b4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	dd0e      	ble.n	801b9da <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b9bc:	1402      	asrs	r2, r0, #16
 801b9be:	d405      	bmi.n	801b9cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b9c0:	42ba      	cmp	r2, r7
 801b9c2:	da03      	bge.n	801b9cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b9c4:	140a      	asrs	r2, r1, #16
 801b9c6:	d401      	bmi.n	801b9cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b9c8:	42b2      	cmp	r2, r6
 801b9ca:	db07      	blt.n	801b9dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b9cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b9ce:	4410      	add	r0, r2
 801b9d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b9d2:	3b01      	subs	r3, #1
 801b9d4:	4411      	add	r1, r2
 801b9d6:	3502      	adds	r5, #2
 801b9d8:	e7ee      	b.n	801b9b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b9da:	d017      	beq.n	801ba0c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b9dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b9de:	1e5a      	subs	r2, r3, #1
 801b9e0:	fb04 0402 	mla	r4, r4, r2, r0
 801b9e4:	1424      	asrs	r4, r4, #16
 801b9e6:	d409      	bmi.n	801b9fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b9e8:	42bc      	cmp	r4, r7
 801b9ea:	da07      	bge.n	801b9fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b9ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b9ee:	fb04 1202 	mla	r2, r4, r2, r1
 801b9f2:	1412      	asrs	r2, r2, #16
 801b9f4:	d402      	bmi.n	801b9fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b9f6:	42b2      	cmp	r2, r6
 801b9f8:	f2c0 80bf 	blt.w	801bb7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b9fc:	2700      	movs	r7, #0
 801b9fe:	19da      	adds	r2, r3, r7
 801ba00:	2a00      	cmp	r2, #0
 801ba02:	dc3e      	bgt.n	801ba82 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ba04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba08:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801ba0c:	f1bb 0f00 	cmp.w	fp, #0
 801ba10:	f340 8121 	ble.w	801bc56 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801ba14:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba1c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba22:	f1bb 0b01 	subs.w	fp, fp, #1
 801ba26:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba2a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba2e:	eeb0 6a62 	vmov.f32	s12, s5
 801ba32:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba36:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba3e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ba42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba46:	eeb0 6a43 	vmov.f32	s12, s6
 801ba4a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba4e:	ee12 2a90 	vmov	r2, s5
 801ba52:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba56:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba5a:	ee13 2a10 	vmov	r2, s6
 801ba5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba62:	9313      	str	r3, [sp, #76]	; 0x4c
 801ba64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba66:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba6a:	9a03      	ldr	r2, [sp, #12]
 801ba6c:	9314      	str	r3, [sp, #80]	; 0x50
 801ba6e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ba72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba74:	eeb0 3a67 	vmov.f32	s6, s15
 801ba78:	bf08      	it	eq
 801ba7a:	4613      	moveq	r3, r2
 801ba7c:	eef0 2a47 	vmov.f32	s5, s14
 801ba80:	e789      	b.n	801b996 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ba82:	1406      	asrs	r6, r0, #16
 801ba84:	d42d      	bmi.n	801bae2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ba86:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801ba8a:	42b4      	cmp	r4, r6
 801ba8c:	dd29      	ble.n	801bae2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ba8e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801ba92:	d426      	bmi.n	801bae2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ba94:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ba98:	4562      	cmp	r2, ip
 801ba9a:	dd22      	ble.n	801bae2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ba9c:	b224      	sxth	r4, r4
 801ba9e:	9a01      	ldr	r2, [sp, #4]
 801baa0:	fb0c 6404 	mla	r4, ip, r4, r6
 801baa4:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801baa8:	0e22      	lsrs	r2, r4, #24
 801baaa:	d01a      	beq.n	801bae2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801baac:	9e04      	ldr	r6, [sp, #16]
 801baae:	4372      	muls	r2, r6
 801bab0:	1c56      	adds	r6, r2, #1
 801bab2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801bab6:	1212      	asrs	r2, r2, #8
 801bab8:	0a26      	lsrs	r6, r4, #8
 801baba:	2aff      	cmp	r2, #255	; 0xff
 801babc:	9605      	str	r6, [sp, #20]
 801babe:	d116      	bne.n	801baee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801bac0:	f06f 0201 	mvn.w	r2, #1
 801bac4:	fb02 fc07 	mul.w	ip, r2, r7
 801bac8:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801bacc:	0962      	lsrs	r2, r4, #5
 801bace:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bad2:	f026 0607 	bic.w	r6, r6, #7
 801bad6:	4316      	orrs	r6, r2
 801bad8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801badc:	4326      	orrs	r6, r4
 801bade:	f825 600c 	strh.w	r6, [r5, ip]
 801bae2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bae4:	4410      	add	r0, r2
 801bae6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bae8:	3f01      	subs	r7, #1
 801baea:	4411      	add	r1, r2
 801baec:	e787      	b.n	801b9fe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801baee:	f06f 0601 	mvn.w	r6, #1
 801baf2:	437e      	muls	r6, r7
 801baf4:	fa1f fa82 	uxth.w	sl, r2
 801baf8:	f835 8006 	ldrh.w	r8, [r5, r6]
 801bafc:	9602      	str	r6, [sp, #8]
 801bafe:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801bb02:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801bb06:	43d2      	mvns	r2, r2
 801bb08:	b2d2      	uxtb	r2, r2
 801bb0a:	fb1c fc0a 	smulbb	ip, ip, sl
 801bb0e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801bb12:	fb0e ce02 	mla	lr, lr, r2, ip
 801bb16:	b2e4      	uxtb	r4, r4
 801bb18:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801bb1c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bb20:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801bb24:	fa5f f888 	uxtb.w	r8, r8
 801bb28:	fb14 f40a 	smulbb	r4, r4, sl
 801bb2c:	fb08 4402 	mla	r4, r8, r2, r4
 801bb30:	fa1f fe8e 	uxth.w	lr, lr
 801bb34:	fb16 f60a 	smulbb	r6, r6, sl
 801bb38:	b2a4      	uxth	r4, r4
 801bb3a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801bb3e:	fb0c 6c02 	mla	ip, ip, r2, r6
 801bb42:	f10e 0201 	add.w	r2, lr, #1
 801bb46:	1c66      	adds	r6, r4, #1
 801bb48:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801bb4c:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801bb50:	fa1f fc8c 	uxth.w	ip, ip
 801bb54:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bb58:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801bb5c:	ea46 0e0e 	orr.w	lr, r6, lr
 801bb60:	f10c 0601 	add.w	r6, ip, #1
 801bb64:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801bb68:	0976      	lsrs	r6, r6, #5
 801bb6a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bb6e:	9a02      	ldr	r2, [sp, #8]
 801bb70:	ea4e 0e06 	orr.w	lr, lr, r6
 801bb74:	f825 e002 	strh.w	lr, [r5, r2]
 801bb78:	e7b3      	b.n	801bae2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801bb7a:	f04f 0800 	mov.w	r8, #0
 801bb7e:	eba3 0208 	sub.w	r2, r3, r8
 801bb82:	2a00      	cmp	r2, #0
 801bb84:	f77f af3e 	ble.w	801ba04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801bb88:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801bb8c:	1404      	asrs	r4, r0, #16
 801bb8e:	140a      	asrs	r2, r1, #16
 801bb90:	fb06 4202 	mla	r2, r6, r2, r4
 801bb94:	9c01      	ldr	r4, [sp, #4]
 801bb96:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801bb9a:	0e22      	lsrs	r2, r4, #24
 801bb9c:	d016      	beq.n	801bbcc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801bb9e:	9e04      	ldr	r6, [sp, #16]
 801bba0:	4372      	muls	r2, r6
 801bba2:	1c56      	adds	r6, r2, #1
 801bba4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801bba8:	1212      	asrs	r2, r2, #8
 801bbaa:	2aff      	cmp	r2, #255	; 0xff
 801bbac:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801bbb0:	d113      	bne.n	801bbda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801bbb2:	0962      	lsrs	r2, r4, #5
 801bbb4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801bbb8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bbbc:	f026 0607 	bic.w	r6, r6, #7
 801bbc0:	4316      	orrs	r6, r2
 801bbc2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801bbc6:	4326      	orrs	r6, r4
 801bbc8:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801bbcc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bbce:	4410      	add	r0, r2
 801bbd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bbd2:	f108 0801 	add.w	r8, r8, #1
 801bbd6:	4411      	add	r1, r2
 801bbd8:	e7d1      	b.n	801bb7e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801bbda:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801bbde:	fa1f fa82 	uxth.w	sl, r2
 801bbe2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bbe6:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801bbea:	43d2      	mvns	r2, r2
 801bbec:	b2d2      	uxtb	r2, r2
 801bbee:	fb17 f70a 	smulbb	r7, r7, sl
 801bbf2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bbf6:	fb0c 7c02 	mla	ip, ip, r2, r7
 801bbfa:	b2e4      	uxtb	r4, r4
 801bbfc:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801bc00:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bc04:	fa5f fe8e 	uxtb.w	lr, lr
 801bc08:	fb14 f40a 	smulbb	r4, r4, sl
 801bc0c:	fb0e 4402 	mla	r4, lr, r2, r4
 801bc10:	b2f6      	uxtb	r6, r6
 801bc12:	fa1f fc8c 	uxth.w	ip, ip
 801bc16:	fb16 f60a 	smulbb	r6, r6, sl
 801bc1a:	b2a4      	uxth	r4, r4
 801bc1c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bc20:	fb07 6702 	mla	r7, r7, r2, r6
 801bc24:	f10c 0201 	add.w	r2, ip, #1
 801bc28:	1c66      	adds	r6, r4, #1
 801bc2a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801bc2e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801bc32:	b2bf      	uxth	r7, r7
 801bc34:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bc38:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bc3c:	ea46 0c0c 	orr.w	ip, r6, ip
 801bc40:	1c7e      	adds	r6, r7, #1
 801bc42:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801bc46:	0976      	lsrs	r6, r6, #5
 801bc48:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bc4c:	ea4c 0c06 	orr.w	ip, ip, r6
 801bc50:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801bc54:	e7ba      	b.n	801bbcc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801bc56:	b007      	add	sp, #28
 801bc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc60:	b085      	sub	sp, #20
 801bc62:	468b      	mov	fp, r1
 801bc64:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bc66:	9203      	str	r2, [sp, #12]
 801bc68:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bc6c:	6841      	ldr	r1, [r0, #4]
 801bc6e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801bc72:	fb01 2404 	mla	r4, r1, r4, r2
 801bc76:	6802      	ldr	r2, [r0, #0]
 801bc78:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bc7c:	f8d8 2000 	ldr.w	r2, [r8]
 801bc80:	9201      	str	r2, [sp, #4]
 801bc82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc86:	f1bb 0f00 	cmp.w	fp, #0
 801bc8a:	dc03      	bgt.n	801bc94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801bc8c:	9a03      	ldr	r2, [sp, #12]
 801bc8e:	2a00      	cmp	r2, #0
 801bc90:	f340 814f 	ble.w	801bf32 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801bc94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bc96:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801bc9a:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801bc9e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bca2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bca4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	dd0e      	ble.n	801bcca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bcac:	1408      	asrs	r0, r1, #16
 801bcae:	d405      	bmi.n	801bcbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bcb0:	42b8      	cmp	r0, r7
 801bcb2:	da03      	bge.n	801bcbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bcb4:	1410      	asrs	r0, r2, #16
 801bcb6:	d401      	bmi.n	801bcbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bcb8:	42b0      	cmp	r0, r6
 801bcba:	db07      	blt.n	801bccc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bcbc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bcbe:	4401      	add	r1, r0
 801bcc0:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bcc2:	3b01      	subs	r3, #1
 801bcc4:	4402      	add	r2, r0
 801bcc6:	3402      	adds	r4, #2
 801bcc8:	e7ee      	b.n	801bca8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801bcca:	d017      	beq.n	801bcfc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bccc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bcce:	1e58      	subs	r0, r3, #1
 801bcd0:	fb05 1500 	mla	r5, r5, r0, r1
 801bcd4:	142d      	asrs	r5, r5, #16
 801bcd6:	d409      	bmi.n	801bcec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bcd8:	42bd      	cmp	r5, r7
 801bcda:	da07      	bge.n	801bcec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bcdc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bcde:	fb05 2000 	mla	r0, r5, r0, r2
 801bce2:	1400      	asrs	r0, r0, #16
 801bce4:	d402      	bmi.n	801bcec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bce6:	42b0      	cmp	r0, r6
 801bce8:	f2c0 80ba 	blt.w	801be60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bcec:	2600      	movs	r6, #0
 801bcee:	1998      	adds	r0, r3, r6
 801bcf0:	2800      	cmp	r0, #0
 801bcf2:	dc3e      	bgt.n	801bd72 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801bcf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bcf8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bcfc:	f1bb 0f00 	cmp.w	fp, #0
 801bd00:	f340 8117 	ble.w	801bf32 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801bd04:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bd08:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bd0c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bd10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd12:	f1bb 0b01 	subs.w	fp, fp, #1
 801bd16:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bd1a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bd1e:	eeb0 6a62 	vmov.f32	s12, s5
 801bd22:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bd26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd2a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bd2e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bd32:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd36:	eeb0 6a43 	vmov.f32	s12, s6
 801bd3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd3e:	ee12 2a90 	vmov	r2, s5
 801bd42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd46:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd4a:	ee13 2a10 	vmov	r2, s6
 801bd4e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd52:	9311      	str	r3, [sp, #68]	; 0x44
 801bd54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd56:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd5a:	9a03      	ldr	r2, [sp, #12]
 801bd5c:	9312      	str	r3, [sp, #72]	; 0x48
 801bd5e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bd62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd64:	eeb0 3a67 	vmov.f32	s6, s15
 801bd68:	bf08      	it	eq
 801bd6a:	4613      	moveq	r3, r2
 801bd6c:	eef0 2a47 	vmov.f32	s5, s14
 801bd70:	e789      	b.n	801bc86 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801bd72:	140f      	asrs	r7, r1, #16
 801bd74:	d424      	bmi.n	801bdc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bd76:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801bd7a:	42bd      	cmp	r5, r7
 801bd7c:	dd20      	ble.n	801bdc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bd7e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801bd82:	d41d      	bmi.n	801bdc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bd84:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801bd88:	4560      	cmp	r0, ip
 801bd8a:	dd19      	ble.n	801bdc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bd8c:	b22d      	sxth	r5, r5
 801bd8e:	fb0c 7505 	mla	r5, ip, r5, r7
 801bd92:	9801      	ldr	r0, [sp, #4]
 801bd94:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801bd98:	0e07      	lsrs	r7, r0, #24
 801bd9a:	2fff      	cmp	r7, #255	; 0xff
 801bd9c:	d116      	bne.n	801bdcc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bd9e:	f06f 0501 	mvn.w	r5, #1
 801bda2:	fb05 f706 	mul.w	r7, r5, r6
 801bda6:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801bdaa:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801bdae:	0945      	lsrs	r5, r0, #5
 801bdb0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bdb4:	ea4c 0505 	orr.w	r5, ip, r5
 801bdb8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801bdbc:	4305      	orrs	r5, r0
 801bdbe:	53e5      	strh	r5, [r4, r7]
 801bdc0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bdc2:	4401      	add	r1, r0
 801bdc4:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bdc6:	3e01      	subs	r6, #1
 801bdc8:	4402      	add	r2, r0
 801bdca:	e790      	b.n	801bcee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bdcc:	b2fd      	uxtb	r5, r7
 801bdce:	2f00      	cmp	r7, #0
 801bdd0:	d0f6      	beq.n	801bdc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bdd2:	f06f 0701 	mvn.w	r7, #1
 801bdd6:	4377      	muls	r7, r6
 801bdd8:	fa1f f985 	uxth.w	r9, r5
 801bddc:	f834 e007 	ldrh.w	lr, [r4, r7]
 801bde0:	9702      	str	r7, [sp, #8]
 801bde2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bde6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801bdea:	43ed      	mvns	r5, r5
 801bdec:	b2ed      	uxtb	r5, r5
 801bdee:	fb17 f709 	smulbb	r7, r7, r9
 801bdf2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bdf6:	fb0c 7c05 	mla	ip, ip, r5, r7
 801bdfa:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801bdfe:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801be02:	b2c0      	uxtb	r0, r0
 801be04:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801be08:	fa5f fe8e 	uxtb.w	lr, lr
 801be0c:	fb10 f009 	smulbb	r0, r0, r9
 801be10:	fb0e 0005 	mla	r0, lr, r5, r0
 801be14:	b280      	uxth	r0, r0
 801be16:	fa1f fc8c 	uxth.w	ip, ip
 801be1a:	fb1a fa09 	smulbb	sl, sl, r9
 801be1e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801be22:	fb07 a705 	mla	r7, r7, r5, sl
 801be26:	f100 0a01 	add.w	sl, r0, #1
 801be2a:	f10c 0501 	add.w	r5, ip, #1
 801be2e:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801be32:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801be36:	b2bf      	uxth	r7, r7
 801be38:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801be3c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801be40:	ea4a 0c0c 	orr.w	ip, sl, ip
 801be44:	f107 0a01 	add.w	sl, r7, #1
 801be48:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801be4c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801be50:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801be54:	9802      	ldr	r0, [sp, #8]
 801be56:	ea4c 0c0a 	orr.w	ip, ip, sl
 801be5a:	f824 c000 	strh.w	ip, [r4, r0]
 801be5e:	e7af      	b.n	801bdc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801be60:	f04f 0e00 	mov.w	lr, #0
 801be64:	eba3 000e 	sub.w	r0, r3, lr
 801be68:	2800      	cmp	r0, #0
 801be6a:	f77f af43 	ble.w	801bcf4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801be6e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801be72:	140d      	asrs	r5, r1, #16
 801be74:	1410      	asrs	r0, r2, #16
 801be76:	fb06 5000 	mla	r0, r6, r0, r5
 801be7a:	9d01      	ldr	r5, [sp, #4]
 801be7c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801be80:	0e2e      	lsrs	r6, r5, #24
 801be82:	2eff      	cmp	r6, #255	; 0xff
 801be84:	d112      	bne.n	801beac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801be86:	482c      	ldr	r0, [pc, #176]	; (801bf38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801be88:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801be8c:	0968      	lsrs	r0, r5, #5
 801be8e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801be92:	4330      	orrs	r0, r6
 801be94:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801be98:	4328      	orrs	r0, r5
 801be9a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801be9e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bea0:	4401      	add	r1, r0
 801bea2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bea4:	f10e 0e01 	add.w	lr, lr, #1
 801bea8:	4402      	add	r2, r0
 801beaa:	e7db      	b.n	801be64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801beac:	b2f0      	uxtb	r0, r6
 801beae:	2e00      	cmp	r6, #0
 801beb0:	d0f5      	beq.n	801be9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801beb2:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801beb6:	fa1f f980 	uxth.w	r9, r0
 801beba:	ea4f 272c 	mov.w	r7, ip, asr #8
 801bebe:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801bec2:	43c0      	mvns	r0, r0
 801bec4:	b2c0      	uxtb	r0, r0
 801bec6:	fb16 f609 	smulbb	r6, r6, r9
 801beca:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bece:	fb07 6700 	mla	r7, r7, r0, r6
 801bed2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801bed6:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801beda:	b2ed      	uxtb	r5, r5
 801bedc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bee0:	fa5f fc8c 	uxtb.w	ip, ip
 801bee4:	fb15 f509 	smulbb	r5, r5, r9
 801bee8:	fb0c 5500 	mla	r5, ip, r0, r5
 801beec:	b2bf      	uxth	r7, r7
 801beee:	fb1a fa09 	smulbb	sl, sl, r9
 801bef2:	b2ad      	uxth	r5, r5
 801bef4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bef8:	fb06 a600 	mla	r6, r6, r0, sl
 801befc:	1c78      	adds	r0, r7, #1
 801befe:	f105 0a01 	add.w	sl, r5, #1
 801bf02:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801bf06:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bf0a:	b2b6      	uxth	r6, r6
 801bf0c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bf10:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801bf14:	ea4a 0707 	orr.w	r7, sl, r7
 801bf18:	f106 0a01 	add.w	sl, r6, #1
 801bf1c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bf20:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bf24:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bf28:	ea47 070a 	orr.w	r7, r7, sl
 801bf2c:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801bf30:	e7b5      	b.n	801be9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801bf32:	b005      	add	sp, #20
 801bf34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf38:	fffff800 	.word	0xfffff800

0801bf3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf40:	b087      	sub	sp, #28
 801bf42:	468b      	mov	fp, r1
 801bf44:	9815      	ldr	r0, [sp, #84]	; 0x54
 801bf46:	9203      	str	r2, [sp, #12]
 801bf48:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bf4c:	9204      	str	r2, [sp, #16]
 801bf4e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801bf52:	6841      	ldr	r1, [r0, #4]
 801bf54:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801bf58:	fb01 2404 	mla	r4, r1, r4, r2
 801bf5c:	6802      	ldr	r2, [r0, #0]
 801bf5e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bf62:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801bf66:	3201      	adds	r2, #1
 801bf68:	f022 0201 	bic.w	r2, r2, #1
 801bf6c:	9200      	str	r2, [sp, #0]
 801bf6e:	f8d9 2000 	ldr.w	r2, [r9]
 801bf72:	9201      	str	r2, [sp, #4]
 801bf74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bf78:	f1bb 0f00 	cmp.w	fp, #0
 801bf7c:	dc03      	bgt.n	801bf86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801bf7e:	9a03      	ldr	r2, [sp, #12]
 801bf80:	2a00      	cmp	r2, #0
 801bf82:	f340 8169 	ble.w	801c258 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801bf86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bf88:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801bf8c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801bf90:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bf94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bf96:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	dd0e      	ble.n	801bfbc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801bf9e:	1402      	asrs	r2, r0, #16
 801bfa0:	d405      	bmi.n	801bfae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bfa2:	42ba      	cmp	r2, r7
 801bfa4:	da03      	bge.n	801bfae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bfa6:	140a      	asrs	r2, r1, #16
 801bfa8:	d401      	bmi.n	801bfae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bfaa:	42b2      	cmp	r2, r6
 801bfac:	db07      	blt.n	801bfbe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801bfae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bfb0:	4410      	add	r0, r2
 801bfb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bfb4:	3b01      	subs	r3, #1
 801bfb6:	4411      	add	r1, r2
 801bfb8:	3402      	adds	r4, #2
 801bfba:	e7ee      	b.n	801bf9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801bfbc:	d017      	beq.n	801bfee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bfbe:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bfc0:	1e5a      	subs	r2, r3, #1
 801bfc2:	fb05 0502 	mla	r5, r5, r2, r0
 801bfc6:	142d      	asrs	r5, r5, #16
 801bfc8:	d409      	bmi.n	801bfde <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bfca:	42bd      	cmp	r5, r7
 801bfcc:	da07      	bge.n	801bfde <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bfce:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801bfd0:	fb05 1202 	mla	r2, r5, r2, r1
 801bfd4:	1412      	asrs	r2, r2, #16
 801bfd6:	d402      	bmi.n	801bfde <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bfd8:	42b2      	cmp	r2, r6
 801bfda:	f2c0 80c7 	blt.w	801c16c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801bfde:	2700      	movs	r7, #0
 801bfe0:	19da      	adds	r2, r3, r7
 801bfe2:	2a00      	cmp	r2, #0
 801bfe4:	dc3e      	bgt.n	801c064 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801bfe6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bfea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bfee:	f1bb 0f00 	cmp.w	fp, #0
 801bff2:	f340 8131 	ble.w	801c258 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801bff6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bffa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bffe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c002:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c004:	f1bb 0b01 	subs.w	fp, fp, #1
 801c008:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c00c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c010:	eeb0 6a62 	vmov.f32	s12, s5
 801c014:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c018:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c01c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c020:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c024:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c028:	eeb0 6a43 	vmov.f32	s12, s6
 801c02c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c030:	ee12 2a90 	vmov	r2, s5
 801c034:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c038:	fb92 f3f3 	sdiv	r3, r2, r3
 801c03c:	ee13 2a10 	vmov	r2, s6
 801c040:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c044:	9313      	str	r3, [sp, #76]	; 0x4c
 801c046:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c048:	fb92 f3f3 	sdiv	r3, r2, r3
 801c04c:	9a03      	ldr	r2, [sp, #12]
 801c04e:	9314      	str	r3, [sp, #80]	; 0x50
 801c050:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c056:	eeb0 3a67 	vmov.f32	s6, s15
 801c05a:	bf08      	it	eq
 801c05c:	4613      	moveq	r3, r2
 801c05e:	eef0 2a47 	vmov.f32	s5, s14
 801c062:	e789      	b.n	801bf78 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c064:	1405      	asrs	r5, r0, #16
 801c066:	d435      	bmi.n	801c0d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c068:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801c06c:	42aa      	cmp	r2, r5
 801c06e:	dd31      	ble.n	801c0d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c070:	140e      	asrs	r6, r1, #16
 801c072:	d42f      	bmi.n	801c0d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c074:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c078:	42b2      	cmp	r2, r6
 801c07a:	dd2b      	ble.n	801c0d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c07c:	9a00      	ldr	r2, [sp, #0]
 801c07e:	fb06 5502 	mla	r5, r6, r2, r5
 801c082:	086a      	lsrs	r2, r5, #1
 801c084:	9e01      	ldr	r6, [sp, #4]
 801c086:	5cb2      	ldrb	r2, [r6, r2]
 801c088:	07ee      	lsls	r6, r5, #31
 801c08a:	bf54      	ite	pl
 801c08c:	f002 020f 	andpl.w	r2, r2, #15
 801c090:	1112      	asrmi	r2, r2, #4
 801c092:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c096:	b2d2      	uxtb	r2, r2
 801c098:	b1e2      	cbz	r2, 801c0d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c09a:	9d04      	ldr	r5, [sp, #16]
 801c09c:	436a      	muls	r2, r5
 801c09e:	1c55      	adds	r5, r2, #1
 801c0a0:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801c0a4:	4d6e      	ldr	r5, [pc, #440]	; (801c260 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801c0a6:	682d      	ldr	r5, [r5, #0]
 801c0a8:	1212      	asrs	r2, r2, #8
 801c0aa:	0a2e      	lsrs	r6, r5, #8
 801c0ac:	2aff      	cmp	r2, #255	; 0xff
 801c0ae:	9605      	str	r6, [sp, #20]
 801c0b0:	d116      	bne.n	801c0e0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c0b2:	f06f 0201 	mvn.w	r2, #1
 801c0b6:	fb02 fc07 	mul.w	ip, r2, r7
 801c0ba:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801c0be:	096a      	lsrs	r2, r5, #5
 801c0c0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c0c4:	f026 0607 	bic.w	r6, r6, #7
 801c0c8:	4316      	orrs	r6, r2
 801c0ca:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c0ce:	432e      	orrs	r6, r5
 801c0d0:	f824 600c 	strh.w	r6, [r4, ip]
 801c0d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c0d6:	4410      	add	r0, r2
 801c0d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c0da:	3f01      	subs	r7, #1
 801c0dc:	4411      	add	r1, r2
 801c0de:	e77f      	b.n	801bfe0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801c0e0:	f06f 0601 	mvn.w	r6, #1
 801c0e4:	437e      	muls	r6, r7
 801c0e6:	fa1f fa82 	uxth.w	sl, r2
 801c0ea:	f834 8006 	ldrh.w	r8, [r4, r6]
 801c0ee:	9602      	str	r6, [sp, #8]
 801c0f0:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801c0f4:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801c0f8:	43d2      	mvns	r2, r2
 801c0fa:	b2d2      	uxtb	r2, r2
 801c0fc:	fb1c fc0a 	smulbb	ip, ip, sl
 801c100:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801c104:	fb0e ce02 	mla	lr, lr, r2, ip
 801c108:	b2ed      	uxtb	r5, r5
 801c10a:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801c10e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c112:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801c116:	fa5f f888 	uxtb.w	r8, r8
 801c11a:	fb15 f50a 	smulbb	r5, r5, sl
 801c11e:	fb08 5502 	mla	r5, r8, r2, r5
 801c122:	fa1f fe8e 	uxth.w	lr, lr
 801c126:	fb16 f60a 	smulbb	r6, r6, sl
 801c12a:	b2ad      	uxth	r5, r5
 801c12c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801c130:	fb0c 6c02 	mla	ip, ip, r2, r6
 801c134:	f10e 0201 	add.w	r2, lr, #1
 801c138:	1c6e      	adds	r6, r5, #1
 801c13a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801c13e:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801c142:	fa1f fc8c 	uxth.w	ip, ip
 801c146:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c14a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801c14e:	ea46 0e0e 	orr.w	lr, r6, lr
 801c152:	f10c 0601 	add.w	r6, ip, #1
 801c156:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801c15a:	0976      	lsrs	r6, r6, #5
 801c15c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c160:	9a02      	ldr	r2, [sp, #8]
 801c162:	ea4e 0e06 	orr.w	lr, lr, r6
 801c166:	f824 e002 	strh.w	lr, [r4, r2]
 801c16a:	e7b3      	b.n	801c0d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c16c:	f04f 0800 	mov.w	r8, #0
 801c170:	eba3 0208 	sub.w	r2, r3, r8
 801c174:	2a00      	cmp	r2, #0
 801c176:	f77f af36 	ble.w	801bfe6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801c17a:	9e00      	ldr	r6, [sp, #0]
 801c17c:	1402      	asrs	r2, r0, #16
 801c17e:	140d      	asrs	r5, r1, #16
 801c180:	fb06 2505 	mla	r5, r6, r5, r2
 801c184:	086a      	lsrs	r2, r5, #1
 801c186:	9e01      	ldr	r6, [sp, #4]
 801c188:	5cb2      	ldrb	r2, [r6, r2]
 801c18a:	07ed      	lsls	r5, r5, #31
 801c18c:	bf54      	ite	pl
 801c18e:	f002 020f 	andpl.w	r2, r2, #15
 801c192:	1112      	asrmi	r2, r2, #4
 801c194:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c198:	b2d2      	uxtb	r2, r2
 801c19a:	b1c2      	cbz	r2, 801c1ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801c19c:	9d04      	ldr	r5, [sp, #16]
 801c19e:	436a      	muls	r2, r5
 801c1a0:	1c55      	adds	r5, r2, #1
 801c1a2:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801c1a6:	4d2e      	ldr	r5, [pc, #184]	; (801c260 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801c1a8:	1212      	asrs	r2, r2, #8
 801c1aa:	682e      	ldr	r6, [r5, #0]
 801c1ac:	2aff      	cmp	r2, #255	; 0xff
 801c1ae:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801c1b2:	d113      	bne.n	801c1dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801c1b4:	0972      	lsrs	r2, r6, #5
 801c1b6:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801c1ba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c1be:	f025 0507 	bic.w	r5, r5, #7
 801c1c2:	4315      	orrs	r5, r2
 801c1c4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801c1c8:	4335      	orrs	r5, r6
 801c1ca:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801c1ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c1d0:	4410      	add	r0, r2
 801c1d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c1d4:	f108 0801 	add.w	r8, r8, #1
 801c1d8:	4411      	add	r1, r2
 801c1da:	e7c9      	b.n	801c170 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801c1dc:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801c1e0:	fa1f fa82 	uxth.w	sl, r2
 801c1e4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c1e8:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801c1ec:	43d2      	mvns	r2, r2
 801c1ee:	b2d2      	uxtb	r2, r2
 801c1f0:	fb17 f70a 	smulbb	r7, r7, sl
 801c1f4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c1f8:	fb0c 7c02 	mla	ip, ip, r2, r7
 801c1fc:	b2f6      	uxtb	r6, r6
 801c1fe:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801c202:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c206:	fa5f fe8e 	uxtb.w	lr, lr
 801c20a:	fb16 f60a 	smulbb	r6, r6, sl
 801c20e:	fb0e 6602 	mla	r6, lr, r2, r6
 801c212:	b2ed      	uxtb	r5, r5
 801c214:	fa1f fc8c 	uxth.w	ip, ip
 801c218:	fb15 f50a 	smulbb	r5, r5, sl
 801c21c:	b2b6      	uxth	r6, r6
 801c21e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c222:	fb07 5702 	mla	r7, r7, r2, r5
 801c226:	f10c 0201 	add.w	r2, ip, #1
 801c22a:	1c75      	adds	r5, r6, #1
 801c22c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801c230:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801c234:	b2bf      	uxth	r7, r7
 801c236:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c23a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c23e:	ea45 0c0c 	orr.w	ip, r5, ip
 801c242:	1c7d      	adds	r5, r7, #1
 801c244:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801c248:	096d      	lsrs	r5, r5, #5
 801c24a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c24e:	ea4c 0c05 	orr.w	ip, ip, r5
 801c252:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801c256:	e7ba      	b.n	801c1ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801c258:	b007      	add	sp, #28
 801c25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c25e:	bf00      	nop
 801c260:	20008818 	.word	0x20008818

0801c264 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c268:	b087      	sub	sp, #28
 801c26a:	f8df 830c 	ldr.w	r8, [pc, #780]	; 801c578 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801c26e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c270:	9205      	str	r2, [sp, #20]
 801c272:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801c276:	9101      	str	r1, [sp, #4]
 801c278:	6841      	ldr	r1, [r0, #4]
 801c27a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801c27e:	fb01 2404 	mla	r4, r1, r4, r2
 801c282:	6802      	ldr	r2, [r0, #0]
 801c284:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c288:	f8db 2008 	ldr.w	r2, [fp, #8]
 801c28c:	3201      	adds	r2, #1
 801c28e:	f022 0201 	bic.w	r2, r2, #1
 801c292:	9202      	str	r2, [sp, #8]
 801c294:	f8db 2000 	ldr.w	r2, [fp]
 801c298:	9203      	str	r2, [sp, #12]
 801c29a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c29e:	9a01      	ldr	r2, [sp, #4]
 801c2a0:	2a00      	cmp	r2, #0
 801c2a2:	dc03      	bgt.n	801c2ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c2a4:	9a05      	ldr	r2, [sp, #20]
 801c2a6:	2a00      	cmp	r2, #0
 801c2a8:	f340 8162 	ble.w	801c570 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801c2ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c2ae:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801c2b2:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801c2b6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c2ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c2bc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	dd0e      	ble.n	801c2e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c2c4:	1402      	asrs	r2, r0, #16
 801c2c6:	d405      	bmi.n	801c2d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c2c8:	42ba      	cmp	r2, r7
 801c2ca:	da03      	bge.n	801c2d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c2cc:	140a      	asrs	r2, r1, #16
 801c2ce:	d401      	bmi.n	801c2d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c2d0:	42b2      	cmp	r2, r6
 801c2d2:	db07      	blt.n	801c2e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c2d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c2d6:	4410      	add	r0, r2
 801c2d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c2da:	3b01      	subs	r3, #1
 801c2dc:	4411      	add	r1, r2
 801c2de:	3402      	adds	r4, #2
 801c2e0:	e7ee      	b.n	801c2c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c2e2:	d017      	beq.n	801c314 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c2e4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c2e6:	1e5a      	subs	r2, r3, #1
 801c2e8:	fb05 0502 	mla	r5, r5, r2, r0
 801c2ec:	142d      	asrs	r5, r5, #16
 801c2ee:	d409      	bmi.n	801c304 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c2f0:	42bd      	cmp	r5, r7
 801c2f2:	da07      	bge.n	801c304 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c2f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c2f6:	fb05 1202 	mla	r2, r5, r2, r1
 801c2fa:	1412      	asrs	r2, r2, #16
 801c2fc:	d402      	bmi.n	801c304 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c2fe:	42b2      	cmp	r2, r6
 801c300:	f2c0 80c3 	blt.w	801c48a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801c304:	2500      	movs	r5, #0
 801c306:	195a      	adds	r2, r3, r5
 801c308:	2a00      	cmp	r2, #0
 801c30a:	dc3f      	bgt.n	801c38c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c30c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c310:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c314:	9b01      	ldr	r3, [sp, #4]
 801c316:	2b00      	cmp	r3, #0
 801c318:	f340 812a 	ble.w	801c570 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801c31c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c320:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c324:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c328:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c32a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c32e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c332:	eeb0 6a62 	vmov.f32	s12, s5
 801c336:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c33a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c33e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c342:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c346:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c34a:	eeb0 6a43 	vmov.f32	s12, s6
 801c34e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c352:	ee12 2a90 	vmov	r2, s5
 801c356:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c35a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c35e:	ee13 2a10 	vmov	r2, s6
 801c362:	9313      	str	r3, [sp, #76]	; 0x4c
 801c364:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c366:	fb92 f3f3 	sdiv	r3, r2, r3
 801c36a:	9314      	str	r3, [sp, #80]	; 0x50
 801c36c:	9b01      	ldr	r3, [sp, #4]
 801c36e:	9a05      	ldr	r2, [sp, #20]
 801c370:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c374:	3b01      	subs	r3, #1
 801c376:	9301      	str	r3, [sp, #4]
 801c378:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c37c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c37e:	eeb0 3a67 	vmov.f32	s6, s15
 801c382:	bf08      	it	eq
 801c384:	4613      	moveq	r3, r2
 801c386:	eef0 2a47 	vmov.f32	s5, s14
 801c38a:	e788      	b.n	801c29e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c38c:	1406      	asrs	r6, r0, #16
 801c38e:	d42c      	bmi.n	801c3ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c390:	f8db 2008 	ldr.w	r2, [fp, #8]
 801c394:	42b2      	cmp	r2, r6
 801c396:	dd28      	ble.n	801c3ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c398:	140f      	asrs	r7, r1, #16
 801c39a:	d426      	bmi.n	801c3ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c39c:	f8db 200c 	ldr.w	r2, [fp, #12]
 801c3a0:	42ba      	cmp	r2, r7
 801c3a2:	dd22      	ble.n	801c3ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c3a4:	9a02      	ldr	r2, [sp, #8]
 801c3a6:	fb07 6602 	mla	r6, r7, r2, r6
 801c3aa:	0872      	lsrs	r2, r6, #1
 801c3ac:	9f03      	ldr	r7, [sp, #12]
 801c3ae:	5cba      	ldrb	r2, [r7, r2]
 801c3b0:	07f6      	lsls	r6, r6, #31
 801c3b2:	bf54      	ite	pl
 801c3b4:	f002 020f 	andpl.w	r2, r2, #15
 801c3b8:	1112      	asrmi	r2, r2, #4
 801c3ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c3be:	b2d2      	uxtb	r2, r2
 801c3c0:	2aff      	cmp	r2, #255	; 0xff
 801c3c2:	d118      	bne.n	801c3f6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801c3c4:	f8d8 2000 	ldr.w	r2, [r8]
 801c3c8:	f06f 0601 	mvn.w	r6, #1
 801c3cc:	fb06 f705 	mul.w	r7, r6, r5
 801c3d0:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801c3d4:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801c3d8:	0956      	lsrs	r6, r2, #5
 801c3da:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c3de:	ea4c 0606 	orr.w	r6, ip, r6
 801c3e2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c3e6:	4316      	orrs	r6, r2
 801c3e8:	53e6      	strh	r6, [r4, r7]
 801c3ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c3ec:	4410      	add	r0, r2
 801c3ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c3f0:	3d01      	subs	r5, #1
 801c3f2:	4411      	add	r1, r2
 801c3f4:	e787      	b.n	801c306 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c3f6:	2a00      	cmp	r2, #0
 801c3f8:	d0f7      	beq.n	801c3ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c3fa:	f06f 0601 	mvn.w	r6, #1
 801c3fe:	436e      	muls	r6, r5
 801c400:	f8d8 c000 	ldr.w	ip, [r8]
 801c404:	f834 e006 	ldrh.w	lr, [r4, r6]
 801c408:	9604      	str	r6, [sp, #16]
 801c40a:	fa1f f982 	uxth.w	r9, r2
 801c40e:	ea4f 272e 	mov.w	r7, lr, asr #8
 801c412:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801c416:	43d2      	mvns	r2, r2
 801c418:	b2d2      	uxtb	r2, r2
 801c41a:	fb16 f609 	smulbb	r6, r6, r9
 801c41e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c422:	fb07 6702 	mla	r7, r7, r2, r6
 801c426:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801c42a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c42e:	fa5f fc8c 	uxtb.w	ip, ip
 801c432:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c436:	fa5f fe8e 	uxtb.w	lr, lr
 801c43a:	fb1c fc09 	smulbb	ip, ip, r9
 801c43e:	fb0e cc02 	mla	ip, lr, r2, ip
 801c442:	b2bf      	uxth	r7, r7
 801c444:	fb1a fa09 	smulbb	sl, sl, r9
 801c448:	fa1f fc8c 	uxth.w	ip, ip
 801c44c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c450:	fb06 a602 	mla	r6, r6, r2, sl
 801c454:	1c7a      	adds	r2, r7, #1
 801c456:	f10c 0a01 	add.w	sl, ip, #1
 801c45a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c45e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801c462:	b2b6      	uxth	r6, r6
 801c464:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c468:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c46c:	ea4a 0707 	orr.w	r7, sl, r7
 801c470:	f106 0a01 	add.w	sl, r6, #1
 801c474:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c478:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c47c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c480:	9a04      	ldr	r2, [sp, #16]
 801c482:	ea47 070a 	orr.w	r7, r7, sl
 801c486:	52a7      	strh	r7, [r4, r2]
 801c488:	e7af      	b.n	801c3ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c48a:	f04f 0e00 	mov.w	lr, #0
 801c48e:	eba3 020e 	sub.w	r2, r3, lr
 801c492:	2a00      	cmp	r2, #0
 801c494:	f77f af3a 	ble.w	801c30c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c498:	9e02      	ldr	r6, [sp, #8]
 801c49a:	1402      	asrs	r2, r0, #16
 801c49c:	140d      	asrs	r5, r1, #16
 801c49e:	fb06 2505 	mla	r5, r6, r5, r2
 801c4a2:	086a      	lsrs	r2, r5, #1
 801c4a4:	9e03      	ldr	r6, [sp, #12]
 801c4a6:	5cb2      	ldrb	r2, [r6, r2]
 801c4a8:	07ed      	lsls	r5, r5, #31
 801c4aa:	bf54      	ite	pl
 801c4ac:	f002 020f 	andpl.w	r2, r2, #15
 801c4b0:	1112      	asrmi	r2, r2, #4
 801c4b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c4b6:	b2d2      	uxtb	r2, r2
 801c4b8:	2aff      	cmp	r2, #255	; 0xff
 801c4ba:	d115      	bne.n	801c4e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801c4bc:	f8d8 5000 	ldr.w	r5, [r8]
 801c4c0:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801c4c4:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801c4c8:	096a      	lsrs	r2, r5, #5
 801c4ca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c4ce:	4332      	orrs	r2, r6
 801c4d0:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c4d4:	432a      	orrs	r2, r5
 801c4d6:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801c4da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c4dc:	4410      	add	r0, r2
 801c4de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c4e0:	f10e 0e01 	add.w	lr, lr, #1
 801c4e4:	4411      	add	r1, r2
 801c4e6:	e7d2      	b.n	801c48e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c4e8:	2a00      	cmp	r2, #0
 801c4ea:	d0f6      	beq.n	801c4da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c4ec:	f8d8 7000 	ldr.w	r7, [r8]
 801c4f0:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801c4f4:	fa1f f982 	uxth.w	r9, r2
 801c4f8:	ea4f 262c 	mov.w	r6, ip, asr #8
 801c4fc:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801c500:	43d2      	mvns	r2, r2
 801c502:	b2d2      	uxtb	r2, r2
 801c504:	fb15 f509 	smulbb	r5, r5, r9
 801c508:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c50c:	fb06 5602 	mla	r6, r6, r2, r5
 801c510:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c514:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801c518:	b2ff      	uxtb	r7, r7
 801c51a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c51e:	fa5f fc8c 	uxtb.w	ip, ip
 801c522:	fb17 f709 	smulbb	r7, r7, r9
 801c526:	fb0c 7702 	mla	r7, ip, r2, r7
 801c52a:	b2b6      	uxth	r6, r6
 801c52c:	fb1a fa09 	smulbb	sl, sl, r9
 801c530:	b2bf      	uxth	r7, r7
 801c532:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c536:	fb05 a502 	mla	r5, r5, r2, sl
 801c53a:	1c72      	adds	r2, r6, #1
 801c53c:	f107 0a01 	add.w	sl, r7, #1
 801c540:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801c544:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c548:	b2ad      	uxth	r5, r5
 801c54a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c54e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c552:	ea4a 0606 	orr.w	r6, sl, r6
 801c556:	f105 0a01 	add.w	sl, r5, #1
 801c55a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c55e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c562:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c566:	ea46 060a 	orr.w	r6, r6, sl
 801c56a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801c56e:	e7b4      	b.n	801c4da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c570:	b007      	add	sp, #28
 801c572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c576:	bf00      	nop
 801c578:	20008818 	.word	0x20008818

0801c57c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801c57c:	4770      	bx	lr

0801c57e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801c57e:	4770      	bx	lr

0801c580 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801c580:	4770      	bx	lr

0801c582 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801c582:	4770      	bx	lr

0801c584 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c584:	4770      	bx	lr

0801c586 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c586:	4770      	bx	lr

0801c588 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c588:	4770      	bx	lr

0801c58a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c58a:	4770      	bx	lr

0801c58c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c58c:	4770      	bx	lr

0801c58e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801c58e:	4770      	bx	lr

0801c590 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c590:	4770      	bx	lr

0801c592 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c592:	4770      	bx	lr

0801c594 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c594:	4770      	bx	lr

0801c596 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801c596:	4770      	bx	lr

0801c598 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c598:	4770      	bx	lr

0801c59a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c59a:	4770      	bx	lr

0801c59c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c59c:	4770      	bx	lr

0801c59e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c59e:	4770      	bx	lr

0801c5a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c5a0:	4770      	bx	lr

0801c5a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c5a2:	4770      	bx	lr

0801c5a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c5a4:	4770      	bx	lr

0801c5a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c5a6:	4770      	bx	lr

0801c5a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c5a8:	4770      	bx	lr

0801c5aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c5aa:	4770      	bx	lr

0801c5ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c5ac:	4770      	bx	lr

0801c5ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801c5ae:	4770      	bx	lr

0801c5b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c5b0:	4770      	bx	lr

0801c5b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801c5b2:	4770      	bx	lr

0801c5b4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c5b8:	b088      	sub	sp, #32
 801c5ba:	ac08      	add	r4, sp, #32
 801c5bc:	4606      	mov	r6, r0
 801c5be:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801c5c2:	4620      	mov	r0, r4
 801c5c4:	4688      	mov	r8, r1
 801c5c6:	4691      	mov	r9, r2
 801c5c8:	f7fd fc66 	bl	8019e98 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c5cc:	6833      	ldr	r3, [r6, #0]
 801c5ce:	4605      	mov	r5, r0
 801c5d0:	4620      	mov	r0, r4
 801c5d2:	699f      	ldr	r7, [r3, #24]
 801c5d4:	f7fd fb74 	bl	8019cc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c5d8:	4682      	mov	sl, r0
 801c5da:	4620      	mov	r0, r4
 801c5dc:	f7fd fba4 	bl	8019d28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c5e0:	9500      	str	r5, [sp, #0]
 801c5e2:	e9cd a001 	strd	sl, r0, [sp, #4]
 801c5e6:	464b      	mov	r3, r9
 801c5e8:	a806      	add	r0, sp, #24
 801c5ea:	4642      	mov	r2, r8
 801c5ec:	4631      	mov	r1, r6
 801c5ee:	47b8      	blx	r7
 801c5f0:	4628      	mov	r0, r5
 801c5f2:	b008      	add	sp, #32
 801c5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801c5f8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801c5f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c5fc:	2300      	movs	r3, #0
 801c5fe:	9300      	str	r3, [sp, #0]
 801c600:	4b3d      	ldr	r3, [pc, #244]	; (801c6f8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801c602:	781b      	ldrb	r3, [r3, #0]
 801c604:	2b00      	cmp	r3, #0
 801c606:	d137      	bne.n	801c678 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801c608:	4a3c      	ldr	r2, [pc, #240]	; (801c6fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c60a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801c60e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c612:	2b00      	cmp	r3, #0
 801c614:	d132      	bne.n	801c67c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801c616:	4b3a      	ldr	r3, [pc, #232]	; (801c700 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c618:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c61c:	6808      	ldr	r0, [r1, #0]
 801c61e:	6849      	ldr	r1, [r1, #4]
 801c620:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c624:	ac02      	add	r4, sp, #8
 801c626:	ab02      	add	r3, sp, #8
 801c628:	c303      	stmia	r3!, {r0, r1}
 801c62a:	4669      	mov	r1, sp
 801c62c:	4620      	mov	r0, r4
 801c62e:	f7fa f97d 	bl	801692c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c632:	4668      	mov	r0, sp
 801c634:	f7fa f952 	bl	80168dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c638:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c63c:	f8bd 2000 	ldrh.w	r2, [sp]
 801c640:	4d30      	ldr	r5, [pc, #192]	; (801c704 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801c642:	4413      	add	r3, r2
 801c644:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c648:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c64c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c650:	6828      	ldr	r0, [r5, #0]
 801c652:	4413      	add	r3, r2
 801c654:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c658:	6803      	ldr	r3, [r0, #0]
 801c65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c65c:	4798      	blx	r3
 801c65e:	f010 0f01 	tst.w	r0, #1
 801c662:	462f      	mov	r7, r5
 801c664:	d00c      	beq.n	801c680 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801c666:	6828      	ldr	r0, [r5, #0]
 801c668:	6803      	ldr	r3, [r0, #0]
 801c66a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c66e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c670:	4798      	blx	r3
 801c672:	b004      	add	sp, #16
 801c674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c678:	4a21      	ldr	r2, [pc, #132]	; (801c700 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c67a:	e7c6      	b.n	801c60a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801c67c:	4b1f      	ldr	r3, [pc, #124]	; (801c6fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c67e:	e7cb      	b.n	801c618 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801c680:	6838      	ldr	r0, [r7, #0]
 801c682:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801c686:	6803      	ldr	r3, [r0, #0]
 801c688:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801c68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c68e:	4798      	blx	r3
 801c690:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c694:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c698:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801c69c:	fb16 3602 	smlabb	r6, r6, r2, r3
 801c6a0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c6a4:	6838      	ldr	r0, [r7, #0]
 801c6a6:	6803      	ldr	r3, [r0, #0]
 801c6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6aa:	4798      	blx	r3
 801c6ac:	4a13      	ldr	r2, [pc, #76]	; (801c6fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c6ae:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801c6b2:	8813      	ldrh	r3, [r2, #0]
 801c6b4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801c6b8:	fb03 1404 	mla	r4, r3, r4, r1
 801c6bc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c6c0:	435d      	muls	r5, r3
 801c6c2:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c6c6:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801c6ca:	4691      	mov	r9, r2
 801c6cc:	6838      	ldr	r0, [r7, #0]
 801c6ce:	42ac      	cmp	r4, r5
 801c6d0:	6803      	ldr	r3, [r0, #0]
 801c6d2:	d20e      	bcs.n	801c6f2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801c6d4:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801c6d8:	4632      	mov	r2, r6
 801c6da:	4643      	mov	r3, r8
 801c6dc:	4621      	mov	r1, r4
 801c6de:	47d0      	blx	sl
 801c6e0:	f8b9 3000 	ldrh.w	r3, [r9]
 801c6e4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c6e8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801c6ec:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c6f0:	e7ec      	b.n	801c6cc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801c6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6f4:	4798      	blx	r3
 801c6f6:	e7bc      	b.n	801c672 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801c6f8:	20008800 	.word	0x20008800
 801c6fc:	20008802 	.word	0x20008802
 801c700:	20008804 	.word	0x20008804
 801c704:	20008808 	.word	0x20008808

0801c708 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c70c:	b08b      	sub	sp, #44	; 0x2c
 801c70e:	460f      	mov	r7, r1
 801c710:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801c714:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801c718:	4616      	mov	r6, r2
 801c71a:	f1bb 0f00 	cmp.w	fp, #0
 801c71e:	d049      	beq.n	801c7b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c720:	6810      	ldr	r0, [r2, #0]
 801c722:	6851      	ldr	r1, [r2, #4]
 801c724:	ad06      	add	r5, sp, #24
 801c726:	c503      	stmia	r5!, {r0, r1}
 801c728:	6818      	ldr	r0, [r3, #0]
 801c72a:	6859      	ldr	r1, [r3, #4]
 801c72c:	ad08      	add	r5, sp, #32
 801c72e:	c503      	stmia	r5!, {r0, r1}
 801c730:	a806      	add	r0, sp, #24
 801c732:	f7fa f8d3 	bl	80168dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c736:	4631      	mov	r1, r6
 801c738:	a808      	add	r0, sp, #32
 801c73a:	f7fa f8f7 	bl	801692c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c73e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c742:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c746:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c74a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801c74e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801c752:	fb16 2103 	smlabb	r1, r6, r3, r2
 801c756:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801c75a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c75e:	4f5f      	ldr	r7, [pc, #380]	; (801c8dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c760:	440a      	add	r2, r1
 801c762:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c766:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c76a:	6838      	ldr	r0, [r7, #0]
 801c76c:	4413      	add	r3, r2
 801c76e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c772:	6803      	ldr	r3, [r0, #0]
 801c774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c776:	4798      	blx	r3
 801c778:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c77c:	46b9      	mov	r9, r7
 801c77e:	d01c      	beq.n	801c7ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801c780:	f010 0f04 	tst.w	r0, #4
 801c784:	d01d      	beq.n	801c7c2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c786:	f8d9 0000 	ldr.w	r0, [r9]
 801c78a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c78e:	6801      	ldr	r1, [r0, #0]
 801c790:	f8cd b00c 	str.w	fp, [sp, #12]
 801c794:	2700      	movs	r7, #0
 801c796:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801c79a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801c79e:	9402      	str	r4, [sp, #8]
 801c7a0:	b2ad      	uxth	r5, r5
 801c7a2:	fa1f f488 	uxth.w	r4, r8
 801c7a6:	9501      	str	r5, [sp, #4]
 801c7a8:	9400      	str	r4, [sp, #0]
 801c7aa:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801c7ac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c7b0:	4631      	mov	r1, r6
 801c7b2:	47a0      	blx	r4
 801c7b4:	b00b      	add	sp, #44	; 0x2c
 801c7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7ba:	b914      	cbnz	r4, 801c7c2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c7bc:	f010 0f01 	tst.w	r0, #1
 801c7c0:	e7e0      	b.n	801c784 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801c7c2:	f8d9 0000 	ldr.w	r0, [r9]
 801c7c6:	6803      	ldr	r3, [r0, #0]
 801c7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c7ca:	4798      	blx	r3
 801c7cc:	4b44      	ldr	r3, [pc, #272]	; (801c8e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801c7ce:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801c7d2:	881a      	ldrh	r2, [r3, #0]
 801c7d4:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c7d8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c7dc:	fb02 1404 	mla	r4, r2, r4, r1
 801c7e0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c7e4:	469a      	mov	sl, r3
 801c7e6:	fb05 f502 	mul.w	r5, r5, r2
 801c7ea:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801c7ee:	d059      	beq.n	801c8a4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801c7f0:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801c7f4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c7f8:	fa1f f28b 	uxth.w	r2, fp
 801c7fc:	fa1f f989 	uxth.w	r9, r9
 801c800:	469e      	mov	lr, r3
 801c802:	42ac      	cmp	r4, r5
 801c804:	d264      	bcs.n	801c8d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c806:	eb04 0a07 	add.w	sl, r4, r7
 801c80a:	4554      	cmp	r4, sl
 801c80c:	d23d      	bcs.n	801c88a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801c80e:	8821      	ldrh	r1, [r4, #0]
 801c810:	f836 3b02 	ldrh.w	r3, [r6], #2
 801c814:	1208      	asrs	r0, r1, #8
 801c816:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c81a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c81e:	fb10 f009 	smulbb	r0, r0, r9
 801c822:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801c826:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c82a:	00c9      	lsls	r1, r1, #3
 801c82c:	fb0c 0c02 	mla	ip, ip, r2, r0
 801c830:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c834:	10d8      	asrs	r0, r3, #3
 801c836:	b2c9      	uxtb	r1, r1
 801c838:	00db      	lsls	r3, r3, #3
 801c83a:	fa1f fc8c 	uxth.w	ip, ip
 801c83e:	fb1b fb09 	smulbb	fp, fp, r9
 801c842:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c846:	b2db      	uxtb	r3, r3
 801c848:	fb11 f109 	smulbb	r1, r1, r9
 801c84c:	fb00 b002 	mla	r0, r0, r2, fp
 801c850:	fb03 1302 	mla	r3, r3, r2, r1
 801c854:	f10c 0b01 	add.w	fp, ip, #1
 801c858:	b29b      	uxth	r3, r3
 801c85a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c85e:	b280      	uxth	r0, r0
 801c860:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801c864:	f103 0c01 	add.w	ip, r3, #1
 801c868:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c86c:	1c43      	adds	r3, r0, #1
 801c86e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c872:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c876:	0940      	lsrs	r0, r0, #5
 801c878:	ea4c 0c0b 	orr.w	ip, ip, fp
 801c87c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c880:	ea4c 0c00 	orr.w	ip, ip, r0
 801c884:	f824 cb02 	strh.w	ip, [r4], #2
 801c888:	e7bf      	b.n	801c80a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801c88a:	f8be 3000 	ldrh.w	r3, [lr]
 801c88e:	eba3 0308 	sub.w	r3, r3, r8
 801c892:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c896:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c89a:	eba3 0308 	sub.w	r3, r3, r8
 801c89e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c8a2:	e7ae      	b.n	801c802 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801c8a4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c8a8:	f8d9 0000 	ldr.w	r0, [r9]
 801c8ac:	42ac      	cmp	r4, r5
 801c8ae:	6803      	ldr	r3, [r0, #0]
 801c8b0:	d20e      	bcs.n	801c8d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c8b2:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801c8b6:	4632      	mov	r2, r6
 801c8b8:	463b      	mov	r3, r7
 801c8ba:	4621      	mov	r1, r4
 801c8bc:	47c0      	blx	r8
 801c8be:	f8ba 3000 	ldrh.w	r3, [sl]
 801c8c2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c8c6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c8ca:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c8ce:	e7eb      	b.n	801c8a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801c8d0:	4b02      	ldr	r3, [pc, #8]	; (801c8dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c8d2:	6818      	ldr	r0, [r3, #0]
 801c8d4:	6803      	ldr	r3, [r0, #0]
 801c8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8d8:	4798      	blx	r3
 801c8da:	e76b      	b.n	801c7b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c8dc:	20008808 	.word	0x20008808
 801c8e0:	20008802 	.word	0x20008802

0801c8e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c8e4:	b510      	push	{r4, lr}
 801c8e6:	2104      	movs	r1, #4
 801c8e8:	4604      	mov	r4, r0
 801c8ea:	f009 facb 	bl	8025e84 <_ZdlPvj>
 801c8ee:	4620      	mov	r0, r4
 801c8f0:	bd10      	pop	{r4, pc}

0801c8f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c8f2:	b510      	push	{r4, lr}
 801c8f4:	2104      	movs	r1, #4
 801c8f6:	4604      	mov	r4, r0
 801c8f8:	f009 fac4 	bl	8025e84 <_ZdlPvj>
 801c8fc:	4620      	mov	r0, r4
 801c8fe:	bd10      	pop	{r4, pc}

0801c900 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c900:	b510      	push	{r4, lr}
 801c902:	2104      	movs	r1, #4
 801c904:	4604      	mov	r4, r0
 801c906:	f009 fabd 	bl	8025e84 <_ZdlPvj>
 801c90a:	4620      	mov	r0, r4
 801c90c:	bd10      	pop	{r4, pc}

0801c90e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c90e:	b510      	push	{r4, lr}
 801c910:	2104      	movs	r1, #4
 801c912:	4604      	mov	r4, r0
 801c914:	f009 fab6 	bl	8025e84 <_ZdlPvj>
 801c918:	4620      	mov	r0, r4
 801c91a:	bd10      	pop	{r4, pc}

0801c91c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c91c:	b510      	push	{r4, lr}
 801c91e:	2104      	movs	r1, #4
 801c920:	4604      	mov	r4, r0
 801c922:	f009 faaf 	bl	8025e84 <_ZdlPvj>
 801c926:	4620      	mov	r0, r4
 801c928:	bd10      	pop	{r4, pc}

0801c92a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c92a:	b510      	push	{r4, lr}
 801c92c:	2104      	movs	r1, #4
 801c92e:	4604      	mov	r4, r0
 801c930:	f009 faa8 	bl	8025e84 <_ZdlPvj>
 801c934:	4620      	mov	r0, r4
 801c936:	bd10      	pop	{r4, pc}

0801c938 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c938:	b510      	push	{r4, lr}
 801c93a:	2104      	movs	r1, #4
 801c93c:	4604      	mov	r4, r0
 801c93e:	f009 faa1 	bl	8025e84 <_ZdlPvj>
 801c942:	4620      	mov	r0, r4
 801c944:	bd10      	pop	{r4, pc}

0801c946 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c946:	b510      	push	{r4, lr}
 801c948:	2104      	movs	r1, #4
 801c94a:	4604      	mov	r4, r0
 801c94c:	f009 fa9a 	bl	8025e84 <_ZdlPvj>
 801c950:	4620      	mov	r0, r4
 801c952:	bd10      	pop	{r4, pc}

0801c954 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c954:	b510      	push	{r4, lr}
 801c956:	2104      	movs	r1, #4
 801c958:	4604      	mov	r4, r0
 801c95a:	f009 fa93 	bl	8025e84 <_ZdlPvj>
 801c95e:	4620      	mov	r0, r4
 801c960:	bd10      	pop	{r4, pc}

0801c962 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c962:	b510      	push	{r4, lr}
 801c964:	2104      	movs	r1, #4
 801c966:	4604      	mov	r4, r0
 801c968:	f009 fa8c 	bl	8025e84 <_ZdlPvj>
 801c96c:	4620      	mov	r0, r4
 801c96e:	bd10      	pop	{r4, pc}

0801c970 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c970:	b510      	push	{r4, lr}
 801c972:	2104      	movs	r1, #4
 801c974:	4604      	mov	r4, r0
 801c976:	f009 fa85 	bl	8025e84 <_ZdlPvj>
 801c97a:	4620      	mov	r0, r4
 801c97c:	bd10      	pop	{r4, pc}

0801c97e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c97e:	b510      	push	{r4, lr}
 801c980:	2104      	movs	r1, #4
 801c982:	4604      	mov	r4, r0
 801c984:	f009 fa7e 	bl	8025e84 <_ZdlPvj>
 801c988:	4620      	mov	r0, r4
 801c98a:	bd10      	pop	{r4, pc}

0801c98c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c98c:	b510      	push	{r4, lr}
 801c98e:	2104      	movs	r1, #4
 801c990:	4604      	mov	r4, r0
 801c992:	f009 fa77 	bl	8025e84 <_ZdlPvj>
 801c996:	4620      	mov	r0, r4
 801c998:	bd10      	pop	{r4, pc}

0801c99a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c99a:	b510      	push	{r4, lr}
 801c99c:	2104      	movs	r1, #4
 801c99e:	4604      	mov	r4, r0
 801c9a0:	f009 fa70 	bl	8025e84 <_ZdlPvj>
 801c9a4:	4620      	mov	r0, r4
 801c9a6:	bd10      	pop	{r4, pc}

0801c9a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c9a8:	b510      	push	{r4, lr}
 801c9aa:	2104      	movs	r1, #4
 801c9ac:	4604      	mov	r4, r0
 801c9ae:	f009 fa69 	bl	8025e84 <_ZdlPvj>
 801c9b2:	4620      	mov	r0, r4
 801c9b4:	bd10      	pop	{r4, pc}

0801c9b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c9b6:	b510      	push	{r4, lr}
 801c9b8:	2104      	movs	r1, #4
 801c9ba:	4604      	mov	r4, r0
 801c9bc:	f009 fa62 	bl	8025e84 <_ZdlPvj>
 801c9c0:	4620      	mov	r0, r4
 801c9c2:	bd10      	pop	{r4, pc}

0801c9c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c9c4:	b510      	push	{r4, lr}
 801c9c6:	2104      	movs	r1, #4
 801c9c8:	4604      	mov	r4, r0
 801c9ca:	f009 fa5b 	bl	8025e84 <_ZdlPvj>
 801c9ce:	4620      	mov	r0, r4
 801c9d0:	bd10      	pop	{r4, pc}

0801c9d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c9d2:	b510      	push	{r4, lr}
 801c9d4:	2104      	movs	r1, #4
 801c9d6:	4604      	mov	r4, r0
 801c9d8:	f009 fa54 	bl	8025e84 <_ZdlPvj>
 801c9dc:	4620      	mov	r0, r4
 801c9de:	bd10      	pop	{r4, pc}

0801c9e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c9e0:	b510      	push	{r4, lr}
 801c9e2:	2104      	movs	r1, #4
 801c9e4:	4604      	mov	r4, r0
 801c9e6:	f009 fa4d 	bl	8025e84 <_ZdlPvj>
 801c9ea:	4620      	mov	r0, r4
 801c9ec:	bd10      	pop	{r4, pc}

0801c9ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c9ee:	b510      	push	{r4, lr}
 801c9f0:	2104      	movs	r1, #4
 801c9f2:	4604      	mov	r4, r0
 801c9f4:	f009 fa46 	bl	8025e84 <_ZdlPvj>
 801c9f8:	4620      	mov	r0, r4
 801c9fa:	bd10      	pop	{r4, pc}

0801c9fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c9fc:	b510      	push	{r4, lr}
 801c9fe:	2104      	movs	r1, #4
 801ca00:	4604      	mov	r4, r0
 801ca02:	f009 fa3f 	bl	8025e84 <_ZdlPvj>
 801ca06:	4620      	mov	r0, r4
 801ca08:	bd10      	pop	{r4, pc}

0801ca0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ca0a:	b510      	push	{r4, lr}
 801ca0c:	2104      	movs	r1, #4
 801ca0e:	4604      	mov	r4, r0
 801ca10:	f009 fa38 	bl	8025e84 <_ZdlPvj>
 801ca14:	4620      	mov	r0, r4
 801ca16:	bd10      	pop	{r4, pc}

0801ca18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ca18:	b510      	push	{r4, lr}
 801ca1a:	2104      	movs	r1, #4
 801ca1c:	4604      	mov	r4, r0
 801ca1e:	f009 fa31 	bl	8025e84 <_ZdlPvj>
 801ca22:	4620      	mov	r0, r4
 801ca24:	bd10      	pop	{r4, pc}

0801ca26 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ca26:	b510      	push	{r4, lr}
 801ca28:	2104      	movs	r1, #4
 801ca2a:	4604      	mov	r4, r0
 801ca2c:	f009 fa2a 	bl	8025e84 <_ZdlPvj>
 801ca30:	4620      	mov	r0, r4
 801ca32:	bd10      	pop	{r4, pc}

0801ca34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801ca34:	b510      	push	{r4, lr}
 801ca36:	2104      	movs	r1, #4
 801ca38:	4604      	mov	r4, r0
 801ca3a:	f009 fa23 	bl	8025e84 <_ZdlPvj>
 801ca3e:	4620      	mov	r0, r4
 801ca40:	bd10      	pop	{r4, pc}

0801ca42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801ca42:	b510      	push	{r4, lr}
 801ca44:	2104      	movs	r1, #4
 801ca46:	4604      	mov	r4, r0
 801ca48:	f009 fa1c 	bl	8025e84 <_ZdlPvj>
 801ca4c:	4620      	mov	r0, r4
 801ca4e:	bd10      	pop	{r4, pc}

0801ca50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801ca50:	b510      	push	{r4, lr}
 801ca52:	2104      	movs	r1, #4
 801ca54:	4604      	mov	r4, r0
 801ca56:	f009 fa15 	bl	8025e84 <_ZdlPvj>
 801ca5a:	4620      	mov	r0, r4
 801ca5c:	bd10      	pop	{r4, pc}

0801ca5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801ca5e:	b510      	push	{r4, lr}
 801ca60:	2104      	movs	r1, #4
 801ca62:	4604      	mov	r4, r0
 801ca64:	f009 fa0e 	bl	8025e84 <_ZdlPvj>
 801ca68:	4620      	mov	r0, r4
 801ca6a:	bd10      	pop	{r4, pc}

0801ca6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801ca6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca70:	b091      	sub	sp, #68	; 0x44
 801ca72:	469b      	mov	fp, r3
 801ca74:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801ca78:	4616      	mov	r6, r2
 801ca7a:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801ca7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ca82:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801ca86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ca8a:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ca8e:	4604      	mov	r4, r0
 801ca90:	460d      	mov	r5, r1
 801ca92:	4640      	mov	r0, r8
 801ca94:	4659      	mov	r1, fp
 801ca96:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801ca9a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801ca9e:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801caa2:	f7f4 fc81 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 801caa6:	4631      	mov	r1, r6
 801caa8:	4640      	mov	r0, r8
 801caaa:	f7f4 fc7d 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 801caae:	4b74      	ldr	r3, [pc, #464]	; (801cc80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801cab0:	8818      	ldrh	r0, [r3, #0]
 801cab2:	4b74      	ldr	r3, [pc, #464]	; (801cc84 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801cab4:	8819      	ldrh	r1, [r3, #0]
 801cab6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801caba:	2b00      	cmp	r3, #0
 801cabc:	b202      	sxth	r2, r0
 801cabe:	b20e      	sxth	r6, r1
 801cac0:	da07      	bge.n	801cad2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801cac2:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801cac6:	4463      	add	r3, ip
 801cac8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801cacc:	2300      	movs	r3, #0
 801cace:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801cad2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801cad6:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801cada:	1ad2      	subs	r2, r2, r3
 801cadc:	4594      	cmp	ip, r2
 801cade:	bfc4      	itt	gt
 801cae0:	1ac2      	subgt	r2, r0, r3
 801cae2:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801cae6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801caea:	2a00      	cmp	r2, #0
 801caec:	da07      	bge.n	801cafe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801caee:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801caf2:	4462      	add	r2, ip
 801caf4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801caf8:	2200      	movs	r2, #0
 801cafa:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801cafe:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801cb02:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801cb06:	eba6 060a 	sub.w	r6, r6, sl
 801cb0a:	42b2      	cmp	r2, r6
 801cb0c:	bfc4      	itt	gt
 801cb0e:	eba1 020a 	subgt.w	r2, r1, sl
 801cb12:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801cb16:	4a5c      	ldr	r2, [pc, #368]	; (801cc88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801cb18:	7812      	ldrb	r2, [r2, #0]
 801cb1a:	b9a2      	cbnz	r2, 801cb46 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801cb1c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801cb20:	4286      	cmp	r6, r0
 801cb22:	4640      	mov	r0, r8
 801cb24:	9303      	str	r3, [sp, #12]
 801cb26:	bf14      	ite	ne
 801cb28:	2600      	movne	r6, #0
 801cb2a:	2601      	moveq	r6, #1
 801cb2c:	f7f4 fc7f 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 801cb30:	9b03      	ldr	r3, [sp, #12]
 801cb32:	b160      	cbz	r0, 801cb4e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801cb34:	2300      	movs	r3, #0
 801cb36:	8023      	strh	r3, [r4, #0]
 801cb38:	8063      	strh	r3, [r4, #2]
 801cb3a:	80a3      	strh	r3, [r4, #4]
 801cb3c:	4620      	mov	r0, r4
 801cb3e:	80e3      	strh	r3, [r4, #6]
 801cb40:	b011      	add	sp, #68	; 0x44
 801cb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb46:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801cb4a:	428e      	cmp	r6, r1
 801cb4c:	e7e9      	b.n	801cb22 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801cb4e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801cb52:	9205      	str	r2, [sp, #20]
 801cb54:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801cb58:	9206      	str	r2, [sp, #24]
 801cb5a:	f8bb 2000 	ldrh.w	r2, [fp]
 801cb5e:	900e      	str	r0, [sp, #56]	; 0x38
 801cb60:	1a9b      	subs	r3, r3, r2
 801cb62:	b21b      	sxth	r3, r3
 801cb64:	9303      	str	r3, [sp, #12]
 801cb66:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801cb6a:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801cb6e:	ebaa 0a03 	sub.w	sl, sl, r3
 801cb72:	fa0f f38a 	sxth.w	r3, sl
 801cb76:	9304      	str	r3, [sp, #16]
 801cb78:	9b03      	ldr	r3, [sp, #12]
 801cb7a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801cb7e:	9b04      	ldr	r3, [sp, #16]
 801cb80:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801cb84:	9b05      	ldr	r3, [sp, #20]
 801cb86:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801cb8a:	a90e      	add	r1, sp, #56	; 0x38
 801cb8c:	9b06      	ldr	r3, [sp, #24]
 801cb8e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801cb92:	a80c      	add	r0, sp, #48	; 0x30
 801cb94:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801cb98:	f7f9 fec8 	bl	801692c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cb9c:	4640      	mov	r0, r8
 801cb9e:	f7f9 fe9d 	bl	80168dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cba2:	a80e      	add	r0, sp, #56	; 0x38
 801cba4:	f7f9 fe9a 	bl	80168dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cba8:	4b38      	ldr	r3, [pc, #224]	; (801cc8c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801cbaa:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801cbae:	881b      	ldrh	r3, [r3, #0]
 801cbb0:	9307      	str	r3, [sp, #28]
 801cbb2:	682b      	ldr	r3, [r5, #0]
 801cbb4:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801cc90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801cbb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cbba:	4628      	mov	r0, r5
 801cbbc:	4798      	blx	r3
 801cbbe:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801cbc2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801cbc6:	4681      	mov	r9, r0
 801cbc8:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801cbcc:	f8db 0000 	ldr.w	r0, [fp]
 801cbd0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801cbd2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801cbd6:	6803      	ldr	r3, [r0, #0]
 801cbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cbda:	4798      	blx	r3
 801cbdc:	4607      	mov	r7, r0
 801cbde:	f8db 0000 	ldr.w	r0, [fp]
 801cbe2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801cbe6:	6803      	ldr	r3, [r0, #0]
 801cbe8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801cbec:	9109      	str	r1, [sp, #36]	; 0x24
 801cbee:	9208      	str	r2, [sp, #32]
 801cbf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbf2:	4798      	blx	r3
 801cbf4:	f010 0f01 	tst.w	r0, #1
 801cbf8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801cbfc:	d012      	beq.n	801cc24 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801cbfe:	f8db 0000 	ldr.w	r0, [fp]
 801cc02:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801cc06:	6803      	ldr	r3, [r0, #0]
 801cc08:	9200      	str	r2, [sp, #0]
 801cc0a:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801cc0c:	e898 0006 	ldmia.w	r8, {r1, r2}
 801cc10:	462b      	mov	r3, r5
 801cc12:	47b0      	blx	r6
 801cc14:	9b03      	ldr	r3, [sp, #12]
 801cc16:	8023      	strh	r3, [r4, #0]
 801cc18:	9b04      	ldr	r3, [sp, #16]
 801cc1a:	8063      	strh	r3, [r4, #2]
 801cc1c:	9b05      	ldr	r3, [sp, #20]
 801cc1e:	80a3      	strh	r3, [r4, #4]
 801cc20:	9b06      	ldr	r3, [sp, #24]
 801cc22:	e78b      	b.n	801cb3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801cc24:	fb09 f202 	mul.w	r2, r9, r2
 801cc28:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801cc2c:	440f      	add	r7, r1
 801cc2e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801cc32:	b166      	cbz	r6, 801cc4e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801cc34:	9a07      	ldr	r2, [sp, #28]
 801cc36:	4592      	cmp	sl, r2
 801cc38:	d109      	bne.n	801cc4e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801cc3a:	f8db 0000 	ldr.w	r0, [fp]
 801cc3e:	6802      	ldr	r2, [r0, #0]
 801cc40:	fb09 f303 	mul.w	r3, r9, r3
 801cc44:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801cc46:	4629      	mov	r1, r5
 801cc48:	463a      	mov	r2, r7
 801cc4a:	47b0      	blx	r6
 801cc4c:	e7e2      	b.n	801cc14 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801cc4e:	fb0a f303 	mul.w	r3, sl, r3
 801cc52:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801cc90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801cc56:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801cc5a:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801cc5e:	4545      	cmp	r5, r8
 801cc60:	d2d8      	bcs.n	801cc14 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801cc62:	f8db 0000 	ldr.w	r0, [fp]
 801cc66:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801cc6a:	6802      	ldr	r2, [r0, #0]
 801cc6c:	4629      	mov	r1, r5
 801cc6e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801cc72:	005b      	lsls	r3, r3, #1
 801cc74:	463a      	mov	r2, r7
 801cc76:	47d0      	blx	sl
 801cc78:	444f      	add	r7, r9
 801cc7a:	4435      	add	r5, r6
 801cc7c:	e7ef      	b.n	801cc5e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801cc7e:	bf00      	nop
 801cc80:	200087fc 	.word	0x200087fc
 801cc84:	200087fe 	.word	0x200087fe
 801cc88:	20008800 	.word	0x20008800
 801cc8c:	20008802 	.word	0x20008802
 801cc90:	20008808 	.word	0x20008808

0801cc94 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801cc94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc96:	4606      	mov	r6, r0
 801cc98:	b087      	sub	sp, #28
 801cc9a:	460c      	mov	r4, r1
 801cc9c:	4617      	mov	r7, r2
 801cc9e:	461d      	mov	r5, r3
 801cca0:	b333      	cbz	r3, 801ccf0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cca2:	4608      	mov	r0, r1
 801cca4:	f7f4 fbc3 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 801cca8:	bb10      	cbnz	r0, 801ccf0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ccaa:	6820      	ldr	r0, [r4, #0]
 801ccac:	6861      	ldr	r1, [r4, #4]
 801ccae:	4c1c      	ldr	r4, [pc, #112]	; (801cd20 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801ccb0:	ab04      	add	r3, sp, #16
 801ccb2:	c303      	stmia	r3!, {r0, r1}
 801ccb4:	a804      	add	r0, sp, #16
 801ccb6:	f7f9 fe11 	bl	80168dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ccba:	6820      	ldr	r0, [r4, #0]
 801ccbc:	6803      	ldr	r3, [r0, #0]
 801ccbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ccc0:	4798      	blx	r3
 801ccc2:	2dff      	cmp	r5, #255	; 0xff
 801ccc4:	d016      	beq.n	801ccf4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801ccc6:	f010 0f08 	tst.w	r0, #8
 801ccca:	6820      	ldr	r0, [r4, #0]
 801cccc:	d015      	beq.n	801ccfa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801ccce:	2400      	movs	r4, #0
 801ccd0:	6801      	ldr	r1, [r0, #0]
 801ccd2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801ccd6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ccda:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801ccde:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801cce2:	9401      	str	r4, [sp, #4]
 801cce4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801cce8:	9400      	str	r4, [sp, #0]
 801ccea:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801ccec:	4639      	mov	r1, r7
 801ccee:	47a0      	blx	r4
 801ccf0:	b007      	add	sp, #28
 801ccf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ccf4:	f010 0f02 	tst.w	r0, #2
 801ccf8:	e7e7      	b.n	801ccca <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801ccfa:	6803      	ldr	r3, [r0, #0]
 801ccfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ccfe:	4798      	blx	r3
 801cd00:	4b08      	ldr	r3, [pc, #32]	; (801cd24 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801cd02:	881a      	ldrh	r2, [r3, #0]
 801cd04:	6833      	ldr	r3, [r6, #0]
 801cd06:	e9cd 7500 	strd	r7, r5, [sp]
 801cd0a:	4601      	mov	r1, r0
 801cd0c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801cd0e:	4630      	mov	r0, r6
 801cd10:	ab04      	add	r3, sp, #16
 801cd12:	47a8      	blx	r5
 801cd14:	6820      	ldr	r0, [r4, #0]
 801cd16:	6803      	ldr	r3, [r0, #0]
 801cd18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd1a:	4798      	blx	r3
 801cd1c:	e7e8      	b.n	801ccf0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cd1e:	bf00      	nop
 801cd20:	20008808 	.word	0x20008808
 801cd24:	20008802 	.word	0x20008802

0801cd28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801cd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd2c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801cd30:	9e08      	ldr	r6, [sp, #32]
 801cd32:	4688      	mov	r8, r1
 801cd34:	4614      	mov	r4, r2
 801cd36:	461d      	mov	r5, r3
 801cd38:	2f00      	cmp	r7, #0
 801cd3a:	f000 80a9 	beq.w	801ce90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801cd3e:	4618      	mov	r0, r3
 801cd40:	f7f4 fb75 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 801cd44:	2800      	cmp	r0, #0
 801cd46:	f040 80a3 	bne.w	801ce90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801cd4a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801cd4e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801cd52:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801cd56:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801cd5a:	fb04 1303 	mla	r3, r4, r3, r1
 801cd5e:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801cd62:	4365      	muls	r5, r4
 801cd64:	2fff      	cmp	r7, #255	; 0xff
 801cd66:	eba4 0200 	sub.w	r2, r4, r0
 801cd6a:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801cd6e:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801cd72:	d04a      	beq.n	801ce0a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801cd74:	b2bc      	uxth	r4, r7
 801cd76:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801cd7a:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801cd7e:	fa5f f788 	uxtb.w	r7, r8
 801cd82:	b2f3      	uxtb	r3, r6
 801cd84:	0040      	lsls	r0, r0, #1
 801cd86:	fb0e fe04 	mul.w	lr, lr, r4
 801cd8a:	4367      	muls	r7, r4
 801cd8c:	4363      	muls	r3, r4
 801cd8e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801cd92:	fa1f fc8c 	uxth.w	ip, ip
 801cd96:	42a9      	cmp	r1, r5
 801cd98:	d27a      	bcs.n	801ce90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801cd9a:	eb01 0900 	add.w	r9, r1, r0
 801cd9e:	4549      	cmp	r1, r9
 801cda0:	d231      	bcs.n	801ce06 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 801cda2:	880a      	ldrh	r2, [r1, #0]
 801cda4:	1214      	asrs	r4, r2, #8
 801cda6:	10d6      	asrs	r6, r2, #3
 801cda8:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801cdac:	00d2      	lsls	r2, r2, #3
 801cdae:	b2d2      	uxtb	r2, r2
 801cdb0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801cdb4:	fb14 f40c 	smulbb	r4, r4, ip
 801cdb8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801cdbc:	4474      	add	r4, lr
 801cdbe:	fb12 f20c 	smulbb	r2, r2, ip
 801cdc2:	b2a4      	uxth	r4, r4
 801cdc4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cdc8:	441a      	add	r2, r3
 801cdca:	b292      	uxth	r2, r2
 801cdcc:	f104 0a01 	add.w	sl, r4, #1
 801cdd0:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801cdd4:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801cdd8:	fb16 f60c 	smulbb	r6, r6, ip
 801cddc:	f102 0a01 	add.w	sl, r2, #1
 801cde0:	443e      	add	r6, r7
 801cde2:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801cde6:	b2b6      	uxth	r6, r6
 801cde8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801cdec:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cdf0:	4322      	orrs	r2, r4
 801cdf2:	1c74      	adds	r4, r6, #1
 801cdf4:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801cdf8:	0976      	lsrs	r6, r6, #5
 801cdfa:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801cdfe:	4332      	orrs	r2, r6
 801ce00:	f821 2b02 	strh.w	r2, [r1], #2
 801ce04:	e7cb      	b.n	801cd9e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 801ce06:	4441      	add	r1, r8
 801ce08:	e7c5      	b.n	801cd96 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 801ce0a:	4f22      	ldr	r7, [pc, #136]	; (801ce94 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 801ce0c:	0973      	lsrs	r3, r6, #5
 801ce0e:	ea08 0707 	and.w	r7, r8, r7
 801ce12:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ce16:	433b      	orrs	r3, r7
 801ce18:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801ce1c:	4333      	orrs	r3, r6
 801ce1e:	07e7      	lsls	r7, r4, #31
 801ce20:	b29b      	uxth	r3, r3
 801ce22:	d50b      	bpl.n	801ce3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801ce24:	0040      	lsls	r0, r0, #1
 801ce26:	0052      	lsls	r2, r2, #1
 801ce28:	42a9      	cmp	r1, r5
 801ce2a:	d231      	bcs.n	801ce90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801ce2c:	180c      	adds	r4, r1, r0
 801ce2e:	42a1      	cmp	r1, r4
 801ce30:	d202      	bcs.n	801ce38 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 801ce32:	f821 3b02 	strh.w	r3, [r1], #2
 801ce36:	e7fa      	b.n	801ce2e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 801ce38:	4411      	add	r1, r2
 801ce3a:	e7f5      	b.n	801ce28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 801ce3c:	078e      	lsls	r6, r1, #30
 801ce3e:	d008      	beq.n	801ce52 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801ce40:	0066      	lsls	r6, r4, #1
 801ce42:	460a      	mov	r2, r1
 801ce44:	42aa      	cmp	r2, r5
 801ce46:	d202      	bcs.n	801ce4e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 801ce48:	8013      	strh	r3, [r2, #0]
 801ce4a:	4432      	add	r2, r6
 801ce4c:	e7fa      	b.n	801ce44 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 801ce4e:	3102      	adds	r1, #2
 801ce50:	3801      	subs	r0, #1
 801ce52:	07c2      	lsls	r2, r0, #31
 801ce54:	d50b      	bpl.n	801ce6e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801ce56:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801ce5a:	3a01      	subs	r2, #1
 801ce5c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801ce60:	0066      	lsls	r6, r4, #1
 801ce62:	42aa      	cmp	r2, r5
 801ce64:	d202      	bcs.n	801ce6c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801ce66:	8013      	strh	r3, [r2, #0]
 801ce68:	4432      	add	r2, r6
 801ce6a:	e7fa      	b.n	801ce62 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 801ce6c:	3801      	subs	r0, #1
 801ce6e:	b178      	cbz	r0, 801ce90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801ce70:	1040      	asrs	r0, r0, #1
 801ce72:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801ce76:	0080      	lsls	r0, r0, #2
 801ce78:	0064      	lsls	r4, r4, #1
 801ce7a:	42a9      	cmp	r1, r5
 801ce7c:	d208      	bcs.n	801ce90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801ce7e:	180e      	adds	r6, r1, r0
 801ce80:	460a      	mov	r2, r1
 801ce82:	42b2      	cmp	r2, r6
 801ce84:	d202      	bcs.n	801ce8c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 801ce86:	f842 3b04 	str.w	r3, [r2], #4
 801ce8a:	e7fa      	b.n	801ce82 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 801ce8c:	4421      	add	r1, r4
 801ce8e:	e7f4      	b.n	801ce7a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 801ce90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce94:	00fff800 	.word	0x00fff800

0801ce98 <_ZN8touchgfx8LCD16bppC1Ev>:
 801ce98:	2200      	movs	r2, #0
 801ce9a:	4910      	ldr	r1, [pc, #64]	; (801cedc <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801ce9c:	6042      	str	r2, [r0, #4]
 801ce9e:	6001      	str	r1, [r0, #0]
 801cea0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801cea4:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801cea8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801ceac:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801ceb0:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801ceb4:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801ceb8:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801cebc:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801cec0:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801cec4:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801cec8:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801cecc:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801ced0:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801ced4:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801ced8:	4770      	bx	lr
 801ceda:	bf00      	nop
 801cedc:	0802b2c8 	.word	0x0802b2c8

0801cee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801cee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cee4:	460d      	mov	r5, r1
 801cee6:	b08d      	sub	sp, #52	; 0x34
 801cee8:	4604      	mov	r4, r0
 801ceea:	6808      	ldr	r0, [r1, #0]
 801ceec:	6849      	ldr	r1, [r1, #4]
 801ceee:	4699      	mov	r9, r3
 801cef0:	ab08      	add	r3, sp, #32
 801cef2:	c303      	stmia	r3!, {r0, r1}
 801cef4:	6810      	ldr	r0, [r2, #0]
 801cef6:	6851      	ldr	r1, [r2, #4]
 801cef8:	ab0a      	add	r3, sp, #40	; 0x28
 801cefa:	c303      	stmia	r3!, {r0, r1}
 801cefc:	a808      	add	r0, sp, #32
 801cefe:	f7f9 fced 	bl	80168dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cf02:	4629      	mov	r1, r5
 801cf04:	a80a      	add	r0, sp, #40	; 0x28
 801cf06:	f7f9 fd11 	bl	801692c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cf0a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801cf0e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801cf12:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801cf16:	4d63      	ldr	r5, [pc, #396]	; (801d0a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801cf18:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801cf1c:	6828      	ldr	r0, [r5, #0]
 801cf1e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801cf22:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cf26:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801cf2a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801cf2e:	440a      	add	r2, r1
 801cf30:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801cf34:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801cf38:	4413      	add	r3, r2
 801cf3a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801cf3e:	6803      	ldr	r3, [r0, #0]
 801cf40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf42:	4798      	blx	r3
 801cf44:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801cf48:	d119      	bne.n	801cf7e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801cf4a:	f010 0f20 	tst.w	r0, #32
 801cf4e:	6828      	ldr	r0, [r5, #0]
 801cf50:	d018      	beq.n	801cf84 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801cf52:	2500      	movs	r5, #0
 801cf54:	6801      	ldr	r1, [r0, #0]
 801cf56:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801cf5a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801cf5e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801cf62:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801cf66:	9502      	str	r5, [sp, #8]
 801cf68:	b2b6      	uxth	r6, r6
 801cf6a:	fa1f f588 	uxth.w	r5, r8
 801cf6e:	9601      	str	r6, [sp, #4]
 801cf70:	9500      	str	r5, [sp, #0]
 801cf72:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801cf74:	4621      	mov	r1, r4
 801cf76:	47a8      	blx	r5
 801cf78:	b00d      	add	sp, #52	; 0x34
 801cf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801cf82:	e7e4      	b.n	801cf4e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801cf84:	6803      	ldr	r3, [r0, #0]
 801cf86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf88:	4798      	blx	r3
 801cf8a:	4947      	ldr	r1, [pc, #284]	; (801d0a8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801cf8c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801cf90:	880b      	ldrh	r3, [r1, #0]
 801cf92:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801cf96:	fb03 5202 	mla	r2, r3, r2, r5
 801cf9a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cf9e:	4373      	muls	r3, r6
 801cfa0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cfa4:	9307      	str	r3, [sp, #28]
 801cfa6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801cfaa:	9306      	str	r3, [sp, #24]
 801cfac:	468a      	mov	sl, r1
 801cfae:	9b07      	ldr	r3, [sp, #28]
 801cfb0:	4298      	cmp	r0, r3
 801cfb2:	d270      	bcs.n	801d096 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801cfb4:	9b06      	ldr	r3, [sp, #24]
 801cfb6:	4621      	mov	r1, r4
 801cfb8:	eb00 0b03 	add.w	fp, r0, r3
 801cfbc:	4558      	cmp	r0, fp
 801cfbe:	d25d      	bcs.n	801d07c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801cfc0:	f851 4b04 	ldr.w	r4, [r1], #4
 801cfc4:	0e23      	lsrs	r3, r4, #24
 801cfc6:	d014      	beq.n	801cff2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801cfc8:	2bff      	cmp	r3, #255	; 0xff
 801cfca:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801cfce:	d112      	bne.n	801cff6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801cfd0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801cfd4:	d10f      	bne.n	801cff6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801cfd6:	0963      	lsrs	r3, r4, #5
 801cfd8:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801cfdc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cfe0:	f02c 0c07 	bic.w	ip, ip, #7
 801cfe4:	ea43 0c0c 	orr.w	ip, r3, ip
 801cfe8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801cfec:	ea4c 0404 	orr.w	r4, ip, r4
 801cff0:	8004      	strh	r4, [r0, #0]
 801cff2:	3002      	adds	r0, #2
 801cff4:	e7e2      	b.n	801cfbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801cff6:	fb09 f303 	mul.w	r3, r9, r3
 801cffa:	8807      	ldrh	r7, [r0, #0]
 801cffc:	1c5a      	adds	r2, r3, #1
 801cffe:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801d002:	1212      	asrs	r2, r2, #8
 801d004:	123e      	asrs	r6, r7, #8
 801d006:	b293      	uxth	r3, r2
 801d008:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801d00c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d010:	43d2      	mvns	r2, r2
 801d012:	b2d2      	uxtb	r2, r2
 801d014:	10fd      	asrs	r5, r7, #3
 801d016:	fb1e fe03 	smulbb	lr, lr, r3
 801d01a:	00ff      	lsls	r7, r7, #3
 801d01c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d020:	fb06 e602 	mla	r6, r6, r2, lr
 801d024:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d028:	b2ff      	uxtb	r7, r7
 801d02a:	fa5f fc8c 	uxtb.w	ip, ip
 801d02e:	b2e4      	uxtb	r4, r4
 801d030:	b2b6      	uxth	r6, r6
 801d032:	fb1c fc03 	smulbb	ip, ip, r3
 801d036:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d03a:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801d03e:	fb14 f403 	smulbb	r4, r4, r3
 801d042:	fb05 c502 	mla	r5, r5, r2, ip
 801d046:	f106 0e01 	add.w	lr, r6, #1
 801d04a:	fb07 4702 	mla	r7, r7, r2, r4
 801d04e:	b2ad      	uxth	r5, r5
 801d050:	b2bf      	uxth	r7, r7
 801d052:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801d056:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801d05a:	f105 0c01 	add.w	ip, r5, #1
 801d05e:	1c7e      	adds	r6, r7, #1
 801d060:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801d064:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d068:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d06c:	096d      	lsrs	r5, r5, #5
 801d06e:	ea46 060e 	orr.w	r6, r6, lr
 801d072:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d076:	432e      	orrs	r6, r5
 801d078:	8006      	strh	r6, [r0, #0]
 801d07a:	e7ba      	b.n	801cff2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801d07c:	f8ba 3000 	ldrh.w	r3, [sl]
 801d080:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801d084:	eba3 0308 	sub.w	r3, r3, r8
 801d088:	eba4 0408 	sub.w	r4, r4, r8
 801d08c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d090:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801d094:	e78b      	b.n	801cfae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801d096:	4b03      	ldr	r3, [pc, #12]	; (801d0a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801d098:	6818      	ldr	r0, [r3, #0]
 801d09a:	6803      	ldr	r3, [r0, #0]
 801d09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d09e:	4798      	blx	r3
 801d0a0:	e76a      	b.n	801cf78 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801d0a2:	bf00      	nop
 801d0a4:	20008808 	.word	0x20008808
 801d0a8:	20008802 	.word	0x20008802

0801d0ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801d0ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d0b0:	460c      	mov	r4, r1
 801d0b2:	b085      	sub	sp, #20
 801d0b4:	6810      	ldr	r0, [r2, #0]
 801d0b6:	6851      	ldr	r1, [r2, #4]
 801d0b8:	466d      	mov	r5, sp
 801d0ba:	c503      	stmia	r5!, {r0, r1}
 801d0bc:	6818      	ldr	r0, [r3, #0]
 801d0be:	6859      	ldr	r1, [r3, #4]
 801d0c0:	4616      	mov	r6, r2
 801d0c2:	c503      	stmia	r5!, {r0, r1}
 801d0c4:	4668      	mov	r0, sp
 801d0c6:	f7f9 fc09 	bl	80168dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d0ca:	4631      	mov	r1, r6
 801d0cc:	a802      	add	r0, sp, #8
 801d0ce:	f7f9 fc2d 	bl	801692c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d0d2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801d0d6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801d0da:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801d0de:	4d28      	ldr	r5, [pc, #160]	; (801d180 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801d0e0:	4e28      	ldr	r6, [pc, #160]	; (801d184 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801d0e2:	6828      	ldr	r0, [r5, #0]
 801d0e4:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d0e8:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801d0ec:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d0f0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d0f4:	f8bd 1000 	ldrh.w	r1, [sp]
 801d0f8:	440a      	add	r2, r1
 801d0fa:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d0fe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801d102:	4413      	add	r3, r2
 801d104:	f8ad 300a 	strh.w	r3, [sp, #10]
 801d108:	6803      	ldr	r3, [r0, #0]
 801d10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d10c:	4798      	blx	r3
 801d10e:	8833      	ldrh	r3, [r6, #0]
 801d110:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801d114:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801d118:	f8df e06c 	ldr.w	lr, [pc, #108]	; 801d188 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801d11c:	fb03 1202 	mla	r2, r3, r2, r1
 801d120:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d124:	fb08 f303 	mul.w	r3, r8, r3
 801d128:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d12c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801d130:	4298      	cmp	r0, r3
 801d132:	d21d      	bcs.n	801d170 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801d134:	eb00 080c 	add.w	r8, r0, ip
 801d138:	4540      	cmp	r0, r8
 801d13a:	d20f      	bcs.n	801d15c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801d13c:	f854 1b04 	ldr.w	r1, [r4], #4
 801d140:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801d144:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801d148:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d14c:	ea42 0209 	orr.w	r2, r2, r9
 801d150:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801d154:	430a      	orrs	r2, r1
 801d156:	f820 2b02 	strh.w	r2, [r0], #2
 801d15a:	e7ed      	b.n	801d138 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801d15c:	8832      	ldrh	r2, [r6, #0]
 801d15e:	1bd2      	subs	r2, r2, r7
 801d160:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d164:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801d168:	1bd2      	subs	r2, r2, r7
 801d16a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801d16e:	e7df      	b.n	801d130 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801d170:	6828      	ldr	r0, [r5, #0]
 801d172:	6803      	ldr	r3, [r0, #0]
 801d174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d176:	4798      	blx	r3
 801d178:	b005      	add	sp, #20
 801d17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d17e:	bf00      	nop
 801d180:	20008808 	.word	0x20008808
 801d184:	20008802 	.word	0x20008802
 801d188:	fffff800 	.word	0xfffff800

0801d18c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801d18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d190:	460e      	mov	r6, r1
 801d192:	b08e      	sub	sp, #56	; 0x38
 801d194:	4604      	mov	r4, r0
 801d196:	6808      	ldr	r0, [r1, #0]
 801d198:	6849      	ldr	r1, [r1, #4]
 801d19a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 801d374 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801d19e:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801d378 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801d1a2:	461d      	mov	r5, r3
 801d1a4:	ab0a      	add	r3, sp, #40	; 0x28
 801d1a6:	c303      	stmia	r3!, {r0, r1}
 801d1a8:	6810      	ldr	r0, [r2, #0]
 801d1aa:	6851      	ldr	r1, [r2, #4]
 801d1ac:	ab0c      	add	r3, sp, #48	; 0x30
 801d1ae:	c303      	stmia	r3!, {r0, r1}
 801d1b0:	a80a      	add	r0, sp, #40	; 0x28
 801d1b2:	f7f9 fb93 	bl	80168dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d1b6:	4631      	mov	r1, r6
 801d1b8:	a80c      	add	r0, sp, #48	; 0x30
 801d1ba:	f7f9 fbb7 	bl	801692c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d1be:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d1c2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d1c6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d1ca:	f8d8 0000 	ldr.w	r0, [r8]
 801d1ce:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801d1d2:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801d1d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d1da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d1de:	440c      	add	r4, r1
 801d1e0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801d1e4:	440a      	add	r2, r1
 801d1e6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d1ea:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801d1ee:	4413      	add	r3, r2
 801d1f0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d1f4:	6803      	ldr	r3, [r0, #0]
 801d1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d1f8:	4798      	blx	r3
 801d1fa:	2dff      	cmp	r5, #255	; 0xff
 801d1fc:	d124      	bne.n	801d248 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801d1fe:	f010 0f01 	tst.w	r0, #1
 801d202:	f8d8 0000 	ldr.w	r0, [r8]
 801d206:	d022      	beq.n	801d24e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801d208:	2100      	movs	r1, #0
 801d20a:	f8d0 c000 	ldr.w	ip, [r0]
 801d20e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801d212:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801d216:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801d21a:	f04f 0e01 	mov.w	lr, #1
 801d21e:	f8cd e018 	str.w	lr, [sp, #24]
 801d222:	f8b9 e000 	ldrh.w	lr, [r9]
 801d226:	9503      	str	r5, [sp, #12]
 801d228:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801d22c:	b2b6      	uxth	r6, r6
 801d22e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d232:	9102      	str	r1, [sp, #8]
 801d234:	b2bf      	uxth	r7, r7
 801d236:	9601      	str	r6, [sp, #4]
 801d238:	9700      	str	r7, [sp, #0]
 801d23a:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801d23e:	4621      	mov	r1, r4
 801d240:	47a8      	blx	r5
 801d242:	b00e      	add	sp, #56	; 0x38
 801d244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d248:	f010 0f04 	tst.w	r0, #4
 801d24c:	e7d9      	b.n	801d202 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801d24e:	6803      	ldr	r3, [r0, #0]
 801d250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d252:	4798      	blx	r3
 801d254:	f8b9 3000 	ldrh.w	r3, [r9]
 801d258:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801d25c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d260:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d264:	fb03 1202 	mla	r2, r3, r2, r1
 801d268:	ebac 0c07 	sub.w	ip, ip, r7
 801d26c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d270:	435e      	muls	r6, r3
 801d272:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801d276:	2dff      	cmp	r5, #255	; 0xff
 801d278:	eba3 0707 	sub.w	r7, r3, r7
 801d27c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d280:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d284:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801d288:	d049      	beq.n	801d31e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801d28a:	43eb      	mvns	r3, r5
 801d28c:	fa1f f985 	uxth.w	r9, r5
 801d290:	b2db      	uxtb	r3, r3
 801d292:	42b0      	cmp	r0, r6
 801d294:	d266      	bcs.n	801d364 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d296:	eb00 0a0e 	add.w	sl, r0, lr
 801d29a:	4550      	cmp	r0, sl
 801d29c:	4621      	mov	r1, r4
 801d29e:	f104 0403 	add.w	r4, r4, #3
 801d2a2:	d25b      	bcs.n	801d35c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801d2a4:	8802      	ldrh	r2, [r0, #0]
 801d2a6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d2aa:	ea4f 2822 	mov.w	r8, r2, asr #8
 801d2ae:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801d2b2:	fb11 f109 	smulbb	r1, r1, r9
 801d2b6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801d2ba:	10d5      	asrs	r5, r2, #3
 801d2bc:	fb08 1803 	mla	r8, r8, r3, r1
 801d2c0:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801d2c4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d2c8:	fb11 f109 	smulbb	r1, r1, r9
 801d2cc:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d2d0:	fb05 1503 	mla	r5, r5, r3, r1
 801d2d4:	00d2      	lsls	r2, r2, #3
 801d2d6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d2da:	b2d2      	uxtb	r2, r2
 801d2dc:	fb11 f109 	smulbb	r1, r1, r9
 801d2e0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d2e4:	fa1f f888 	uxth.w	r8, r8
 801d2e8:	fb02 1203 	mla	r2, r2, r3, r1
 801d2ec:	b292      	uxth	r2, r2
 801d2ee:	f108 0101 	add.w	r1, r8, #1
 801d2f2:	b2ad      	uxth	r5, r5
 801d2f4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801d2f8:	1c51      	adds	r1, r2, #1
 801d2fa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d2fe:	1c69      	adds	r1, r5, #1
 801d300:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801d304:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801d308:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d30c:	096d      	lsrs	r5, r5, #5
 801d30e:	ea42 0208 	orr.w	r2, r2, r8
 801d312:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d316:	432a      	orrs	r2, r5
 801d318:	f820 2b02 	strh.w	r2, [r0], #2
 801d31c:	e7bd      	b.n	801d29a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801d31e:	4a14      	ldr	r2, [pc, #80]	; (801d370 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801d320:	42b0      	cmp	r0, r6
 801d322:	d21f      	bcs.n	801d364 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d324:	eb00 050e 	add.w	r5, r0, lr
 801d328:	42a8      	cmp	r0, r5
 801d32a:	4621      	mov	r1, r4
 801d32c:	f104 0403 	add.w	r4, r4, #3
 801d330:	d210      	bcs.n	801d354 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801d332:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801d336:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d33a:	00db      	lsls	r3, r3, #3
 801d33c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801d340:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d344:	430b      	orrs	r3, r1
 801d346:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d34a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801d34e:	f820 3b02 	strh.w	r3, [r0], #2
 801d352:	e7e9      	b.n	801d328 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801d354:	4438      	add	r0, r7
 801d356:	eb01 040c 	add.w	r4, r1, ip
 801d35a:	e7e1      	b.n	801d320 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801d35c:	4438      	add	r0, r7
 801d35e:	eb01 040c 	add.w	r4, r1, ip
 801d362:	e796      	b.n	801d292 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801d364:	4b03      	ldr	r3, [pc, #12]	; (801d374 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801d366:	6818      	ldr	r0, [r3, #0]
 801d368:	6803      	ldr	r3, [r0, #0]
 801d36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d36c:	4798      	blx	r3
 801d36e:	e768      	b.n	801d242 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801d370:	fffff800 	.word	0xfffff800
 801d374:	20008808 	.word	0x20008808
 801d378:	20008802 	.word	0x20008802

0801d37c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d37c:	b4f0      	push	{r4, r5, r6, r7}
 801d37e:	4616      	mov	r6, r2
 801d380:	2e01      	cmp	r6, #1
 801d382:	461c      	mov	r4, r3
 801d384:	460d      	mov	r5, r1
 801d386:	9a04      	ldr	r2, [sp, #16]
 801d388:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d38c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801d390:	d012      	beq.n	801d3b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801d392:	d303      	bcc.n	801d39c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801d394:	2e02      	cmp	r6, #2
 801d396:	d00a      	beq.n	801d3ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801d398:	bcf0      	pop	{r4, r5, r6, r7}
 801d39a:	4770      	bx	lr
 801d39c:	6805      	ldr	r5, [r0, #0]
 801d39e:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801d3a2:	68ed      	ldr	r5, [r5, #12]
 801d3a4:	4613      	mov	r3, r2
 801d3a6:	46ac      	mov	ip, r5
 801d3a8:	4622      	mov	r2, r4
 801d3aa:	bcf0      	pop	{r4, r5, r6, r7}
 801d3ac:	4760      	bx	ip
 801d3ae:	4621      	mov	r1, r4
 801d3b0:	4628      	mov	r0, r5
 801d3b2:	bcf0      	pop	{r4, r5, r6, r7}
 801d3b4:	f7ff bd94 	b.w	801cee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d3b8:	4621      	mov	r1, r4
 801d3ba:	4628      	mov	r0, r5
 801d3bc:	bcf0      	pop	{r4, r5, r6, r7}
 801d3be:	f7ff bee5 	b.w	801d18c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801d3c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3c8:	4681      	mov	r9, r0
 801d3ca:	b093      	sub	sp, #76	; 0x4c
 801d3cc:	6810      	ldr	r0, [r2, #0]
 801d3ce:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801d3d2:	4f6d      	ldr	r7, [pc, #436]	; (801d588 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801d3d4:	4688      	mov	r8, r1
 801d3d6:	6851      	ldr	r1, [r2, #4]
 801d3d8:	ac0e      	add	r4, sp, #56	; 0x38
 801d3da:	c403      	stmia	r4!, {r0, r1}
 801d3dc:	6818      	ldr	r0, [r3, #0]
 801d3de:	6859      	ldr	r1, [r3, #4]
 801d3e0:	ac10      	add	r4, sp, #64	; 0x40
 801d3e2:	4616      	mov	r6, r2
 801d3e4:	c403      	stmia	r4!, {r0, r1}
 801d3e6:	a80e      	add	r0, sp, #56	; 0x38
 801d3e8:	f7f9 fa78 	bl	80168dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3ec:	4631      	mov	r1, r6
 801d3ee:	a810      	add	r0, sp, #64	; 0x40
 801d3f0:	f7f9 fa9c 	bl	801692c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d3f4:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d3f8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d3fc:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d400:	4e62      	ldr	r6, [pc, #392]	; (801d58c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801d402:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801d406:	6830      	ldr	r0, [r6, #0]
 801d408:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801d40c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d410:	4489      	add	r9, r1
 801d412:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d416:	440a      	add	r2, r1
 801d418:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d41c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d420:	4413      	add	r3, r2
 801d422:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d426:	6803      	ldr	r3, [r0, #0]
 801d428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d42a:	4798      	blx	r3
 801d42c:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d430:	6830      	ldr	r0, [r6, #0]
 801d432:	d01d      	beq.n	801d470 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801d434:	2200      	movs	r2, #0
 801d436:	6801      	ldr	r1, [r0, #0]
 801d438:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d43c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d440:	220b      	movs	r2, #11
 801d442:	9207      	str	r2, [sp, #28]
 801d444:	883a      	ldrh	r2, [r7, #0]
 801d446:	9206      	str	r2, [sp, #24]
 801d448:	2201      	movs	r2, #1
 801d44a:	e9cd a204 	strd	sl, r2, [sp, #16]
 801d44e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801d452:	9203      	str	r2, [sp, #12]
 801d454:	b2a4      	uxth	r4, r4
 801d456:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d45a:	9200      	str	r2, [sp, #0]
 801d45c:	b2ad      	uxth	r5, r5
 801d45e:	9502      	str	r5, [sp, #8]
 801d460:	9401      	str	r4, [sp, #4]
 801d462:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801d464:	4642      	mov	r2, r8
 801d466:	4649      	mov	r1, r9
 801d468:	47a0      	blx	r4
 801d46a:	b013      	add	sp, #76	; 0x4c
 801d46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d470:	6803      	ldr	r3, [r0, #0]
 801d472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d474:	4798      	blx	r3
 801d476:	883b      	ldrh	r3, [r7, #0]
 801d478:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801d47c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801d480:	fb03 1202 	mla	r2, r3, r2, r1
 801d484:	435d      	muls	r5, r3
 801d486:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d48a:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801d48e:	920c      	str	r2, [sp, #48]	; 0x30
 801d490:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801d494:	1b12      	subs	r2, r2, r4
 801d496:	920d      	str	r2, [sp, #52]	; 0x34
 801d498:	0062      	lsls	r2, r4, #1
 801d49a:	1b1c      	subs	r4, r3, r4
 801d49c:	0063      	lsls	r3, r4, #1
 801d49e:	920a      	str	r2, [sp, #40]	; 0x28
 801d4a0:	930b      	str	r3, [sp, #44]	; 0x2c
 801d4a2:	f04f 0e04 	mov.w	lr, #4
 801d4a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d4a8:	4298      	cmp	r0, r3
 801d4aa:	d266      	bcs.n	801d57a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801d4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d4ae:	eb00 0b03 	add.w	fp, r0, r3
 801d4b2:	4558      	cmp	r0, fp
 801d4b4:	d25c      	bcs.n	801d570 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801d4b6:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d4ba:	fb1e e303 	smlabb	r3, lr, r3, lr
 801d4be:	f858 2003 	ldr.w	r2, [r8, r3]
 801d4c2:	0e11      	lsrs	r1, r2, #24
 801d4c4:	d012      	beq.n	801d4ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d4c6:	29ff      	cmp	r1, #255	; 0xff
 801d4c8:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801d4cc:	d110      	bne.n	801d4f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d4ce:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d4d2:	d10d      	bne.n	801d4f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d4d4:	0953      	lsrs	r3, r2, #5
 801d4d6:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801d4da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d4de:	f027 0707 	bic.w	r7, r7, #7
 801d4e2:	431f      	orrs	r7, r3
 801d4e4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d4e8:	433a      	orrs	r2, r7
 801d4ea:	8002      	strh	r2, [r0, #0]
 801d4ec:	3002      	adds	r0, #2
 801d4ee:	e7e0      	b.n	801d4b2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801d4f0:	fb0a f101 	mul.w	r1, sl, r1
 801d4f4:	8806      	ldrh	r6, [r0, #0]
 801d4f6:	1c4b      	adds	r3, r1, #1
 801d4f8:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801d4fc:	1235      	asrs	r5, r6, #8
 801d4fe:	10f4      	asrs	r4, r6, #3
 801d500:	121b      	asrs	r3, r3, #8
 801d502:	00f6      	lsls	r6, r6, #3
 801d504:	b299      	uxth	r1, r3
 801d506:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801d50a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d50e:	b2f6      	uxtb	r6, r6
 801d510:	43db      	mvns	r3, r3
 801d512:	b2d2      	uxtb	r2, r2
 801d514:	b2db      	uxtb	r3, r3
 801d516:	fb1c fc01 	smulbb	ip, ip, r1
 801d51a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801d51e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d522:	fb12 f201 	smulbb	r2, r2, r1
 801d526:	fb05 c503 	mla	r5, r5, r3, ip
 801d52a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d52e:	b2ff      	uxtb	r7, r7
 801d530:	fb06 2203 	mla	r2, r6, r3, r2
 801d534:	b2ad      	uxth	r5, r5
 801d536:	fb17 f701 	smulbb	r7, r7, r1
 801d53a:	b292      	uxth	r2, r2
 801d53c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801d540:	fb04 7403 	mla	r4, r4, r3, r7
 801d544:	f105 0c01 	add.w	ip, r5, #1
 801d548:	1c57      	adds	r7, r2, #1
 801d54a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d54e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d552:	b2a4      	uxth	r4, r4
 801d554:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d558:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d55c:	433d      	orrs	r5, r7
 801d55e:	1c67      	adds	r7, r4, #1
 801d560:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801d564:	0964      	lsrs	r4, r4, #5
 801d566:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d56a:	4325      	orrs	r5, r4
 801d56c:	8005      	strh	r5, [r0, #0]
 801d56e:	e7bd      	b.n	801d4ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d572:	4418      	add	r0, r3
 801d574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d576:	4499      	add	r9, r3
 801d578:	e795      	b.n	801d4a6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801d57a:	4b04      	ldr	r3, [pc, #16]	; (801d58c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801d57c:	6818      	ldr	r0, [r3, #0]
 801d57e:	6803      	ldr	r3, [r0, #0]
 801d580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d582:	4798      	blx	r3
 801d584:	e771      	b.n	801d46a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801d586:	bf00      	nop
 801d588:	20008802 	.word	0x20008802
 801d58c:	20008808 	.word	0x20008808

0801d590 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801d590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d594:	b087      	sub	sp, #28
 801d596:	4680      	mov	r8, r0
 801d598:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801d59c:	460d      	mov	r5, r1
 801d59e:	4614      	mov	r4, r2
 801d5a0:	2e00      	cmp	r6, #0
 801d5a2:	f000 80b9 	beq.w	801d718 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801d5a6:	6810      	ldr	r0, [r2, #0]
 801d5a8:	6851      	ldr	r1, [r2, #4]
 801d5aa:	af02      	add	r7, sp, #8
 801d5ac:	c703      	stmia	r7!, {r0, r1}
 801d5ae:	6818      	ldr	r0, [r3, #0]
 801d5b0:	6859      	ldr	r1, [r3, #4]
 801d5b2:	af04      	add	r7, sp, #16
 801d5b4:	c703      	stmia	r7!, {r0, r1}
 801d5b6:	a802      	add	r0, sp, #8
 801d5b8:	f7f9 f990 	bl	80168dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d5bc:	4621      	mov	r1, r4
 801d5be:	a804      	add	r0, sp, #16
 801d5c0:	f7f9 f9b4 	bl	801692c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d5c4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d5c8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d5cc:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801d5d0:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801d5d4:	fb14 2103 	smlabb	r1, r4, r3, r2
 801d5d8:	eb08 0401 	add.w	r4, r8, r1
 801d5dc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d5e0:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d5e4:	440a      	add	r2, r1
 801d5e6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d5ea:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d5ee:	4413      	add	r3, r2
 801d5f0:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d5f4:	4b4a      	ldr	r3, [pc, #296]	; (801d720 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801d5f6:	6818      	ldr	r0, [r3, #0]
 801d5f8:	6803      	ldr	r3, [r0, #0]
 801d5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d5fc:	4798      	blx	r3
 801d5fe:	4b49      	ldr	r3, [pc, #292]	; (801d724 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801d600:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801d604:	881a      	ldrh	r2, [r3, #0]
 801d606:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801d60a:	2eff      	cmp	r6, #255	; 0xff
 801d60c:	fb02 c101 	mla	r1, r2, r1, ip
 801d610:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801d614:	fb02 f207 	mul.w	r2, r2, r7
 801d618:	f105 0104 	add.w	r1, r5, #4
 801d61c:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801d620:	461d      	mov	r5, r3
 801d622:	d05a      	beq.n	801d6da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801d624:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801d628:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d62c:	b2b6      	uxth	r6, r6
 801d62e:	fa1f fe8e 	uxth.w	lr, lr
 801d632:	9301      	str	r3, [sp, #4]
 801d634:	4282      	cmp	r2, r0
 801d636:	d96a      	bls.n	801d70e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d638:	eb00 0b0a 	add.w	fp, r0, sl
 801d63c:	4583      	cmp	fp, r0
 801d63e:	d940      	bls.n	801d6c2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801d640:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d644:	8805      	ldrh	r5, [r0, #0]
 801d646:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d64a:	122f      	asrs	r7, r5, #8
 801d64c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d650:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d654:	fb17 f70e 	smulbb	r7, r7, lr
 801d658:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d65c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d660:	00ed      	lsls	r5, r5, #3
 801d662:	fb0c 7c06 	mla	ip, ip, r6, r7
 801d666:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d66a:	10df      	asrs	r7, r3, #3
 801d66c:	b2ed      	uxtb	r5, r5
 801d66e:	00db      	lsls	r3, r3, #3
 801d670:	fa1f fc8c 	uxth.w	ip, ip
 801d674:	fb19 f90e 	smulbb	r9, r9, lr
 801d678:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d67c:	b2db      	uxtb	r3, r3
 801d67e:	fb15 f50e 	smulbb	r5, r5, lr
 801d682:	fb07 9706 	mla	r7, r7, r6, r9
 801d686:	fb03 5306 	mla	r3, r3, r6, r5
 801d68a:	f10c 0901 	add.w	r9, ip, #1
 801d68e:	b29b      	uxth	r3, r3
 801d690:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801d694:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801d698:	f103 0c01 	add.w	ip, r3, #1
 801d69c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d6a0:	b2bf      	uxth	r7, r7
 801d6a2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d6a6:	ea4c 0c09 	orr.w	ip, ip, r9
 801d6aa:	f107 0901 	add.w	r9, r7, #1
 801d6ae:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d6b2:	097f      	lsrs	r7, r7, #5
 801d6b4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d6b8:	ea4c 0c07 	orr.w	ip, ip, r7
 801d6bc:	f820 cb02 	strh.w	ip, [r0], #2
 801d6c0:	e7bc      	b.n	801d63c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801d6c2:	9b01      	ldr	r3, [sp, #4]
 801d6c4:	881b      	ldrh	r3, [r3, #0]
 801d6c6:	eba3 0308 	sub.w	r3, r3, r8
 801d6ca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d6ce:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d6d2:	eba3 0308 	sub.w	r3, r3, r8
 801d6d6:	441c      	add	r4, r3
 801d6d8:	e7ac      	b.n	801d634 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801d6da:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d6de:	4282      	cmp	r2, r0
 801d6e0:	d915      	bls.n	801d70e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d6e2:	eb00 060a 	add.w	r6, r0, sl
 801d6e6:	4286      	cmp	r6, r0
 801d6e8:	d906      	bls.n	801d6f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801d6ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d6ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d6f2:	f820 3b02 	strh.w	r3, [r0], #2
 801d6f6:	e7f6      	b.n	801d6e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801d6f8:	882b      	ldrh	r3, [r5, #0]
 801d6fa:	eba3 0308 	sub.w	r3, r3, r8
 801d6fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d702:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d706:	eba3 0308 	sub.w	r3, r3, r8
 801d70a:	441c      	add	r4, r3
 801d70c:	e7e7      	b.n	801d6de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801d70e:	4b04      	ldr	r3, [pc, #16]	; (801d720 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801d710:	6818      	ldr	r0, [r3, #0]
 801d712:	6803      	ldr	r3, [r0, #0]
 801d714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d716:	4798      	blx	r3
 801d718:	b007      	add	sp, #28
 801d71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d71e:	bf00      	nop
 801d720:	20008808 	.word	0x20008808
 801d724:	20008802 	.word	0x20008802

0801d728 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d72c:	b091      	sub	sp, #68	; 0x44
 801d72e:	4680      	mov	r8, r0
 801d730:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801d734:	460f      	mov	r7, r1
 801d736:	4614      	mov	r4, r2
 801d738:	2d00      	cmp	r5, #0
 801d73a:	d051      	beq.n	801d7e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d73c:	6810      	ldr	r0, [r2, #0]
 801d73e:	6851      	ldr	r1, [r2, #4]
 801d740:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801d944 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801d744:	ae0c      	add	r6, sp, #48	; 0x30
 801d746:	c603      	stmia	r6!, {r0, r1}
 801d748:	6818      	ldr	r0, [r3, #0]
 801d74a:	6859      	ldr	r1, [r3, #4]
 801d74c:	ae0e      	add	r6, sp, #56	; 0x38
 801d74e:	c603      	stmia	r6!, {r0, r1}
 801d750:	a80c      	add	r0, sp, #48	; 0x30
 801d752:	f7f9 f8c3 	bl	80168dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d756:	4621      	mov	r1, r4
 801d758:	a80e      	add	r0, sp, #56	; 0x38
 801d75a:	f7f9 f8e7 	bl	801692c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d75e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d762:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d766:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d76a:	f8d9 0000 	ldr.w	r0, [r9]
 801d76e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801d772:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801d776:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d77a:	eb08 0401 	add.w	r4, r8, r1
 801d77e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d782:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801d948 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801d786:	440a      	add	r2, r1
 801d788:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d78c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d790:	4413      	add	r3, r2
 801d792:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d796:	6803      	ldr	r3, [r0, #0]
 801d798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d79a:	4798      	blx	r3
 801d79c:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d7a0:	f8d9 0000 	ldr.w	r0, [r9]
 801d7a4:	d01f      	beq.n	801d7e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d7a6:	2200      	movs	r2, #0
 801d7a8:	6801      	ldr	r1, [r0, #0]
 801d7aa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d7ae:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d7b2:	220b      	movs	r2, #11
 801d7b4:	9207      	str	r2, [sp, #28]
 801d7b6:	f8b8 2000 	ldrh.w	r2, [r8]
 801d7ba:	9206      	str	r2, [sp, #24]
 801d7bc:	2201      	movs	r2, #1
 801d7be:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801d7c2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d7c6:	9203      	str	r2, [sp, #12]
 801d7c8:	fa1f f28a 	uxth.w	r2, sl
 801d7cc:	9202      	str	r2, [sp, #8]
 801d7ce:	b2b6      	uxth	r6, r6
 801d7d0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d7d4:	9200      	str	r2, [sp, #0]
 801d7d6:	9601      	str	r6, [sp, #4]
 801d7d8:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801d7da:	463a      	mov	r2, r7
 801d7dc:	4621      	mov	r1, r4
 801d7de:	47a8      	blx	r5
 801d7e0:	b011      	add	sp, #68	; 0x44
 801d7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7e6:	6803      	ldr	r3, [r0, #0]
 801d7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d7ea:	4798      	blx	r3
 801d7ec:	f8b8 2000 	ldrh.w	r2, [r8]
 801d7f0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d7f4:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801d7f8:	2dff      	cmp	r5, #255	; 0xff
 801d7fa:	fb02 1303 	mla	r3, r2, r3, r1
 801d7fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d802:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801d806:	fb0a fa02 	mul.w	sl, sl, r2
 801d80a:	d062      	beq.n	801d8d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801d80c:	ea6f 0c05 	mvn.w	ip, r5
 801d810:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801d814:	930a      	str	r3, [sp, #40]	; 0x28
 801d816:	b2ad      	uxth	r5, r5
 801d818:	fa5f fc8c 	uxtb.w	ip, ip
 801d81c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801d820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d822:	4298      	cmp	r0, r3
 801d824:	f080 8085 	bcs.w	801d932 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801d828:	eb00 0b09 	add.w	fp, r0, r9
 801d82c:	4558      	cmp	r0, fp
 801d82e:	d246      	bcs.n	801d8be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801d830:	f814 eb01 	ldrb.w	lr, [r4], #1
 801d834:	2303      	movs	r3, #3
 801d836:	2204      	movs	r2, #4
 801d838:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801d83c:	eb07 0a0e 	add.w	sl, r7, lr
 801d840:	8803      	ldrh	r3, [r0, #0]
 801d842:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801d846:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d84a:	1219      	asrs	r1, r3, #8
 801d84c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d850:	fb18 f805 	smulbb	r8, r8, r5
 801d854:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801d858:	10da      	asrs	r2, r3, #3
 801d85a:	fb01 810c 	mla	r1, r1, ip, r8
 801d85e:	00db      	lsls	r3, r3, #3
 801d860:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801d864:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d868:	b2db      	uxtb	r3, r3
 801d86a:	fb18 f805 	smulbb	r8, r8, r5
 801d86e:	fb1e fe05 	smulbb	lr, lr, r5
 801d872:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801d876:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801d87a:	b289      	uxth	r1, r1
 801d87c:	fb02 820c 	mla	r2, r2, ip, r8
 801d880:	fb03 e30c 	mla	r3, r3, ip, lr
 801d884:	b292      	uxth	r2, r2
 801d886:	b29b      	uxth	r3, r3
 801d888:	f101 0801 	add.w	r8, r1, #1
 801d88c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d890:	f103 0e01 	add.w	lr, r3, #1
 801d894:	f102 0801 	add.w	r8, r2, #1
 801d898:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801d89c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801d8a0:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d8a4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d8a8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d8ac:	ea4e 0101 	orr.w	r1, lr, r1
 801d8b0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d8b4:	ea41 0108 	orr.w	r1, r1, r8
 801d8b8:	f820 1b02 	strh.w	r1, [r0], #2
 801d8bc:	e7b6      	b.n	801d82c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801d8be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d8c0:	881b      	ldrh	r3, [r3, #0]
 801d8c2:	1b9b      	subs	r3, r3, r6
 801d8c4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d8c8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d8cc:	1b9b      	subs	r3, r3, r6
 801d8ce:	441c      	add	r4, r3
 801d8d0:	e7a6      	b.n	801d820 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801d8d2:	491b      	ldr	r1, [pc, #108]	; (801d940 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801d8d4:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801d8d8:	2203      	movs	r2, #3
 801d8da:	2504      	movs	r5, #4
 801d8dc:	4550      	cmp	r0, sl
 801d8de:	d228      	bcs.n	801d932 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801d8e0:	eb00 0c09 	add.w	ip, r0, r9
 801d8e4:	4560      	cmp	r0, ip
 801d8e6:	4623      	mov	r3, r4
 801d8e8:	d219      	bcs.n	801d91e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801d8ea:	f893 e000 	ldrb.w	lr, [r3]
 801d8ee:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801d8f2:	eb07 0b0e 	add.w	fp, r7, lr
 801d8f6:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d8fa:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801d8fe:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d902:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801d906:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801d90a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d90e:	ea43 030b 	orr.w	r3, r3, fp
 801d912:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801d916:	3401      	adds	r4, #1
 801d918:	f820 3b02 	strh.w	r3, [r0], #2
 801d91c:	e7e2      	b.n	801d8e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801d91e:	f8b8 3000 	ldrh.w	r3, [r8]
 801d922:	1b9b      	subs	r3, r3, r6
 801d924:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d928:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d92c:	1b9b      	subs	r3, r3, r6
 801d92e:	441c      	add	r4, r3
 801d930:	e7d4      	b.n	801d8dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801d932:	4b04      	ldr	r3, [pc, #16]	; (801d944 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801d934:	6818      	ldr	r0, [r3, #0]
 801d936:	6803      	ldr	r3, [r0, #0]
 801d938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d93a:	4798      	blx	r3
 801d93c:	e750      	b.n	801d7e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d93e:	bf00      	nop
 801d940:	fffff800 	.word	0xfffff800
 801d944:	20008808 	.word	0x20008808
 801d948:	20008802 	.word	0x20008802

0801d94c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d94c:	b430      	push	{r4, r5}
 801d94e:	780d      	ldrb	r5, [r1, #0]
 801d950:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801d954:	2d01      	cmp	r5, #1
 801d956:	d00a      	beq.n	801d96e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801d958:	d305      	bcc.n	801d966 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801d95a:	2d02      	cmp	r5, #2
 801d95c:	d10b      	bne.n	801d976 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801d95e:	9402      	str	r4, [sp, #8]
 801d960:	bc30      	pop	{r4, r5}
 801d962:	f7ff be15 	b.w	801d590 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801d966:	9402      	str	r4, [sp, #8]
 801d968:	bc30      	pop	{r4, r5}
 801d96a:	f7ff bd2b 	b.w	801d3c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d96e:	9402      	str	r4, [sp, #8]
 801d970:	bc30      	pop	{r4, r5}
 801d972:	f7ff bed9 	b.w	801d728 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801d976:	bc30      	pop	{r4, r5}
 801d978:	4770      	bx	lr
	...

0801d97c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801d97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d980:	4604      	mov	r4, r0
 801d982:	b087      	sub	sp, #28
 801d984:	6810      	ldr	r0, [r2, #0]
 801d986:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801d98a:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801dbc4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801d98e:	460e      	mov	r6, r1
 801d990:	6851      	ldr	r1, [r2, #4]
 801d992:	ad02      	add	r5, sp, #8
 801d994:	c503      	stmia	r5!, {r0, r1}
 801d996:	6818      	ldr	r0, [r3, #0]
 801d998:	6859      	ldr	r1, [r3, #4]
 801d99a:	ad04      	add	r5, sp, #16
 801d99c:	4617      	mov	r7, r2
 801d99e:	c503      	stmia	r5!, {r0, r1}
 801d9a0:	a802      	add	r0, sp, #8
 801d9a2:	f7f8 ff9b 	bl	80168dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d9a6:	4639      	mov	r1, r7
 801d9a8:	a804      	add	r0, sp, #16
 801d9aa:	f7f8 ffbf 	bl	801692c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d9ae:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d9b2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d9b6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801d9ba:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d9be:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d9c2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d9c6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801d9ca:	440e      	add	r6, r1
 801d9cc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d9d0:	440a      	add	r2, r1
 801d9d2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d9d6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d9da:	4413      	add	r3, r2
 801d9dc:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d9e0:	4b77      	ldr	r3, [pc, #476]	; (801dbc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d9e2:	6818      	ldr	r0, [r3, #0]
 801d9e4:	6803      	ldr	r3, [r0, #0]
 801d9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d9e8:	4798      	blx	r3
 801d9ea:	f8b9 b000 	ldrh.w	fp, [r9]
 801d9ee:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d9f2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d9f6:	fb0b 2303 	mla	r3, fp, r3, r2
 801d9fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d9fe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801da02:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801da06:	fb05 f50b 	mul.w	r5, r5, fp
 801da0a:	9300      	str	r3, [sp, #0]
 801da0c:	d069      	beq.n	801dae2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801da0e:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801da12:	4558      	cmp	r0, fp
 801da14:	f080 80cc 	bcs.w	801dbb0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801da18:	9b00      	ldr	r3, [sp, #0]
 801da1a:	18c3      	adds	r3, r0, r3
 801da1c:	9301      	str	r3, [sp, #4]
 801da1e:	4631      	mov	r1, r6
 801da20:	9b01      	ldr	r3, [sp, #4]
 801da22:	4298      	cmp	r0, r3
 801da24:	d24f      	bcs.n	801dac6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801da26:	f811 2b01 	ldrb.w	r2, [r1], #1
 801da2a:	2a00      	cmp	r2, #0
 801da2c:	d048      	beq.n	801dac0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801da2e:	fb0a f202 	mul.w	r2, sl, r2
 801da32:	1c53      	adds	r3, r2, #1
 801da34:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801da38:	121b      	asrs	r3, r3, #8
 801da3a:	d041      	beq.n	801dac0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801da3c:	8802      	ldrh	r2, [r0, #0]
 801da3e:	f8b4 c000 	ldrh.w	ip, [r4]
 801da42:	b29e      	uxth	r6, r3
 801da44:	1215      	asrs	r5, r2, #8
 801da46:	43db      	mvns	r3, r3
 801da48:	b2db      	uxtb	r3, r3
 801da4a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801da4e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801da52:	fb15 f503 	smulbb	r5, r5, r3
 801da56:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801da5a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801da5e:	00d2      	lsls	r2, r2, #3
 801da60:	fb07 5706 	mla	r7, r7, r6, r5
 801da64:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801da68:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801da6c:	b2d2      	uxtb	r2, r2
 801da6e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801da72:	b2bf      	uxth	r7, r7
 801da74:	fb1e fe03 	smulbb	lr, lr, r3
 801da78:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801da7c:	fa5f fc8c 	uxtb.w	ip, ip
 801da80:	fb12 f203 	smulbb	r2, r2, r3
 801da84:	fb05 e506 	mla	r5, r5, r6, lr
 801da88:	fb0c 2c06 	mla	ip, ip, r6, r2
 801da8c:	f107 0e01 	add.w	lr, r7, #1
 801da90:	fa1f fc8c 	uxth.w	ip, ip
 801da94:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801da98:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801da9c:	f10c 0701 	add.w	r7, ip, #1
 801daa0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801daa4:	b2ad      	uxth	r5, r5
 801daa6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801daaa:	ea47 070e 	orr.w	r7, r7, lr
 801daae:	f105 0e01 	add.w	lr, r5, #1
 801dab2:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801dab6:	096d      	lsrs	r5, r5, #5
 801dab8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dabc:	432f      	orrs	r7, r5
 801dabe:	8007      	strh	r7, [r0, #0]
 801dac0:	3002      	adds	r0, #2
 801dac2:	3402      	adds	r4, #2
 801dac4:	e7ac      	b.n	801da20 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801dac6:	f8b9 3000 	ldrh.w	r3, [r9]
 801daca:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801dace:	eba3 0308 	sub.w	r3, r3, r8
 801dad2:	eba6 0608 	sub.w	r6, r6, r8
 801dad6:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801dada:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dade:	440e      	add	r6, r1
 801dae0:	e797      	b.n	801da12 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801dae2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801dae6:	42a8      	cmp	r0, r5
 801dae8:	d262      	bcs.n	801dbb0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801daea:	9b00      	ldr	r3, [sp, #0]
 801daec:	4631      	mov	r1, r6
 801daee:	eb00 0b03 	add.w	fp, r0, r3
 801daf2:	4558      	cmp	r0, fp
 801daf4:	d24e      	bcs.n	801db94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801daf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dafa:	b12b      	cbz	r3, 801db08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801dafc:	2bff      	cmp	r3, #255	; 0xff
 801dafe:	f8b4 e000 	ldrh.w	lr, [r4]
 801db02:	d104      	bne.n	801db0e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801db04:	f8a0 e000 	strh.w	lr, [r0]
 801db08:	3002      	adds	r0, #2
 801db0a:	3402      	adds	r4, #2
 801db0c:	e7f1      	b.n	801daf2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801db0e:	8802      	ldrh	r2, [r0, #0]
 801db10:	b29f      	uxth	r7, r3
 801db12:	1216      	asrs	r6, r2, #8
 801db14:	43db      	mvns	r3, r3
 801db16:	b2db      	uxtb	r3, r3
 801db18:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801db1c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801db20:	fb16 f603 	smulbb	r6, r6, r3
 801db24:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801db28:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801db2c:	00d2      	lsls	r2, r2, #3
 801db2e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801db32:	b2d2      	uxtb	r2, r2
 801db34:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801db38:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801db3c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801db40:	fb1a fa03 	smulbb	sl, sl, r3
 801db44:	fa1f fc8c 	uxth.w	ip, ip
 801db48:	fb12 f303 	smulbb	r3, r2, r3
 801db4c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801db50:	fa5f fe8e 	uxtb.w	lr, lr
 801db54:	fb06 a607 	mla	r6, r6, r7, sl
 801db58:	f10c 0201 	add.w	r2, ip, #1
 801db5c:	fb0e 3307 	mla	r3, lr, r7, r3
 801db60:	b2b6      	uxth	r6, r6
 801db62:	b29b      	uxth	r3, r3
 801db64:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801db68:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801db6c:	f106 0a01 	add.w	sl, r6, #1
 801db70:	f103 0c01 	add.w	ip, r3, #1
 801db74:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801db78:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801db7c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801db80:	0976      	lsrs	r6, r6, #5
 801db82:	ea4c 0c02 	orr.w	ip, ip, r2
 801db86:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801db8a:	ea4c 0c06 	orr.w	ip, ip, r6
 801db8e:	f8a0 c000 	strh.w	ip, [r0]
 801db92:	e7b9      	b.n	801db08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801db94:	f8b9 3000 	ldrh.w	r3, [r9]
 801db98:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801db9c:	eba3 0308 	sub.w	r3, r3, r8
 801dba0:	eba6 0608 	sub.w	r6, r6, r8
 801dba4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801dba8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dbac:	440e      	add	r6, r1
 801dbae:	e79a      	b.n	801dae6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801dbb0:	4b03      	ldr	r3, [pc, #12]	; (801dbc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801dbb2:	6818      	ldr	r0, [r3, #0]
 801dbb4:	6803      	ldr	r3, [r0, #0]
 801dbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dbb8:	4798      	blx	r3
 801dbba:	b007      	add	sp, #28
 801dbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbc0:	20008808 	.word	0x20008808
 801dbc4:	20008802 	.word	0x20008802

0801dbc8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801dbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbcc:	b089      	sub	sp, #36	; 0x24
 801dbce:	4682      	mov	sl, r0
 801dbd0:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801dbd4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dbd6:	460f      	mov	r7, r1
 801dbd8:	4691      	mov	r9, r2
 801dbda:	4698      	mov	r8, r3
 801dbdc:	2e00      	cmp	r6, #0
 801dbde:	d036      	beq.n	801dc4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801dbe0:	4608      	mov	r0, r1
 801dbe2:	f7fc f86d 	bl	8019cc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dbe6:	4605      	mov	r5, r0
 801dbe8:	4638      	mov	r0, r7
 801dbea:	f7fc f89d 	bl	8019d28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dbee:	f8ad 000e 	strh.w	r0, [sp, #14]
 801dbf2:	4638      	mov	r0, r7
 801dbf4:	f8ad 9008 	strh.w	r9, [sp, #8]
 801dbf8:	f8ad 500c 	strh.w	r5, [sp, #12]
 801dbfc:	f8ad 800a 	strh.w	r8, [sp, #10]
 801dc00:	f7fc f94a 	bl	8019e98 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dc04:	4605      	mov	r5, r0
 801dc06:	4638      	mov	r0, r7
 801dc08:	f7fc f976 	bl	8019ef8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801dc0c:	4681      	mov	r9, r0
 801dc0e:	4638      	mov	r0, r7
 801dc10:	f7fc f9c6 	bl	8019fa0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dc14:	280b      	cmp	r0, #11
 801dc16:	d81a      	bhi.n	801dc4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801dc18:	e8df f000 	tbb	[pc, r0]
 801dc1c:	1906aebd 	.word	0x1906aebd
 801dc20:	19191919 	.word	0x19191919
 801dc24:	b5191919 	.word	0xb5191919
 801dc28:	4bb0      	ldr	r3, [pc, #704]	; (801deec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801dc2a:	6818      	ldr	r0, [r3, #0]
 801dc2c:	6803      	ldr	r3, [r0, #0]
 801dc2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc30:	4798      	blx	r3
 801dc32:	2eff      	cmp	r6, #255	; 0xff
 801dc34:	d121      	bne.n	801dc7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801dc36:	0683      	lsls	r3, r0, #26
 801dc38:	d41f      	bmi.n	801dc7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801dc3a:	4638      	mov	r0, r7
 801dc3c:	f7fc f8f4 	bl	8019e28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801dc40:	b940      	cbnz	r0, 801dc54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801dc42:	4623      	mov	r3, r4
 801dc44:	aa02      	add	r2, sp, #8
 801dc46:	4629      	mov	r1, r5
 801dc48:	4650      	mov	r0, sl
 801dc4a:	f7ff fa2f 	bl	801d0ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801dc4e:	b009      	add	sp, #36	; 0x24
 801dc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc54:	f10d 0818 	add.w	r8, sp, #24
 801dc58:	4639      	mov	r1, r7
 801dc5a:	4640      	mov	r0, r8
 801dc5c:	f7fc f898 	bl	8019d90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801dc60:	e898 0003 	ldmia.w	r8, {r0, r1}
 801dc64:	af04      	add	r7, sp, #16
 801dc66:	e887 0003 	stmia.w	r7, {r0, r1}
 801dc6a:	4638      	mov	r0, r7
 801dc6c:	4621      	mov	r1, r4
 801dc6e:	f7f3 fb9b 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 801dc72:	4638      	mov	r0, r7
 801dc74:	f7f3 fbdb 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 801dc78:	b130      	cbz	r0, 801dc88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801dc7a:	4633      	mov	r3, r6
 801dc7c:	4622      	mov	r2, r4
 801dc7e:	a902      	add	r1, sp, #8
 801dc80:	4628      	mov	r0, r5
 801dc82:	f7ff f92d 	bl	801cee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dc86:	e7e2      	b.n	801dc4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801dc88:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dc8c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801dc90:	4293      	cmp	r3, r2
 801dc92:	dd12      	ble.n	801dcba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801dc94:	1a9b      	subs	r3, r3, r2
 801dc96:	f9b4 0000 	ldrsh.w	r0, [r4]
 801dc9a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801dc9e:	f8ad 0018 	strh.w	r0, [sp, #24]
 801dca2:	f8ad 201a 	strh.w	r2, [sp, #26]
 801dca6:	f8ad 101c 	strh.w	r1, [sp, #28]
 801dcaa:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dcae:	4642      	mov	r2, r8
 801dcb0:	4633      	mov	r3, r6
 801dcb2:	a902      	add	r1, sp, #8
 801dcb4:	4628      	mov	r0, r5
 801dcb6:	f7ff f913 	bl	801cee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dcba:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801dcbe:	f9b4 2000 	ldrsh.w	r2, [r4]
 801dcc2:	4293      	cmp	r3, r2
 801dcc4:	dd12      	ble.n	801dcec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801dcc6:	1a9b      	subs	r3, r3, r2
 801dcc8:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801dccc:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801dcd0:	f8ad 2018 	strh.w	r2, [sp, #24]
 801dcd4:	f8ad 001a 	strh.w	r0, [sp, #26]
 801dcd8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dcdc:	f8ad 101e 	strh.w	r1, [sp, #30]
 801dce0:	23ff      	movs	r3, #255	; 0xff
 801dce2:	4642      	mov	r2, r8
 801dce4:	a902      	add	r1, sp, #8
 801dce6:	4628      	mov	r0, r5
 801dce8:	f7ff f8fa 	bl	801cee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dcec:	463b      	mov	r3, r7
 801dcee:	aa02      	add	r2, sp, #8
 801dcf0:	4629      	mov	r1, r5
 801dcf2:	4650      	mov	r0, sl
 801dcf4:	f7ff f9da 	bl	801d0ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801dcf8:	88a2      	ldrh	r2, [r4, #4]
 801dcfa:	8823      	ldrh	r3, [r4, #0]
 801dcfc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801dd00:	4413      	add	r3, r2
 801dd02:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dd06:	440a      	add	r2, r1
 801dd08:	b29b      	uxth	r3, r3
 801dd0a:	b292      	uxth	r2, r2
 801dd0c:	b211      	sxth	r1, r2
 801dd0e:	b218      	sxth	r0, r3
 801dd10:	4288      	cmp	r0, r1
 801dd12:	dd12      	ble.n	801dd3a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801dd14:	1a9b      	subs	r3, r3, r2
 801dd16:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801dd1a:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801dd1e:	f8ad 1018 	strh.w	r1, [sp, #24]
 801dd22:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dd26:	f8ad 001e 	strh.w	r0, [sp, #30]
 801dd2a:	23ff      	movs	r3, #255	; 0xff
 801dd2c:	4642      	mov	r2, r8
 801dd2e:	a902      	add	r1, sp, #8
 801dd30:	4628      	mov	r0, r5
 801dd32:	f8ad 601a 	strh.w	r6, [sp, #26]
 801dd36:	f7ff f8d3 	bl	801cee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dd3a:	88e2      	ldrh	r2, [r4, #6]
 801dd3c:	8863      	ldrh	r3, [r4, #2]
 801dd3e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801dd42:	4413      	add	r3, r2
 801dd44:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801dd48:	440a      	add	r2, r1
 801dd4a:	b29b      	uxth	r3, r3
 801dd4c:	b292      	uxth	r2, r2
 801dd4e:	b211      	sxth	r1, r2
 801dd50:	b218      	sxth	r0, r3
 801dd52:	4288      	cmp	r0, r1
 801dd54:	f77f af7b 	ble.w	801dc4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801dd58:	1a9b      	subs	r3, r3, r2
 801dd5a:	f9b4 6000 	ldrsh.w	r6, [r4]
 801dd5e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801dd62:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dd66:	f8ad 6018 	strh.w	r6, [sp, #24]
 801dd6a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801dd6e:	f8ad 001c 	strh.w	r0, [sp, #28]
 801dd72:	23ff      	movs	r3, #255	; 0xff
 801dd74:	4642      	mov	r2, r8
 801dd76:	e782      	b.n	801dc7e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801dd78:	4633      	mov	r3, r6
 801dd7a:	4622      	mov	r2, r4
 801dd7c:	a902      	add	r1, sp, #8
 801dd7e:	4628      	mov	r0, r5
 801dd80:	f7ff fa04 	bl	801d18c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801dd84:	e763      	b.n	801dc4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801dd86:	9600      	str	r6, [sp, #0]
 801dd88:	4623      	mov	r3, r4
 801dd8a:	aa02      	add	r2, sp, #8
 801dd8c:	4649      	mov	r1, r9
 801dd8e:	4628      	mov	r0, r5
 801dd90:	f7ff fddc 	bl	801d94c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801dd94:	e75b      	b.n	801dc4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801dd96:	4638      	mov	r0, r7
 801dd98:	f7fc f846 	bl	8019e28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801dd9c:	b950      	cbnz	r0, 801ddb4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801dd9e:	e9cd 6000 	strd	r6, r0, [sp]
 801dda2:	f8da 3000 	ldr.w	r3, [sl]
 801dda6:	aa02      	add	r2, sp, #8
 801dda8:	68de      	ldr	r6, [r3, #12]
 801ddaa:	4629      	mov	r1, r5
 801ddac:	4623      	mov	r3, r4
 801ddae:	4650      	mov	r0, sl
 801ddb0:	47b0      	blx	r6
 801ddb2:	e74c      	b.n	801dc4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ddb4:	f10d 0818 	add.w	r8, sp, #24
 801ddb8:	4639      	mov	r1, r7
 801ddba:	4640      	mov	r0, r8
 801ddbc:	f7fb ffe8 	bl	8019d90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801ddc0:	e898 0003 	ldmia.w	r8, {r0, r1}
 801ddc4:	af04      	add	r7, sp, #16
 801ddc6:	e887 0003 	stmia.w	r7, {r0, r1}
 801ddca:	4638      	mov	r0, r7
 801ddcc:	4621      	mov	r1, r4
 801ddce:	f7f3 faeb 	bl	80113a8 <_ZN8touchgfx4RectaNERKS0_>
 801ddd2:	4638      	mov	r0, r7
 801ddd4:	f7f3 fb2b 	bl	801142e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ddd8:	b138      	cbz	r0, 801ddea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801ddda:	9600      	str	r6, [sp, #0]
 801dddc:	4623      	mov	r3, r4
 801ddde:	aa02      	add	r2, sp, #8
 801dde0:	4649      	mov	r1, r9
 801dde2:	4628      	mov	r0, r5
 801dde4:	f7ff fdca 	bl	801d97c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801dde8:	e731      	b.n	801dc4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ddea:	e9cd 6000 	strd	r6, r0, [sp]
 801ddee:	f8da 3000 	ldr.w	r3, [sl]
 801ddf2:	aa02      	add	r2, sp, #8
 801ddf4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801ddf8:	4629      	mov	r1, r5
 801ddfa:	463b      	mov	r3, r7
 801ddfc:	4650      	mov	r0, sl
 801ddfe:	47d8      	blx	fp
 801de00:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801de04:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801de08:	4293      	cmp	r3, r2
 801de0a:	dd13      	ble.n	801de34 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801de0c:	f9b4 0000 	ldrsh.w	r0, [r4]
 801de10:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801de14:	f8ad 0018 	strh.w	r0, [sp, #24]
 801de18:	1a9b      	subs	r3, r3, r2
 801de1a:	f8ad 201a 	strh.w	r2, [sp, #26]
 801de1e:	f8ad 101c 	strh.w	r1, [sp, #28]
 801de22:	f8ad 301e 	strh.w	r3, [sp, #30]
 801de26:	9600      	str	r6, [sp, #0]
 801de28:	4643      	mov	r3, r8
 801de2a:	aa02      	add	r2, sp, #8
 801de2c:	4649      	mov	r1, r9
 801de2e:	4628      	mov	r0, r5
 801de30:	f7ff fda4 	bl	801d97c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801de34:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801de38:	f9b4 2000 	ldrsh.w	r2, [r4]
 801de3c:	4293      	cmp	r3, r2
 801de3e:	dd13      	ble.n	801de68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801de40:	1a9b      	subs	r3, r3, r2
 801de42:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801de46:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801de4a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801de4e:	f8ad 001a 	strh.w	r0, [sp, #26]
 801de52:	f8ad 301c 	strh.w	r3, [sp, #28]
 801de56:	f8ad 101e 	strh.w	r1, [sp, #30]
 801de5a:	9600      	str	r6, [sp, #0]
 801de5c:	4643      	mov	r3, r8
 801de5e:	aa02      	add	r2, sp, #8
 801de60:	4649      	mov	r1, r9
 801de62:	4628      	mov	r0, r5
 801de64:	f7ff fd8a 	bl	801d97c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801de68:	88a2      	ldrh	r2, [r4, #4]
 801de6a:	8823      	ldrh	r3, [r4, #0]
 801de6c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801de70:	4413      	add	r3, r2
 801de72:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801de76:	440a      	add	r2, r1
 801de78:	b29b      	uxth	r3, r3
 801de7a:	b292      	uxth	r2, r2
 801de7c:	b211      	sxth	r1, r2
 801de7e:	b218      	sxth	r0, r3
 801de80:	4288      	cmp	r0, r1
 801de82:	dd13      	ble.n	801deac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801de84:	1a9b      	subs	r3, r3, r2
 801de86:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801de8a:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801de8e:	f8ad 1018 	strh.w	r1, [sp, #24]
 801de92:	f8ad 301c 	strh.w	r3, [sp, #28]
 801de96:	f8ad 001e 	strh.w	r0, [sp, #30]
 801de9a:	9600      	str	r6, [sp, #0]
 801de9c:	4643      	mov	r3, r8
 801de9e:	aa02      	add	r2, sp, #8
 801dea0:	4649      	mov	r1, r9
 801dea2:	4628      	mov	r0, r5
 801dea4:	f8ad 701a 	strh.w	r7, [sp, #26]
 801dea8:	f7ff fd68 	bl	801d97c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801deac:	88e2      	ldrh	r2, [r4, #6]
 801deae:	8863      	ldrh	r3, [r4, #2]
 801deb0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801deb4:	4413      	add	r3, r2
 801deb6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801deba:	440a      	add	r2, r1
 801debc:	b29b      	uxth	r3, r3
 801debe:	b292      	uxth	r2, r2
 801dec0:	b211      	sxth	r1, r2
 801dec2:	b218      	sxth	r0, r3
 801dec4:	4288      	cmp	r0, r1
 801dec6:	f77f aec2 	ble.w	801dc4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801deca:	f9b4 7000 	ldrsh.w	r7, [r4]
 801dece:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ded2:	f8ad 7018 	strh.w	r7, [sp, #24]
 801ded6:	1a9b      	subs	r3, r3, r2
 801ded8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dedc:	f8ad 101a 	strh.w	r1, [sp, #26]
 801dee0:	f8ad 001c 	strh.w	r0, [sp, #28]
 801dee4:	9600      	str	r6, [sp, #0]
 801dee6:	4643      	mov	r3, r8
 801dee8:	e779      	b.n	801ddde <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801deea:	bf00      	nop
 801deec:	20008808 	.word	0x20008808

0801def0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801def0:	b180      	cbz	r0, 801df14 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801def2:	2903      	cmp	r1, #3
 801def4:	d81c      	bhi.n	801df30 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801def6:	e8df f001 	tbb	[pc, r1]
 801defa:	1d02      	.short	0x1d02
 801defc:	1f08      	.short	0x1f08
 801defe:	4b10      	ldr	r3, [pc, #64]	; (801df40 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801df00:	8818      	ldrh	r0, [r3, #0]
 801df02:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801df06:	4240      	negs	r0, r0
 801df08:	4770      	bx	lr
 801df0a:	4b0d      	ldr	r3, [pc, #52]	; (801df40 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801df0c:	8818      	ldrh	r0, [r3, #0]
 801df0e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801df12:	4770      	bx	lr
 801df14:	2903      	cmp	r1, #3
 801df16:	d80b      	bhi.n	801df30 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801df18:	a301      	add	r3, pc, #4	; (adr r3, 801df20 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801df1a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801df1e:	bf00      	nop
 801df20:	0801df35 	.word	0x0801df35
 801df24:	0801df0b 	.word	0x0801df0b
 801df28:	0801df39 	.word	0x0801df39
 801df2c:	0801deff 	.word	0x0801deff
 801df30:	2000      	movs	r0, #0
 801df32:	4770      	bx	lr
 801df34:	2001      	movs	r0, #1
 801df36:	4770      	bx	lr
 801df38:	f04f 30ff 	mov.w	r0, #4294967295
 801df3c:	4770      	bx	lr
 801df3e:	bf00      	nop
 801df40:	20008802 	.word	0x20008802

0801df44 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801df44:	b180      	cbz	r0, 801df68 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801df46:	2903      	cmp	r1, #3
 801df48:	d81c      	bhi.n	801df84 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801df4a:	e8df f001 	tbb	[pc, r1]
 801df4e:	021d      	.short	0x021d
 801df50:	071f      	.short	0x071f
 801df52:	4b10      	ldr	r3, [pc, #64]	; (801df94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801df54:	8818      	ldrh	r0, [r3, #0]
 801df56:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801df5a:	4770      	bx	lr
 801df5c:	4b0d      	ldr	r3, [pc, #52]	; (801df94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801df5e:	8818      	ldrh	r0, [r3, #0]
 801df60:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801df64:	4240      	negs	r0, r0
 801df66:	4770      	bx	lr
 801df68:	2903      	cmp	r1, #3
 801df6a:	d80b      	bhi.n	801df84 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801df6c:	a301      	add	r3, pc, #4	; (adr r3, 801df74 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801df6e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801df72:	bf00      	nop
 801df74:	0801df53 	.word	0x0801df53
 801df78:	0801df8d 	.word	0x0801df8d
 801df7c:	0801df5d 	.word	0x0801df5d
 801df80:	0801df89 	.word	0x0801df89
 801df84:	2000      	movs	r0, #0
 801df86:	4770      	bx	lr
 801df88:	2001      	movs	r0, #1
 801df8a:	4770      	bx	lr
 801df8c:	f04f 30ff 	mov.w	r0, #4294967295
 801df90:	4770      	bx	lr
 801df92:	bf00      	nop
 801df94:	20008802 	.word	0x20008802

0801df98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801df98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df9c:	b099      	sub	sp, #100	; 0x64
 801df9e:	910b      	str	r1, [sp, #44]	; 0x2c
 801dfa0:	a914      	add	r1, sp, #80	; 0x50
 801dfa2:	e881 000c 	stmia.w	r1, {r2, r3}
 801dfa6:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801dfaa:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801dfae:	f891 900d 	ldrb.w	r9, [r1, #13]
 801dfb2:	9309      	str	r3, [sp, #36]	; 0x24
 801dfb4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801dfb8:	9310      	str	r3, [sp, #64]	; 0x40
 801dfba:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801dfbe:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801dfc2:	930c      	str	r3, [sp, #48]	; 0x30
 801dfc4:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801dfc8:	798f      	ldrb	r7, [r1, #6]
 801dfca:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801dfce:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801dfd2:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801dfd6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801dfda:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801dfde:	431f      	orrs	r7, r3
 801dfe0:	f000 8195 	beq.w	801e30e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801dfe4:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801dfe8:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801dfec:	f891 9007 	ldrb.w	r9, [r1, #7]
 801dff0:	ea59 0903 	orrs.w	r9, r9, r3
 801dff4:	f000 818b 	beq.w	801e30e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801dff8:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801dffc:	b29b      	uxth	r3, r3
 801dffe:	2d00      	cmp	r5, #0
 801e000:	f000 812e 	beq.w	801e260 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801e004:	1aed      	subs	r5, r5, r3
 801e006:	b2ad      	uxth	r5, r5
 801e008:	042b      	lsls	r3, r5, #16
 801e00a:	d502      	bpl.n	801e012 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801e00c:	1b64      	subs	r4, r4, r5
 801e00e:	b224      	sxth	r4, r4
 801e010:	2500      	movs	r5, #0
 801e012:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e016:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801e01a:	428c      	cmp	r4, r1
 801e01c:	b28b      	uxth	r3, r1
 801e01e:	bfbf      	itttt	lt
 801e020:	18ed      	addlt	r5, r5, r3
 801e022:	1b2c      	sublt	r4, r5, r4
 801e024:	b2a5      	uxthlt	r5, r4
 801e026:	460c      	movlt	r4, r1
 801e028:	8891      	ldrh	r1, [r2, #4]
 801e02a:	440b      	add	r3, r1
 801e02c:	b21b      	sxth	r3, r3
 801e02e:	930f      	str	r3, [sp, #60]	; 0x3c
 801e030:	88d3      	ldrh	r3, [r2, #6]
 801e032:	8852      	ldrh	r2, [r2, #2]
 801e034:	4413      	add	r3, r2
 801e036:	b21b      	sxth	r3, r3
 801e038:	930d      	str	r3, [sp, #52]	; 0x34
 801e03a:	4bbe      	ldr	r3, [pc, #760]	; (801e334 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801e03c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e03e:	f893 b000 	ldrb.w	fp, [r3]
 801e042:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e046:	f1dc 0300 	rsbs	r3, ip, #0
 801e04a:	eb43 030c 	adc.w	r3, r3, ip
 801e04e:	930e      	str	r3, [sp, #56]	; 0x38
 801e050:	4621      	mov	r1, r4
 801e052:	4653      	mov	r3, sl
 801e054:	a814      	add	r0, sp, #80	; 0x50
 801e056:	f7f8 fabb 	bl	80165d0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e05a:	4621      	mov	r1, r4
 801e05c:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801e060:	4653      	mov	r3, sl
 801e062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e064:	a814      	add	r0, sp, #80	; 0x50
 801e066:	f7f8 fad0 	bl	801660a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e06a:	a918      	add	r1, sp, #96	; 0x60
 801e06c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e070:	a817      	add	r0, sp, #92	; 0x5c
 801e072:	f7f8 fbf1 	bl	8016858 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e076:	f1ba 0f00 	cmp.w	sl, #0
 801e07a:	f040 80f4 	bne.w	801e266 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801e07e:	f1bb 0f01 	cmp.w	fp, #1
 801e082:	f040 80f8 	bne.w	801e276 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801e086:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e088:	2b00      	cmp	r3, #0
 801e08a:	f040 8145 	bne.w	801e318 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801e08e:	b2ba      	uxth	r2, r7
 801e090:	b905      	cbnz	r5, 801e094 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801e092:	b16e      	cbz	r6, 801e0b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801e094:	fb06 5302 	mla	r3, r6, r2, r5
 801e098:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801e09a:	fb08 f303 	mul.w	r3, r8, r3
 801e09e:	4631      	mov	r1, r6
 801e0a0:	f003 0607 	and.w	r6, r3, #7
 801e0a4:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801e0a8:	9328      	str	r3, [sp, #160]	; 0xa0
 801e0aa:	eba9 0301 	sub.w	r3, r9, r1
 801e0ae:	930a      	str	r3, [sp, #40]	; 0x28
 801e0b0:	4651      	mov	r1, sl
 801e0b2:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e0b4:	f7ff ff1c 	bl	801def0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801e0b8:	4681      	mov	r9, r0
 801e0ba:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e0bc:	f7ff ff42 	bl	801df44 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801e0c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e0c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e0c4:	eba3 0a01 	sub.w	sl, r3, r1
 801e0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e0ca:	459a      	cmp	sl, r3
 801e0cc:	bfa8      	it	ge
 801e0ce:	469a      	movge	sl, r3
 801e0d0:	f1ba 0f00 	cmp.w	sl, #0
 801e0d4:	4683      	mov	fp, r0
 801e0d6:	f340 811a 	ble.w	801e30e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e0da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e0dc:	1b64      	subs	r4, r4, r5
 801e0de:	1b1c      	subs	r4, r3, r4
 801e0e0:	42bc      	cmp	r4, r7
 801e0e2:	bfd4      	ite	le
 801e0e4:	ebc5 0504 	rsble	r5, r5, r4
 801e0e8:	ebc5 0507 	rsbgt	r5, r5, r7
 801e0ec:	2d00      	cmp	r5, #0
 801e0ee:	f340 810e 	ble.w	801e30e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e0f2:	1b52      	subs	r2, r2, r5
 801e0f4:	fb08 f302 	mul.w	r3, r8, r2
 801e0f8:	930f      	str	r3, [sp, #60]	; 0x3c
 801e0fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	f040 8116 	bne.w	801e32e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801e102:	4b8d      	ldr	r3, [pc, #564]	; (801e338 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801e104:	6818      	ldr	r0, [r3, #0]
 801e106:	6803      	ldr	r3, [r0, #0]
 801e108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e10a:	4798      	blx	r3
 801e10c:	2301      	movs	r3, #1
 801e10e:	fa03 f308 	lsl.w	r3, r3, r8
 801e112:	4a8a      	ldr	r2, [pc, #552]	; (801e33c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801e114:	3b01      	subs	r3, #1
 801e116:	b2db      	uxtb	r3, r3
 801e118:	8811      	ldrh	r1, [r2, #0]
 801e11a:	930e      	str	r3, [sp, #56]	; 0x38
 801e11c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801e120:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801e124:	fb01 2303 	mla	r3, r1, r3, r2
 801e128:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e12c:	930a      	str	r3, [sp, #40]	; 0x28
 801e12e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e130:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e134:	9313      	str	r3, [sp, #76]	; 0x4c
 801e136:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e138:	0a19      	lsrs	r1, r3, #8
 801e13a:	b2cb      	uxtb	r3, r1
 801e13c:	9312      	str	r3, [sp, #72]	; 0x48
 801e13e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e140:	b2db      	uxtb	r3, r3
 801e142:	9311      	str	r3, [sp, #68]	; 0x44
 801e144:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e146:	095a      	lsrs	r2, r3, #5
 801e148:	4b7d      	ldr	r3, [pc, #500]	; (801e340 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801e14a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e14e:	400b      	ands	r3, r1
 801e150:	4313      	orrs	r3, r2
 801e152:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e154:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e158:	4313      	orrs	r3, r2
 801e15a:	b29b      	uxth	r3, r3
 801e15c:	9310      	str	r3, [sp, #64]	; 0x40
 801e15e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e160:	781a      	ldrb	r2, [r3, #0]
 801e162:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801e166:	4132      	asrs	r2, r6
 801e168:	fb05 b919 	mls	r9, r5, r9, fp
 801e16c:	fb03 fb05 	mul.w	fp, r3, r5
 801e170:	b2d2      	uxtb	r2, r2
 801e172:	930d      	str	r3, [sp, #52]	; 0x34
 801e174:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801e178:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801e17c:	f0c0 80f5 	bcc.w	801e36a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801e180:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801e184:	46ae      	mov	lr, r5
 801e186:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801e18a:	f0c0 80dd 	bcc.w	801e348 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801e18e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e190:	4013      	ands	r3, r2
 801e192:	d055      	beq.n	801e240 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801e194:	20ff      	movs	r0, #255	; 0xff
 801e196:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e198:	fb90 f1f1 	sdiv	r1, r0, r1
 801e19c:	434b      	muls	r3, r1
 801e19e:	2bfe      	cmp	r3, #254	; 0xfe
 801e1a0:	dd03      	ble.n	801e1aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801e1a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e1a4:	4281      	cmp	r1, r0
 801e1a6:	f000 80cd 	beq.w	801e344 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801e1aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e1ac:	f8bc 4000 	ldrh.w	r4, [ip]
 801e1b0:	fb11 f303 	smulbb	r3, r1, r3
 801e1b4:	b29b      	uxth	r3, r3
 801e1b6:	1c59      	adds	r1, r3, #1
 801e1b8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801e1bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e1c0:	b29f      	uxth	r7, r3
 801e1c2:	43db      	mvns	r3, r3
 801e1c4:	b2db      	uxtb	r3, r3
 801e1c6:	9309      	str	r3, [sp, #36]	; 0x24
 801e1c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e1ca:	1220      	asrs	r0, r4, #8
 801e1cc:	fb13 f907 	smulbb	r9, r3, r7
 801e1d0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1d6:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e1da:	fb00 9003 	mla	r0, r0, r3, r9
 801e1de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e1e0:	10e1      	asrs	r1, r4, #3
 801e1e2:	fb13 f907 	smulbb	r9, r3, r7
 801e1e6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1ec:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801e1f0:	fb01 9103 	mla	r1, r1, r3, r9
 801e1f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e1f6:	00e4      	lsls	r4, r4, #3
 801e1f8:	fb13 f707 	smulbb	r7, r3, r7
 801e1fc:	b2e4      	uxtb	r4, r4
 801e1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e200:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e204:	fb04 7403 	mla	r4, r4, r3, r7
 801e208:	b280      	uxth	r0, r0
 801e20a:	b2a4      	uxth	r4, r4
 801e20c:	1c43      	adds	r3, r0, #1
 801e20e:	f104 0901 	add.w	r9, r4, #1
 801e212:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e216:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801e21a:	b289      	uxth	r1, r1
 801e21c:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801e220:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e224:	ea49 0000 	orr.w	r0, r9, r0
 801e228:	f101 0901 	add.w	r9, r1, #1
 801e22c:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801e230:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e234:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e238:	ea40 0009 	orr.w	r0, r0, r9
 801e23c:	f8ac 0000 	strh.w	r0, [ip]
 801e240:	4446      	add	r6, r8
 801e242:	b2b6      	uxth	r6, r6
 801e244:	2e07      	cmp	r6, #7
 801e246:	bf81      	itttt	hi
 801e248:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801e24a:	785a      	ldrbhi	r2, [r3, #1]
 801e24c:	3301      	addhi	r3, #1
 801e24e:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801e250:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e252:	bf9a      	itte	ls
 801e254:	fa42 f208 	asrls.w	r2, r2, r8
 801e258:	b2d2      	uxtbls	r2, r2
 801e25a:	2600      	movhi	r6, #0
 801e25c:	449c      	add	ip, r3
 801e25e:	e792      	b.n	801e186 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801e260:	441c      	add	r4, r3
 801e262:	b224      	sxth	r4, r4
 801e264:	e6d5      	b.n	801e012 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801e266:	f1ba 0f01 	cmp.w	sl, #1
 801e26a:	f47f af0c 	bne.w	801e086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e26e:	f1bb 0f01 	cmp.w	fp, #1
 801e272:	f47f af08 	bne.w	801e086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e276:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 801e338 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801e27a:	f8db 0000 	ldr.w	r0, [fp]
 801e27e:	6803      	ldr	r3, [r0, #0]
 801e280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e282:	4798      	blx	r3
 801e284:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801e288:	465a      	mov	r2, fp
 801e28a:	d006      	beq.n	801e29a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801e28c:	f1b8 0f04 	cmp.w	r8, #4
 801e290:	d140      	bne.n	801e314 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801e292:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e294:	3300      	adds	r3, #0
 801e296:	bf18      	it	ne
 801e298:	2301      	movne	r3, #1
 801e29a:	0580      	lsls	r0, r0, #22
 801e29c:	d56e      	bpl.n	801e37c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801e29e:	f1b8 0f08 	cmp.w	r8, #8
 801e2a2:	d16b      	bne.n	801e37c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801e2a4:	2b00      	cmp	r3, #0
 801e2a6:	bf0c      	ite	eq
 801e2a8:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801e2ac:	f44f 7180 	movne.w	r1, #256	; 0x100
 801e2b0:	2d00      	cmp	r5, #0
 801e2b2:	f47f aee8 	bne.w	801e086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e2b6:	2e00      	cmp	r6, #0
 801e2b8:	f47f aee5 	bne.w	801e086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e2bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e2be:	19e3      	adds	r3, r4, r7
 801e2c0:	4283      	cmp	r3, r0
 801e2c2:	f73f aee0 	bgt.w	801e086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e2c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e2ca:	444b      	add	r3, r9
 801e2cc:	4283      	cmp	r3, r0
 801e2ce:	f73f aeda 	bgt.w	801e086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e2d2:	6810      	ldr	r0, [r2, #0]
 801e2d4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801e2d8:	6804      	ldr	r4, [r0, #0]
 801e2da:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801e2de:	b2bf      	uxth	r7, r7
 801e2e0:	f1b8 0f08 	cmp.w	r8, #8
 801e2e4:	f04f 0500 	mov.w	r5, #0
 801e2e8:	bf18      	it	ne
 801e2ea:	3701      	addne	r7, #1
 801e2ec:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801e2f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e2f2:	9104      	str	r1, [sp, #16]
 801e2f4:	bf18      	it	ne
 801e2f6:	f027 0701 	bicne.w	r7, r7, #1
 801e2fa:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e2fc:	bf18      	it	ne
 801e2fe:	b2bf      	uxthne	r7, r7
 801e300:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801e304:	e9cd 7900 	strd	r7, r9, [sp]
 801e308:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e30a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801e30c:	47a0      	blx	r4
 801e30e:	b019      	add	sp, #100	; 0x64
 801e310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e314:	2300      	movs	r3, #0
 801e316:	e7c0      	b.n	801e29a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801e318:	2208      	movs	r2, #8
 801e31a:	fb92 f3f8 	sdiv	r3, r2, r8
 801e31e:	1e5a      	subs	r2, r3, #1
 801e320:	443a      	add	r2, r7
 801e322:	fb92 f2f3 	sdiv	r2, r2, r3
 801e326:	fb12 f203 	smulbb	r2, r2, r3
 801e32a:	b292      	uxth	r2, r2
 801e32c:	e6b0      	b.n	801e090 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801e32e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e330:	e6ec      	b.n	801e10c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801e332:	bf00      	nop
 801e334:	20008800 	.word	0x20008800
 801e338:	20008808 	.word	0x20008808
 801e33c:	20008802 	.word	0x20008802
 801e340:	00fff800 	.word	0x00fff800
 801e344:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e346:	e779      	b.n	801e23c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801e348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e34a:	b153      	cbz	r3, 801e362 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801e34c:	441e      	add	r6, r3
 801e34e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e350:	b2b6      	uxth	r6, r6
 801e352:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801e356:	f006 0607 	and.w	r6, r6, #7
 801e35a:	781a      	ldrb	r2, [r3, #0]
 801e35c:	9328      	str	r3, [sp, #160]	; 0xa0
 801e35e:	4132      	asrs	r2, r6
 801e360:	b2d2      	uxtb	r2, r2
 801e362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e364:	445b      	add	r3, fp
 801e366:	930a      	str	r3, [sp, #40]	; 0x28
 801e368:	e706      	b.n	801e178 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801e36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e36c:	2b00      	cmp	r3, #0
 801e36e:	d1ce      	bne.n	801e30e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e370:	4b05      	ldr	r3, [pc, #20]	; (801e388 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801e372:	6818      	ldr	r0, [r3, #0]
 801e374:	6803      	ldr	r3, [r0, #0]
 801e376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e378:	4798      	blx	r3
 801e37a:	e7c8      	b.n	801e30e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e37c:	2b00      	cmp	r3, #0
 801e37e:	f43f ae82 	beq.w	801e086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e382:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e386:	e793      	b.n	801e2b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801e388:	20008808 	.word	0x20008808

0801e38c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801e38c:	b538      	push	{r3, r4, r5, lr}
 801e38e:	4c15      	ldr	r4, [pc, #84]	; (801e3e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801e390:	7823      	ldrb	r3, [r4, #0]
 801e392:	f3bf 8f5b 	dmb	ish
 801e396:	07da      	lsls	r2, r3, #31
 801e398:	4605      	mov	r5, r0
 801e39a:	d40b      	bmi.n	801e3b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801e39c:	4620      	mov	r0, r4
 801e39e:	f007 fd73 	bl	8025e88 <__cxa_guard_acquire>
 801e3a2:	b138      	cbz	r0, 801e3b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801e3a4:	4620      	mov	r0, r4
 801e3a6:	f007 fd7b 	bl	8025ea0 <__cxa_guard_release>
 801e3aa:	4a0f      	ldr	r2, [pc, #60]	; (801e3e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801e3ac:	490f      	ldr	r1, [pc, #60]	; (801e3ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801e3ae:	4810      	ldr	r0, [pc, #64]	; (801e3f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801e3b0:	f007 fd63 	bl	8025e7a <__aeabi_atexit>
 801e3b4:	4c0f      	ldr	r4, [pc, #60]	; (801e3f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801e3b6:	7823      	ldrb	r3, [r4, #0]
 801e3b8:	f3bf 8f5b 	dmb	ish
 801e3bc:	07db      	lsls	r3, r3, #31
 801e3be:	d40b      	bmi.n	801e3d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801e3c0:	4620      	mov	r0, r4
 801e3c2:	f007 fd61 	bl	8025e88 <__cxa_guard_acquire>
 801e3c6:	b138      	cbz	r0, 801e3d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801e3c8:	4620      	mov	r0, r4
 801e3ca:	f007 fd69 	bl	8025ea0 <__cxa_guard_release>
 801e3ce:	4a06      	ldr	r2, [pc, #24]	; (801e3e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801e3d0:	4909      	ldr	r1, [pc, #36]	; (801e3f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801e3d2:	480a      	ldr	r0, [pc, #40]	; (801e3fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801e3d4:	f007 fd51 	bl	8025e7a <__aeabi_atexit>
 801e3d8:	4b05      	ldr	r3, [pc, #20]	; (801e3f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801e3da:	612b      	str	r3, [r5, #16]
 801e3dc:	4b07      	ldr	r3, [pc, #28]	; (801e3fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801e3de:	616b      	str	r3, [r5, #20]
 801e3e0:	bd38      	pop	{r3, r4, r5, pc}
 801e3e2:	bf00      	nop
 801e3e4:	200088dc 	.word	0x200088dc
 801e3e8:	20000000 	.word	0x20000000
 801e3ec:	0801c5af 	.word	0x0801c5af
 801e3f0:	20000064 	.word	0x20000064
 801e3f4:	200088e0 	.word	0x200088e0
 801e3f8:	0801c5ad 	.word	0x0801c5ad
 801e3fc:	20000068 	.word	0x20000068

0801e400 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801e400:	b538      	push	{r3, r4, r5, lr}
 801e402:	4c15      	ldr	r4, [pc, #84]	; (801e458 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801e404:	7823      	ldrb	r3, [r4, #0]
 801e406:	f3bf 8f5b 	dmb	ish
 801e40a:	07da      	lsls	r2, r3, #31
 801e40c:	4605      	mov	r5, r0
 801e40e:	d40b      	bmi.n	801e428 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801e410:	4620      	mov	r0, r4
 801e412:	f007 fd39 	bl	8025e88 <__cxa_guard_acquire>
 801e416:	b138      	cbz	r0, 801e428 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801e418:	4620      	mov	r0, r4
 801e41a:	f007 fd41 	bl	8025ea0 <__cxa_guard_release>
 801e41e:	4a0f      	ldr	r2, [pc, #60]	; (801e45c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801e420:	490f      	ldr	r1, [pc, #60]	; (801e460 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801e422:	4810      	ldr	r0, [pc, #64]	; (801e464 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801e424:	f007 fd29 	bl	8025e7a <__aeabi_atexit>
 801e428:	4c0f      	ldr	r4, [pc, #60]	; (801e468 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801e42a:	7823      	ldrb	r3, [r4, #0]
 801e42c:	f3bf 8f5b 	dmb	ish
 801e430:	07db      	lsls	r3, r3, #31
 801e432:	d40b      	bmi.n	801e44c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801e434:	4620      	mov	r0, r4
 801e436:	f007 fd27 	bl	8025e88 <__cxa_guard_acquire>
 801e43a:	b138      	cbz	r0, 801e44c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801e43c:	4620      	mov	r0, r4
 801e43e:	f007 fd2f 	bl	8025ea0 <__cxa_guard_release>
 801e442:	4a06      	ldr	r2, [pc, #24]	; (801e45c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801e444:	4909      	ldr	r1, [pc, #36]	; (801e46c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801e446:	480a      	ldr	r0, [pc, #40]	; (801e470 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801e448:	f007 fd17 	bl	8025e7a <__aeabi_atexit>
 801e44c:	4b05      	ldr	r3, [pc, #20]	; (801e464 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801e44e:	60ab      	str	r3, [r5, #8]
 801e450:	4b07      	ldr	r3, [pc, #28]	; (801e470 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801e452:	60eb      	str	r3, [r5, #12]
 801e454:	bd38      	pop	{r3, r4, r5, pc}
 801e456:	bf00      	nop
 801e458:	200088b4 	.word	0x200088b4
 801e45c:	20000000 	.word	0x20000000
 801e460:	0801c5b3 	.word	0x0801c5b3
 801e464:	2000003c 	.word	0x2000003c
 801e468:	200088b8 	.word	0x200088b8
 801e46c:	0801c5b1 	.word	0x0801c5b1
 801e470:	20000040 	.word	0x20000040

0801e474 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801e474:	b510      	push	{r4, lr}
 801e476:	4604      	mov	r4, r0
 801e478:	f7ff ff88 	bl	801e38c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801e47c:	4620      	mov	r0, r4
 801e47e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e482:	f7ff bfbd 	b.w	801e400 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801e488 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e488:	b538      	push	{r3, r4, r5, lr}
 801e48a:	4c15      	ldr	r4, [pc, #84]	; (801e4e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e48c:	7823      	ldrb	r3, [r4, #0]
 801e48e:	f3bf 8f5b 	dmb	ish
 801e492:	07da      	lsls	r2, r3, #31
 801e494:	4605      	mov	r5, r0
 801e496:	d40b      	bmi.n	801e4b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e498:	4620      	mov	r0, r4
 801e49a:	f007 fcf5 	bl	8025e88 <__cxa_guard_acquire>
 801e49e:	b138      	cbz	r0, 801e4b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e4a0:	4620      	mov	r0, r4
 801e4a2:	f007 fcfd 	bl	8025ea0 <__cxa_guard_release>
 801e4a6:	4a0f      	ldr	r2, [pc, #60]	; (801e4e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e4a8:	490f      	ldr	r1, [pc, #60]	; (801e4e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e4aa:	4810      	ldr	r0, [pc, #64]	; (801e4ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e4ac:	f007 fce5 	bl	8025e7a <__aeabi_atexit>
 801e4b0:	4c0f      	ldr	r4, [pc, #60]	; (801e4f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e4b2:	7823      	ldrb	r3, [r4, #0]
 801e4b4:	f3bf 8f5b 	dmb	ish
 801e4b8:	07db      	lsls	r3, r3, #31
 801e4ba:	d40b      	bmi.n	801e4d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e4bc:	4620      	mov	r0, r4
 801e4be:	f007 fce3 	bl	8025e88 <__cxa_guard_acquire>
 801e4c2:	b138      	cbz	r0, 801e4d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e4c4:	4620      	mov	r0, r4
 801e4c6:	f007 fceb 	bl	8025ea0 <__cxa_guard_release>
 801e4ca:	4a06      	ldr	r2, [pc, #24]	; (801e4e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e4cc:	4909      	ldr	r1, [pc, #36]	; (801e4f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e4ce:	480a      	ldr	r0, [pc, #40]	; (801e4f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e4d0:	f007 fcd3 	bl	8025e7a <__aeabi_atexit>
 801e4d4:	4b05      	ldr	r3, [pc, #20]	; (801e4ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e4d6:	622b      	str	r3, [r5, #32]
 801e4d8:	4b07      	ldr	r3, [pc, #28]	; (801e4f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e4da:	626b      	str	r3, [r5, #36]	; 0x24
 801e4dc:	bd38      	pop	{r3, r4, r5, pc}
 801e4de:	bf00      	nop
 801e4e0:	200088e4 	.word	0x200088e4
 801e4e4:	20000000 	.word	0x20000000
 801e4e8:	0801c5a7 	.word	0x0801c5a7
 801e4ec:	2000006c 	.word	0x2000006c
 801e4f0:	200088e8 	.word	0x200088e8
 801e4f4:	0801c5a5 	.word	0x0801c5a5
 801e4f8:	20000070 	.word	0x20000070

0801e4fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e4fc:	b538      	push	{r3, r4, r5, lr}
 801e4fe:	4c15      	ldr	r4, [pc, #84]	; (801e554 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e500:	7823      	ldrb	r3, [r4, #0]
 801e502:	f3bf 8f5b 	dmb	ish
 801e506:	07da      	lsls	r2, r3, #31
 801e508:	4605      	mov	r5, r0
 801e50a:	d40b      	bmi.n	801e524 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e50c:	4620      	mov	r0, r4
 801e50e:	f007 fcbb 	bl	8025e88 <__cxa_guard_acquire>
 801e512:	b138      	cbz	r0, 801e524 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e514:	4620      	mov	r0, r4
 801e516:	f007 fcc3 	bl	8025ea0 <__cxa_guard_release>
 801e51a:	4a0f      	ldr	r2, [pc, #60]	; (801e558 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e51c:	490f      	ldr	r1, [pc, #60]	; (801e55c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e51e:	4810      	ldr	r0, [pc, #64]	; (801e560 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e520:	f007 fcab 	bl	8025e7a <__aeabi_atexit>
 801e524:	4c0f      	ldr	r4, [pc, #60]	; (801e564 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e526:	7823      	ldrb	r3, [r4, #0]
 801e528:	f3bf 8f5b 	dmb	ish
 801e52c:	07db      	lsls	r3, r3, #31
 801e52e:	d40b      	bmi.n	801e548 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e530:	4620      	mov	r0, r4
 801e532:	f007 fca9 	bl	8025e88 <__cxa_guard_acquire>
 801e536:	b138      	cbz	r0, 801e548 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e538:	4620      	mov	r0, r4
 801e53a:	f007 fcb1 	bl	8025ea0 <__cxa_guard_release>
 801e53e:	4a06      	ldr	r2, [pc, #24]	; (801e558 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e540:	4909      	ldr	r1, [pc, #36]	; (801e568 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e542:	480a      	ldr	r0, [pc, #40]	; (801e56c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e544:	f007 fc99 	bl	8025e7a <__aeabi_atexit>
 801e548:	4b05      	ldr	r3, [pc, #20]	; (801e560 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e54a:	61ab      	str	r3, [r5, #24]
 801e54c:	4b07      	ldr	r3, [pc, #28]	; (801e56c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e54e:	61eb      	str	r3, [r5, #28]
 801e550:	bd38      	pop	{r3, r4, r5, pc}
 801e552:	bf00      	nop
 801e554:	200088bc 	.word	0x200088bc
 801e558:	20000000 	.word	0x20000000
 801e55c:	0801c5ab 	.word	0x0801c5ab
 801e560:	20000044 	.word	0x20000044
 801e564:	200088c0 	.word	0x200088c0
 801e568:	0801c5a9 	.word	0x0801c5a9
 801e56c:	20000048 	.word	0x20000048

0801e570 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801e570:	b510      	push	{r4, lr}
 801e572:	4604      	mov	r4, r0
 801e574:	f7ff ff88 	bl	801e488 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e578:	4620      	mov	r0, r4
 801e57a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e57e:	f7ff bfbd 	b.w	801e4fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e584 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e584:	b538      	push	{r3, r4, r5, lr}
 801e586:	4c15      	ldr	r4, [pc, #84]	; (801e5dc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e588:	7823      	ldrb	r3, [r4, #0]
 801e58a:	f3bf 8f5b 	dmb	ish
 801e58e:	07da      	lsls	r2, r3, #31
 801e590:	4605      	mov	r5, r0
 801e592:	d40b      	bmi.n	801e5ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e594:	4620      	mov	r0, r4
 801e596:	f007 fc77 	bl	8025e88 <__cxa_guard_acquire>
 801e59a:	b138      	cbz	r0, 801e5ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e59c:	4620      	mov	r0, r4
 801e59e:	f007 fc7f 	bl	8025ea0 <__cxa_guard_release>
 801e5a2:	4a0f      	ldr	r2, [pc, #60]	; (801e5e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e5a4:	490f      	ldr	r1, [pc, #60]	; (801e5e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e5a6:	4810      	ldr	r0, [pc, #64]	; (801e5e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e5a8:	f007 fc67 	bl	8025e7a <__aeabi_atexit>
 801e5ac:	4c0f      	ldr	r4, [pc, #60]	; (801e5ec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e5ae:	7823      	ldrb	r3, [r4, #0]
 801e5b0:	f3bf 8f5b 	dmb	ish
 801e5b4:	07db      	lsls	r3, r3, #31
 801e5b6:	d40b      	bmi.n	801e5d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e5b8:	4620      	mov	r0, r4
 801e5ba:	f007 fc65 	bl	8025e88 <__cxa_guard_acquire>
 801e5be:	b138      	cbz	r0, 801e5d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e5c0:	4620      	mov	r0, r4
 801e5c2:	f007 fc6d 	bl	8025ea0 <__cxa_guard_release>
 801e5c6:	4a06      	ldr	r2, [pc, #24]	; (801e5e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e5c8:	4909      	ldr	r1, [pc, #36]	; (801e5f0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e5ca:	480a      	ldr	r0, [pc, #40]	; (801e5f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e5cc:	f007 fc55 	bl	8025e7a <__aeabi_atexit>
 801e5d0:	4b05      	ldr	r3, [pc, #20]	; (801e5e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e5d2:	632b      	str	r3, [r5, #48]	; 0x30
 801e5d4:	4b07      	ldr	r3, [pc, #28]	; (801e5f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e5d6:	636b      	str	r3, [r5, #52]	; 0x34
 801e5d8:	bd38      	pop	{r3, r4, r5, pc}
 801e5da:	bf00      	nop
 801e5dc:	200088f4 	.word	0x200088f4
 801e5e0:	20000000 	.word	0x20000000
 801e5e4:	0801c59f 	.word	0x0801c59f
 801e5e8:	2000007c 	.word	0x2000007c
 801e5ec:	200088f8 	.word	0x200088f8
 801e5f0:	0801c59d 	.word	0x0801c59d
 801e5f4:	20000080 	.word	0x20000080

0801e5f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e5f8:	b538      	push	{r3, r4, r5, lr}
 801e5fa:	4c15      	ldr	r4, [pc, #84]	; (801e650 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e5fc:	7823      	ldrb	r3, [r4, #0]
 801e5fe:	f3bf 8f5b 	dmb	ish
 801e602:	07da      	lsls	r2, r3, #31
 801e604:	4605      	mov	r5, r0
 801e606:	d40b      	bmi.n	801e620 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e608:	4620      	mov	r0, r4
 801e60a:	f007 fc3d 	bl	8025e88 <__cxa_guard_acquire>
 801e60e:	b138      	cbz	r0, 801e620 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e610:	4620      	mov	r0, r4
 801e612:	f007 fc45 	bl	8025ea0 <__cxa_guard_release>
 801e616:	4a0f      	ldr	r2, [pc, #60]	; (801e654 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e618:	490f      	ldr	r1, [pc, #60]	; (801e658 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e61a:	4810      	ldr	r0, [pc, #64]	; (801e65c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e61c:	f007 fc2d 	bl	8025e7a <__aeabi_atexit>
 801e620:	4c0f      	ldr	r4, [pc, #60]	; (801e660 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e622:	7823      	ldrb	r3, [r4, #0]
 801e624:	f3bf 8f5b 	dmb	ish
 801e628:	07db      	lsls	r3, r3, #31
 801e62a:	d40b      	bmi.n	801e644 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e62c:	4620      	mov	r0, r4
 801e62e:	f007 fc2b 	bl	8025e88 <__cxa_guard_acquire>
 801e632:	b138      	cbz	r0, 801e644 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e634:	4620      	mov	r0, r4
 801e636:	f007 fc33 	bl	8025ea0 <__cxa_guard_release>
 801e63a:	4a06      	ldr	r2, [pc, #24]	; (801e654 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e63c:	4909      	ldr	r1, [pc, #36]	; (801e664 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e63e:	480a      	ldr	r0, [pc, #40]	; (801e668 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e640:	f007 fc1b 	bl	8025e7a <__aeabi_atexit>
 801e644:	4b05      	ldr	r3, [pc, #20]	; (801e65c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e646:	62ab      	str	r3, [r5, #40]	; 0x28
 801e648:	4b07      	ldr	r3, [pc, #28]	; (801e668 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e64a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e64c:	bd38      	pop	{r3, r4, r5, pc}
 801e64e:	bf00      	nop
 801e650:	200088c4 	.word	0x200088c4
 801e654:	20000000 	.word	0x20000000
 801e658:	0801c5a3 	.word	0x0801c5a3
 801e65c:	2000004c 	.word	0x2000004c
 801e660:	200088c8 	.word	0x200088c8
 801e664:	0801c5a1 	.word	0x0801c5a1
 801e668:	20000050 	.word	0x20000050

0801e66c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e66c:	b510      	push	{r4, lr}
 801e66e:	4604      	mov	r4, r0
 801e670:	f7ff ff88 	bl	801e584 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e674:	4620      	mov	r0, r4
 801e676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e67a:	f7ff bfbd 	b.w	801e5f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e680 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801e680:	b538      	push	{r3, r4, r5, lr}
 801e682:	4c15      	ldr	r4, [pc, #84]	; (801e6d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801e684:	7823      	ldrb	r3, [r4, #0]
 801e686:	f3bf 8f5b 	dmb	ish
 801e68a:	07da      	lsls	r2, r3, #31
 801e68c:	4605      	mov	r5, r0
 801e68e:	d40b      	bmi.n	801e6a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e690:	4620      	mov	r0, r4
 801e692:	f007 fbf9 	bl	8025e88 <__cxa_guard_acquire>
 801e696:	b138      	cbz	r0, 801e6a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e698:	4620      	mov	r0, r4
 801e69a:	f007 fc01 	bl	8025ea0 <__cxa_guard_release>
 801e69e:	4a0f      	ldr	r2, [pc, #60]	; (801e6dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e6a0:	490f      	ldr	r1, [pc, #60]	; (801e6e0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801e6a2:	4810      	ldr	r0, [pc, #64]	; (801e6e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e6a4:	f007 fbe9 	bl	8025e7a <__aeabi_atexit>
 801e6a8:	4c0f      	ldr	r4, [pc, #60]	; (801e6e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801e6aa:	7823      	ldrb	r3, [r4, #0]
 801e6ac:	f3bf 8f5b 	dmb	ish
 801e6b0:	07db      	lsls	r3, r3, #31
 801e6b2:	d40b      	bmi.n	801e6cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e6b4:	4620      	mov	r0, r4
 801e6b6:	f007 fbe7 	bl	8025e88 <__cxa_guard_acquire>
 801e6ba:	b138      	cbz	r0, 801e6cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e6bc:	4620      	mov	r0, r4
 801e6be:	f007 fbef 	bl	8025ea0 <__cxa_guard_release>
 801e6c2:	4a06      	ldr	r2, [pc, #24]	; (801e6dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e6c4:	4909      	ldr	r1, [pc, #36]	; (801e6ec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801e6c6:	480a      	ldr	r0, [pc, #40]	; (801e6f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e6c8:	f007 fbd7 	bl	8025e7a <__aeabi_atexit>
 801e6cc:	4b05      	ldr	r3, [pc, #20]	; (801e6e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e6ce:	652b      	str	r3, [r5, #80]	; 0x50
 801e6d0:	4b07      	ldr	r3, [pc, #28]	; (801e6f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e6d2:	656b      	str	r3, [r5, #84]	; 0x54
 801e6d4:	bd38      	pop	{r3, r4, r5, pc}
 801e6d6:	bf00      	nop
 801e6d8:	200088fc 	.word	0x200088fc
 801e6dc:	20000000 	.word	0x20000000
 801e6e0:	0801c58f 	.word	0x0801c58f
 801e6e4:	20000084 	.word	0x20000084
 801e6e8:	20008900 	.word	0x20008900
 801e6ec:	0801c58d 	.word	0x0801c58d
 801e6f0:	20000088 	.word	0x20000088

0801e6f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801e6f4:	b538      	push	{r3, r4, r5, lr}
 801e6f6:	4c15      	ldr	r4, [pc, #84]	; (801e74c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801e6f8:	7823      	ldrb	r3, [r4, #0]
 801e6fa:	f3bf 8f5b 	dmb	ish
 801e6fe:	07da      	lsls	r2, r3, #31
 801e700:	4605      	mov	r5, r0
 801e702:	d40b      	bmi.n	801e71c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e704:	4620      	mov	r0, r4
 801e706:	f007 fbbf 	bl	8025e88 <__cxa_guard_acquire>
 801e70a:	b138      	cbz	r0, 801e71c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e70c:	4620      	mov	r0, r4
 801e70e:	f007 fbc7 	bl	8025ea0 <__cxa_guard_release>
 801e712:	4a0f      	ldr	r2, [pc, #60]	; (801e750 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e714:	490f      	ldr	r1, [pc, #60]	; (801e754 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801e716:	4810      	ldr	r0, [pc, #64]	; (801e758 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e718:	f007 fbaf 	bl	8025e7a <__aeabi_atexit>
 801e71c:	4c0f      	ldr	r4, [pc, #60]	; (801e75c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801e71e:	7823      	ldrb	r3, [r4, #0]
 801e720:	f3bf 8f5b 	dmb	ish
 801e724:	07db      	lsls	r3, r3, #31
 801e726:	d40b      	bmi.n	801e740 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e728:	4620      	mov	r0, r4
 801e72a:	f007 fbad 	bl	8025e88 <__cxa_guard_acquire>
 801e72e:	b138      	cbz	r0, 801e740 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e730:	4620      	mov	r0, r4
 801e732:	f007 fbb5 	bl	8025ea0 <__cxa_guard_release>
 801e736:	4a06      	ldr	r2, [pc, #24]	; (801e750 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e738:	4909      	ldr	r1, [pc, #36]	; (801e760 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801e73a:	480a      	ldr	r0, [pc, #40]	; (801e764 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e73c:	f007 fb9d 	bl	8025e7a <__aeabi_atexit>
 801e740:	4b05      	ldr	r3, [pc, #20]	; (801e758 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e742:	64ab      	str	r3, [r5, #72]	; 0x48
 801e744:	4b07      	ldr	r3, [pc, #28]	; (801e764 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e746:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e748:	bd38      	pop	{r3, r4, r5, pc}
 801e74a:	bf00      	nop
 801e74c:	20008904 	.word	0x20008904
 801e750:	20000000 	.word	0x20000000
 801e754:	0801c593 	.word	0x0801c593
 801e758:	2000008c 	.word	0x2000008c
 801e75c:	20008908 	.word	0x20008908
 801e760:	0801c591 	.word	0x0801c591
 801e764:	20000090 	.word	0x20000090

0801e768 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801e768:	b538      	push	{r3, r4, r5, lr}
 801e76a:	4c15      	ldr	r4, [pc, #84]	; (801e7c0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801e76c:	7823      	ldrb	r3, [r4, #0]
 801e76e:	f3bf 8f5b 	dmb	ish
 801e772:	07da      	lsls	r2, r3, #31
 801e774:	4605      	mov	r5, r0
 801e776:	d40b      	bmi.n	801e790 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801e778:	4620      	mov	r0, r4
 801e77a:	f007 fb85 	bl	8025e88 <__cxa_guard_acquire>
 801e77e:	b138      	cbz	r0, 801e790 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801e780:	4620      	mov	r0, r4
 801e782:	f007 fb8d 	bl	8025ea0 <__cxa_guard_release>
 801e786:	4a0f      	ldr	r2, [pc, #60]	; (801e7c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801e788:	490f      	ldr	r1, [pc, #60]	; (801e7c8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801e78a:	4810      	ldr	r0, [pc, #64]	; (801e7cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801e78c:	f007 fb75 	bl	8025e7a <__aeabi_atexit>
 801e790:	4c0f      	ldr	r4, [pc, #60]	; (801e7d0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801e792:	7823      	ldrb	r3, [r4, #0]
 801e794:	f3bf 8f5b 	dmb	ish
 801e798:	07db      	lsls	r3, r3, #31
 801e79a:	d40b      	bmi.n	801e7b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801e79c:	4620      	mov	r0, r4
 801e79e:	f007 fb73 	bl	8025e88 <__cxa_guard_acquire>
 801e7a2:	b138      	cbz	r0, 801e7b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801e7a4:	4620      	mov	r0, r4
 801e7a6:	f007 fb7b 	bl	8025ea0 <__cxa_guard_release>
 801e7aa:	4a06      	ldr	r2, [pc, #24]	; (801e7c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801e7ac:	4909      	ldr	r1, [pc, #36]	; (801e7d4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801e7ae:	480a      	ldr	r0, [pc, #40]	; (801e7d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801e7b0:	f007 fb63 	bl	8025e7a <__aeabi_atexit>
 801e7b4:	4b05      	ldr	r3, [pc, #20]	; (801e7cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801e7b6:	642b      	str	r3, [r5, #64]	; 0x40
 801e7b8:	4b07      	ldr	r3, [pc, #28]	; (801e7d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801e7ba:	646b      	str	r3, [r5, #68]	; 0x44
 801e7bc:	bd38      	pop	{r3, r4, r5, pc}
 801e7be:	bf00      	nop
 801e7c0:	200088cc 	.word	0x200088cc
 801e7c4:	20000000 	.word	0x20000000
 801e7c8:	0801c597 	.word	0x0801c597
 801e7cc:	20000054 	.word	0x20000054
 801e7d0:	200088d0 	.word	0x200088d0
 801e7d4:	0801c595 	.word	0x0801c595
 801e7d8:	20000058 	.word	0x20000058

0801e7dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801e7dc:	b538      	push	{r3, r4, r5, lr}
 801e7de:	4c15      	ldr	r4, [pc, #84]	; (801e834 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801e7e0:	7823      	ldrb	r3, [r4, #0]
 801e7e2:	f3bf 8f5b 	dmb	ish
 801e7e6:	07da      	lsls	r2, r3, #31
 801e7e8:	4605      	mov	r5, r0
 801e7ea:	d40b      	bmi.n	801e804 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801e7ec:	4620      	mov	r0, r4
 801e7ee:	f007 fb4b 	bl	8025e88 <__cxa_guard_acquire>
 801e7f2:	b138      	cbz	r0, 801e804 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801e7f4:	4620      	mov	r0, r4
 801e7f6:	f007 fb53 	bl	8025ea0 <__cxa_guard_release>
 801e7fa:	4a0f      	ldr	r2, [pc, #60]	; (801e838 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801e7fc:	490f      	ldr	r1, [pc, #60]	; (801e83c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801e7fe:	4810      	ldr	r0, [pc, #64]	; (801e840 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801e800:	f007 fb3b 	bl	8025e7a <__aeabi_atexit>
 801e804:	4c0f      	ldr	r4, [pc, #60]	; (801e844 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801e806:	7823      	ldrb	r3, [r4, #0]
 801e808:	f3bf 8f5b 	dmb	ish
 801e80c:	07db      	lsls	r3, r3, #31
 801e80e:	d40b      	bmi.n	801e828 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801e810:	4620      	mov	r0, r4
 801e812:	f007 fb39 	bl	8025e88 <__cxa_guard_acquire>
 801e816:	b138      	cbz	r0, 801e828 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801e818:	4620      	mov	r0, r4
 801e81a:	f007 fb41 	bl	8025ea0 <__cxa_guard_release>
 801e81e:	4a06      	ldr	r2, [pc, #24]	; (801e838 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801e820:	4909      	ldr	r1, [pc, #36]	; (801e848 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801e822:	480a      	ldr	r0, [pc, #40]	; (801e84c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801e824:	f007 fb29 	bl	8025e7a <__aeabi_atexit>
 801e828:	4b05      	ldr	r3, [pc, #20]	; (801e840 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801e82a:	63ab      	str	r3, [r5, #56]	; 0x38
 801e82c:	4b07      	ldr	r3, [pc, #28]	; (801e84c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801e82e:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e830:	bd38      	pop	{r3, r4, r5, pc}
 801e832:	bf00      	nop
 801e834:	200088ec 	.word	0x200088ec
 801e838:	20000000 	.word	0x20000000
 801e83c:	0801c59b 	.word	0x0801c59b
 801e840:	20000074 	.word	0x20000074
 801e844:	200088f0 	.word	0x200088f0
 801e848:	0801c599 	.word	0x0801c599
 801e84c:	20000078 	.word	0x20000078

0801e850 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801e850:	b510      	push	{r4, lr}
 801e852:	4604      	mov	r4, r0
 801e854:	f7ff ff14 	bl	801e680 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801e858:	4620      	mov	r0, r4
 801e85a:	f7ff ff85 	bl	801e768 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801e85e:	4620      	mov	r0, r4
 801e860:	f7ff ff48 	bl	801e6f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801e864:	4620      	mov	r0, r4
 801e866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e86a:	f7ff bfb7 	b.w	801e7dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801e870 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e870:	b538      	push	{r3, r4, r5, lr}
 801e872:	4c15      	ldr	r4, [pc, #84]	; (801e8c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e874:	7823      	ldrb	r3, [r4, #0]
 801e876:	f3bf 8f5b 	dmb	ish
 801e87a:	07da      	lsls	r2, r3, #31
 801e87c:	4605      	mov	r5, r0
 801e87e:	d40b      	bmi.n	801e898 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e880:	4620      	mov	r0, r4
 801e882:	f007 fb01 	bl	8025e88 <__cxa_guard_acquire>
 801e886:	b138      	cbz	r0, 801e898 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e888:	4620      	mov	r0, r4
 801e88a:	f007 fb09 	bl	8025ea0 <__cxa_guard_release>
 801e88e:	4a0f      	ldr	r2, [pc, #60]	; (801e8cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e890:	490f      	ldr	r1, [pc, #60]	; (801e8d0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e892:	4810      	ldr	r0, [pc, #64]	; (801e8d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e894:	f007 faf1 	bl	8025e7a <__aeabi_atexit>
 801e898:	4c0f      	ldr	r4, [pc, #60]	; (801e8d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e89a:	7823      	ldrb	r3, [r4, #0]
 801e89c:	f3bf 8f5b 	dmb	ish
 801e8a0:	07db      	lsls	r3, r3, #31
 801e8a2:	d40b      	bmi.n	801e8bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e8a4:	4620      	mov	r0, r4
 801e8a6:	f007 faef 	bl	8025e88 <__cxa_guard_acquire>
 801e8aa:	b138      	cbz	r0, 801e8bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e8ac:	4620      	mov	r0, r4
 801e8ae:	f007 faf7 	bl	8025ea0 <__cxa_guard_release>
 801e8b2:	4a06      	ldr	r2, [pc, #24]	; (801e8cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e8b4:	4909      	ldr	r1, [pc, #36]	; (801e8dc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e8b6:	480a      	ldr	r0, [pc, #40]	; (801e8e0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e8b8:	f007 fadf 	bl	8025e7a <__aeabi_atexit>
 801e8bc:	4b05      	ldr	r3, [pc, #20]	; (801e8d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e8be:	662b      	str	r3, [r5, #96]	; 0x60
 801e8c0:	4b07      	ldr	r3, [pc, #28]	; (801e8e0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e8c2:	666b      	str	r3, [r5, #100]	; 0x64
 801e8c4:	bd38      	pop	{r3, r4, r5, pc}
 801e8c6:	bf00      	nop
 801e8c8:	200088d4 	.word	0x200088d4
 801e8cc:	20000000 	.word	0x20000000
 801e8d0:	0801c587 	.word	0x0801c587
 801e8d4:	2000005c 	.word	0x2000005c
 801e8d8:	200088d8 	.word	0x200088d8
 801e8dc:	0801c585 	.word	0x0801c585
 801e8e0:	20000060 	.word	0x20000060

0801e8e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e8e4:	b538      	push	{r3, r4, r5, lr}
 801e8e6:	4c15      	ldr	r4, [pc, #84]	; (801e93c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e8e8:	7823      	ldrb	r3, [r4, #0]
 801e8ea:	f3bf 8f5b 	dmb	ish
 801e8ee:	07da      	lsls	r2, r3, #31
 801e8f0:	4605      	mov	r5, r0
 801e8f2:	d40b      	bmi.n	801e90c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e8f4:	4620      	mov	r0, r4
 801e8f6:	f007 fac7 	bl	8025e88 <__cxa_guard_acquire>
 801e8fa:	b138      	cbz	r0, 801e90c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e8fc:	4620      	mov	r0, r4
 801e8fe:	f007 facf 	bl	8025ea0 <__cxa_guard_release>
 801e902:	4a0f      	ldr	r2, [pc, #60]	; (801e940 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e904:	490f      	ldr	r1, [pc, #60]	; (801e944 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e906:	4810      	ldr	r0, [pc, #64]	; (801e948 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e908:	f007 fab7 	bl	8025e7a <__aeabi_atexit>
 801e90c:	4c0f      	ldr	r4, [pc, #60]	; (801e94c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e90e:	7823      	ldrb	r3, [r4, #0]
 801e910:	f3bf 8f5b 	dmb	ish
 801e914:	07db      	lsls	r3, r3, #31
 801e916:	d40b      	bmi.n	801e930 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e918:	4620      	mov	r0, r4
 801e91a:	f007 fab5 	bl	8025e88 <__cxa_guard_acquire>
 801e91e:	b138      	cbz	r0, 801e930 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e920:	4620      	mov	r0, r4
 801e922:	f007 fabd 	bl	8025ea0 <__cxa_guard_release>
 801e926:	4a06      	ldr	r2, [pc, #24]	; (801e940 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e928:	4909      	ldr	r1, [pc, #36]	; (801e950 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e92a:	480a      	ldr	r0, [pc, #40]	; (801e954 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e92c:	f007 faa5 	bl	8025e7a <__aeabi_atexit>
 801e930:	4b05      	ldr	r3, [pc, #20]	; (801e948 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e932:	65ab      	str	r3, [r5, #88]	; 0x58
 801e934:	4b07      	ldr	r3, [pc, #28]	; (801e954 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e936:	65eb      	str	r3, [r5, #92]	; 0x5c
 801e938:	bd38      	pop	{r3, r4, r5, pc}
 801e93a:	bf00      	nop
 801e93c:	200088ac 	.word	0x200088ac
 801e940:	20000000 	.word	0x20000000
 801e944:	0801c58b 	.word	0x0801c58b
 801e948:	20000034 	.word	0x20000034
 801e94c:	200088b0 	.word	0x200088b0
 801e950:	0801c589 	.word	0x0801c589
 801e954:	20000038 	.word	0x20000038

0801e958 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801e958:	b510      	push	{r4, lr}
 801e95a:	4604      	mov	r4, r0
 801e95c:	f7ff ff88 	bl	801e870 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e960:	4620      	mov	r0, r4
 801e962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e966:	f7ff bfbd 	b.w	801e8e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e96c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e96c:	b538      	push	{r3, r4, r5, lr}
 801e96e:	4c15      	ldr	r4, [pc, #84]	; (801e9c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e970:	7823      	ldrb	r3, [r4, #0]
 801e972:	f3bf 8f5b 	dmb	ish
 801e976:	07da      	lsls	r2, r3, #31
 801e978:	4605      	mov	r5, r0
 801e97a:	d40b      	bmi.n	801e994 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e97c:	4620      	mov	r0, r4
 801e97e:	f007 fa83 	bl	8025e88 <__cxa_guard_acquire>
 801e982:	b138      	cbz	r0, 801e994 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e984:	4620      	mov	r0, r4
 801e986:	f007 fa8b 	bl	8025ea0 <__cxa_guard_release>
 801e98a:	4a0f      	ldr	r2, [pc, #60]	; (801e9c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e98c:	490f      	ldr	r1, [pc, #60]	; (801e9cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e98e:	4810      	ldr	r0, [pc, #64]	; (801e9d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e990:	f007 fa73 	bl	8025e7a <__aeabi_atexit>
 801e994:	4c0f      	ldr	r4, [pc, #60]	; (801e9d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e996:	7823      	ldrb	r3, [r4, #0]
 801e998:	f3bf 8f5b 	dmb	ish
 801e99c:	07db      	lsls	r3, r3, #31
 801e99e:	d40b      	bmi.n	801e9b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e9a0:	4620      	mov	r0, r4
 801e9a2:	f007 fa71 	bl	8025e88 <__cxa_guard_acquire>
 801e9a6:	b138      	cbz	r0, 801e9b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e9a8:	4620      	mov	r0, r4
 801e9aa:	f007 fa79 	bl	8025ea0 <__cxa_guard_release>
 801e9ae:	4a06      	ldr	r2, [pc, #24]	; (801e9c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e9b0:	4909      	ldr	r1, [pc, #36]	; (801e9d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e9b2:	480a      	ldr	r0, [pc, #40]	; (801e9dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e9b4:	f007 fa61 	bl	8025e7a <__aeabi_atexit>
 801e9b8:	4b05      	ldr	r3, [pc, #20]	; (801e9d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e9ba:	672b      	str	r3, [r5, #112]	; 0x70
 801e9bc:	4b07      	ldr	r3, [pc, #28]	; (801e9dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e9be:	676b      	str	r3, [r5, #116]	; 0x74
 801e9c0:	bd38      	pop	{r3, r4, r5, pc}
 801e9c2:	bf00      	nop
 801e9c4:	200088a4 	.word	0x200088a4
 801e9c8:	20000000 	.word	0x20000000
 801e9cc:	0801c57f 	.word	0x0801c57f
 801e9d0:	2000002c 	.word	0x2000002c
 801e9d4:	200088a8 	.word	0x200088a8
 801e9d8:	0801c57d 	.word	0x0801c57d
 801e9dc:	20000030 	.word	0x20000030

0801e9e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e9e0:	b538      	push	{r3, r4, r5, lr}
 801e9e2:	4c15      	ldr	r4, [pc, #84]	; (801ea38 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e9e4:	7823      	ldrb	r3, [r4, #0]
 801e9e6:	f3bf 8f5b 	dmb	ish
 801e9ea:	07da      	lsls	r2, r3, #31
 801e9ec:	4605      	mov	r5, r0
 801e9ee:	d40b      	bmi.n	801ea08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e9f0:	4620      	mov	r0, r4
 801e9f2:	f007 fa49 	bl	8025e88 <__cxa_guard_acquire>
 801e9f6:	b138      	cbz	r0, 801ea08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e9f8:	4620      	mov	r0, r4
 801e9fa:	f007 fa51 	bl	8025ea0 <__cxa_guard_release>
 801e9fe:	4a0f      	ldr	r2, [pc, #60]	; (801ea3c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ea00:	490f      	ldr	r1, [pc, #60]	; (801ea40 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ea02:	4810      	ldr	r0, [pc, #64]	; (801ea44 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ea04:	f007 fa39 	bl	8025e7a <__aeabi_atexit>
 801ea08:	4c0f      	ldr	r4, [pc, #60]	; (801ea48 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801ea0a:	7823      	ldrb	r3, [r4, #0]
 801ea0c:	f3bf 8f5b 	dmb	ish
 801ea10:	07db      	lsls	r3, r3, #31
 801ea12:	d40b      	bmi.n	801ea2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ea14:	4620      	mov	r0, r4
 801ea16:	f007 fa37 	bl	8025e88 <__cxa_guard_acquire>
 801ea1a:	b138      	cbz	r0, 801ea2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ea1c:	4620      	mov	r0, r4
 801ea1e:	f007 fa3f 	bl	8025ea0 <__cxa_guard_release>
 801ea22:	4a06      	ldr	r2, [pc, #24]	; (801ea3c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ea24:	4909      	ldr	r1, [pc, #36]	; (801ea4c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ea26:	480a      	ldr	r0, [pc, #40]	; (801ea50 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ea28:	f007 fa27 	bl	8025e7a <__aeabi_atexit>
 801ea2c:	4b05      	ldr	r3, [pc, #20]	; (801ea44 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ea2e:	66ab      	str	r3, [r5, #104]	; 0x68
 801ea30:	4b07      	ldr	r3, [pc, #28]	; (801ea50 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ea32:	66eb      	str	r3, [r5, #108]	; 0x6c
 801ea34:	bd38      	pop	{r3, r4, r5, pc}
 801ea36:	bf00      	nop
 801ea38:	2000889c 	.word	0x2000889c
 801ea3c:	20000000 	.word	0x20000000
 801ea40:	0801c583 	.word	0x0801c583
 801ea44:	20000024 	.word	0x20000024
 801ea48:	200088a0 	.word	0x200088a0
 801ea4c:	0801c581 	.word	0x0801c581
 801ea50:	20000028 	.word	0x20000028

0801ea54 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801ea54:	b510      	push	{r4, lr}
 801ea56:	4604      	mov	r4, r0
 801ea58:	f7ff ff88 	bl	801e96c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801ea5c:	4620      	mov	r0, r4
 801ea5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ea62:	f7ff bfbd 	b.w	801e9e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801ea66 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801ea66:	b510      	push	{r4, lr}
 801ea68:	4604      	mov	r4, r0
 801ea6a:	f7ff fff3 	bl	801ea54 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801ea6e:	4620      	mov	r0, r4
 801ea70:	f7ff ff72 	bl	801e958 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801ea74:	4620      	mov	r0, r4
 801ea76:	f7ff fdf9 	bl	801e66c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801ea7a:	4620      	mov	r0, r4
 801ea7c:	f7ff fcfa 	bl	801e474 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801ea80:	4620      	mov	r0, r4
 801ea82:	f7ff fd75 	bl	801e570 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801ea86:	4620      	mov	r0, r4
 801ea88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ea8c:	f7ff bee0 	b.w	801e850 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801ea90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea94:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801ea98:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801ea9c:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801eaa0:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801eaa4:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801eaa8:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801eaac:	8808      	ldrh	r0, [r1, #0]
 801eaae:	fb05 4c0e 	mla	ip, r5, lr, r4
 801eab2:	2d00      	cmp	r5, #0
 801eab4:	eb02 0a0c 	add.w	sl, r2, ip
 801eab8:	f2c0 80b0 	blt.w	801ec1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801eabc:	45ab      	cmp	fp, r5
 801eabe:	f340 80ad 	ble.w	801ec1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801eac2:	2c00      	cmp	r4, #0
 801eac4:	f2c0 80a8 	blt.w	801ec18 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801eac8:	45a6      	cmp	lr, r4
 801eaca:	f340 80a5 	ble.w	801ec18 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801eace:	f812 200c 	ldrb.w	r2, [r2, ip]
 801ead2:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801ead6:	1c62      	adds	r2, r4, #1
 801ead8:	f100 80a3 	bmi.w	801ec22 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801eadc:	4596      	cmp	lr, r2
 801eade:	f340 80a0 	ble.w	801ec22 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801eae2:	f1b9 0f00 	cmp.w	r9, #0
 801eae6:	f000 809c 	beq.w	801ec22 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801eaea:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801eaee:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801eaf2:	3501      	adds	r5, #1
 801eaf4:	f100 8099 	bmi.w	801ec2a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801eaf8:	45ab      	cmp	fp, r5
 801eafa:	f340 8096 	ble.w	801ec2a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801eafe:	2f00      	cmp	r7, #0
 801eb00:	f000 8093 	beq.w	801ec2a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801eb04:	2c00      	cmp	r4, #0
 801eb06:	f2c0 808e 	blt.w	801ec26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801eb0a:	45a6      	cmp	lr, r4
 801eb0c:	f340 808b 	ble.w	801ec26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801eb10:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801eb14:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801eb18:	3401      	adds	r4, #1
 801eb1a:	f100 8089 	bmi.w	801ec30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801eb1e:	45a6      	cmp	lr, r4
 801eb20:	f340 8086 	ble.w	801ec30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801eb24:	f1b9 0f00 	cmp.w	r9, #0
 801eb28:	f000 8082 	beq.w	801ec30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801eb2c:	44d6      	add	lr, sl
 801eb2e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801eb32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801eb36:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801eb3a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801eb3e:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801eb42:	fb19 fe07 	smulbb	lr, r9, r7
 801eb46:	ea44 0808 	orr.w	r8, r4, r8
 801eb4a:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801eb4e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801eb52:	f1c7 0210 	rsb	r2, r7, #16
 801eb56:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801eb5a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801eb5e:	ea44 0c0c 	orr.w	ip, r4, ip
 801eb62:	eba2 0209 	sub.w	r2, r2, r9
 801eb66:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801eb6a:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801eb6e:	fb04 f40c 	mul.w	r4, r4, ip
 801eb72:	fb02 4808 	mla	r8, r2, r8, r4
 801eb76:	041a      	lsls	r2, r3, #16
 801eb78:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801eb7c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801eb80:	4313      	orrs	r3, r2
 801eb82:	042a      	lsls	r2, r5, #16
 801eb84:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801eb88:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801eb8c:	fb0e 8303 	mla	r3, lr, r3, r8
 801eb90:	432a      	orrs	r2, r5
 801eb92:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801eb96:	fb07 3202 	mla	r2, r7, r2, r3
 801eb9a:	0d53      	lsrs	r3, r2, #21
 801eb9c:	0952      	lsrs	r2, r2, #5
 801eb9e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eba2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801eba6:	431a      	orrs	r2, r3
 801eba8:	b293      	uxth	r3, r2
 801ebaa:	b2b4      	uxth	r4, r6
 801ebac:	1202      	asrs	r2, r0, #8
 801ebae:	43f6      	mvns	r6, r6
 801ebb0:	b2f6      	uxtb	r6, r6
 801ebb2:	121d      	asrs	r5, r3, #8
 801ebb4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ebb8:	fb12 f206 	smulbb	r2, r2, r6
 801ebbc:	10c7      	asrs	r7, r0, #3
 801ebbe:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ebc2:	00c0      	lsls	r0, r0, #3
 801ebc4:	fb05 2504 	mla	r5, r5, r4, r2
 801ebc8:	b2c0      	uxtb	r0, r0
 801ebca:	10da      	asrs	r2, r3, #3
 801ebcc:	00db      	lsls	r3, r3, #3
 801ebce:	b2db      	uxtb	r3, r3
 801ebd0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ebd4:	fb10 f006 	smulbb	r0, r0, r6
 801ebd8:	b2ad      	uxth	r5, r5
 801ebda:	fb03 0004 	mla	r0, r3, r4, r0
 801ebde:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ebe2:	fb17 f706 	smulbb	r7, r7, r6
 801ebe6:	b280      	uxth	r0, r0
 801ebe8:	1c6b      	adds	r3, r5, #1
 801ebea:	fb02 7204 	mla	r2, r2, r4, r7
 801ebee:	b292      	uxth	r2, r2
 801ebf0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ebf4:	1c43      	adds	r3, r0, #1
 801ebf6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ebfa:	1c50      	adds	r0, r2, #1
 801ebfc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ec00:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ec04:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ec08:	0952      	lsrs	r2, r2, #5
 801ec0a:	432b      	orrs	r3, r5
 801ec0c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ec10:	4313      	orrs	r3, r2
 801ec12:	800b      	strh	r3, [r1, #0]
 801ec14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec18:	4680      	mov	r8, r0
 801ec1a:	e75c      	b.n	801ead6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801ec1c:	4684      	mov	ip, r0
 801ec1e:	4680      	mov	r8, r0
 801ec20:	e767      	b.n	801eaf2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801ec22:	4684      	mov	ip, r0
 801ec24:	e765      	b.n	801eaf2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801ec26:	4605      	mov	r5, r0
 801ec28:	e776      	b.n	801eb18 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801ec2a:	4603      	mov	r3, r0
 801ec2c:	4605      	mov	r5, r0
 801ec2e:	e782      	b.n	801eb36 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801ec30:	4603      	mov	r3, r0
 801ec32:	e780      	b.n	801eb36 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801ec34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec38:	b099      	sub	sp, #100	; 0x64
 801ec3a:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801ec3e:	9215      	str	r2, [sp, #84]	; 0x54
 801ec40:	9309      	str	r3, [sp, #36]	; 0x24
 801ec42:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ec44:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801ec48:	930d      	str	r3, [sp, #52]	; 0x34
 801ec4a:	910c      	str	r1, [sp, #48]	; 0x30
 801ec4c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801ec50:	9016      	str	r0, [sp, #88]	; 0x58
 801ec52:	6850      	ldr	r0, [r2, #4]
 801ec54:	6812      	ldr	r2, [r2, #0]
 801ec56:	fb00 1303 	mla	r3, r0, r3, r1
 801ec5a:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801ec5e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ec60:	681b      	ldr	r3, [r3, #0]
 801ec62:	930b      	str	r3, [sp, #44]	; 0x2c
 801ec64:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ec66:	685e      	ldr	r6, [r3, #4]
 801ec68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ec6a:	43db      	mvns	r3, r3
 801ec6c:	b2db      	uxtb	r3, r3
 801ec6e:	3604      	adds	r6, #4
 801ec70:	930a      	str	r3, [sp, #40]	; 0x28
 801ec72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	dc03      	bgt.n	801ec80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ec78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ec7a:	2b00      	cmp	r3, #0
 801ec7c:	f340 8225 	ble.w	801f0ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801ec80:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ec82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ec86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ec8a:	1e48      	subs	r0, r1, #1
 801ec8c:	1e57      	subs	r7, r2, #1
 801ec8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	f340 80e3 	ble.w	801ee5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801ec96:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801ec9a:	ea4f 4325 	mov.w	r3, r5, asr #16
 801ec9e:	d406      	bmi.n	801ecae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801eca0:	4584      	cmp	ip, r0
 801eca2:	da04      	bge.n	801ecae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801eca4:	2b00      	cmp	r3, #0
 801eca6:	db02      	blt.n	801ecae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801eca8:	42bb      	cmp	r3, r7
 801ecaa:	f2c0 80d8 	blt.w	801ee5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801ecae:	f11c 0c01 	adds.w	ip, ip, #1
 801ecb2:	f100 80c9 	bmi.w	801ee48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ecb6:	4561      	cmp	r1, ip
 801ecb8:	f2c0 80c6 	blt.w	801ee48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ecbc:	3301      	adds	r3, #1
 801ecbe:	f100 80c3 	bmi.w	801ee48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ecc2:	429a      	cmp	r2, r3
 801ecc4:	f2c0 80c0 	blt.w	801ee48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ecc8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801eccc:	4647      	mov	r7, r8
 801ecce:	f1bb 0f00 	cmp.w	fp, #0
 801ecd2:	f340 80e3 	ble.w	801ee9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801ecd6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ecd8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ecda:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ecde:	689b      	ldr	r3, [r3, #8]
 801ece0:	ea5f 422a 	movs.w	r2, sl, asr #16
 801ece4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801ece8:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801ecec:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ecf0:	f100 8121 	bmi.w	801ef36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801ecf4:	f103 39ff 	add.w	r9, r3, #4294967295
 801ecf8:	454a      	cmp	r2, r9
 801ecfa:	f280 811c 	bge.w	801ef36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801ecfe:	f1bc 0f00 	cmp.w	ip, #0
 801ed02:	f2c0 8118 	blt.w	801ef36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801ed06:	f10e 39ff 	add.w	r9, lr, #4294967295
 801ed0a:	45cc      	cmp	ip, r9
 801ed0c:	f280 8113 	bge.w	801ef36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801ed10:	b21b      	sxth	r3, r3
 801ed12:	fb0c 2203 	mla	r2, ip, r3, r2
 801ed16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ed18:	eb04 0902 	add.w	r9, r4, r2
 801ed1c:	5ca2      	ldrb	r2, [r4, r2]
 801ed1e:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801ed22:	2800      	cmp	r0, #0
 801ed24:	f000 80fe 	beq.w	801ef24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801ed28:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ed2c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801ed30:	9211      	str	r2, [sp, #68]	; 0x44
 801ed32:	b151      	cbz	r1, 801ed4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ed34:	eb09 0203 	add.w	r2, r9, r3
 801ed38:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ed3c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ed40:	930f      	str	r3, [sp, #60]	; 0x3c
 801ed42:	7853      	ldrb	r3, [r2, #1]
 801ed44:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ed48:	9312      	str	r3, [sp, #72]	; 0x48
 801ed4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ed4c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ed4e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ed52:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ed56:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ed5a:	ea4c 0c03 	orr.w	ip, ip, r3
 801ed5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ed60:	041b      	lsls	r3, r3, #16
 801ed62:	fb10 f201 	smulbb	r2, r0, r1
 801ed66:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801ed6a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ed6e:	10d2      	asrs	r2, r2, #3
 801ed70:	4323      	orrs	r3, r4
 801ed72:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801ed76:	4353      	muls	r3, r2
 801ed78:	fb09 330c 	mla	r3, r9, ip, r3
 801ed7c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801ed80:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ed84:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801ed88:	ea4c 0e0e 	orr.w	lr, ip, lr
 801ed8c:	f1c1 0c10 	rsb	ip, r1, #16
 801ed90:	ebac 0c00 	sub.w	ip, ip, r0
 801ed94:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ed98:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801ed9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ed9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801eda0:	0418      	lsls	r0, r3, #16
 801eda2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801eda6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801edaa:	4318      	orrs	r0, r3
 801edac:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801edb0:	fb02 c200 	mla	r2, r2, r0, ip
 801edb4:	0d53      	lsrs	r3, r2, #21
 801edb6:	0952      	lsrs	r2, r2, #5
 801edb8:	8838      	ldrh	r0, [r7, #0]
 801edba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801edbe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801edc2:	431a      	orrs	r2, r3
 801edc4:	b292      	uxth	r2, r2
 801edc6:	1201      	asrs	r1, r0, #8
 801edc8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801edcc:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801edd0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801edd4:	fb11 f104 	smulbb	r1, r1, r4
 801edd8:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801eddc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ede0:	00c0      	lsls	r0, r0, #3
 801ede2:	fb0c 1c03 	mla	ip, ip, r3, r1
 801ede6:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801edea:	10d1      	asrs	r1, r2, #3
 801edec:	b2c0      	uxtb	r0, r0
 801edee:	00d2      	lsls	r2, r2, #3
 801edf0:	b2d2      	uxtb	r2, r2
 801edf2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801edf6:	fb1e fe04 	smulbb	lr, lr, r4
 801edfa:	fb10 f004 	smulbb	r0, r0, r4
 801edfe:	fa1f fc8c 	uxth.w	ip, ip
 801ee02:	fb01 e103 	mla	r1, r1, r3, lr
 801ee06:	fb02 0303 	mla	r3, r2, r3, r0
 801ee0a:	b29a      	uxth	r2, r3
 801ee0c:	f10c 0301 	add.w	r3, ip, #1
 801ee10:	b289      	uxth	r1, r1
 801ee12:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ee16:	1c53      	adds	r3, r2, #1
 801ee18:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ee1c:	1c4a      	adds	r2, r1, #1
 801ee1e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ee22:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ee26:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ee2a:	0949      	lsrs	r1, r1, #5
 801ee2c:	ea43 030c 	orr.w	r3, r3, ip
 801ee30:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ee34:	430b      	orrs	r3, r1
 801ee36:	803b      	strh	r3, [r7, #0]
 801ee38:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ee3a:	449a      	add	sl, r3
 801ee3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ee3e:	3702      	adds	r7, #2
 801ee40:	441d      	add	r5, r3
 801ee42:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ee46:	e742      	b.n	801ecce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ee48:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ee4a:	449a      	add	sl, r3
 801ee4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ee4e:	441d      	add	r5, r3
 801ee50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee52:	3b01      	subs	r3, #1
 801ee54:	9309      	str	r3, [sp, #36]	; 0x24
 801ee56:	f108 0802 	add.w	r8, r8, #2
 801ee5a:	e718      	b.n	801ec8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ee5c:	d023      	beq.n	801eea6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801ee5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee60:	9825      	ldr	r0, [sp, #148]	; 0x94
 801ee62:	3b01      	subs	r3, #1
 801ee64:	fb00 a003 	mla	r0, r0, r3, sl
 801ee68:	1400      	asrs	r0, r0, #16
 801ee6a:	f53f af2d 	bmi.w	801ecc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ee6e:	3901      	subs	r1, #1
 801ee70:	4288      	cmp	r0, r1
 801ee72:	f6bf af29 	bge.w	801ecc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ee76:	9926      	ldr	r1, [sp, #152]	; 0x98
 801ee78:	fb01 5303 	mla	r3, r1, r3, r5
 801ee7c:	141b      	asrs	r3, r3, #16
 801ee7e:	f53f af23 	bmi.w	801ecc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ee82:	3a01      	subs	r2, #1
 801ee84:	4293      	cmp	r3, r2
 801ee86:	f6bf af1f 	bge.w	801ecc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ee8a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801ee8e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801ee92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801ee96:	f1be 0f00 	cmp.w	lr, #0
 801ee9a:	dc6c      	bgt.n	801ef76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ee9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee9e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801eea2:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801eea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eea8:	2b00      	cmp	r3, #0
 801eeaa:	f340 810e 	ble.w	801f0ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801eeae:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eeb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eeb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801eeba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801eebc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eec0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eec4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eec8:	eef0 6a62 	vmov.f32	s13, s5
 801eecc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eed0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eed4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eed8:	ee16 aa90 	vmov	sl, s13
 801eedc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eee0:	eef0 6a43 	vmov.f32	s13, s6
 801eee4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eee8:	ee12 2a90 	vmov	r2, s5
 801eeec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eef0:	fb92 f3f3 	sdiv	r3, r2, r3
 801eef4:	ee13 2a10 	vmov	r2, s6
 801eef8:	9325      	str	r3, [sp, #148]	; 0x94
 801eefa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801eefc:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef00:	9326      	str	r3, [sp, #152]	; 0x98
 801ef02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ef04:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ef06:	3b01      	subs	r3, #1
 801ef08:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ef0c:	930c      	str	r3, [sp, #48]	; 0x30
 801ef0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ef10:	bf08      	it	eq
 801ef12:	4613      	moveq	r3, r2
 801ef14:	ee16 5a90 	vmov	r5, s13
 801ef18:	9309      	str	r3, [sp, #36]	; 0x24
 801ef1a:	eeb0 3a67 	vmov.f32	s6, s15
 801ef1e:	eef0 2a47 	vmov.f32	s5, s14
 801ef22:	e6a6      	b.n	801ec72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ef24:	2900      	cmp	r1, #0
 801ef26:	f43f af10 	beq.w	801ed4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ef2a:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ef2e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ef32:	930f      	str	r3, [sp, #60]	; 0x3c
 801ef34:	e709      	b.n	801ed4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ef36:	f112 0901 	adds.w	r9, r2, #1
 801ef3a:	f53f af7d 	bmi.w	801ee38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ef3e:	454b      	cmp	r3, r9
 801ef40:	f6ff af7a 	blt.w	801ee38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ef44:	f11c 0901 	adds.w	r9, ip, #1
 801ef48:	f53f af76 	bmi.w	801ee38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ef4c:	45ce      	cmp	lr, r9
 801ef4e:	f6ff af73 	blt.w	801ee38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ef52:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ef54:	9202      	str	r2, [sp, #8]
 801ef56:	b21b      	sxth	r3, r3
 801ef58:	fa0f f28e 	sxth.w	r2, lr
 801ef5c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801ef60:	e9cd c003 	strd	ip, r0, [sp, #12]
 801ef64:	9201      	str	r2, [sp, #4]
 801ef66:	9300      	str	r3, [sp, #0]
 801ef68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ef6a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801ef6c:	4633      	mov	r3, r6
 801ef6e:	4639      	mov	r1, r7
 801ef70:	f7ff fd8e 	bl	801ea90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801ef74:	e760      	b.n	801ee38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ef76:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ef7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ef7e:	ea4f 422a 	mov.w	r2, sl, asr #16
 801ef82:	1429      	asrs	r1, r5, #16
 801ef84:	fb03 2101 	mla	r1, r3, r1, r2
 801ef88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ef8a:	440a      	add	r2, r1
 801ef8c:	5c61      	ldrb	r1, [r4, r1]
 801ef8e:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801ef92:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ef96:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801ef9a:	f1bc 0f00 	cmp.w	ip, #0
 801ef9e:	f000 808c 	beq.w	801f0ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801efa2:	7857      	ldrb	r7, [r2, #1]
 801efa4:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801efa8:	9413      	str	r4, [sp, #76]	; 0x4c
 801efaa:	b140      	cbz	r0, 801efbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801efac:	18d7      	adds	r7, r2, r3
 801efae:	5cd3      	ldrb	r3, [r2, r3]
 801efb0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801efb4:	9310      	str	r3, [sp, #64]	; 0x40
 801efb6:	787b      	ldrb	r3, [r7, #1]
 801efb8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801efbc:	9314      	str	r3, [sp, #80]	; 0x50
 801efbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801efc0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801efc2:	fb1c f200 	smulbb	r2, ip, r0
 801efc6:	041f      	lsls	r7, r3, #16
 801efc8:	10d2      	asrs	r2, r2, #3
 801efca:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801efce:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801efd2:	431f      	orrs	r7, r3
 801efd4:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801efd8:	9317      	str	r3, [sp, #92]	; 0x5c
 801efda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801efdc:	041b      	lsls	r3, r3, #16
 801efde:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801efe2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801efe6:	ea43 030b 	orr.w	r3, r3, fp
 801efea:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801efec:	4353      	muls	r3, r2
 801efee:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801eff2:	fb04 3707 	mla	r7, r4, r7, r3
 801eff6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801effa:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801effe:	ea43 0b01 	orr.w	fp, r3, r1
 801f002:	f1c0 0110 	rsb	r1, r0, #16
 801f006:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f008:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f00a:	eba1 0c0c 	sub.w	ip, r1, ip
 801f00e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f012:	fb0c 770b 	mla	r7, ip, fp, r7
 801f016:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f01a:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801f01e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f022:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801f026:	ea4c 0c0b 	orr.w	ip, ip, fp
 801f02a:	fb02 770c 	mla	r7, r2, ip, r7
 801f02e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f030:	0d79      	lsrs	r1, r7, #21
 801f032:	097f      	lsrs	r7, r7, #5
 801f034:	8812      	ldrh	r2, [r2, #0]
 801f036:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f03a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f03e:	430f      	orrs	r7, r1
 801f040:	b2bb      	uxth	r3, r7
 801f042:	1211      	asrs	r1, r2, #8
 801f044:	1218      	asrs	r0, r3, #8
 801f046:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f04a:	fb11 f104 	smulbb	r1, r1, r4
 801f04e:	10d7      	asrs	r7, r2, #3
 801f050:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f054:	00d2      	lsls	r2, r2, #3
 801f056:	fb00 1009 	mla	r0, r0, r9, r1
 801f05a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f05e:	10d9      	asrs	r1, r3, #3
 801f060:	b2d2      	uxtb	r2, r2
 801f062:	00db      	lsls	r3, r3, #3
 801f064:	fb17 f704 	smulbb	r7, r7, r4
 801f068:	fb12 f204 	smulbb	r2, r2, r4
 801f06c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f070:	b2db      	uxtb	r3, r3
 801f072:	b280      	uxth	r0, r0
 801f074:	fb01 7109 	mla	r1, r1, r9, r7
 801f078:	fb03 2309 	mla	r3, r3, r9, r2
 801f07c:	b29b      	uxth	r3, r3
 801f07e:	b289      	uxth	r1, r1
 801f080:	1c42      	adds	r2, r0, #1
 801f082:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f086:	1c4f      	adds	r7, r1, #1
 801f088:	1c5a      	adds	r2, r3, #1
 801f08a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f08e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801f092:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f096:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f09a:	0949      	lsrs	r1, r1, #5
 801f09c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f09e:	4310      	orrs	r0, r2
 801f0a0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f0a4:	4308      	orrs	r0, r1
 801f0a6:	f823 0b02 	strh.w	r0, [r3], #2
 801f0aa:	930e      	str	r3, [sp, #56]	; 0x38
 801f0ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f0ae:	449a      	add	sl, r3
 801f0b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f0b2:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f0b6:	441d      	add	r5, r3
 801f0b8:	e6ed      	b.n	801ee96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801f0ba:	2800      	cmp	r0, #0
 801f0bc:	f43f af7f 	beq.w	801efbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f0c0:	5cd3      	ldrb	r3, [r2, r3]
 801f0c2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f0c6:	9310      	str	r3, [sp, #64]	; 0x40
 801f0c8:	e779      	b.n	801efbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f0ca:	b019      	add	sp, #100	; 0x64
 801f0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f0d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801f0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f0d4:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801f0d8:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801f0dc:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801f0e0:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801f0e4:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801f0e8:	8808      	ldrh	r0, [r1, #0]
 801f0ea:	fb08 470e 	mla	r7, r8, lr, r4
 801f0ee:	f1b8 0f00 	cmp.w	r8, #0
 801f0f2:	eb02 0907 	add.w	r9, r2, r7
 801f0f6:	db67      	blt.n	801f1c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801f0f8:	45c2      	cmp	sl, r8
 801f0fa:	dd65      	ble.n	801f1c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801f0fc:	2c00      	cmp	r4, #0
 801f0fe:	db61      	blt.n	801f1c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801f100:	45a6      	cmp	lr, r4
 801f102:	dd5f      	ble.n	801f1c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801f104:	5dd2      	ldrb	r2, [r2, r7]
 801f106:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801f10a:	1c62      	adds	r2, r4, #1
 801f10c:	d45f      	bmi.n	801f1ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f10e:	4596      	cmp	lr, r2
 801f110:	dd5d      	ble.n	801f1ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f112:	2d00      	cmp	r5, #0
 801f114:	d05b      	beq.n	801f1ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f116:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f11a:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801f11e:	f118 0801 	adds.w	r8, r8, #1
 801f122:	d458      	bmi.n	801f1d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f124:	45c2      	cmp	sl, r8
 801f126:	dd56      	ble.n	801f1d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f128:	2e00      	cmp	r6, #0
 801f12a:	d054      	beq.n	801f1d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f12c:	2c00      	cmp	r4, #0
 801f12e:	db50      	blt.n	801f1d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801f130:	45a6      	cmp	lr, r4
 801f132:	dd4e      	ble.n	801f1d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801f134:	f819 200e 	ldrb.w	r2, [r9, lr]
 801f138:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801f13c:	3401      	adds	r4, #1
 801f13e:	d407      	bmi.n	801f150 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f140:	45a6      	cmp	lr, r4
 801f142:	dd05      	ble.n	801f150 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f144:	b125      	cbz	r5, 801f150 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f146:	44ce      	add	lr, r9
 801f148:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801f14c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801f150:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801f154:	fb15 f406 	smulbb	r4, r5, r6
 801f158:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f15c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801f160:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f164:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801f168:	ea43 0c0c 	orr.w	ip, r3, ip
 801f16c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f170:	f1c6 0310 	rsb	r3, r6, #16
 801f174:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f178:	1b5b      	subs	r3, r3, r5
 801f17a:	ea4e 0707 	orr.w	r7, lr, r7
 801f17e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801f182:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f186:	437d      	muls	r5, r7
 801f188:	fb03 5c0c 	mla	ip, r3, ip, r5
 801f18c:	0403      	lsls	r3, r0, #16
 801f18e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f192:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f196:	4318      	orrs	r0, r3
 801f198:	0413      	lsls	r3, r2, #16
 801f19a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f19e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f1a2:	4313      	orrs	r3, r2
 801f1a4:	fb04 c000 	mla	r0, r4, r0, ip
 801f1a8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801f1ac:	fb06 0003 	mla	r0, r6, r3, r0
 801f1b0:	0d43      	lsrs	r3, r0, #21
 801f1b2:	0940      	lsrs	r0, r0, #5
 801f1b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f1b8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f1bc:	4318      	orrs	r0, r3
 801f1be:	8008      	strh	r0, [r1, #0]
 801f1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f1c4:	4684      	mov	ip, r0
 801f1c6:	e7a0      	b.n	801f10a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801f1c8:	4607      	mov	r7, r0
 801f1ca:	4684      	mov	ip, r0
 801f1cc:	e7a7      	b.n	801f11e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801f1ce:	4607      	mov	r7, r0
 801f1d0:	e7a5      	b.n	801f11e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801f1d2:	4602      	mov	r2, r0
 801f1d4:	e7b2      	b.n	801f13c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801f1d6:	4602      	mov	r2, r0
 801f1d8:	e7ba      	b.n	801f150 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801f1da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f1da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1de:	b093      	sub	sp, #76	; 0x4c
 801f1e0:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801f1e4:	920f      	str	r2, [sp, #60]	; 0x3c
 801f1e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f1e8:	9108      	str	r1, [sp, #32]
 801f1ea:	9306      	str	r3, [sp, #24]
 801f1ec:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801f1f0:	9010      	str	r0, [sp, #64]	; 0x40
 801f1f2:	6850      	ldr	r0, [r2, #4]
 801f1f4:	6812      	ldr	r2, [r2, #0]
 801f1f6:	fb00 1303 	mla	r3, r0, r3, r1
 801f1fa:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801f1fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f200:	681b      	ldr	r3, [r3, #0]
 801f202:	9307      	str	r3, [sp, #28]
 801f204:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f206:	685f      	ldr	r7, [r3, #4]
 801f208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f20c:	3704      	adds	r7, #4
 801f20e:	9b08      	ldr	r3, [sp, #32]
 801f210:	2b00      	cmp	r3, #0
 801f212:	dc03      	bgt.n	801f21c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f214:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f216:	2b00      	cmp	r3, #0
 801f218:	f340 81b2 	ble.w	801f580 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801f21c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f21e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f222:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f226:	1e48      	subs	r0, r1, #1
 801f228:	f102 3cff 	add.w	ip, r2, #4294967295
 801f22c:	9b06      	ldr	r3, [sp, #24]
 801f22e:	2b00      	cmp	r3, #0
 801f230:	f340 80a9 	ble.w	801f386 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f234:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801f238:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f23c:	d406      	bmi.n	801f24c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f23e:	4586      	cmp	lr, r0
 801f240:	da04      	bge.n	801f24c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f242:	2b00      	cmp	r3, #0
 801f244:	db02      	blt.n	801f24c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f246:	4563      	cmp	r3, ip
 801f248:	f2c0 809e 	blt.w	801f388 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f24c:	f11e 0e01 	adds.w	lr, lr, #1
 801f250:	f100 808f 	bmi.w	801f372 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f254:	4571      	cmp	r1, lr
 801f256:	f2c0 808c 	blt.w	801f372 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f25a:	3301      	adds	r3, #1
 801f25c:	f100 8089 	bmi.w	801f372 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f260:	429a      	cmp	r2, r3
 801f262:	f2c0 8086 	blt.w	801f372 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f266:	f8dd b018 	ldr.w	fp, [sp, #24]
 801f26a:	46c8      	mov	r8, r9
 801f26c:	f1bb 0f00 	cmp.w	fp, #0
 801f270:	f340 80a6 	ble.w	801f3c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f274:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f276:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f278:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f27c:	689b      	ldr	r3, [r3, #8]
 801f27e:	1422      	asrs	r2, r4, #16
 801f280:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801f284:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801f288:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f28c:	f100 80e3 	bmi.w	801f456 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f290:	f103 3aff 	add.w	sl, r3, #4294967295
 801f294:	4552      	cmp	r2, sl
 801f296:	f280 80de 	bge.w	801f456 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f29a:	f1bc 0f00 	cmp.w	ip, #0
 801f29e:	f2c0 80da 	blt.w	801f456 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f2a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 801f2a6:	45d4      	cmp	ip, sl
 801f2a8:	f280 80d5 	bge.w	801f456 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f2ac:	b21b      	sxth	r3, r3
 801f2ae:	fb0c 2203 	mla	r2, ip, r3, r2
 801f2b2:	9d07      	ldr	r5, [sp, #28]
 801f2b4:	eb05 0a02 	add.w	sl, r5, r2
 801f2b8:	5caa      	ldrb	r2, [r5, r2]
 801f2ba:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801f2be:	2800      	cmp	r0, #0
 801f2c0:	f000 80c0 	beq.w	801f444 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f2c4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f2c8:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801f2cc:	920b      	str	r2, [sp, #44]	; 0x2c
 801f2ce:	b151      	cbz	r1, 801f2e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f2d0:	eb0a 0203 	add.w	r2, sl, r3
 801f2d4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801f2d8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f2dc:	9309      	str	r3, [sp, #36]	; 0x24
 801f2de:	7853      	ldrb	r3, [r2, #1]
 801f2e0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f2e4:	930c      	str	r3, [sp, #48]	; 0x30
 801f2e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f2e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f2ea:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f2ee:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f2f2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f2f6:	ea4c 0c03 	orr.w	ip, ip, r3
 801f2fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f2fc:	041b      	lsls	r3, r3, #16
 801f2fe:	fb10 f201 	smulbb	r2, r0, r1
 801f302:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f306:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f30a:	10d2      	asrs	r2, r2, #3
 801f30c:	432b      	orrs	r3, r5
 801f30e:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801f312:	4353      	muls	r3, r2
 801f314:	fb0a 330c 	mla	r3, sl, ip, r3
 801f318:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801f31c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f320:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f324:	ea4c 0e0e 	orr.w	lr, ip, lr
 801f328:	f1c1 0c10 	rsb	ip, r1, #16
 801f32c:	ebac 0c00 	sub.w	ip, ip, r0
 801f330:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f334:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801f338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f33a:	0418      	lsls	r0, r3, #16
 801f33c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f340:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f344:	4318      	orrs	r0, r3
 801f346:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801f34a:	fb02 c200 	mla	r2, r2, r0, ip
 801f34e:	0d53      	lsrs	r3, r2, #21
 801f350:	0952      	lsrs	r2, r2, #5
 801f352:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f356:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f35a:	431a      	orrs	r2, r3
 801f35c:	f8a8 2000 	strh.w	r2, [r8]
 801f360:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f362:	441c      	add	r4, r3
 801f364:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f366:	f108 0802 	add.w	r8, r8, #2
 801f36a:	441e      	add	r6, r3
 801f36c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f370:	e77c      	b.n	801f26c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f372:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f374:	441c      	add	r4, r3
 801f376:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f378:	441e      	add	r6, r3
 801f37a:	9b06      	ldr	r3, [sp, #24]
 801f37c:	3b01      	subs	r3, #1
 801f37e:	9306      	str	r3, [sp, #24]
 801f380:	f109 0902 	add.w	r9, r9, #2
 801f384:	e752      	b.n	801f22c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f386:	d020      	beq.n	801f3ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f388:	9b06      	ldr	r3, [sp, #24]
 801f38a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f38c:	3b01      	subs	r3, #1
 801f38e:	fb00 4003 	mla	r0, r0, r3, r4
 801f392:	1400      	asrs	r0, r0, #16
 801f394:	f53f af67 	bmi.w	801f266 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f398:	3901      	subs	r1, #1
 801f39a:	4288      	cmp	r0, r1
 801f39c:	f6bf af63 	bge.w	801f266 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f3a0:	9920      	ldr	r1, [sp, #128]	; 0x80
 801f3a2:	fb01 6303 	mla	r3, r1, r3, r6
 801f3a6:	141b      	asrs	r3, r3, #16
 801f3a8:	f53f af5d 	bmi.w	801f266 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f3ac:	3a01      	subs	r2, #1
 801f3ae:	4293      	cmp	r3, r2
 801f3b0:	f6bf af59 	bge.w	801f266 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f3b4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f3b8:	46ca      	mov	sl, r9
 801f3ba:	f1b8 0f00 	cmp.w	r8, #0
 801f3be:	dc67      	bgt.n	801f490 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f3c0:	9b06      	ldr	r3, [sp, #24]
 801f3c2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801f3c6:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801f3ca:	9b08      	ldr	r3, [sp, #32]
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	f340 80d7 	ble.w	801f580 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801f3d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f3d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f3da:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f3de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f3e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f3e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f3e8:	eeb0 6a62 	vmov.f32	s12, s5
 801f3ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3f8:	ee16 4a10 	vmov	r4, s12
 801f3fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f400:	eeb0 6a43 	vmov.f32	s12, s6
 801f404:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f408:	ee12 2a90 	vmov	r2, s5
 801f40c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f410:	fb92 f3f3 	sdiv	r3, r2, r3
 801f414:	ee13 2a10 	vmov	r2, s6
 801f418:	931f      	str	r3, [sp, #124]	; 0x7c
 801f41a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f41c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f420:	9320      	str	r3, [sp, #128]	; 0x80
 801f422:	9b08      	ldr	r3, [sp, #32]
 801f424:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f426:	3b01      	subs	r3, #1
 801f428:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f42c:	9308      	str	r3, [sp, #32]
 801f42e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f430:	bf08      	it	eq
 801f432:	4613      	moveq	r3, r2
 801f434:	ee16 6a10 	vmov	r6, s12
 801f438:	9306      	str	r3, [sp, #24]
 801f43a:	eeb0 3a67 	vmov.f32	s6, s15
 801f43e:	eef0 2a47 	vmov.f32	s5, s14
 801f442:	e6e4      	b.n	801f20e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f444:	2900      	cmp	r1, #0
 801f446:	f43f af4e 	beq.w	801f2e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f44a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801f44e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f452:	9309      	str	r3, [sp, #36]	; 0x24
 801f454:	e747      	b.n	801f2e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f456:	f112 0a01 	adds.w	sl, r2, #1
 801f45a:	d481      	bmi.n	801f360 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f45c:	4553      	cmp	r3, sl
 801f45e:	f6ff af7f 	blt.w	801f360 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f462:	f11c 0a01 	adds.w	sl, ip, #1
 801f466:	f53f af7b 	bmi.w	801f360 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f46a:	45d6      	cmp	lr, sl
 801f46c:	f6ff af78 	blt.w	801f360 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f470:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801f474:	b21b      	sxth	r3, r3
 801f476:	fa0f f28e 	sxth.w	r2, lr
 801f47a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f47e:	9201      	str	r2, [sp, #4]
 801f480:	9300      	str	r3, [sp, #0]
 801f482:	9a07      	ldr	r2, [sp, #28]
 801f484:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f486:	463b      	mov	r3, r7
 801f488:	4641      	mov	r1, r8
 801f48a:	f7ff fe21 	bl	801f0d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801f48e:	e767      	b.n	801f360 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f490:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f492:	9d07      	ldr	r5, [sp, #28]
 801f494:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f498:	1422      	asrs	r2, r4, #16
 801f49a:	1431      	asrs	r1, r6, #16
 801f49c:	fb03 2101 	mla	r1, r3, r1, r2
 801f4a0:	9a07      	ldr	r2, [sp, #28]
 801f4a2:	440a      	add	r2, r1
 801f4a4:	5c69      	ldrb	r1, [r5, r1]
 801f4a6:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801f4aa:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f4ae:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801f4b2:	f1be 0f00 	cmp.w	lr, #0
 801f4b6:	d05c      	beq.n	801f572 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801f4b8:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f4bc:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801f4c0:	950d      	str	r5, [sp, #52]	; 0x34
 801f4c2:	b150      	cbz	r0, 801f4da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f4c4:	eb02 0c03 	add.w	ip, r2, r3
 801f4c8:	5cd3      	ldrb	r3, [r2, r3]
 801f4ca:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f4ce:	930a      	str	r3, [sp, #40]	; 0x28
 801f4d0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f4d4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f4d8:	930e      	str	r3, [sp, #56]	; 0x38
 801f4da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f4dc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f4de:	fb1e f200 	smulbb	r2, lr, r0
 801f4e2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f4e6:	10d2      	asrs	r2, r2, #3
 801f4e8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f4ec:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f4f0:	ea4c 0c03 	orr.w	ip, ip, r3
 801f4f4:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801f4f8:	9311      	str	r3, [sp, #68]	; 0x44
 801f4fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f4fc:	041b      	lsls	r3, r3, #16
 801f4fe:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801f502:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f506:	ea43 030b 	orr.w	r3, r3, fp
 801f50a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f50c:	4353      	muls	r3, r2
 801f50e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f512:	fb05 3c0c 	mla	ip, r5, ip, r3
 801f516:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f51a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801f51e:	ea43 0b01 	orr.w	fp, r3, r1
 801f522:	f1c0 0110 	rsb	r1, r0, #16
 801f526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f528:	eba1 0e0e 	sub.w	lr, r1, lr
 801f52c:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801f530:	fb0e cc0b 	mla	ip, lr, fp, ip
 801f534:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801f538:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801f53c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f540:	ea4b 0e0e 	orr.w	lr, fp, lr
 801f544:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801f548:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f54c:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801f550:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f554:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f558:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f55c:	ea43 0c0c 	orr.w	ip, r3, ip
 801f560:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f562:	f82a cb02 	strh.w	ip, [sl], #2
 801f566:	441c      	add	r4, r3
 801f568:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f56a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f56e:	441e      	add	r6, r3
 801f570:	e723      	b.n	801f3ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f572:	2800      	cmp	r0, #0
 801f574:	d0b1      	beq.n	801f4da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f576:	5cd3      	ldrb	r3, [r2, r3]
 801f578:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f57c:	930a      	str	r3, [sp, #40]	; 0x28
 801f57e:	e7ac      	b.n	801f4da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f580:	b013      	add	sp, #76	; 0x4c
 801f582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f586 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801f586:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f58a:	880d      	ldrh	r5, [r1, #0]
 801f58c:	b087      	sub	sp, #28
 801f58e:	10ef      	asrs	r7, r5, #3
 801f590:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801f594:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f598:	00ed      	lsls	r5, r5, #3
 801f59a:	9701      	str	r7, [sp, #4]
 801f59c:	b2ed      	uxtb	r5, r5
 801f59e:	9502      	str	r5, [sp, #8]
 801f5a0:	9d01      	ldr	r5, [sp, #4]
 801f5a2:	9103      	str	r1, [sp, #12]
 801f5a4:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801f5a8:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801f5ac:	9902      	ldr	r1, [sp, #8]
 801f5ae:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801f5b2:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801f5b6:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801f5ba:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801f5be:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801f5c2:	022d      	lsls	r5, r5, #8
 801f5c4:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801f5c8:	fb06 0709 	mla	r7, r6, r9, r0
 801f5cc:	430d      	orrs	r5, r1
 801f5ce:	2e00      	cmp	r6, #0
 801f5d0:	eb02 0c07 	add.w	ip, r2, r7
 801f5d4:	9505      	str	r5, [sp, #20]
 801f5d6:	f2c0 80b6 	blt.w	801f746 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801f5da:	45b3      	cmp	fp, r6
 801f5dc:	f340 80b3 	ble.w	801f746 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801f5e0:	2800      	cmp	r0, #0
 801f5e2:	f2c0 80ae 	blt.w	801f742 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801f5e6:	4581      	cmp	r9, r0
 801f5e8:	f340 80ab 	ble.w	801f742 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801f5ec:	5dd7      	ldrb	r7, [r2, r7]
 801f5ee:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f5f2:	441f      	add	r7, r3
 801f5f4:	1c42      	adds	r2, r0, #1
 801f5f6:	f100 80a9 	bmi.w	801f74c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f5fa:	4591      	cmp	r9, r2
 801f5fc:	f340 80a6 	ble.w	801f74c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f600:	2c00      	cmp	r4, #0
 801f602:	f000 80a3 	beq.w	801f74c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f606:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f60a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f60e:	441d      	add	r5, r3
 801f610:	3601      	adds	r6, #1
 801f612:	f100 809f 	bmi.w	801f754 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f616:	45b3      	cmp	fp, r6
 801f618:	f340 809c 	ble.w	801f754 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f61c:	f1be 0f00 	cmp.w	lr, #0
 801f620:	f000 8098 	beq.w	801f754 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f624:	2800      	cmp	r0, #0
 801f626:	f2c0 8093 	blt.w	801f750 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801f62a:	4581      	cmp	r9, r0
 801f62c:	f340 8090 	ble.w	801f750 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801f630:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801f634:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f638:	441e      	add	r6, r3
 801f63a:	3001      	adds	r0, #1
 801f63c:	f100 808d 	bmi.w	801f75a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f640:	4581      	cmp	r9, r0
 801f642:	f340 808a 	ble.w	801f75a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f646:	2c00      	cmp	r4, #0
 801f648:	f000 8087 	beq.w	801f75a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f64c:	44e1      	add	r9, ip
 801f64e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f652:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f656:	4413      	add	r3, r2
 801f658:	b2a4      	uxth	r4, r4
 801f65a:	fa1f fe8e 	uxth.w	lr, lr
 801f65e:	fb04 fb0e 	mul.w	fp, r4, lr
 801f662:	0124      	lsls	r4, r4, #4
 801f664:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801f668:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801f66c:	eba4 040b 	sub.w	r4, r4, fp
 801f670:	fa1f f08e 	uxth.w	r0, lr
 801f674:	b2a2      	uxth	r2, r4
 801f676:	78ac      	ldrb	r4, [r5, #2]
 801f678:	f897 c002 	ldrb.w	ip, [r7, #2]
 801f67c:	9901      	ldr	r1, [sp, #4]
 801f67e:	eba9 0900 	sub.w	r9, r9, r0
 801f682:	fa1f f989 	uxth.w	r9, r9
 801f686:	4354      	muls	r4, r2
 801f688:	fb09 440c 	mla	r4, r9, ip, r4
 801f68c:	f896 c002 	ldrb.w	ip, [r6, #2]
 801f690:	fb00 440c 	mla	r4, r0, ip, r4
 801f694:	f893 c002 	ldrb.w	ip, [r3, #2]
 801f698:	fa1f fe88 	uxth.w	lr, r8
 801f69c:	ea6f 0808 	mvn.w	r8, r8
 801f6a0:	fa5f f888 	uxtb.w	r8, r8
 801f6a4:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f6a8:	fb1a fa08 	smulbb	sl, sl, r8
 801f6ac:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f6b0:	fb0c ac0e 	mla	ip, ip, lr, sl
 801f6b4:	f895 a001 	ldrb.w	sl, [r5, #1]
 801f6b8:	787c      	ldrb	r4, [r7, #1]
 801f6ba:	782d      	ldrb	r5, [r5, #0]
 801f6bc:	783f      	ldrb	r7, [r7, #0]
 801f6be:	fb02 fa0a 	mul.w	sl, r2, sl
 801f6c2:	fb09 aa04 	mla	sl, r9, r4, sl
 801f6c6:	7874      	ldrb	r4, [r6, #1]
 801f6c8:	436a      	muls	r2, r5
 801f6ca:	7835      	ldrb	r5, [r6, #0]
 801f6cc:	fb00 aa04 	mla	sl, r0, r4, sl
 801f6d0:	fb09 2207 	mla	r2, r9, r7, r2
 801f6d4:	785c      	ldrb	r4, [r3, #1]
 801f6d6:	781b      	ldrb	r3, [r3, #0]
 801f6d8:	fb00 2005 	mla	r0, r0, r5, r2
 801f6dc:	fb0b a404 	mla	r4, fp, r4, sl
 801f6e0:	fb0b 0b03 	mla	fp, fp, r3, r0
 801f6e4:	9b02      	ldr	r3, [sp, #8]
 801f6e6:	fb11 fa08 	smulbb	sl, r1, r8
 801f6ea:	fa1f fc8c 	uxth.w	ip, ip
 801f6ee:	fb13 f808 	smulbb	r8, r3, r8
 801f6f2:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801f6f6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f6fa:	fb04 a40e 	mla	r4, r4, lr, sl
 801f6fe:	f10c 0301 	add.w	r3, ip, #1
 801f702:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801f706:	fa1f fe8e 	uxth.w	lr, lr
 801f70a:	b2a4      	uxth	r4, r4
 801f70c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f710:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801f714:	f104 0a01 	add.w	sl, r4, #1
 801f718:	f10e 0c01 	add.w	ip, lr, #1
 801f71c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f720:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f724:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f728:	0964      	lsrs	r4, r4, #5
 801f72a:	ea4c 0c03 	orr.w	ip, ip, r3
 801f72e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801f732:	9b03      	ldr	r3, [sp, #12]
 801f734:	ea4c 0c04 	orr.w	ip, ip, r4
 801f738:	f8a3 c000 	strh.w	ip, [r3]
 801f73c:	b007      	add	sp, #28
 801f73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f742:	af05      	add	r7, sp, #20
 801f744:	e756      	b.n	801f5f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801f746:	ad05      	add	r5, sp, #20
 801f748:	462f      	mov	r7, r5
 801f74a:	e761      	b.n	801f610 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801f74c:	ad05      	add	r5, sp, #20
 801f74e:	e75f      	b.n	801f610 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801f750:	ae05      	add	r6, sp, #20
 801f752:	e772      	b.n	801f63a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801f754:	ab05      	add	r3, sp, #20
 801f756:	461e      	mov	r6, r3
 801f758:	e77e      	b.n	801f658 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801f75a:	ab05      	add	r3, sp, #20
 801f75c:	e77c      	b.n	801f658 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801f75e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f75e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f762:	b095      	sub	sp, #84	; 0x54
 801f764:	9212      	str	r2, [sp, #72]	; 0x48
 801f766:	9309      	str	r3, [sp, #36]	; 0x24
 801f768:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f76a:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801f76e:	930f      	str	r3, [sp, #60]	; 0x3c
 801f770:	910e      	str	r1, [sp, #56]	; 0x38
 801f772:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801f776:	9013      	str	r0, [sp, #76]	; 0x4c
 801f778:	6850      	ldr	r0, [r2, #4]
 801f77a:	6812      	ldr	r2, [r2, #0]
 801f77c:	fb00 1303 	mla	r3, r0, r3, r1
 801f780:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f784:	930a      	str	r3, [sp, #40]	; 0x28
 801f786:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f788:	681b      	ldr	r3, [r3, #0]
 801f78a:	930d      	str	r3, [sp, #52]	; 0x34
 801f78c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f78e:	685c      	ldr	r4, [r3, #4]
 801f790:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f792:	43db      	mvns	r3, r3
 801f794:	b2db      	uxtb	r3, r3
 801f796:	3404      	adds	r4, #4
 801f798:	930b      	str	r3, [sp, #44]	; 0x2c
 801f79a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	dc03      	bgt.n	801f7a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f7a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f7a2:	2b00      	cmp	r3, #0
 801f7a4:	f340 8255 	ble.w	801fc52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801f7a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f7aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f7ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f7b2:	1e48      	subs	r0, r1, #1
 801f7b4:	1e55      	subs	r5, r2, #1
 801f7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7b8:	2b00      	cmp	r3, #0
 801f7ba:	f340 80f9 	ble.w	801f9b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801f7be:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801f7c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f7c2:	1436      	asrs	r6, r6, #16
 801f7c4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f7c8:	d406      	bmi.n	801f7d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f7ca:	4286      	cmp	r6, r0
 801f7cc:	da04      	bge.n	801f7d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f7ce:	2b00      	cmp	r3, #0
 801f7d0:	db02      	blt.n	801f7d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f7d2:	42ab      	cmp	r3, r5
 801f7d4:	f2c0 80ed 	blt.w	801f9b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801f7d8:	3601      	adds	r6, #1
 801f7da:	f100 80da 	bmi.w	801f992 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f7de:	42b1      	cmp	r1, r6
 801f7e0:	f2c0 80d7 	blt.w	801f992 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f7e4:	3301      	adds	r3, #1
 801f7e6:	f100 80d4 	bmi.w	801f992 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f7ea:	429a      	cmp	r2, r3
 801f7ec:	f2c0 80d1 	blt.w	801f992 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801f7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7f2:	9311      	str	r3, [sp, #68]	; 0x44
 801f7f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7f6:	930c      	str	r3, [sp, #48]	; 0x30
 801f7f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f7fa:	2b00      	cmp	r3, #0
 801f7fc:	f340 80fa 	ble.w	801f9f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801f800:	9826      	ldr	r0, [sp, #152]	; 0x98
 801f802:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f804:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f806:	68c6      	ldr	r6, [r0, #12]
 801f808:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f80a:	141d      	asrs	r5, r3, #16
 801f80c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f810:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f812:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f814:	1400      	asrs	r0, r0, #16
 801f816:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f81a:	6892      	ldr	r2, [r2, #8]
 801f81c:	f100 813e 	bmi.w	801fa9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f820:	1e57      	subs	r7, r2, #1
 801f822:	42b8      	cmp	r0, r7
 801f824:	f280 813a 	bge.w	801fa9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f828:	2d00      	cmp	r5, #0
 801f82a:	f2c0 8137 	blt.w	801fa9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f82e:	1e77      	subs	r7, r6, #1
 801f830:	42bd      	cmp	r5, r7
 801f832:	f280 8133 	bge.w	801fa9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801f836:	b212      	sxth	r2, r2
 801f838:	fb05 0002 	mla	r0, r5, r2, r0
 801f83c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f83e:	f815 a000 	ldrb.w	sl, [r5, r0]
 801f842:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801f846:	182e      	adds	r6, r5, r0
 801f848:	eb04 050a 	add.w	r5, r4, sl
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	f000 8117 	beq.w	801fa80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f852:	f896 c001 	ldrb.w	ip, [r6, #1]
 801f856:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f85a:	44a4      	add	ip, r4
 801f85c:	2900      	cmp	r1, #0
 801f85e:	f000 8117 	beq.w	801fa90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801f862:	18b0      	adds	r0, r6, r2
 801f864:	5cb2      	ldrb	r2, [r6, r2]
 801f866:	7840      	ldrb	r0, [r0, #1]
 801f868:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f86c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f870:	4422      	add	r2, r4
 801f872:	4420      	add	r0, r4
 801f874:	b29b      	uxth	r3, r3
 801f876:	b289      	uxth	r1, r1
 801f878:	fb03 f901 	mul.w	r9, r3, r1
 801f87c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f880:	011b      	lsls	r3, r3, #4
 801f882:	b289      	uxth	r1, r1
 801f884:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801f888:	f895 b002 	ldrb.w	fp, [r5, #2]
 801f88c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f88e:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801f892:	f8b6 e000 	ldrh.w	lr, [r6]
 801f896:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801f89a:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801f89e:	eba3 0309 	sub.w	r3, r3, r9
 801f8a2:	b29b      	uxth	r3, r3
 801f8a4:	eba8 0801 	sub.w	r8, r8, r1
 801f8a8:	fa1f f888 	uxth.w	r8, r8
 801f8ac:	435f      	muls	r7, r3
 801f8ae:	fb08 770b 	mla	r7, r8, fp, r7
 801f8b2:	f892 b002 	ldrb.w	fp, [r2, #2]
 801f8b6:	9310      	str	r3, [sp, #64]	; 0x40
 801f8b8:	fb01 770b 	mla	r7, r1, fp, r7
 801f8bc:	f890 b002 	ldrb.w	fp, [r0, #2]
 801f8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8c2:	fb09 770b 	mla	r7, r9, fp, r7
 801f8c6:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801f8ca:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801f8ce:	fb1b fb03 	smulbb	fp, fp, r3
 801f8d2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f8d6:	fb07 b706 	mla	r7, r7, r6, fp
 801f8da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f8dc:	f895 b001 	ldrb.w	fp, [r5, #1]
 801f8e0:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f8e4:	f89c c000 	ldrb.w	ip, [ip]
 801f8e8:	435d      	muls	r5, r3
 801f8ea:	fb08 550b 	mla	r5, r8, fp, r5
 801f8ee:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8f4:	fb01 550b 	mla	r5, r1, fp, r5
 801f8f8:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f8fc:	fb09 550b 	mla	r5, r9, fp, r5
 801f900:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801f904:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f908:	fb1b fb03 	smulbb	fp, fp, r3
 801f90c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f90e:	fb03 f30c 	mul.w	r3, r3, ip
 801f912:	f892 c000 	ldrb.w	ip, [r2]
 801f916:	fb08 330a 	mla	r3, r8, sl, r3
 801f91a:	fb01 330c 	mla	r3, r1, ip, r3
 801f91e:	f890 c000 	ldrb.w	ip, [r0]
 801f922:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f926:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f92c:	fa5f fe8e 	uxtb.w	lr, lr
 801f930:	b2bf      	uxth	r7, r7
 801f932:	fb1e fe03 	smulbb	lr, lr, r3
 801f936:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f93a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f93e:	fb05 b506 	mla	r5, r5, r6, fp
 801f942:	1c7b      	adds	r3, r7, #1
 801f944:	fb0c e606 	mla	r6, ip, r6, lr
 801f948:	b2ad      	uxth	r5, r5
 801f94a:	b2b6      	uxth	r6, r6
 801f94c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801f950:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801f954:	f105 0b01 	add.w	fp, r5, #1
 801f958:	1c77      	adds	r7, r6, #1
 801f95a:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801f95e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801f962:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f966:	096d      	lsrs	r5, r5, #5
 801f968:	431f      	orrs	r7, r3
 801f96a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f96e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f970:	433d      	orrs	r5, r7
 801f972:	801d      	strh	r5, [r3, #0]
 801f974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f976:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f978:	3302      	adds	r3, #2
 801f97a:	930c      	str	r3, [sp, #48]	; 0x30
 801f97c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f97e:	4413      	add	r3, r2
 801f980:	931f      	str	r3, [sp, #124]	; 0x7c
 801f982:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f984:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f986:	4413      	add	r3, r2
 801f988:	9320      	str	r3, [sp, #128]	; 0x80
 801f98a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f98c:	3b01      	subs	r3, #1
 801f98e:	9311      	str	r3, [sp, #68]	; 0x44
 801f990:	e732      	b.n	801f7f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f992:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f994:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801f996:	4433      	add	r3, r6
 801f998:	931f      	str	r3, [sp, #124]	; 0x7c
 801f99a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801f99c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f99e:	4433      	add	r3, r6
 801f9a0:	9320      	str	r3, [sp, #128]	; 0x80
 801f9a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9a4:	3b01      	subs	r3, #1
 801f9a6:	9309      	str	r3, [sp, #36]	; 0x24
 801f9a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f9aa:	3302      	adds	r3, #2
 801f9ac:	930a      	str	r3, [sp, #40]	; 0x28
 801f9ae:	e702      	b.n	801f7b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f9b0:	d027      	beq.n	801fa02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801f9b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9b4:	9821      	ldr	r0, [sp, #132]	; 0x84
 801f9b6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801f9b8:	3b01      	subs	r3, #1
 801f9ba:	fb00 5003 	mla	r0, r0, r3, r5
 801f9be:	1400      	asrs	r0, r0, #16
 801f9c0:	f53f af16 	bmi.w	801f7f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f9c4:	3901      	subs	r1, #1
 801f9c6:	4288      	cmp	r0, r1
 801f9c8:	f6bf af12 	bge.w	801f7f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f9cc:	9922      	ldr	r1, [sp, #136]	; 0x88
 801f9ce:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f9d0:	fb01 0303 	mla	r3, r1, r3, r0
 801f9d4:	141b      	asrs	r3, r3, #16
 801f9d6:	f53f af0b 	bmi.w	801f7f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f9da:	3a01      	subs	r2, #1
 801f9dc:	4293      	cmp	r3, r2
 801f9de:	f6bf af07 	bge.w	801f7f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9e4:	9311      	str	r3, [sp, #68]	; 0x44
 801f9e6:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801f9ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f9ec:	930c      	str	r3, [sp, #48]	; 0x30
 801f9ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f9f0:	2b00      	cmp	r3, #0
 801f9f2:	dc70      	bgt.n	801fad6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801f9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f9f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f9fc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fa00:	930a      	str	r3, [sp, #40]	; 0x28
 801fa02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa04:	2b00      	cmp	r3, #0
 801fa06:	f340 8124 	ble.w	801fc52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801fa0a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fa12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fa16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fa18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fa1c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fa20:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fa24:	eef0 6a62 	vmov.f32	s13, s5
 801fa28:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fa2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa30:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa34:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801fa38:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa3c:	eef0 6a43 	vmov.f32	s13, s6
 801fa40:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa44:	ee12 2a90 	vmov	r2, s5
 801fa48:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa4c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa50:	ee13 2a10 	vmov	r2, s6
 801fa54:	9321      	str	r3, [sp, #132]	; 0x84
 801fa56:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fa58:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa5c:	9322      	str	r3, [sp, #136]	; 0x88
 801fa5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fa62:	3b01      	subs	r3, #1
 801fa64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa68:	930e      	str	r3, [sp, #56]	; 0x38
 801fa6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fa6c:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801fa70:	bf08      	it	eq
 801fa72:	4613      	moveq	r3, r2
 801fa74:	9309      	str	r3, [sp, #36]	; 0x24
 801fa76:	eeb0 3a67 	vmov.f32	s6, s15
 801fa7a:	eef0 2a47 	vmov.f32	s5, s14
 801fa7e:	e68c      	b.n	801f79a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fa80:	b149      	cbz	r1, 801fa96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801fa82:	5cb2      	ldrb	r2, [r6, r2]
 801fa84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa88:	4422      	add	r2, r4
 801fa8a:	4628      	mov	r0, r5
 801fa8c:	46ac      	mov	ip, r5
 801fa8e:	e6f1      	b.n	801f874 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fa90:	4628      	mov	r0, r5
 801fa92:	462a      	mov	r2, r5
 801fa94:	e6ee      	b.n	801f874 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fa96:	4628      	mov	r0, r5
 801fa98:	462a      	mov	r2, r5
 801fa9a:	e7f7      	b.n	801fa8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801fa9c:	1c47      	adds	r7, r0, #1
 801fa9e:	f53f af69 	bmi.w	801f974 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801faa2:	42ba      	cmp	r2, r7
 801faa4:	f6ff af66 	blt.w	801f974 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801faa8:	1c6f      	adds	r7, r5, #1
 801faaa:	f53f af63 	bmi.w	801f974 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801faae:	42be      	cmp	r6, r7
 801fab0:	f6ff af60 	blt.w	801f974 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fab4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801fab6:	9002      	str	r0, [sp, #8]
 801fab8:	b236      	sxth	r6, r6
 801faba:	b212      	sxth	r2, r2
 801fabc:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801fac0:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801fac4:	9200      	str	r2, [sp, #0]
 801fac6:	9601      	str	r6, [sp, #4]
 801fac8:	4623      	mov	r3, r4
 801faca:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801face:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fad0:	f7ff fd59 	bl	801f586 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801fad4:	e74e      	b.n	801f974 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fad6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fad8:	9820      	ldr	r0, [sp, #128]	; 0x80
 801fada:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801fadc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fade:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fae2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fae4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fae8:	142d      	asrs	r5, r5, #16
 801faea:	1400      	asrs	r0, r0, #16
 801faec:	fb02 5000 	mla	r0, r2, r0, r5
 801faf0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801faf2:	f815 9000 	ldrb.w	r9, [r5, r0]
 801faf6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fafa:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801fafe:	182e      	adds	r6, r5, r0
 801fb00:	eb04 0509 	add.w	r5, r4, r9
 801fb04:	2b00      	cmp	r3, #0
 801fb06:	f000 8096 	beq.w	801fc36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801fb0a:	7877      	ldrb	r7, [r6, #1]
 801fb0c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fb10:	4427      	add	r7, r4
 801fb12:	2900      	cmp	r1, #0
 801fb14:	f000 8097 	beq.w	801fc46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801fb18:	18b0      	adds	r0, r6, r2
 801fb1a:	5cb2      	ldrb	r2, [r6, r2]
 801fb1c:	7840      	ldrb	r0, [r0, #1]
 801fb1e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fb26:	4422      	add	r2, r4
 801fb28:	4420      	add	r0, r4
 801fb2a:	b29b      	uxth	r3, r3
 801fb2c:	b289      	uxth	r1, r1
 801fb2e:	fb03 f801 	mul.w	r8, r3, r1
 801fb32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fb34:	f895 b002 	ldrb.w	fp, [r5, #2]
 801fb38:	f8b6 c000 	ldrh.w	ip, [r6]
 801fb3c:	78be      	ldrb	r6, [r7, #2]
 801fb3e:	f814 9009 	ldrb.w	r9, [r4, r9]
 801fb42:	011b      	lsls	r3, r3, #4
 801fb44:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801fb48:	b289      	uxth	r1, r1
 801fb4a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fb4e:	eba3 0308 	sub.w	r3, r3, r8
 801fb52:	b29b      	uxth	r3, r3
 801fb54:	ebae 0e01 	sub.w	lr, lr, r1
 801fb58:	fa1f fe8e 	uxth.w	lr, lr
 801fb5c:	435e      	muls	r6, r3
 801fb5e:	fb0e 660b 	mla	r6, lr, fp, r6
 801fb62:	f892 b002 	ldrb.w	fp, [r2, #2]
 801fb66:	9310      	str	r3, [sp, #64]	; 0x40
 801fb68:	fb01 660b 	mla	r6, r1, fp, r6
 801fb6c:	f890 b002 	ldrb.w	fp, [r0, #2]
 801fb70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb72:	fb08 660b 	mla	r6, r8, fp, r6
 801fb76:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801fb7a:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801fb7e:	fb1b fb03 	smulbb	fp, fp, r3
 801fb82:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801fb86:	fb06 b60a 	mla	r6, r6, sl, fp
 801fb8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fb8c:	f895 b001 	ldrb.w	fp, [r5, #1]
 801fb90:	787d      	ldrb	r5, [r7, #1]
 801fb92:	783f      	ldrb	r7, [r7, #0]
 801fb94:	435d      	muls	r5, r3
 801fb96:	fb0e 550b 	mla	r5, lr, fp, r5
 801fb9a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fb9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fba0:	fb01 550b 	mla	r5, r1, fp, r5
 801fba4:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fba8:	fb08 550b 	mla	r5, r8, fp, r5
 801fbac:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801fbb0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801fbb4:	fb1b fb03 	smulbb	fp, fp, r3
 801fbb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fbba:	437b      	muls	r3, r7
 801fbbc:	7817      	ldrb	r7, [r2, #0]
 801fbbe:	fb0e 3309 	mla	r3, lr, r9, r3
 801fbc2:	fb01 3307 	mla	r3, r1, r7, r3
 801fbc6:	7807      	ldrb	r7, [r0, #0]
 801fbc8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fbcc:	fb08 3707 	mla	r7, r8, r7, r3
 801fbd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fbd2:	fa5f fc8c 	uxtb.w	ip, ip
 801fbd6:	fb1c fc03 	smulbb	ip, ip, r3
 801fbda:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801fbde:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801fbe2:	fb05 b50a 	mla	r5, r5, sl, fp
 801fbe6:	fb07 c70a 	mla	r7, r7, sl, ip
 801fbea:	b2b6      	uxth	r6, r6
 801fbec:	b2ad      	uxth	r5, r5
 801fbee:	b2bf      	uxth	r7, r7
 801fbf0:	1c73      	adds	r3, r6, #1
 801fbf2:	1c7a      	adds	r2, r7, #1
 801fbf4:	f105 0b01 	add.w	fp, r5, #1
 801fbf8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801fbfc:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801fc00:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801fc04:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fc08:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801fc0c:	096d      	lsrs	r5, r5, #5
 801fc0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fc10:	4316      	orrs	r6, r2
 801fc12:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fc16:	432e      	orrs	r6, r5
 801fc18:	f823 6b02 	strh.w	r6, [r3], #2
 801fc1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fc1e:	930c      	str	r3, [sp, #48]	; 0x30
 801fc20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fc22:	4413      	add	r3, r2
 801fc24:	931f      	str	r3, [sp, #124]	; 0x7c
 801fc26:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801fc28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fc2a:	4413      	add	r3, r2
 801fc2c:	9320      	str	r3, [sp, #128]	; 0x80
 801fc2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fc30:	3b01      	subs	r3, #1
 801fc32:	9311      	str	r3, [sp, #68]	; 0x44
 801fc34:	e6db      	b.n	801f9ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801fc36:	b149      	cbz	r1, 801fc4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801fc38:	5cb2      	ldrb	r2, [r6, r2]
 801fc3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fc3e:	4422      	add	r2, r4
 801fc40:	4628      	mov	r0, r5
 801fc42:	462f      	mov	r7, r5
 801fc44:	e771      	b.n	801fb2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801fc46:	4628      	mov	r0, r5
 801fc48:	462a      	mov	r2, r5
 801fc4a:	e76e      	b.n	801fb2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801fc4c:	4628      	mov	r0, r5
 801fc4e:	462a      	mov	r2, r5
 801fc50:	e7f7      	b.n	801fc42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801fc52:	b015      	add	sp, #84	; 0x54
 801fc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801fc58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc5c:	880f      	ldrh	r7, [r1, #0]
 801fc5e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801fc62:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801fc66:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801fc6a:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801fc6e:	023c      	lsls	r4, r7, #8
 801fc70:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801fc74:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801fc78:	017c      	lsls	r4, r7, #5
 801fc7a:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801fc7e:	00ff      	lsls	r7, r7, #3
 801fc80:	ea4b 0404 	orr.w	r4, fp, r4
 801fc84:	b2ff      	uxtb	r7, r7
 801fc86:	fb05 ca0e 	mla	sl, r5, lr, ip
 801fc8a:	4327      	orrs	r7, r4
 801fc8c:	2d00      	cmp	r5, #0
 801fc8e:	eb02 080a 	add.w	r8, r2, sl
 801fc92:	9701      	str	r7, [sp, #4]
 801fc94:	db7e      	blt.n	801fd94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801fc96:	45a9      	cmp	r9, r5
 801fc98:	dd7c      	ble.n	801fd94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801fc9a:	f1bc 0f00 	cmp.w	ip, #0
 801fc9e:	db77      	blt.n	801fd90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801fca0:	45e6      	cmp	lr, ip
 801fca2:	dd75      	ble.n	801fd90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801fca4:	f812 700a 	ldrb.w	r7, [r2, sl]
 801fca8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fcac:	441f      	add	r7, r3
 801fcae:	f11c 0201 	adds.w	r2, ip, #1
 801fcb2:	d472      	bmi.n	801fd9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801fcb4:	4596      	cmp	lr, r2
 801fcb6:	dd70      	ble.n	801fd9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801fcb8:	2800      	cmp	r0, #0
 801fcba:	d06e      	beq.n	801fd9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801fcbc:	f898 4001 	ldrb.w	r4, [r8, #1]
 801fcc0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fcc4:	441c      	add	r4, r3
 801fcc6:	3501      	adds	r5, #1
 801fcc8:	d46b      	bmi.n	801fda2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801fcca:	45a9      	cmp	r9, r5
 801fccc:	dd69      	ble.n	801fda2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801fcce:	2e00      	cmp	r6, #0
 801fcd0:	d067      	beq.n	801fda2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801fcd2:	f1bc 0f00 	cmp.w	ip, #0
 801fcd6:	db62      	blt.n	801fd9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801fcd8:	45e6      	cmp	lr, ip
 801fcda:	dd60      	ble.n	801fd9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801fcdc:	f818 500e 	ldrb.w	r5, [r8, lr]
 801fce0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fce4:	441d      	add	r5, r3
 801fce6:	f11c 0201 	adds.w	r2, ip, #1
 801fcea:	d45d      	bmi.n	801fda8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801fcec:	4596      	cmp	lr, r2
 801fcee:	dd5b      	ble.n	801fda8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801fcf0:	2800      	cmp	r0, #0
 801fcf2:	d059      	beq.n	801fda8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801fcf4:	44c6      	add	lr, r8
 801fcf6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801fcfa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fcfe:	4413      	add	r3, r2
 801fd00:	b280      	uxth	r0, r0
 801fd02:	b2b2      	uxth	r2, r6
 801fd04:	fb00 f602 	mul.w	r6, r0, r2
 801fd08:	0100      	lsls	r0, r0, #4
 801fd0a:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801fd0e:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801fd12:	1b80      	subs	r0, r0, r6
 801fd14:	fa1f fc82 	uxth.w	ip, r2
 801fd18:	b282      	uxth	r2, r0
 801fd1a:	78a0      	ldrb	r0, [r4, #2]
 801fd1c:	f897 e002 	ldrb.w	lr, [r7, #2]
 801fd20:	f897 9000 	ldrb.w	r9, [r7]
 801fd24:	787f      	ldrb	r7, [r7, #1]
 801fd26:	eba8 080c 	sub.w	r8, r8, ip
 801fd2a:	fa1f f888 	uxth.w	r8, r8
 801fd2e:	4350      	muls	r0, r2
 801fd30:	fb08 0e0e 	mla	lr, r8, lr, r0
 801fd34:	78a8      	ldrb	r0, [r5, #2]
 801fd36:	fb0c e000 	mla	r0, ip, r0, lr
 801fd3a:	f893 e002 	ldrb.w	lr, [r3, #2]
 801fd3e:	fb06 0e0e 	mla	lr, r6, lr, r0
 801fd42:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801fd46:	f894 e000 	ldrb.w	lr, [r4]
 801fd4a:	fb02 fe0e 	mul.w	lr, r2, lr
 801fd4e:	fb08 e909 	mla	r9, r8, r9, lr
 801fd52:	f895 e000 	ldrb.w	lr, [r5]
 801fd56:	fb0c 990e 	mla	r9, ip, lr, r9
 801fd5a:	f893 e000 	ldrb.w	lr, [r3]
 801fd5e:	785b      	ldrb	r3, [r3, #1]
 801fd60:	fb06 9e0e 	mla	lr, r6, lr, r9
 801fd64:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801fd68:	ea4e 0e00 	orr.w	lr, lr, r0
 801fd6c:	7860      	ldrb	r0, [r4, #1]
 801fd6e:	4350      	muls	r0, r2
 801fd70:	786a      	ldrb	r2, [r5, #1]
 801fd72:	fb08 0007 	mla	r0, r8, r7, r0
 801fd76:	fb0c 0202 	mla	r2, ip, r2, r0
 801fd7a:	fb06 2303 	mla	r3, r6, r3, r2
 801fd7e:	095b      	lsrs	r3, r3, #5
 801fd80:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fd84:	ea4e 0303 	orr.w	r3, lr, r3
 801fd88:	800b      	strh	r3, [r1, #0]
 801fd8a:	b003      	add	sp, #12
 801fd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd90:	af01      	add	r7, sp, #4
 801fd92:	e78c      	b.n	801fcae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801fd94:	ac01      	add	r4, sp, #4
 801fd96:	4627      	mov	r7, r4
 801fd98:	e795      	b.n	801fcc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801fd9a:	ac01      	add	r4, sp, #4
 801fd9c:	e793      	b.n	801fcc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801fd9e:	ad01      	add	r5, sp, #4
 801fda0:	e7a1      	b.n	801fce6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801fda2:	ab01      	add	r3, sp, #4
 801fda4:	461d      	mov	r5, r3
 801fda6:	e7ab      	b.n	801fd00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801fda8:	ab01      	add	r3, sp, #4
 801fdaa:	e7a9      	b.n	801fd00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801fdac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdb0:	b08f      	sub	sp, #60	; 0x3c
 801fdb2:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801fdb6:	920c      	str	r2, [sp, #48]	; 0x30
 801fdb8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801fdba:	910a      	str	r1, [sp, #40]	; 0x28
 801fdbc:	9306      	str	r3, [sp, #24]
 801fdbe:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801fdc2:	900d      	str	r0, [sp, #52]	; 0x34
 801fdc4:	6850      	ldr	r0, [r2, #4]
 801fdc6:	6812      	ldr	r2, [r2, #0]
 801fdc8:	fb00 1303 	mla	r3, r0, r3, r1
 801fdcc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fdd0:	9307      	str	r3, [sp, #28]
 801fdd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fdd4:	681b      	ldr	r3, [r3, #0]
 801fdd6:	9308      	str	r3, [sp, #32]
 801fdd8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fdda:	685c      	ldr	r4, [r3, #4]
 801fddc:	3404      	adds	r4, #4
 801fdde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	dc03      	bgt.n	801fdec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801fde4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fde6:	2b00      	cmp	r3, #0
 801fde8:	f340 81d6 	ble.w	8020198 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801fdec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fdee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fdf2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fdf6:	1e48      	subs	r0, r1, #1
 801fdf8:	1e56      	subs	r6, r2, #1
 801fdfa:	9b06      	ldr	r3, [sp, #24]
 801fdfc:	2b00      	cmp	r3, #0
 801fdfe:	f340 80b7 	ble.w	801ff70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801fe02:	ea5f 472b 	movs.w	r7, fp, asr #16
 801fe06:	ea4f 4325 	mov.w	r3, r5, asr #16
 801fe0a:	d406      	bmi.n	801fe1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fe0c:	4287      	cmp	r7, r0
 801fe0e:	da04      	bge.n	801fe1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	db02      	blt.n	801fe1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fe14:	42b3      	cmp	r3, r6
 801fe16:	f2c0 80ac 	blt.w	801ff72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801fe1a:	3701      	adds	r7, #1
 801fe1c:	f100 809d 	bmi.w	801ff5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801fe20:	42b9      	cmp	r1, r7
 801fe22:	f2c0 809a 	blt.w	801ff5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801fe26:	3301      	adds	r3, #1
 801fe28:	f100 8097 	bmi.w	801ff5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801fe2c:	429a      	cmp	r2, r3
 801fe2e:	f2c0 8094 	blt.w	801ff5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801fe32:	9b06      	ldr	r3, [sp, #24]
 801fe34:	930b      	str	r3, [sp, #44]	; 0x2c
 801fe36:	9b07      	ldr	r3, [sp, #28]
 801fe38:	9309      	str	r3, [sp, #36]	; 0x24
 801fe3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe3c:	2b00      	cmp	r3, #0
 801fe3e:	f340 80b5 	ble.w	801ffac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801fe42:	9820      	ldr	r0, [sp, #128]	; 0x80
 801fe44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fe46:	68c7      	ldr	r7, [r0, #12]
 801fe48:	6892      	ldr	r2, [r2, #8]
 801fe4a:	ea5f 402b 	movs.w	r0, fp, asr #16
 801fe4e:	ea4f 4625 	mov.w	r6, r5, asr #16
 801fe52:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801fe56:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fe5a:	f100 80fb 	bmi.w	8020054 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801fe5e:	f102 3cff 	add.w	ip, r2, #4294967295
 801fe62:	4560      	cmp	r0, ip
 801fe64:	f280 80f6 	bge.w	8020054 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801fe68:	2e00      	cmp	r6, #0
 801fe6a:	f2c0 80f3 	blt.w	8020054 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801fe6e:	f107 3cff 	add.w	ip, r7, #4294967295
 801fe72:	4566      	cmp	r6, ip
 801fe74:	f280 80ee 	bge.w	8020054 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801fe78:	b212      	sxth	r2, r2
 801fe7a:	fb06 0002 	mla	r0, r6, r2, r0
 801fe7e:	9e08      	ldr	r6, [sp, #32]
 801fe80:	1837      	adds	r7, r6, r0
 801fe82:	5c30      	ldrb	r0, [r6, r0]
 801fe84:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801fe88:	eb04 0c08 	add.w	ip, r4, r8
 801fe8c:	2b00      	cmp	r3, #0
 801fe8e:	f000 80d3 	beq.w	8020038 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801fe92:	787e      	ldrb	r6, [r7, #1]
 801fe94:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fe98:	4426      	add	r6, r4
 801fe9a:	2900      	cmp	r1, #0
 801fe9c:	f000 80d4 	beq.w	8020048 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801fea0:	18b8      	adds	r0, r7, r2
 801fea2:	5cba      	ldrb	r2, [r7, r2]
 801fea4:	7840      	ldrb	r0, [r0, #1]
 801fea6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801feaa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801feae:	4422      	add	r2, r4
 801feb0:	4420      	add	r0, r4
 801feb2:	b29b      	uxth	r3, r3
 801feb4:	b289      	uxth	r1, r1
 801feb6:	fb03 f901 	mul.w	r9, r3, r1
 801feba:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801febe:	011b      	lsls	r3, r3, #4
 801fec0:	b289      	uxth	r1, r1
 801fec2:	78b7      	ldrb	r7, [r6, #2]
 801fec4:	f89c a002 	ldrb.w	sl, [ip, #2]
 801fec8:	f89c c001 	ldrb.w	ip, [ip, #1]
 801fecc:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fed0:	eba3 0309 	sub.w	r3, r3, r9
 801fed4:	b29b      	uxth	r3, r3
 801fed6:	ebae 0e01 	sub.w	lr, lr, r1
 801feda:	fa1f fe8e 	uxth.w	lr, lr
 801fede:	435f      	muls	r7, r3
 801fee0:	fb0e 770a 	mla	r7, lr, sl, r7
 801fee4:	f892 a002 	ldrb.w	sl, [r2, #2]
 801fee8:	fb01 770a 	mla	r7, r1, sl, r7
 801feec:	f890 a002 	ldrb.w	sl, [r0, #2]
 801fef0:	fb09 7a0a 	mla	sl, r9, sl, r7
 801fef4:	f814 7008 	ldrb.w	r7, [r4, r8]
 801fef8:	f896 8000 	ldrb.w	r8, [r6]
 801fefc:	7876      	ldrb	r6, [r6, #1]
 801fefe:	fb03 f808 	mul.w	r8, r3, r8
 801ff02:	fb0e 8807 	mla	r8, lr, r7, r8
 801ff06:	7817      	ldrb	r7, [r2, #0]
 801ff08:	fb01 8807 	mla	r8, r1, r7, r8
 801ff0c:	7807      	ldrb	r7, [r0, #0]
 801ff0e:	fb09 8707 	mla	r7, r9, r7, r8
 801ff12:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801ff16:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ff1a:	ea47 070a 	orr.w	r7, r7, sl
 801ff1e:	4373      	muls	r3, r6
 801ff20:	f892 a001 	ldrb.w	sl, [r2, #1]
 801ff24:	fb0e 330c 	mla	r3, lr, ip, r3
 801ff28:	fb01 310a 	mla	r1, r1, sl, r3
 801ff2c:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ff30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff32:	fb09 1a0a 	mla	sl, r9, sl, r1
 801ff36:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ff3a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ff3e:	ea47 070a 	orr.w	r7, r7, sl
 801ff42:	801f      	strh	r7, [r3, #0]
 801ff44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff46:	3302      	adds	r3, #2
 801ff48:	9309      	str	r3, [sp, #36]	; 0x24
 801ff4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ff4c:	449b      	add	fp, r3
 801ff4e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ff50:	441d      	add	r5, r3
 801ff52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff54:	3b01      	subs	r3, #1
 801ff56:	930b      	str	r3, [sp, #44]	; 0x2c
 801ff58:	e76f      	b.n	801fe3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ff5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ff5c:	449b      	add	fp, r3
 801ff5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ff60:	441d      	add	r5, r3
 801ff62:	9b06      	ldr	r3, [sp, #24]
 801ff64:	3b01      	subs	r3, #1
 801ff66:	9306      	str	r3, [sp, #24]
 801ff68:	9b07      	ldr	r3, [sp, #28]
 801ff6a:	3302      	adds	r3, #2
 801ff6c:	9307      	str	r3, [sp, #28]
 801ff6e:	e744      	b.n	801fdfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801ff70:	d023      	beq.n	801ffba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801ff72:	9b06      	ldr	r3, [sp, #24]
 801ff74:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ff76:	3b01      	subs	r3, #1
 801ff78:	fb00 b003 	mla	r0, r0, r3, fp
 801ff7c:	1400      	asrs	r0, r0, #16
 801ff7e:	f53f af58 	bmi.w	801fe32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ff82:	3901      	subs	r1, #1
 801ff84:	4288      	cmp	r0, r1
 801ff86:	f6bf af54 	bge.w	801fe32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ff8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ff8c:	fb01 5303 	mla	r3, r1, r3, r5
 801ff90:	141b      	asrs	r3, r3, #16
 801ff92:	f53f af4e 	bmi.w	801fe32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ff96:	3a01      	subs	r2, #1
 801ff98:	4293      	cmp	r3, r2
 801ff9a:	f6bf af4a 	bge.w	801fe32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ff9e:	9b06      	ldr	r3, [sp, #24]
 801ffa0:	9309      	str	r3, [sp, #36]	; 0x24
 801ffa2:	9b07      	ldr	r3, [sp, #28]
 801ffa4:	930b      	str	r3, [sp, #44]	; 0x2c
 801ffa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	dc70      	bgt.n	802008e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801ffac:	9b06      	ldr	r3, [sp, #24]
 801ffae:	9a07      	ldr	r2, [sp, #28]
 801ffb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ffb4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ffb8:	9307      	str	r3, [sp, #28]
 801ffba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ffbc:	2b00      	cmp	r3, #0
 801ffbe:	f340 80eb 	ble.w	8020198 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801ffc2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ffc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ffca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ffce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ffd0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ffd4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ffd8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ffdc:	eef0 6a62 	vmov.f32	s13, s5
 801ffe0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ffe4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ffe8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ffec:	ee16 ba90 	vmov	fp, s13
 801fff0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fff4:	eef0 6a43 	vmov.f32	s13, s6
 801fff8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fffc:	ee12 2a90 	vmov	r2, s5
 8020000:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020004:	fb92 f3f3 	sdiv	r3, r2, r3
 8020008:	ee13 2a10 	vmov	r2, s6
 802000c:	931b      	str	r3, [sp, #108]	; 0x6c
 802000e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020010:	fb92 f3f3 	sdiv	r3, r2, r3
 8020014:	931c      	str	r3, [sp, #112]	; 0x70
 8020016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802001a:	3b01      	subs	r3, #1
 802001c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020020:	930a      	str	r3, [sp, #40]	; 0x28
 8020022:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020024:	bf08      	it	eq
 8020026:	4613      	moveq	r3, r2
 8020028:	ee16 5a90 	vmov	r5, s13
 802002c:	9306      	str	r3, [sp, #24]
 802002e:	eeb0 3a67 	vmov.f32	s6, s15
 8020032:	eef0 2a47 	vmov.f32	s5, s14
 8020036:	e6d2      	b.n	801fdde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020038:	b149      	cbz	r1, 802004e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802003a:	5cba      	ldrb	r2, [r7, r2]
 802003c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020040:	4422      	add	r2, r4
 8020042:	4660      	mov	r0, ip
 8020044:	4666      	mov	r6, ip
 8020046:	e734      	b.n	801feb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8020048:	4660      	mov	r0, ip
 802004a:	4662      	mov	r2, ip
 802004c:	e731      	b.n	801feb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 802004e:	4660      	mov	r0, ip
 8020050:	4662      	mov	r2, ip
 8020052:	e7f7      	b.n	8020044 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8020054:	f110 0c01 	adds.w	ip, r0, #1
 8020058:	f53f af74 	bmi.w	801ff44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802005c:	4562      	cmp	r2, ip
 802005e:	f6ff af71 	blt.w	801ff44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020062:	f116 0c01 	adds.w	ip, r6, #1
 8020066:	f53f af6d 	bmi.w	801ff44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802006a:	4567      	cmp	r7, ip
 802006c:	f6ff af6a 	blt.w	801ff44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020070:	b23f      	sxth	r7, r7
 8020072:	b212      	sxth	r2, r2
 8020074:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020078:	e9cd 0602 	strd	r0, r6, [sp, #8]
 802007c:	9200      	str	r2, [sp, #0]
 802007e:	9701      	str	r7, [sp, #4]
 8020080:	4623      	mov	r3, r4
 8020082:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020086:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020088:	f7ff fde6 	bl	801fc58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 802008c:	e75a      	b.n	801ff44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802008e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020090:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020094:	ea4f 462b 	mov.w	r6, fp, asr #16
 8020098:	1428      	asrs	r0, r5, #16
 802009a:	fb02 6000 	mla	r0, r2, r0, r6
 802009e:	9e08      	ldr	r6, [sp, #32]
 80200a0:	f816 8000 	ldrb.w	r8, [r6, r0]
 80200a4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80200a8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80200ac:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80200b0:	1837      	adds	r7, r6, r0
 80200b2:	eb04 0c08 	add.w	ip, r4, r8
 80200b6:	2b00      	cmp	r3, #0
 80200b8:	d060      	beq.n	802017c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 80200ba:	787e      	ldrb	r6, [r7, #1]
 80200bc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80200c0:	4426      	add	r6, r4
 80200c2:	2900      	cmp	r1, #0
 80200c4:	d062      	beq.n	802018c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 80200c6:	18b8      	adds	r0, r7, r2
 80200c8:	5cba      	ldrb	r2, [r7, r2]
 80200ca:	7840      	ldrb	r0, [r0, #1]
 80200cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80200d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80200d4:	4422      	add	r2, r4
 80200d6:	4420      	add	r0, r4
 80200d8:	b29b      	uxth	r3, r3
 80200da:	b289      	uxth	r1, r1
 80200dc:	fb03 f901 	mul.w	r9, r3, r1
 80200e0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80200e4:	011b      	lsls	r3, r3, #4
 80200e6:	b289      	uxth	r1, r1
 80200e8:	78b7      	ldrb	r7, [r6, #2]
 80200ea:	f89c a002 	ldrb.w	sl, [ip, #2]
 80200ee:	f89c c001 	ldrb.w	ip, [ip, #1]
 80200f2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80200f6:	eba3 0309 	sub.w	r3, r3, r9
 80200fa:	b29b      	uxth	r3, r3
 80200fc:	ebae 0e01 	sub.w	lr, lr, r1
 8020100:	fa1f fe8e 	uxth.w	lr, lr
 8020104:	435f      	muls	r7, r3
 8020106:	fb0e 770a 	mla	r7, lr, sl, r7
 802010a:	f892 a002 	ldrb.w	sl, [r2, #2]
 802010e:	fb01 770a 	mla	r7, r1, sl, r7
 8020112:	f890 a002 	ldrb.w	sl, [r0, #2]
 8020116:	fb09 7a0a 	mla	sl, r9, sl, r7
 802011a:	f814 7008 	ldrb.w	r7, [r4, r8]
 802011e:	f896 8000 	ldrb.w	r8, [r6]
 8020122:	7876      	ldrb	r6, [r6, #1]
 8020124:	fb03 f808 	mul.w	r8, r3, r8
 8020128:	fb0e 8807 	mla	r8, lr, r7, r8
 802012c:	7817      	ldrb	r7, [r2, #0]
 802012e:	fb01 8807 	mla	r8, r1, r7, r8
 8020132:	7807      	ldrb	r7, [r0, #0]
 8020134:	fb09 8707 	mla	r7, r9, r7, r8
 8020138:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 802013c:	4373      	muls	r3, r6
 802013e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020142:	7856      	ldrb	r6, [r2, #1]
 8020144:	ea47 070a 	orr.w	r7, r7, sl
 8020148:	fb0e 330c 	mla	r3, lr, ip, r3
 802014c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020150:	fb01 3306 	mla	r3, r1, r6, r3
 8020154:	fb09 3a0a 	mla	sl, r9, sl, r3
 8020158:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802015c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802015e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020162:	ea47 070a 	orr.w	r7, r7, sl
 8020166:	f823 7b02 	strh.w	r7, [r3], #2
 802016a:	930b      	str	r3, [sp, #44]	; 0x2c
 802016c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802016e:	449b      	add	fp, r3
 8020170:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020172:	441d      	add	r5, r3
 8020174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020176:	3b01      	subs	r3, #1
 8020178:	9309      	str	r3, [sp, #36]	; 0x24
 802017a:	e714      	b.n	801ffa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802017c:	b149      	cbz	r1, 8020192 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802017e:	5cba      	ldrb	r2, [r7, r2]
 8020180:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020184:	4422      	add	r2, r4
 8020186:	4660      	mov	r0, ip
 8020188:	4666      	mov	r6, ip
 802018a:	e7a5      	b.n	80200d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802018c:	4660      	mov	r0, ip
 802018e:	4662      	mov	r2, ip
 8020190:	e7a2      	b.n	80200d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8020192:	4660      	mov	r0, ip
 8020194:	4662      	mov	r2, ip
 8020196:	e7f7      	b.n	8020188 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 8020198:	b00f      	add	sp, #60	; 0x3c
 802019a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802019e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 802019e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201a2:	b085      	sub	sp, #20
 80201a4:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 80201a8:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80201ac:	9102      	str	r1, [sp, #8]
 80201ae:	2c00      	cmp	r4, #0
 80201b0:	fb04 710c 	mla	r1, r4, ip, r7
 80201b4:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80201b8:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80201bc:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80201c0:	eb02 0e01 	add.w	lr, r2, r1
 80201c4:	f2c0 8122 	blt.w	802040c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80201c8:	45a0      	cmp	r8, r4
 80201ca:	f340 811f 	ble.w	802040c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80201ce:	2f00      	cmp	r7, #0
 80201d0:	f2c0 811a 	blt.w	8020408 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80201d4:	45bc      	cmp	ip, r7
 80201d6:	f340 8117 	ble.w	8020408 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80201da:	5c52      	ldrb	r2, [r2, r1]
 80201dc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80201e0:	1c7a      	adds	r2, r7, #1
 80201e2:	f100 8116 	bmi.w	8020412 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80201e6:	4594      	cmp	ip, r2
 80201e8:	f340 8113 	ble.w	8020412 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80201ec:	2e00      	cmp	r6, #0
 80201ee:	f000 8112 	beq.w	8020416 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 80201f2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80201f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80201fa:	3401      	adds	r4, #1
 80201fc:	f100 810f 	bmi.w	802041e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8020200:	45a0      	cmp	r8, r4
 8020202:	f340 810c 	ble.w	802041e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8020206:	2800      	cmp	r0, #0
 8020208:	f000 810c 	beq.w	8020424 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 802020c:	2f00      	cmp	r7, #0
 802020e:	f2c0 8104 	blt.w	802041a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8020212:	45bc      	cmp	ip, r7
 8020214:	f340 8101 	ble.w	802041a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8020218:	f81e 200c 	ldrb.w	r2, [lr, ip]
 802021c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8020220:	3701      	adds	r7, #1
 8020222:	f100 8102 	bmi.w	802042a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8020226:	45bc      	cmp	ip, r7
 8020228:	f340 80ff 	ble.w	802042a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802022c:	2e00      	cmp	r6, #0
 802022e:	f000 80fe 	beq.w	802042e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8020232:	44f4      	add	ip, lr
 8020234:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020238:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802023c:	b2b6      	uxth	r6, r6
 802023e:	b280      	uxth	r0, r0
 8020240:	fb00 fe06 	mul.w	lr, r0, r6
 8020244:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020248:	0136      	lsls	r6, r6, #4
 802024a:	eba6 070e 	sub.w	r7, r6, lr
 802024e:	b280      	uxth	r0, r0
 8020250:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8020254:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020258:	b2bf      	uxth	r7, r7
 802025a:	1a1b      	subs	r3, r3, r0
 802025c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8020260:	b29b      	uxth	r3, r3
 8020262:	fb0a f607 	mul.w	r6, sl, r7
 8020266:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802026a:	fb0b 6603 	mla	r6, fp, r3, r6
 802026e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020272:	fb00 6609 	mla	r6, r0, r9, r6
 8020276:	fb0e 6608 	mla	r6, lr, r8, r6
 802027a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802027e:	9600      	str	r6, [sp, #0]
 8020280:	2e00      	cmp	r6, #0
 8020282:	f000 80be 	beq.w	8020402 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8020286:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802028a:	fb0b fc0c 	mul.w	ip, fp, ip
 802028e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020292:	fb0b f505 	mul.w	r5, fp, r5
 8020296:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802029a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802029e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80202a2:	44dc      	add	ip, fp
 80202a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80202a8:	9501      	str	r5, [sp, #4]
 80202aa:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80202ae:	9503      	str	r5, [sp, #12]
 80202b0:	9d01      	ldr	r5, [sp, #4]
 80202b2:	9e02      	ldr	r6, [sp, #8]
 80202b4:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80202b8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80202bc:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80202c0:	fb0a fc0c 	mul.w	ip, sl, ip
 80202c4:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80202c8:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80202cc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80202d0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80202d4:	4465      	add	r5, ip
 80202d6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80202da:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80202de:	fb09 fc0c 	mul.w	ip, r9, ip
 80202e2:	fb09 f904 	mul.w	r9, r9, r4
 80202e6:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80202ea:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80202ee:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80202f2:	fb08 f404 	mul.w	r4, r8, r4
 80202f6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80202fa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80202fe:	fb08 f802 	mul.w	r8, r8, r2
 8020302:	fb0a fa01 	mul.w	sl, sl, r1
 8020306:	0a22      	lsrs	r2, r4, #8
 8020308:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802030c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020310:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8020314:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8020318:	4414      	add	r4, r2
 802031a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802031e:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8020322:	0a2d      	lsrs	r5, r5, #8
 8020324:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020328:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802032c:	9a03      	ldr	r2, [sp, #12]
 802032e:	8836      	ldrh	r6, [r6, #0]
 8020330:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020334:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020338:	437d      	muls	r5, r7
 802033a:	4461      	add	r1, ip
 802033c:	0a24      	lsrs	r4, r4, #8
 802033e:	fb02 5503 	mla	r5, r2, r3, r5
 8020342:	0a09      	lsrs	r1, r1, #8
 8020344:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020348:	fb04 540e 	mla	r4, r4, lr, r5
 802034c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020350:	fb01 4100 	mla	r1, r1, r0, r4
 8020354:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020358:	0a09      	lsrs	r1, r1, #8
 802035a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802035e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8020362:	fb07 f70a 	mul.w	r7, r7, sl
 8020366:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802036a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802036e:	fb03 7101 	mla	r1, r3, r1, r7
 8020372:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020376:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802037a:	fb0e 1e08 	mla	lr, lr, r8, r1
 802037e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8020382:	fb00 e101 	mla	r1, r0, r1, lr
 8020386:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 802038a:	9a00      	ldr	r2, [sp, #0]
 802038c:	b287      	uxth	r7, r0
 802038e:	437a      	muls	r2, r7
 8020390:	0a09      	lsrs	r1, r1, #8
 8020392:	1c53      	adds	r3, r2, #1
 8020394:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020398:	4321      	orrs	r1, r4
 802039a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802039e:	1235      	asrs	r5, r6, #8
 80203a0:	0c0a      	lsrs	r2, r1, #16
 80203a2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80203a6:	b2db      	uxtb	r3, r3
 80203a8:	fb12 f207 	smulbb	r2, r2, r7
 80203ac:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80203b0:	fb05 2503 	mla	r5, r5, r3, r2
 80203b4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80203b8:	10f2      	asrs	r2, r6, #3
 80203ba:	b2c8      	uxtb	r0, r1
 80203bc:	00f6      	lsls	r6, r6, #3
 80203be:	fb14 f407 	smulbb	r4, r4, r7
 80203c2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80203c6:	b2f6      	uxtb	r6, r6
 80203c8:	fb10 f007 	smulbb	r0, r0, r7
 80203cc:	fb02 4203 	mla	r2, r2, r3, r4
 80203d0:	b2ad      	uxth	r5, r5
 80203d2:	fb06 0303 	mla	r3, r6, r3, r0
 80203d6:	b299      	uxth	r1, r3
 80203d8:	b294      	uxth	r4, r2
 80203da:	1c6b      	adds	r3, r5, #1
 80203dc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80203e0:	1c62      	adds	r2, r4, #1
 80203e2:	1c4b      	adds	r3, r1, #1
 80203e4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80203e8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80203ec:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80203f0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80203f4:	0952      	lsrs	r2, r2, #5
 80203f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80203fa:	432b      	orrs	r3, r5
 80203fc:	4313      	orrs	r3, r2
 80203fe:	9a02      	ldr	r2, [sp, #8]
 8020400:	8013      	strh	r3, [r2, #0]
 8020402:	b005      	add	sp, #20
 8020404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020408:	2500      	movs	r5, #0
 802040a:	e6e9      	b.n	80201e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 802040c:	2100      	movs	r1, #0
 802040e:	460d      	mov	r5, r1
 8020410:	e6f3      	b.n	80201fa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8020412:	2100      	movs	r1, #0
 8020414:	e6f1      	b.n	80201fa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8020416:	4631      	mov	r1, r6
 8020418:	e6ef      	b.n	80201fa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802041a:	2400      	movs	r4, #0
 802041c:	e700      	b.n	8020220 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 802041e:	2200      	movs	r2, #0
 8020420:	4614      	mov	r4, r2
 8020422:	e70b      	b.n	802023c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8020424:	4602      	mov	r2, r0
 8020426:	4604      	mov	r4, r0
 8020428:	e708      	b.n	802023c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802042a:	2200      	movs	r2, #0
 802042c:	e706      	b.n	802023c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802042e:	4632      	mov	r2, r6
 8020430:	e704      	b.n	802023c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08020432 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020432:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020436:	b09f      	sub	sp, #124	; 0x7c
 8020438:	921b      	str	r2, [sp, #108]	; 0x6c
 802043a:	9309      	str	r3, [sp, #36]	; 0x24
 802043c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802043e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020442:	931c      	str	r3, [sp, #112]	; 0x70
 8020444:	9119      	str	r1, [sp, #100]	; 0x64
 8020446:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802044a:	901d      	str	r0, [sp, #116]	; 0x74
 802044c:	6850      	ldr	r0, [r2, #4]
 802044e:	6812      	ldr	r2, [r2, #0]
 8020450:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8020452:	fb00 1303 	mla	r3, r0, r3, r1
 8020456:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802045a:	930c      	str	r3, [sp, #48]	; 0x30
 802045c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802045e:	681b      	ldr	r3, [r3, #0]
 8020460:	9312      	str	r3, [sp, #72]	; 0x48
 8020462:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020464:	685e      	ldr	r6, [r3, #4]
 8020466:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 802046a:	930d      	str	r3, [sp, #52]	; 0x34
 802046c:	3604      	adds	r6, #4
 802046e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020470:	2b00      	cmp	r3, #0
 8020472:	dc03      	bgt.n	802047c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020474:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020476:	2b00      	cmp	r3, #0
 8020478:	f340 8388 	ble.w	8020b8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 802047c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802047e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020482:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020486:	1e48      	subs	r0, r1, #1
 8020488:	1e57      	subs	r7, r2, #1
 802048a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802048c:	2b00      	cmp	r3, #0
 802048e:	f340 8195 	ble.w	80207bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020492:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020494:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020498:	ea4f 4325 	mov.w	r3, r5, asr #16
 802049c:	d406      	bmi.n	80204ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802049e:	4584      	cmp	ip, r0
 80204a0:	da04      	bge.n	80204ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80204a2:	2b00      	cmp	r3, #0
 80204a4:	db02      	blt.n	80204ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80204a6:	42bb      	cmp	r3, r7
 80204a8:	f2c0 8189 	blt.w	80207be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 80204ac:	f11c 0c01 	adds.w	ip, ip, #1
 80204b0:	f100 8177 	bmi.w	80207a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80204b4:	4561      	cmp	r1, ip
 80204b6:	f2c0 8174 	blt.w	80207a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80204ba:	3301      	adds	r3, #1
 80204bc:	f100 8171 	bmi.w	80207a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80204c0:	429a      	cmp	r2, r3
 80204c2:	f2c0 816e 	blt.w	80207a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80204c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204c8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80204ca:	931a      	str	r3, [sp, #104]	; 0x68
 80204cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80204ce:	2b00      	cmp	r3, #0
 80204d0:	f340 8193 	ble.w	80207fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 80204d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80204d6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80204da:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80204dc:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80204e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80204e2:	141b      	asrs	r3, r3, #16
 80204e4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80204e8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80204ec:	f100 81d6 	bmi.w	802089c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 80204f0:	f100 38ff 	add.w	r8, r0, #4294967295
 80204f4:	4543      	cmp	r3, r8
 80204f6:	f280 81d1 	bge.w	802089c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 80204fa:	f1bc 0f00 	cmp.w	ip, #0
 80204fe:	f2c0 81cd 	blt.w	802089c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8020502:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020506:	45c4      	cmp	ip, r8
 8020508:	f280 81c8 	bge.w	802089c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 802050c:	b200      	sxth	r0, r0
 802050e:	fb0c 3300 	mla	r3, ip, r0, r3
 8020512:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020514:	eb04 0803 	add.w	r8, r4, r3
 8020518:	5ce3      	ldrb	r3, [r4, r3]
 802051a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802051e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020522:	2a00      	cmp	r2, #0
 8020524:	f000 81af 	beq.w	8020886 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8020528:	f898 c001 	ldrb.w	ip, [r8, #1]
 802052c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020530:	940e      	str	r4, [sp, #56]	; 0x38
 8020532:	0e24      	lsrs	r4, r4, #24
 8020534:	9415      	str	r4, [sp, #84]	; 0x54
 8020536:	b179      	cbz	r1, 8020558 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020538:	eb08 0c00 	add.w	ip, r8, r0
 802053c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020540:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020544:	900a      	str	r0, [sp, #40]	; 0x28
 8020546:	0e00      	lsrs	r0, r0, #24
 8020548:	9013      	str	r0, [sp, #76]	; 0x4c
 802054a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802054e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020552:	900f      	str	r0, [sp, #60]	; 0x3c
 8020554:	0e00      	lsrs	r0, r0, #24
 8020556:	9016      	str	r0, [sp, #88]	; 0x58
 8020558:	b292      	uxth	r2, r2
 802055a:	b289      	uxth	r1, r1
 802055c:	fb02 f901 	mul.w	r9, r2, r1
 8020560:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020564:	0112      	lsls	r2, r2, #4
 8020566:	eba2 0809 	sub.w	r8, r2, r9
 802056a:	b289      	uxth	r1, r1
 802056c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020570:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020572:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020574:	fa1f f888 	uxth.w	r8, r8
 8020578:	1a52      	subs	r2, r2, r1
 802057a:	b292      	uxth	r2, r2
 802057c:	fb08 f000 	mul.w	r0, r8, r0
 8020580:	fb02 000e 	mla	r0, r2, lr, r0
 8020584:	fb01 0004 	mla	r0, r1, r4, r0
 8020588:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802058a:	fb09 0004 	mla	r0, r9, r4, r0
 802058e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020592:	2800      	cmp	r0, #0
 8020594:	f000 80fa 	beq.w	802078c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020598:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802059c:	d01b      	beq.n	80205d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802059e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80205a2:	fb0e fa0a 	mul.w	sl, lr, sl
 80205a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80205aa:	fb0e fe03 	mul.w	lr, lr, r3
 80205ae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80205b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80205b6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80205ba:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80205be:	4453      	add	r3, sl
 80205c0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80205c4:	0a1b      	lsrs	r3, r3, #8
 80205c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80205ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80205ce:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80205d2:	ea43 030c 	orr.w	r3, r3, ip
 80205d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80205d8:	2cff      	cmp	r4, #255	; 0xff
 80205da:	d021      	beq.n	8020620 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80205dc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80205de:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80205e2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80205e4:	fb04 fb0b 	mul.w	fp, r4, fp
 80205e8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80205ea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80205ee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80205f0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80205f4:	fb04 fa0a 	mul.w	sl, r4, sl
 80205f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80205fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020600:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020604:	44de      	add	lr, fp
 8020606:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802060a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802060e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020612:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020616:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802061a:	ea4e 040a 	orr.w	r4, lr, sl
 802061e:	940e      	str	r4, [sp, #56]	; 0x38
 8020620:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020622:	2cff      	cmp	r4, #255	; 0xff
 8020624:	d021      	beq.n	802066a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8020626:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020628:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802062c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802062e:	fb04 fb0b 	mul.w	fp, r4, fp
 8020632:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020634:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020638:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802063a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802063e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020642:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020646:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802064a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802064e:	44de      	add	lr, fp
 8020650:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020654:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020658:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802065c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020660:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020664:	ea4e 040a 	orr.w	r4, lr, sl
 8020668:	940a      	str	r4, [sp, #40]	; 0x28
 802066a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802066c:	2cff      	cmp	r4, #255	; 0xff
 802066e:	d021      	beq.n	80206b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8020670:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020672:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020676:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020678:	fb04 fb0b 	mul.w	fp, r4, fp
 802067c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802067e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020682:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020684:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020688:	fb04 fa0a 	mul.w	sl, r4, sl
 802068c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020690:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020694:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020698:	44de      	add	lr, fp
 802069a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802069e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80206a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80206a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80206aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80206ae:	ea4e 040a 	orr.w	r4, lr, sl
 80206b2:	940f      	str	r4, [sp, #60]	; 0x3c
 80206b4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80206b6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80206ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80206bc:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80206c0:	fb08 fc0c 	mul.w	ip, r8, ip
 80206c4:	fb02 cc0e 	mla	ip, r2, lr, ip
 80206c8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80206cc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80206ce:	fb01 cc0e 	mla	ip, r1, lr, ip
 80206d2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80206d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80206d8:	fb09 cc0e 	mla	ip, r9, lr, ip
 80206dc:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80206e0:	fb08 f80e 	mul.w	r8, r8, lr
 80206e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80206e8:	fb02 8303 	mla	r3, r2, r3, r8
 80206ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80206ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80206f0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80206f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80206f6:	fb01 330a 	mla	r3, r1, sl, r3
 80206fa:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80206fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020700:	fb09 3901 	mla	r9, r9, r1, r3
 8020704:	4342      	muls	r2, r0
 8020706:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802070a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802070e:	883b      	ldrh	r3, [r7, #0]
 8020710:	1c50      	adds	r0, r2, #1
 8020712:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020716:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802071a:	ea4c 0c09 	orr.w	ip, ip, r9
 802071e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020722:	1219      	asrs	r1, r3, #8
 8020724:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8020728:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802072c:	b2c0      	uxtb	r0, r0
 802072e:	fb12 f204 	smulbb	r2, r2, r4
 8020732:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020736:	fb01 2100 	mla	r1, r1, r0, r2
 802073a:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802073e:	10da      	asrs	r2, r3, #3
 8020740:	fa5f fc8c 	uxtb.w	ip, ip
 8020744:	00db      	lsls	r3, r3, #3
 8020746:	fb1c fc04 	smulbb	ip, ip, r4
 802074a:	b2db      	uxtb	r3, r3
 802074c:	b289      	uxth	r1, r1
 802074e:	fb03 c300 	mla	r3, r3, r0, ip
 8020752:	fa1f fc83 	uxth.w	ip, r3
 8020756:	1c4b      	adds	r3, r1, #1
 8020758:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802075c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020760:	fb1e fe04 	smulbb	lr, lr, r4
 8020764:	f10c 0301 	add.w	r3, ip, #1
 8020768:	fb02 e200 	mla	r2, r2, r0, lr
 802076c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8020770:	b292      	uxth	r2, r2
 8020772:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8020776:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802077a:	430b      	orrs	r3, r1
 802077c:	1c51      	adds	r1, r2, #1
 802077e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020782:	0952      	lsrs	r2, r2, #5
 8020784:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020788:	4313      	orrs	r3, r2
 802078a:	803b      	strh	r3, [r7, #0]
 802078c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802078e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020790:	441a      	add	r2, r3
 8020792:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020794:	9229      	str	r2, [sp, #164]	; 0xa4
 8020796:	441d      	add	r5, r3
 8020798:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802079a:	3b01      	subs	r3, #1
 802079c:	3702      	adds	r7, #2
 802079e:	931a      	str	r3, [sp, #104]	; 0x68
 80207a0:	e694      	b.n	80204cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80207a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80207a4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80207a6:	441c      	add	r4, r3
 80207a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80207aa:	9429      	str	r4, [sp, #164]	; 0xa4
 80207ac:	441d      	add	r5, r3
 80207ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207b0:	3b01      	subs	r3, #1
 80207b2:	9309      	str	r3, [sp, #36]	; 0x24
 80207b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80207b6:	3302      	adds	r3, #2
 80207b8:	930c      	str	r3, [sp, #48]	; 0x30
 80207ba:	e666      	b.n	802048a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80207bc:	d024      	beq.n	8020808 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 80207be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207c0:	982b      	ldr	r0, [sp, #172]	; 0xac
 80207c2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80207c4:	3b01      	subs	r3, #1
 80207c6:	fb00 4003 	mla	r0, r0, r3, r4
 80207ca:	1400      	asrs	r0, r0, #16
 80207cc:	f53f ae7b 	bmi.w	80204c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80207d0:	3901      	subs	r1, #1
 80207d2:	4288      	cmp	r0, r1
 80207d4:	f6bf ae77 	bge.w	80204c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80207d8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80207da:	fb01 5303 	mla	r3, r1, r3, r5
 80207de:	141b      	asrs	r3, r3, #16
 80207e0:	f53f ae71 	bmi.w	80204c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80207e4:	3a01      	subs	r2, #1
 80207e6:	4293      	cmp	r3, r2
 80207e8:	f6bf ae6d 	bge.w	80204c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80207ec:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80207f0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80207f4:	f1bb 0f00 	cmp.w	fp, #0
 80207f8:	dc70      	bgt.n	80208dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 80207fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020802:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020806:	930c      	str	r3, [sp, #48]	; 0x30
 8020808:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802080a:	2b00      	cmp	r3, #0
 802080c:	f340 81be 	ble.w	8020b8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8020810:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020818:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802081c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802081e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020822:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020826:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802082a:	eef0 6a62 	vmov.f32	s13, s5
 802082e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020832:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020836:	ee77 2a62 	vsub.f32	s5, s14, s5
 802083a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802083e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020842:	eef0 6a43 	vmov.f32	s13, s6
 8020846:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802084a:	ee12 2a90 	vmov	r2, s5
 802084e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020852:	fb92 f3f3 	sdiv	r3, r2, r3
 8020856:	ee13 2a10 	vmov	r2, s6
 802085a:	932b      	str	r3, [sp, #172]	; 0xac
 802085c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802085e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020862:	932c      	str	r3, [sp, #176]	; 0xb0
 8020864:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020866:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8020868:	3b01      	subs	r3, #1
 802086a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802086e:	9319      	str	r3, [sp, #100]	; 0x64
 8020870:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020872:	bf08      	it	eq
 8020874:	4613      	moveq	r3, r2
 8020876:	ee16 5a90 	vmov	r5, s13
 802087a:	9309      	str	r3, [sp, #36]	; 0x24
 802087c:	eeb0 3a67 	vmov.f32	s6, s15
 8020880:	eef0 2a47 	vmov.f32	s5, s14
 8020884:	e5f3      	b.n	802046e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020886:	2900      	cmp	r1, #0
 8020888:	f43f ae66 	beq.w	8020558 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 802088c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020890:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020894:	900a      	str	r0, [sp, #40]	; 0x28
 8020896:	0e00      	lsrs	r0, r0, #24
 8020898:	9013      	str	r0, [sp, #76]	; 0x4c
 802089a:	e65d      	b.n	8020558 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 802089c:	f113 0801 	adds.w	r8, r3, #1
 80208a0:	f53f af74 	bmi.w	802078c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80208a4:	4540      	cmp	r0, r8
 80208a6:	f6ff af71 	blt.w	802078c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80208aa:	f11c 0801 	adds.w	r8, ip, #1
 80208ae:	f53f af6d 	bmi.w	802078c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80208b2:	45c6      	cmp	lr, r8
 80208b4:	f6ff af6a 	blt.w	802078c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80208b8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80208ba:	9302      	str	r3, [sp, #8]
 80208bc:	b200      	sxth	r0, r0
 80208be:	fa0f f38e 	sxth.w	r3, lr
 80208c2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80208c6:	e9cd c203 	strd	ip, r2, [sp, #12]
 80208ca:	9301      	str	r3, [sp, #4]
 80208cc:	9000      	str	r0, [sp, #0]
 80208ce:	4633      	mov	r3, r6
 80208d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80208d2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80208d4:	4639      	mov	r1, r7
 80208d6:	f7ff fc62 	bl	802019e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80208da:	e757      	b.n	802078c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80208dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80208de:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80208e0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80208e4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80208e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80208ea:	1427      	asrs	r7, r4, #16
 80208ec:	142b      	asrs	r3, r5, #16
 80208ee:	fb01 7303 	mla	r3, r1, r3, r7
 80208f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80208f4:	18e7      	adds	r7, r4, r3
 80208f6:	5ce3      	ldrb	r3, [r4, r3]
 80208f8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80208fc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020900:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020904:	2a00      	cmp	r2, #0
 8020906:	f000 8137 	beq.w	8020b78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 802090a:	f897 e001 	ldrb.w	lr, [r7, #1]
 802090e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020912:	9410      	str	r4, [sp, #64]	; 0x40
 8020914:	0e24      	lsrs	r4, r4, #24
 8020916:	9417      	str	r4, [sp, #92]	; 0x5c
 8020918:	b170      	cbz	r0, 8020938 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802091a:	eb07 0e01 	add.w	lr, r7, r1
 802091e:	5c79      	ldrb	r1, [r7, r1]
 8020920:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020924:	910b      	str	r1, [sp, #44]	; 0x2c
 8020926:	0e09      	lsrs	r1, r1, #24
 8020928:	9114      	str	r1, [sp, #80]	; 0x50
 802092a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802092e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020932:	9111      	str	r1, [sp, #68]	; 0x44
 8020934:	0e09      	lsrs	r1, r1, #24
 8020936:	9118      	str	r1, [sp, #96]	; 0x60
 8020938:	b292      	uxth	r2, r2
 802093a:	b280      	uxth	r0, r0
 802093c:	fb02 f800 	mul.w	r8, r2, r0
 8020940:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020944:	0112      	lsls	r2, r2, #4
 8020946:	eba2 0e08 	sub.w	lr, r2, r8
 802094a:	b280      	uxth	r0, r0
 802094c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020950:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020952:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020954:	fa1f fe8e 	uxth.w	lr, lr
 8020958:	1a12      	subs	r2, r2, r0
 802095a:	b292      	uxth	r2, r2
 802095c:	fb0e f101 	mul.w	r1, lr, r1
 8020960:	fb02 110c 	mla	r1, r2, ip, r1
 8020964:	fb00 1104 	mla	r1, r0, r4, r1
 8020968:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802096a:	fb08 1104 	mla	r1, r8, r4, r1
 802096e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020972:	2900      	cmp	r1, #0
 8020974:	f000 80f5 	beq.w	8020b62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8020978:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802097c:	d019      	beq.n	80209b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 802097e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020982:	fb0c fa0a 	mul.w	sl, ip, sl
 8020986:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802098a:	fb0c fc03 	mul.w	ip, ip, r3
 802098e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020992:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020996:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802099a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802099e:	4453      	add	r3, sl
 80209a0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80209a4:	0a1b      	lsrs	r3, r3, #8
 80209a6:	0a3f      	lsrs	r7, r7, #8
 80209a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80209ac:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80209b0:	433b      	orrs	r3, r7
 80209b2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80209b4:	2cff      	cmp	r4, #255	; 0xff
 80209b6:	d020      	beq.n	80209fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 80209b8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80209ba:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80209be:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80209c0:	4367      	muls	r7, r4
 80209c2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80209c4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80209c8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80209ca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80209ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80209d2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80209d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80209da:	44bc      	add	ip, r7
 80209dc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80209e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80209e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80209f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80209f4:	ea4c 040a 	orr.w	r4, ip, sl
 80209f8:	9410      	str	r4, [sp, #64]	; 0x40
 80209fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80209fc:	2cff      	cmp	r4, #255	; 0xff
 80209fe:	d020      	beq.n	8020a42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8020a00:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a02:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020a06:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020a08:	4367      	muls	r7, r4
 8020a0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a0c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020a10:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020a12:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020a16:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a1a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020a1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a22:	44bc      	add	ip, r7
 8020a24:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020a28:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020a2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a3c:	ea4c 040a 	orr.w	r4, ip, sl
 8020a40:	940b      	str	r4, [sp, #44]	; 0x2c
 8020a42:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020a44:	2cff      	cmp	r4, #255	; 0xff
 8020a46:	d020      	beq.n	8020a8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8020a48:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020a4a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020a4e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020a50:	4367      	muls	r7, r4
 8020a52:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020a54:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020a58:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020a5a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020a5e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a62:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020a66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a6a:	44bc      	add	ip, r7
 8020a6c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020a70:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020a74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a80:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a84:	ea4c 040a 	orr.w	r4, ip, sl
 8020a88:	9411      	str	r4, [sp, #68]	; 0x44
 8020a8a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020a8c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020a90:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a92:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020a96:	fb0e f707 	mul.w	r7, lr, r7
 8020a9a:	fb02 770c 	mla	r7, r2, ip, r7
 8020a9e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020aa2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020aa4:	fb00 770c 	mla	r7, r0, ip, r7
 8020aa8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020aac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020aae:	fb08 770c 	mla	r7, r8, ip, r7
 8020ab2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020ab6:	fb0e fe0c 	mul.w	lr, lr, ip
 8020aba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020abe:	fb02 e303 	mla	r3, r2, r3, lr
 8020ac2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020ac4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020ac6:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020aca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020acc:	fb00 330a 	mla	r3, r0, sl, r3
 8020ad0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020ad4:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020ad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020ada:	f8b9 0000 	ldrh.w	r0, [r9]
 8020ade:	434b      	muls	r3, r1
 8020ae0:	0a3f      	lsrs	r7, r7, #8
 8020ae2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ae6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020aea:	1c59      	adds	r1, r3, #1
 8020aec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020af0:	ea47 070c 	orr.w	r7, r7, ip
 8020af4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020af8:	1202      	asrs	r2, r0, #8
 8020afa:	0c3b      	lsrs	r3, r7, #16
 8020afc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020b00:	b2c9      	uxtb	r1, r1
 8020b02:	fb13 f304 	smulbb	r3, r3, r4
 8020b06:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020b0a:	fb02 3201 	mla	r2, r2, r1, r3
 8020b0e:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8020b12:	10c3      	asrs	r3, r0, #3
 8020b14:	b2ff      	uxtb	r7, r7
 8020b16:	00c0      	lsls	r0, r0, #3
 8020b18:	b292      	uxth	r2, r2
 8020b1a:	fb1c fc04 	smulbb	ip, ip, r4
 8020b1e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020b22:	b2c0      	uxtb	r0, r0
 8020b24:	fb17 f704 	smulbb	r7, r7, r4
 8020b28:	fb03 c301 	mla	r3, r3, r1, ip
 8020b2c:	fb00 7001 	mla	r0, r0, r1, r7
 8020b30:	f102 0c01 	add.w	ip, r2, #1
 8020b34:	b280      	uxth	r0, r0
 8020b36:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020b3a:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8020b3e:	1c42      	adds	r2, r0, #1
 8020b40:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020b44:	b29b      	uxth	r3, r3
 8020b46:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020b4a:	ea42 020c 	orr.w	r2, r2, ip
 8020b4e:	f103 0c01 	add.w	ip, r3, #1
 8020b52:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020b56:	095b      	lsrs	r3, r3, #5
 8020b58:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020b5c:	431a      	orrs	r2, r3
 8020b5e:	f8a9 2000 	strh.w	r2, [r9]
 8020b62:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020b64:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020b66:	441a      	add	r2, r3
 8020b68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020b6a:	9229      	str	r2, [sp, #164]	; 0xa4
 8020b6c:	f109 0902 	add.w	r9, r9, #2
 8020b70:	441d      	add	r5, r3
 8020b72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020b76:	e63d      	b.n	80207f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8020b78:	2800      	cmp	r0, #0
 8020b7a:	f43f aedd 	beq.w	8020938 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8020b7e:	5c79      	ldrb	r1, [r7, r1]
 8020b80:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020b84:	910b      	str	r1, [sp, #44]	; 0x2c
 8020b86:	0e09      	lsrs	r1, r1, #24
 8020b88:	9114      	str	r1, [sp, #80]	; 0x50
 8020b8a:	e6d5      	b.n	8020938 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8020b8c:	b01f      	add	sp, #124	; 0x7c
 8020b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b92 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8020b92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b96:	b089      	sub	sp, #36	; 0x24
 8020b98:	9101      	str	r1, [sp, #4]
 8020b9a:	9801      	ldr	r0, [sp, #4]
 8020b9c:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8020ba0:	8800      	ldrh	r0, [r0, #0]
 8020ba2:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8020ba6:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8020baa:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8020bae:	1206      	asrs	r6, r0, #8
 8020bb0:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8020bb4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020bb8:	9602      	str	r6, [sp, #8]
 8020bba:	10c6      	asrs	r6, r0, #3
 8020bbc:	00c0      	lsls	r0, r0, #3
 8020bbe:	b2c0      	uxtb	r0, r0
 8020bc0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020bc4:	9004      	str	r0, [sp, #16]
 8020bc6:	2f00      	cmp	r7, #0
 8020bc8:	fb07 100c 	mla	r0, r7, ip, r1
 8020bcc:	9603      	str	r6, [sp, #12]
 8020bce:	eb02 0e00 	add.w	lr, r2, r0
 8020bd2:	f2c0 810a 	blt.w	8020dea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8020bd6:	45b8      	cmp	r8, r7
 8020bd8:	f340 8107 	ble.w	8020dea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8020bdc:	2900      	cmp	r1, #0
 8020bde:	f2c0 8102 	blt.w	8020de6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8020be2:	458c      	cmp	ip, r1
 8020be4:	f340 80ff 	ble.w	8020de6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8020be8:	5c12      	ldrb	r2, [r2, r0]
 8020bea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020bee:	1c4a      	adds	r2, r1, #1
 8020bf0:	f100 80fe 	bmi.w	8020df0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8020bf4:	4594      	cmp	ip, r2
 8020bf6:	f340 80fb 	ble.w	8020df0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8020bfa:	2d00      	cmp	r5, #0
 8020bfc:	f000 80fa 	beq.w	8020df4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8020c00:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020c04:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020c08:	3701      	adds	r7, #1
 8020c0a:	f100 80f7 	bmi.w	8020dfc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8020c0e:	45b8      	cmp	r8, r7
 8020c10:	f340 80f4 	ble.w	8020dfc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8020c14:	2c00      	cmp	r4, #0
 8020c16:	f000 80f4 	beq.w	8020e02 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8020c1a:	2900      	cmp	r1, #0
 8020c1c:	eb0e 020c 	add.w	r2, lr, ip
 8020c20:	f2c0 80ea 	blt.w	8020df8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8020c24:	458c      	cmp	ip, r1
 8020c26:	f340 80e7 	ble.w	8020df8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8020c2a:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8020c2e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8020c32:	3101      	adds	r1, #1
 8020c34:	f100 80e8 	bmi.w	8020e08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8020c38:	458c      	cmp	ip, r1
 8020c3a:	f340 80e5 	ble.w	8020e08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8020c3e:	2d00      	cmp	r5, #0
 8020c40:	f000 80e4 	beq.w	8020e0c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8020c44:	7852      	ldrb	r2, [r2, #1]
 8020c46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020c4a:	0e0b      	lsrs	r3, r1, #24
 8020c4c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8020c50:	9300      	str	r3, [sp, #0]
 8020c52:	b2a4      	uxth	r4, r4
 8020c54:	b2ab      	uxth	r3, r5
 8020c56:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8020c5a:	fb03 f904 	mul.w	r9, r3, r4
 8020c5e:	fb0a f505 	mul.w	r5, sl, r5
 8020c62:	011b      	lsls	r3, r3, #4
 8020c64:	eba3 0e09 	sub.w	lr, r3, r9
 8020c68:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8020c6c:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8020c70:	0a28      	lsrs	r0, r5, #8
 8020c72:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020c76:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8020c7a:	4405      	add	r5, r0
 8020c7c:	0a2d      	lsrs	r5, r5, #8
 8020c7e:	fb0a f303 	mul.w	r3, sl, r3
 8020c82:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8020c86:	9005      	str	r0, [sp, #20]
 8020c88:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8020c8c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020c90:	0a1b      	lsrs	r3, r3, #8
 8020c92:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020c96:	9306      	str	r3, [sp, #24]
 8020c98:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8020c9c:	fb0b f303 	mul.w	r3, fp, r3
 8020ca0:	0a1d      	lsrs	r5, r3, #8
 8020ca2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020ca6:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8020caa:	fb0b f606 	mul.w	r6, fp, r6
 8020cae:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020cb2:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020cb6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020cba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020cbe:	fb08 f707 	mul.w	r7, r8, r7
 8020cc2:	441d      	add	r5, r3
 8020cc4:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8020cc8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020ccc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020cd0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8020cd4:	fb08 fc0c 	mul.w	ip, r8, ip
 8020cd8:	0a1b      	lsrs	r3, r3, #8
 8020cda:	9307      	str	r3, [sp, #28]
 8020cdc:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8020ce0:	0e0b      	lsrs	r3, r1, #24
 8020ce2:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8020ce6:	435f      	muls	r7, r3
 8020ce8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020cec:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020cf0:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8020cf4:	4460      	add	r0, ip
 8020cf6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020cfa:	b2a4      	uxth	r4, r4
 8020cfc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020d00:	0a2d      	lsrs	r5, r5, #8
 8020d02:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020d06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d0a:	fa1f fe8e 	uxth.w	lr, lr
 8020d0e:	4359      	muls	r1, r3
 8020d10:	1b12      	subs	r2, r2, r4
 8020d12:	9b05      	ldr	r3, [sp, #20]
 8020d14:	44bc      	add	ip, r7
 8020d16:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020d1a:	b292      	uxth	r2, r2
 8020d1c:	fb05 f50e 	mul.w	r5, r5, lr
 8020d20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d24:	fb03 5502 	mla	r5, r3, r2, r5
 8020d28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d2c:	9b06      	ldr	r3, [sp, #24]
 8020d2e:	f501 7780 	add.w	r7, r1, #256	; 0x100
 8020d32:	0a36      	lsrs	r6, r6, #8
 8020d34:	0a00      	lsrs	r0, r0, #8
 8020d36:	fb0c 5509 	mla	r5, ip, r9, r5
 8020d3a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020d3e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8020d42:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020d46:	fb00 5504 	mla	r5, r0, r4, r5
 8020d4a:	fb0e f606 	mul.w	r6, lr, r6
 8020d4e:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8020d52:	0a09      	lsrs	r1, r1, #8
 8020d54:	9b07      	ldr	r3, [sp, #28]
 8020d56:	fb02 6000 	mla	r0, r2, r0, r6
 8020d5a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020d5e:	fb09 0001 	mla	r0, r9, r1, r0
 8020d62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020d66:	fb0e fe0b 	mul.w	lr, lr, fp
 8020d6a:	fb04 0003 	mla	r0, r4, r3, r0
 8020d6e:	fb02 e20a 	mla	r2, r2, sl, lr
 8020d72:	9b00      	ldr	r3, [sp, #0]
 8020d74:	fb04 2408 	mla	r4, r4, r8, r2
 8020d78:	fb09 4903 	mla	r9, r9, r3, r4
 8020d7c:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8020d80:	9b02      	ldr	r3, [sp, #8]
 8020d82:	9a04      	ldr	r2, [sp, #16]
 8020d84:	fa5f f989 	uxtb.w	r9, r9
 8020d88:	fb03 f109 	mul.w	r1, r3, r9
 8020d8c:	9b03      	ldr	r3, [sp, #12]
 8020d8e:	0a2d      	lsrs	r5, r5, #8
 8020d90:	0a00      	lsrs	r0, r0, #8
 8020d92:	fb03 f309 	mul.w	r3, r3, r9
 8020d96:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020d9a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020d9e:	4305      	orrs	r5, r0
 8020da0:	fb02 f909 	mul.w	r9, r2, r9
 8020da4:	1c58      	adds	r0, r3, #1
 8020da6:	1c4a      	adds	r2, r1, #1
 8020da8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020dac:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020db0:	0a2b      	lsrs	r3, r5, #8
 8020db2:	0c2a      	lsrs	r2, r5, #16
 8020db4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020db8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8020dbc:	00db      	lsls	r3, r3, #3
 8020dbe:	0212      	lsls	r2, r2, #8
 8020dc0:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8020dc4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020dc8:	4313      	orrs	r3, r2
 8020dca:	f109 0201 	add.w	r2, r9, #1
 8020dce:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8020dd2:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8020dd6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020dda:	431d      	orrs	r5, r3
 8020ddc:	9b01      	ldr	r3, [sp, #4]
 8020dde:	801d      	strh	r5, [r3, #0]
 8020de0:	b009      	add	sp, #36	; 0x24
 8020de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020de6:	2000      	movs	r0, #0
 8020de8:	e701      	b.n	8020bee <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8020dea:	2600      	movs	r6, #0
 8020dec:	4630      	mov	r0, r6
 8020dee:	e70b      	b.n	8020c08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8020df0:	2600      	movs	r6, #0
 8020df2:	e709      	b.n	8020c08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8020df4:	462e      	mov	r6, r5
 8020df6:	e707      	b.n	8020c08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8020df8:	2700      	movs	r7, #0
 8020dfa:	e71a      	b.n	8020c32 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8020dfc:	2100      	movs	r1, #0
 8020dfe:	460f      	mov	r7, r1
 8020e00:	e723      	b.n	8020c4a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8020e02:	4621      	mov	r1, r4
 8020e04:	4627      	mov	r7, r4
 8020e06:	e720      	b.n	8020c4a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8020e08:	2100      	movs	r1, #0
 8020e0a:	e71e      	b.n	8020c4a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8020e0c:	4629      	mov	r1, r5
 8020e0e:	e71c      	b.n	8020c4a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08020e10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e14:	b09b      	sub	sp, #108	; 0x6c
 8020e16:	9218      	str	r2, [sp, #96]	; 0x60
 8020e18:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020e1a:	9116      	str	r1, [sp, #88]	; 0x58
 8020e1c:	9307      	str	r3, [sp, #28]
 8020e1e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8020e22:	9019      	str	r0, [sp, #100]	; 0x64
 8020e24:	6850      	ldr	r0, [r2, #4]
 8020e26:	6812      	ldr	r2, [r2, #0]
 8020e28:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8020e2a:	fb00 1303 	mla	r3, r0, r3, r1
 8020e2e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020e32:	930a      	str	r3, [sp, #40]	; 0x28
 8020e34:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020e36:	681b      	ldr	r3, [r3, #0]
 8020e38:	930f      	str	r3, [sp, #60]	; 0x3c
 8020e3a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020e3c:	685e      	ldr	r6, [r3, #4]
 8020e3e:	3604      	adds	r6, #4
 8020e40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020e42:	2b00      	cmp	r3, #0
 8020e44:	dc03      	bgt.n	8020e4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020e46:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020e48:	2b00      	cmp	r3, #0
 8020e4a:	f340 8373 	ble.w	8021534 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8020e4e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020e50:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020e54:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020e58:	1e48      	subs	r0, r1, #1
 8020e5a:	1e57      	subs	r7, r2, #1
 8020e5c:	9b07      	ldr	r3, [sp, #28]
 8020e5e:	2b00      	cmp	r3, #0
 8020e60:	f340 8190 	ble.w	8021184 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8020e64:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020e66:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020e6a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020e6e:	d406      	bmi.n	8020e7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020e70:	4584      	cmp	ip, r0
 8020e72:	da04      	bge.n	8020e7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020e74:	2b00      	cmp	r3, #0
 8020e76:	db02      	blt.n	8020e7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020e78:	42bb      	cmp	r3, r7
 8020e7a:	f2c0 8184 	blt.w	8021186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8020e7e:	f11c 0c01 	adds.w	ip, ip, #1
 8020e82:	f100 8172 	bmi.w	802116a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020e86:	4561      	cmp	r1, ip
 8020e88:	f2c0 816f 	blt.w	802116a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020e8c:	3301      	adds	r3, #1
 8020e8e:	f100 816c 	bmi.w	802116a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020e92:	429a      	cmp	r2, r3
 8020e94:	f2c0 8169 	blt.w	802116a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020e98:	9b07      	ldr	r3, [sp, #28]
 8020e9a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020e9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8020e9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020ea0:	2b00      	cmp	r3, #0
 8020ea2:	f340 818e 	ble.w	80211c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b2>
 8020ea6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020ea8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020eac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020eae:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8020eb2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020eb4:	141b      	asrs	r3, r3, #16
 8020eb6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020eba:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020ebe:	f100 81d1 	bmi.w	8021264 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8020ec2:	f101 38ff 	add.w	r8, r1, #4294967295
 8020ec6:	4543      	cmp	r3, r8
 8020ec8:	f280 81cc 	bge.w	8021264 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8020ecc:	f1bc 0f00 	cmp.w	ip, #0
 8020ed0:	f2c0 81c8 	blt.w	8021264 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8020ed4:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020ed8:	45c4      	cmp	ip, r8
 8020eda:	f280 81c3 	bge.w	8021264 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8020ede:	b209      	sxth	r1, r1
 8020ee0:	fb0c 3301 	mla	r3, ip, r1, r3
 8020ee4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020ee6:	eb04 0803 	add.w	r8, r4, r3
 8020eea:	5ce3      	ldrb	r3, [r4, r3]
 8020eec:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020ef0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020ef4:	2a00      	cmp	r2, #0
 8020ef6:	f000 81aa 	beq.w	802124e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43e>
 8020efa:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020efe:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020f02:	940b      	str	r4, [sp, #44]	; 0x2c
 8020f04:	0e24      	lsrs	r4, r4, #24
 8020f06:	9412      	str	r4, [sp, #72]	; 0x48
 8020f08:	b178      	cbz	r0, 8020f2a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8020f0a:	eb08 0c01 	add.w	ip, r8, r1
 8020f0e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020f12:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020f16:	9108      	str	r1, [sp, #32]
 8020f18:	0e09      	lsrs	r1, r1, #24
 8020f1a:	9110      	str	r1, [sp, #64]	; 0x40
 8020f1c:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8020f20:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020f24:	910c      	str	r1, [sp, #48]	; 0x30
 8020f26:	0e09      	lsrs	r1, r1, #24
 8020f28:	9113      	str	r1, [sp, #76]	; 0x4c
 8020f2a:	b292      	uxth	r2, r2
 8020f2c:	b280      	uxth	r0, r0
 8020f2e:	fb02 f900 	mul.w	r9, r2, r0
 8020f32:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020f36:	0112      	lsls	r2, r2, #4
 8020f38:	eba2 0809 	sub.w	r8, r2, r9
 8020f3c:	b280      	uxth	r0, r0
 8020f3e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020f42:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020f44:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020f46:	fa1f f888 	uxth.w	r8, r8
 8020f4a:	1a12      	subs	r2, r2, r0
 8020f4c:	b292      	uxth	r2, r2
 8020f4e:	fb08 f101 	mul.w	r1, r8, r1
 8020f52:	fb02 110e 	mla	r1, r2, lr, r1
 8020f56:	fb00 1104 	mla	r1, r0, r4, r1
 8020f5a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020f5c:	fb09 1104 	mla	r1, r9, r4, r1
 8020f60:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020f64:	2900      	cmp	r1, #0
 8020f66:	f000 80f5 	beq.w	8021154 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020f6a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020f6e:	d01b      	beq.n	8020fa8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020f70:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020f74:	fb0e fa0a 	mul.w	sl, lr, sl
 8020f78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020f7c:	fb0e fe03 	mul.w	lr, lr, r3
 8020f80:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020f84:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f88:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020f8c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020f90:	4453      	add	r3, sl
 8020f92:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020f96:	0a1b      	lsrs	r3, r3, #8
 8020f98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f9c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020fa0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020fa4:	ea43 030c 	orr.w	r3, r3, ip
 8020fa8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020faa:	2cff      	cmp	r4, #255	; 0xff
 8020fac:	d021      	beq.n	8020ff2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020fae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020fb0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020fb4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020fb6:	fb04 fb0b 	mul.w	fp, r4, fp
 8020fba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020fbc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020fc0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020fc2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020fc6:	fb04 fa0a 	mul.w	sl, r4, sl
 8020fca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020fce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020fd2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020fd6:	44de      	add	lr, fp
 8020fd8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020fdc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020fe0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020fe4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020fe8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020fec:	ea4e 040a 	orr.w	r4, lr, sl
 8020ff0:	940b      	str	r4, [sp, #44]	; 0x2c
 8020ff2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020ff4:	2cff      	cmp	r4, #255	; 0xff
 8020ff6:	d021      	beq.n	802103c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020ff8:	9c08      	ldr	r4, [sp, #32]
 8020ffa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020ffe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021000:	fb04 fb0b 	mul.w	fp, r4, fp
 8021004:	9c08      	ldr	r4, [sp, #32]
 8021006:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802100a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802100c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021010:	fb04 fa0a 	mul.w	sl, r4, sl
 8021014:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021018:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802101c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021020:	44de      	add	lr, fp
 8021022:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021026:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802102a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802102e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021032:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021036:	ea4e 040a 	orr.w	r4, lr, sl
 802103a:	9408      	str	r4, [sp, #32]
 802103c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802103e:	2cff      	cmp	r4, #255	; 0xff
 8021040:	d021      	beq.n	8021086 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021042:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021044:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021048:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802104a:	fb04 fb0b 	mul.w	fp, r4, fp
 802104e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021050:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021054:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021056:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802105a:	fb04 fa0a 	mul.w	sl, r4, sl
 802105e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021062:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021066:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802106a:	44de      	add	lr, fp
 802106c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021070:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021074:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021078:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802107c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021080:	ea4e 040a 	orr.w	r4, lr, sl
 8021084:	940c      	str	r4, [sp, #48]	; 0x30
 8021086:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021088:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802108c:	9c08      	ldr	r4, [sp, #32]
 802108e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021092:	fb08 fc0c 	mul.w	ip, r8, ip
 8021096:	fb02 cc0e 	mla	ip, r2, lr, ip
 802109a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802109e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80210a0:	fb00 cc0e 	mla	ip, r0, lr, ip
 80210a4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80210a8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80210aa:	fb09 cc0e 	mla	ip, r9, lr, ip
 80210ae:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80210b2:	fb08 f80e 	mul.w	r8, r8, lr
 80210b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80210ba:	fb02 8303 	mla	r3, r2, r3, r8
 80210be:	9a08      	ldr	r2, [sp, #32]
 80210c0:	f8b7 8000 	ldrh.w	r8, [r7]
 80210c4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80210c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80210ca:	fb00 330a 	mla	r3, r0, sl, r3
 80210ce:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80210d2:	fb09 3900 	mla	r9, r9, r0, r3
 80210d6:	43c9      	mvns	r1, r1
 80210d8:	ea4f 2228 	mov.w	r2, r8, asr #8
 80210dc:	fa5f fe81 	uxtb.w	lr, r1
 80210e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210e4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80210e8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80210ec:	fb02 f20e 	mul.w	r2, r2, lr
 80210f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80210f4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80210f8:	ea4c 0c09 	orr.w	ip, ip, r9
 80210fc:	1c53      	adds	r3, r2, #1
 80210fe:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021102:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8021106:	ea4f 431c 	mov.w	r3, ip, lsr #16
 802110a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802110e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021112:	4a63      	ldr	r2, [pc, #396]	; (80212a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8021114:	fb00 f00e 	mul.w	r0, r0, lr
 8021118:	b2db      	uxtb	r3, r3
 802111a:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802111e:	1c43      	adds	r3, r0, #1
 8021120:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021124:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021128:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802112c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021130:	b2c9      	uxtb	r1, r1
 8021132:	00db      	lsls	r3, r3, #3
 8021134:	fb01 f10e 	mul.w	r1, r1, lr
 8021138:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802113c:	4313      	orrs	r3, r2
 802113e:	1c4a      	adds	r2, r1, #1
 8021140:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021144:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8021148:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802114c:	ea4c 0c03 	orr.w	ip, ip, r3
 8021150:	f8a7 c000 	strh.w	ip, [r7]
 8021154:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021156:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021158:	441a      	add	r2, r3
 802115a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802115c:	9225      	str	r2, [sp, #148]	; 0x94
 802115e:	441d      	add	r5, r3
 8021160:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021162:	3b01      	subs	r3, #1
 8021164:	3702      	adds	r7, #2
 8021166:	9317      	str	r3, [sp, #92]	; 0x5c
 8021168:	e699      	b.n	8020e9e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802116a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802116c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802116e:	441c      	add	r4, r3
 8021170:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021172:	9425      	str	r4, [sp, #148]	; 0x94
 8021174:	441d      	add	r5, r3
 8021176:	9b07      	ldr	r3, [sp, #28]
 8021178:	3b01      	subs	r3, #1
 802117a:	9307      	str	r3, [sp, #28]
 802117c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802117e:	3302      	adds	r3, #2
 8021180:	930a      	str	r3, [sp, #40]	; 0x28
 8021182:	e66b      	b.n	8020e5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021184:	d024      	beq.n	80211d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021186:	9b07      	ldr	r3, [sp, #28]
 8021188:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802118a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802118c:	3b01      	subs	r3, #1
 802118e:	fb00 4003 	mla	r0, r0, r3, r4
 8021192:	1400      	asrs	r0, r0, #16
 8021194:	f53f ae80 	bmi.w	8020e98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021198:	3901      	subs	r1, #1
 802119a:	4288      	cmp	r0, r1
 802119c:	f6bf ae7c 	bge.w	8020e98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80211a0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80211a2:	fb01 5303 	mla	r3, r1, r3, r5
 80211a6:	141b      	asrs	r3, r3, #16
 80211a8:	f53f ae76 	bmi.w	8020e98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80211ac:	3a01      	subs	r2, #1
 80211ae:	4293      	cmp	r3, r2
 80211b0:	f6bf ae72 	bge.w	8020e98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80211b4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80211b8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80211bc:	f1bb 0f00 	cmp.w	fp, #0
 80211c0:	dc70      	bgt.n	80212a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80211c2:	9b07      	ldr	r3, [sp, #28]
 80211c4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80211c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211ca:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80211ce:	930a      	str	r3, [sp, #40]	; 0x28
 80211d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80211d2:	2b00      	cmp	r3, #0
 80211d4:	f340 81ae 	ble.w	8021534 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80211d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80211dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80211e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80211e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80211e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80211ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 80211ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80211f2:	eef0 6a62 	vmov.f32	s13, s5
 80211f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80211fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021202:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8021206:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802120a:	eef0 6a43 	vmov.f32	s13, s6
 802120e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021212:	ee12 2a90 	vmov	r2, s5
 8021216:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802121a:	fb92 f3f3 	sdiv	r3, r2, r3
 802121e:	ee13 2a10 	vmov	r2, s6
 8021222:	9327      	str	r3, [sp, #156]	; 0x9c
 8021224:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021226:	fb92 f3f3 	sdiv	r3, r2, r3
 802122a:	9328      	str	r3, [sp, #160]	; 0xa0
 802122c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802122e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021230:	3b01      	subs	r3, #1
 8021232:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021236:	9316      	str	r3, [sp, #88]	; 0x58
 8021238:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802123a:	bf08      	it	eq
 802123c:	4613      	moveq	r3, r2
 802123e:	ee16 5a90 	vmov	r5, s13
 8021242:	9307      	str	r3, [sp, #28]
 8021244:	eeb0 3a67 	vmov.f32	s6, s15
 8021248:	eef0 2a47 	vmov.f32	s5, s14
 802124c:	e5f8      	b.n	8020e40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 802124e:	2800      	cmp	r0, #0
 8021250:	f43f ae6b 	beq.w	8020f2a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8021254:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021258:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802125c:	9108      	str	r1, [sp, #32]
 802125e:	0e09      	lsrs	r1, r1, #24
 8021260:	9110      	str	r1, [sp, #64]	; 0x40
 8021262:	e662      	b.n	8020f2a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8021264:	f113 0801 	adds.w	r8, r3, #1
 8021268:	f53f af74 	bmi.w	8021154 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802126c:	4541      	cmp	r1, r8
 802126e:	f6ff af71 	blt.w	8021154 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021272:	f11c 0801 	adds.w	r8, ip, #1
 8021276:	f53f af6d 	bmi.w	8021154 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802127a:	45c6      	cmp	lr, r8
 802127c:	f6ff af6a 	blt.w	8021154 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021280:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8021284:	b209      	sxth	r1, r1
 8021286:	fa0f f38e 	sxth.w	r3, lr
 802128a:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802128e:	9301      	str	r3, [sp, #4]
 8021290:	9100      	str	r1, [sp, #0]
 8021292:	4633      	mov	r3, r6
 8021294:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021296:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021298:	4639      	mov	r1, r7
 802129a:	f7ff fc7a 	bl	8020b92 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802129e:	e759      	b.n	8021154 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80212a0:	fffff800 	.word	0xfffff800
 80212a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80212a6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80212a8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80212ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80212ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80212b2:	1427      	asrs	r7, r4, #16
 80212b4:	142b      	asrs	r3, r5, #16
 80212b6:	fb01 7303 	mla	r3, r1, r3, r7
 80212ba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80212bc:	18e7      	adds	r7, r4, r3
 80212be:	5ce3      	ldrb	r3, [r4, r3]
 80212c0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80212c4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80212c8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80212cc:	2a00      	cmp	r2, #0
 80212ce:	f000 8127 	beq.w	8021520 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80212d2:	f897 e001 	ldrb.w	lr, [r7, #1]
 80212d6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80212da:	940d      	str	r4, [sp, #52]	; 0x34
 80212dc:	0e24      	lsrs	r4, r4, #24
 80212de:	9414      	str	r4, [sp, #80]	; 0x50
 80212e0:	b170      	cbz	r0, 8021300 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80212e2:	eb07 0e01 	add.w	lr, r7, r1
 80212e6:	5c79      	ldrb	r1, [r7, r1]
 80212e8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80212ec:	9109      	str	r1, [sp, #36]	; 0x24
 80212ee:	0e09      	lsrs	r1, r1, #24
 80212f0:	9111      	str	r1, [sp, #68]	; 0x44
 80212f2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80212f6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80212fa:	910e      	str	r1, [sp, #56]	; 0x38
 80212fc:	0e09      	lsrs	r1, r1, #24
 80212fe:	9115      	str	r1, [sp, #84]	; 0x54
 8021300:	b292      	uxth	r2, r2
 8021302:	b280      	uxth	r0, r0
 8021304:	fb02 f800 	mul.w	r8, r2, r0
 8021308:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802130c:	0112      	lsls	r2, r2, #4
 802130e:	eba2 0e08 	sub.w	lr, r2, r8
 8021312:	b280      	uxth	r0, r0
 8021314:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021318:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802131a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802131c:	fa1f fe8e 	uxth.w	lr, lr
 8021320:	1a09      	subs	r1, r1, r0
 8021322:	b289      	uxth	r1, r1
 8021324:	fb0e f202 	mul.w	r2, lr, r2
 8021328:	fb01 220c 	mla	r2, r1, ip, r2
 802132c:	fb00 2204 	mla	r2, r0, r4, r2
 8021330:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021332:	fb08 2204 	mla	r2, r8, r4, r2
 8021336:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802133a:	2a00      	cmp	r2, #0
 802133c:	f000 80e5 	beq.w	802150a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8021340:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021344:	d019      	beq.n	802137a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8021346:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802134a:	fb0c fa0a 	mul.w	sl, ip, sl
 802134e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021352:	fb0c fc03 	mul.w	ip, ip, r3
 8021356:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802135a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802135e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021362:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021366:	4453      	add	r3, sl
 8021368:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802136c:	0a1b      	lsrs	r3, r3, #8
 802136e:	0a3f      	lsrs	r7, r7, #8
 8021370:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021374:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021378:	433b      	orrs	r3, r7
 802137a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802137c:	2cff      	cmp	r4, #255	; 0xff
 802137e:	d020      	beq.n	80213c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8021380:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021382:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021386:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021388:	4367      	muls	r7, r4
 802138a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802138c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021390:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021392:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021396:	fb04 fa0a 	mul.w	sl, r4, sl
 802139a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802139e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213a2:	44bc      	add	ip, r7
 80213a4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80213a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80213ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80213b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80213bc:	ea4c 040a 	orr.w	r4, ip, sl
 80213c0:	940d      	str	r4, [sp, #52]	; 0x34
 80213c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80213c4:	2cff      	cmp	r4, #255	; 0xff
 80213c6:	d020      	beq.n	802140a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 80213c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80213ca:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80213ce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80213d0:	4367      	muls	r7, r4
 80213d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80213d4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80213d8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80213da:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80213de:	fb04 fa0a 	mul.w	sl, r4, sl
 80213e2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80213e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213ea:	44bc      	add	ip, r7
 80213ec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80213f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80213f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80213f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021400:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021404:	ea4c 040a 	orr.w	r4, ip, sl
 8021408:	9409      	str	r4, [sp, #36]	; 0x24
 802140a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802140c:	2cff      	cmp	r4, #255	; 0xff
 802140e:	d020      	beq.n	8021452 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8021410:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021412:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021416:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021418:	4367      	muls	r7, r4
 802141a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802141c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021420:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021422:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021426:	fb04 fa0a 	mul.w	sl, r4, sl
 802142a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802142e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021432:	44bc      	add	ip, r7
 8021434:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021438:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802143c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021440:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021444:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021448:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802144c:	ea4c 040a 	orr.w	r4, ip, sl
 8021450:	940e      	str	r4, [sp, #56]	; 0x38
 8021452:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021454:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021458:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802145a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802145e:	fb0e f707 	mul.w	r7, lr, r7
 8021462:	fb01 770c 	mla	r7, r1, ip, r7
 8021466:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802146a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802146c:	fb00 770c 	mla	r7, r0, ip, r7
 8021470:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021474:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021476:	fb08 770c 	mla	r7, r8, ip, r7
 802147a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802147e:	fb0e fe0c 	mul.w	lr, lr, ip
 8021482:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021486:	fb01 e303 	mla	r3, r1, r3, lr
 802148a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802148c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021490:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021492:	fb00 330a 	mla	r3, r0, sl, r3
 8021496:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802149a:	fb08 3c0c 	mla	ip, r8, ip, r3
 802149e:	f8b9 3000 	ldrh.w	r3, [r9]
 80214a2:	43d2      	mvns	r2, r2
 80214a4:	1218      	asrs	r0, r3, #8
 80214a6:	b2d2      	uxtb	r2, r2
 80214a8:	10d9      	asrs	r1, r3, #3
 80214aa:	0a3f      	lsrs	r7, r7, #8
 80214ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214b0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80214b4:	00db      	lsls	r3, r3, #3
 80214b6:	4350      	muls	r0, r2
 80214b8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80214bc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80214c0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80214c4:	b2db      	uxtb	r3, r3
 80214c6:	ea47 070c 	orr.w	r7, r7, ip
 80214ca:	4351      	muls	r1, r2
 80214cc:	4353      	muls	r3, r2
 80214ce:	1c42      	adds	r2, r0, #1
 80214d0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80214d4:	0c3a      	lsrs	r2, r7, #16
 80214d6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80214da:	4a18      	ldr	r2, [pc, #96]	; (802153c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 80214dc:	b2c0      	uxtb	r0, r0
 80214de:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80214e2:	1c4a      	adds	r2, r1, #1
 80214e4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80214e8:	0a3a      	lsrs	r2, r7, #8
 80214ea:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80214ee:	00c9      	lsls	r1, r1, #3
 80214f0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80214f4:	4301      	orrs	r1, r0
 80214f6:	1c58      	adds	r0, r3, #1
 80214f8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80214fc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8021500:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8021504:	4308      	orrs	r0, r1
 8021506:	f8a9 0000 	strh.w	r0, [r9]
 802150a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802150c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802150e:	441a      	add	r2, r3
 8021510:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021512:	9225      	str	r2, [sp, #148]	; 0x94
 8021514:	f109 0902 	add.w	r9, r9, #2
 8021518:	441d      	add	r5, r3
 802151a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802151e:	e64d      	b.n	80211bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8021520:	2800      	cmp	r0, #0
 8021522:	f43f aeed 	beq.w	8021300 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8021526:	5c79      	ldrb	r1, [r7, r1]
 8021528:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802152c:	9109      	str	r1, [sp, #36]	; 0x24
 802152e:	0e09      	lsrs	r1, r1, #24
 8021530:	9111      	str	r1, [sp, #68]	; 0x44
 8021532:	e6e5      	b.n	8021300 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8021534:	b01b      	add	sp, #108	; 0x6c
 8021536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802153a:	bf00      	nop
 802153c:	fffff800 	.word	0xfffff800

08021540 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8021540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021544:	b085      	sub	sp, #20
 8021546:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 802154a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 802154e:	9103      	str	r1, [sp, #12]
 8021550:	fb00 7406 	mla	r4, r0, r6, r7
 8021554:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8021558:	2800      	cmp	r0, #0
 802155a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 802155e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8021562:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8021566:	9501      	str	r5, [sp, #4]
 8021568:	eb03 0904 	add.w	r9, r3, r4
 802156c:	f2c0 8150 	blt.w	8021810 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8021570:	4583      	cmp	fp, r0
 8021572:	f340 814d 	ble.w	8021810 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8021576:	2f00      	cmp	r7, #0
 8021578:	f2c0 8146 	blt.w	8021808 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 802157c:	42be      	cmp	r6, r7
 802157e:	f340 8143 	ble.w	8021808 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8021582:	f813 c004 	ldrb.w	ip, [r3, r4]
 8021586:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 802158a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802158e:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8021592:	4355      	muls	r5, r2
 8021594:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021598:	f64f 041f 	movw	r4, #63519	; 0xf81f
 802159c:	fb0c f203 	mul.w	r2, ip, r3
 80215a0:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80215a4:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80215a8:	441d      	add	r5, r3
 80215aa:	f102 0320 	add.w	r3, r2, #32
 80215ae:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80215b2:	0a1b      	lsrs	r3, r3, #8
 80215b4:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80215b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80215bc:	431c      	orrs	r4, r3
 80215be:	1c7b      	adds	r3, r7, #1
 80215c0:	f100 812b 	bmi.w	802181a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80215c4:	429e      	cmp	r6, r3
 80215c6:	f340 8128 	ble.w	802181a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80215ca:	2900      	cmp	r1, #0
 80215cc:	f000 8128 	beq.w	8021820 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 80215d0:	9a01      	ldr	r2, [sp, #4]
 80215d2:	f899 3001 	ldrb.w	r3, [r9, #1]
 80215d6:	8855      	ldrh	r5, [r2, #2]
 80215d8:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80215dc:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 80215e0:	fb08 f802 	mul.w	r8, r8, r2
 80215e4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80215e8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80215ec:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80215f0:	435d      	muls	r5, r3
 80215f2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80215f6:	44d0      	add	r8, sl
 80215f8:	f105 0a20 	add.w	sl, r5, #32
 80215fc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021600:	0a2d      	lsrs	r5, r5, #8
 8021602:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8021606:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802160a:	432a      	orrs	r2, r5
 802160c:	3001      	adds	r0, #1
 802160e:	f100 810d 	bmi.w	802182c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8021612:	4583      	cmp	fp, r0
 8021614:	f340 810a 	ble.w	802182c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8021618:	f1be 0f00 	cmp.w	lr, #0
 802161c:	f000 810b 	beq.w	8021836 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8021620:	2f00      	cmp	r7, #0
 8021622:	f2c0 8100 	blt.w	8021826 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8021626:	42be      	cmp	r6, r7
 8021628:	f340 80fd 	ble.w	8021826 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802162c:	9801      	ldr	r0, [sp, #4]
 802162e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8021632:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8021636:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802163a:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 802163e:	fb0a fa00 	mul.w	sl, sl, r0
 8021642:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8021646:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802164a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802164e:	fb05 f808 	mul.w	r8, r5, r8
 8021652:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021656:	4482      	add	sl, r0
 8021658:	f108 0020 	add.w	r0, r8, #32
 802165c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021660:	0a00      	lsrs	r0, r0, #8
 8021662:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8021666:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802166a:	ea4b 0b00 	orr.w	fp, fp, r0
 802166e:	3701      	adds	r7, #1
 8021670:	f100 80e6 	bmi.w	8021840 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8021674:	42be      	cmp	r6, r7
 8021676:	f340 80e3 	ble.w	8021840 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802167a:	2900      	cmp	r1, #0
 802167c:	f000 80e3 	beq.w	8021846 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8021680:	3601      	adds	r6, #1
 8021682:	9801      	ldr	r0, [sp, #4]
 8021684:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021688:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 802168c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8021690:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8021694:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021698:	fb09 f906 	mul.w	r9, r9, r6
 802169c:	fb07 f800 	mul.w	r8, r7, r0
 80216a0:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80216a4:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80216a8:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80216ac:	44d1      	add	r9, sl
 80216ae:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80216b2:	f108 0020 	add.w	r0, r8, #32
 80216b6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80216ba:	0a00      	lsrs	r0, r0, #8
 80216bc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80216c0:	4330      	orrs	r0, r6
 80216c2:	b28e      	uxth	r6, r1
 80216c4:	fa1f f98e 	uxth.w	r9, lr
 80216c8:	fb06 f809 	mul.w	r8, r6, r9
 80216cc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80216d0:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80216d4:	0136      	lsls	r6, r6, #4
 80216d6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80216da:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80216de:	9601      	str	r6, [sp, #4]
 80216e0:	ea4a 0404 	orr.w	r4, sl, r4
 80216e4:	fa1f f689 	uxth.w	r6, r9
 80216e8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80216ec:	fb11 f90e 	smulbb	r9, r1, lr
 80216f0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80216f4:	9602      	str	r6, [sp, #8]
 80216f6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80216fa:	4626      	mov	r6, r4
 80216fc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021700:	f1ce 0410 	rsb	r4, lr, #16
 8021704:	1a64      	subs	r4, r4, r1
 8021706:	ea4a 0202 	orr.w	r2, sl, r2
 802170a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802170e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021712:	434a      	muls	r2, r1
 8021714:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8021718:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802171c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021720:	fb04 2406 	mla	r4, r4, r6, r2
 8021724:	ea4a 0000 	orr.w	r0, sl, r0
 8021728:	fb09 4200 	mla	r2, r9, r0, r4
 802172c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8021730:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021734:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8021738:	ea44 0b0b 	orr.w	fp, r4, fp
 802173c:	9c01      	ldr	r4, [sp, #4]
 802173e:	9e02      	ldr	r6, [sp, #8]
 8021740:	9903      	ldr	r1, [sp, #12]
 8021742:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8021746:	1ba4      	subs	r4, r4, r6
 8021748:	9e01      	ldr	r6, [sp, #4]
 802174a:	8808      	ldrh	r0, [r1, #0]
 802174c:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8021750:	eba6 0608 	sub.w	r6, r6, r8
 8021754:	b2b6      	uxth	r6, r6
 8021756:	b2a4      	uxth	r4, r4
 8021758:	4373      	muls	r3, r6
 802175a:	fb0c 3304 	mla	r3, ip, r4, r3
 802175e:	9c02      	ldr	r4, [sp, #8]
 8021760:	fb04 3505 	mla	r5, r4, r5, r3
 8021764:	fb08 5707 	mla	r7, r8, r7, r5
 8021768:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 802176c:	b289      	uxth	r1, r1
 802176e:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8021772:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021776:	434f      	muls	r7, r1
 8021778:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802177c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021780:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021784:	1c7b      	adds	r3, r7, #1
 8021786:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802178a:	ea42 0e0e 	orr.w	lr, r2, lr
 802178e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8021792:	fa1f f28e 	uxth.w	r2, lr
 8021796:	1203      	asrs	r3, r0, #8
 8021798:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 802179c:	b2ff      	uxtb	r7, r7
 802179e:	1215      	asrs	r5, r2, #8
 80217a0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80217a4:	fb13 f307 	smulbb	r3, r3, r7
 80217a8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80217ac:	fb05 3501 	mla	r5, r5, r1, r3
 80217b0:	10c3      	asrs	r3, r0, #3
 80217b2:	10d4      	asrs	r4, r2, #3
 80217b4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80217b8:	fb13 f307 	smulbb	r3, r3, r7
 80217bc:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80217c0:	fb04 3401 	mla	r4, r4, r1, r3
 80217c4:	00c3      	lsls	r3, r0, #3
 80217c6:	00d2      	lsls	r2, r2, #3
 80217c8:	b2db      	uxtb	r3, r3
 80217ca:	fb13 f307 	smulbb	r3, r3, r7
 80217ce:	b2d2      	uxtb	r2, r2
 80217d0:	fb02 3101 	mla	r1, r2, r1, r3
 80217d4:	b2ad      	uxth	r5, r5
 80217d6:	b289      	uxth	r1, r1
 80217d8:	b2a4      	uxth	r4, r4
 80217da:	1c6b      	adds	r3, r5, #1
 80217dc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80217e0:	1c62      	adds	r2, r4, #1
 80217e2:	1c4b      	adds	r3, r1, #1
 80217e4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80217e8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80217ec:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80217f0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80217f4:	0964      	lsrs	r4, r4, #5
 80217f6:	432b      	orrs	r3, r5
 80217f8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80217fc:	9a03      	ldr	r2, [sp, #12]
 80217fe:	4323      	orrs	r3, r4
 8021800:	8013      	strh	r3, [r2, #0]
 8021802:	b005      	add	sp, #20
 8021804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021808:	f04f 0c00 	mov.w	ip, #0
 802180c:	4664      	mov	r4, ip
 802180e:	e6d6      	b.n	80215be <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8021810:	2300      	movs	r3, #0
 8021812:	469c      	mov	ip, r3
 8021814:	461a      	mov	r2, r3
 8021816:	461c      	mov	r4, r3
 8021818:	e6f8      	b.n	802160c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802181a:	2300      	movs	r3, #0
 802181c:	461a      	mov	r2, r3
 802181e:	e6f5      	b.n	802160c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021820:	460b      	mov	r3, r1
 8021822:	460a      	mov	r2, r1
 8021824:	e6f2      	b.n	802160c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021826:	2500      	movs	r5, #0
 8021828:	46ab      	mov	fp, r5
 802182a:	e720      	b.n	802166e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 802182c:	2700      	movs	r7, #0
 802182e:	463d      	mov	r5, r7
 8021830:	4638      	mov	r0, r7
 8021832:	46bb      	mov	fp, r7
 8021834:	e745      	b.n	80216c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021836:	4677      	mov	r7, lr
 8021838:	4675      	mov	r5, lr
 802183a:	4670      	mov	r0, lr
 802183c:	46f3      	mov	fp, lr
 802183e:	e740      	b.n	80216c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021840:	2700      	movs	r7, #0
 8021842:	4638      	mov	r0, r7
 8021844:	e73d      	b.n	80216c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021846:	460f      	mov	r7, r1
 8021848:	4608      	mov	r0, r1
 802184a:	e73a      	b.n	80216c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0802184c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802184c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021850:	b097      	sub	sp, #92	; 0x5c
 8021852:	9214      	str	r2, [sp, #80]	; 0x50
 8021854:	9308      	str	r3, [sp, #32]
 8021856:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021858:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802185c:	9312      	str	r3, [sp, #72]	; 0x48
 802185e:	9111      	str	r1, [sp, #68]	; 0x44
 8021860:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8021864:	9015      	str	r0, [sp, #84]	; 0x54
 8021866:	6850      	ldr	r0, [r2, #4]
 8021868:	6812      	ldr	r2, [r2, #0]
 802186a:	fb00 1303 	mla	r3, r0, r3, r1
 802186e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021872:	9309      	str	r3, [sp, #36]	; 0x24
 8021874:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021876:	681b      	ldr	r3, [r3, #0]
 8021878:	930b      	str	r3, [sp, #44]	; 0x2c
 802187a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802187c:	685b      	ldr	r3, [r3, #4]
 802187e:	930c      	str	r3, [sp, #48]	; 0x30
 8021880:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021884:	930a      	str	r3, [sp, #40]	; 0x28
 8021886:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021888:	2b00      	cmp	r3, #0
 802188a:	dc03      	bgt.n	8021894 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802188c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802188e:	2b00      	cmp	r3, #0
 8021890:	f340 83cb 	ble.w	802202a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8021894:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021896:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802189a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802189e:	1e48      	subs	r0, r1, #1
 80218a0:	1e55      	subs	r5, r2, #1
 80218a2:	9b08      	ldr	r3, [sp, #32]
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	f340 81a3 	ble.w	8021bf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80218aa:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80218ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80218ae:	1436      	asrs	r6, r6, #16
 80218b0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80218b4:	d406      	bmi.n	80218c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80218b6:	4286      	cmp	r6, r0
 80218b8:	da04      	bge.n	80218c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80218ba:	2b00      	cmp	r3, #0
 80218bc:	db02      	blt.n	80218c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80218be:	42ab      	cmp	r3, r5
 80218c0:	f2c0 8197 	blt.w	8021bf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80218c4:	3601      	adds	r6, #1
 80218c6:	f100 8184 	bmi.w	8021bd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80218ca:	42b1      	cmp	r1, r6
 80218cc:	f2c0 8181 	blt.w	8021bd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80218d0:	3301      	adds	r3, #1
 80218d2:	f100 817e 	bmi.w	8021bd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80218d6:	429a      	cmp	r2, r3
 80218d8:	f2c0 817b 	blt.w	8021bd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80218dc:	9b08      	ldr	r3, [sp, #32]
 80218de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80218e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80218e2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80218e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80218e8:	2b00      	cmp	r3, #0
 80218ea:	f340 81a4 	ble.w	8021c36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80218ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80218f0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80218f2:	1418      	asrs	r0, r3, #16
 80218f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80218f6:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80218fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80218fc:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021900:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021902:	142d      	asrs	r5, r5, #16
 8021904:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021908:	f100 81f8 	bmi.w	8021cfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802190c:	f102 3eff 	add.w	lr, r2, #4294967295
 8021910:	4575      	cmp	r5, lr
 8021912:	f280 81f3 	bge.w	8021cfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021916:	2800      	cmp	r0, #0
 8021918:	f2c0 81f0 	blt.w	8021cfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802191c:	f103 3eff 	add.w	lr, r3, #4294967295
 8021920:	4570      	cmp	r0, lr
 8021922:	f280 81eb 	bge.w	8021cfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021928:	b212      	sxth	r2, r2
 802192a:	fb00 5002 	mla	r0, r0, r2, r5
 802192e:	fa1f fe81 	uxth.w	lr, r1
 8021932:	eb03 0a00 	add.w	sl, r3, r0
 8021936:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802193a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802193e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021942:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8021946:	b29b      	uxth	r3, r3
 8021948:	f1bc 0f00 	cmp.w	ip, #0
 802194c:	f000 81b9 	beq.w	8021cc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8021950:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021954:	940d      	str	r4, [sp, #52]	; 0x34
 8021956:	eb0a 0b02 	add.w	fp, sl, r2
 802195a:	fa1f fa8c 	uxth.w	sl, ip
 802195e:	fb0a fe0e 	mul.w	lr, sl, lr
 8021962:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021966:	fa1f fa8a 	uxth.w	sl, sl
 802196a:	eba5 050e 	sub.w	r5, r5, lr
 802196e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021972:	940e      	str	r4, [sp, #56]	; 0x38
 8021974:	eba3 030a 	sub.w	r3, r3, sl
 8021978:	b2ad      	uxth	r5, r5
 802197a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802197c:	b29b      	uxth	r3, r3
 802197e:	fb08 f505 	mul.w	r5, r8, r5
 8021982:	fb09 5303 	mla	r3, r9, r3, r5
 8021986:	fb0a 3304 	mla	r3, sl, r4, r3
 802198a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802198c:	fb0e 3304 	mla	r3, lr, r4, r3
 8021990:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021994:	2b00      	cmp	r3, #0
 8021996:	f000 810f 	beq.w	8021bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802199a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802199c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80219a0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80219a4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80219a8:	f000 8190 	beq.w	8021ccc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 80219ac:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80219b0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80219b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80219b8:	fb09 f000 	mul.w	r0, r9, r0
 80219bc:	fb0a fe0e 	mul.w	lr, sl, lr
 80219c0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80219c4:	f100 0b20 	add.w	fp, r0, #32
 80219c8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80219cc:	44ce      	add	lr, r9
 80219ce:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80219d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80219d6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80219da:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80219de:	ea4e 0909 	orr.w	r9, lr, r9
 80219e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80219e6:	8868      	ldrh	r0, [r5, #2]
 80219e8:	d019      	beq.n	8021a1e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80219ea:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80219ee:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80219f2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80219f6:	fb08 f800 	mul.w	r8, r8, r0
 80219fa:	fb0a fe0e 	mul.w	lr, sl, lr
 80219fe:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021a02:	f108 0b20 	add.w	fp, r8, #32
 8021a06:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021a0a:	4486      	add	lr, r0
 8021a0c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021a10:	0a00      	lsrs	r0, r0, #8
 8021a12:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021a16:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021a1a:	ea4e 0000 	orr.w	r0, lr, r0
 8021a1e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021a22:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021a26:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021a2a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021a2e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021a32:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021a36:	ea4e 0909 	orr.w	r9, lr, r9
 8021a3a:	ea4a 0000 	orr.w	r0, sl, r0
 8021a3e:	f1bc 0f00 	cmp.w	ip, #0
 8021a42:	f000 8145 	beq.w	8021cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8021a46:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8021a4a:	3a01      	subs	r2, #1
 8021a4c:	0052      	lsls	r2, r2, #1
 8021a4e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021a50:	3202      	adds	r2, #2
 8021a52:	2cff      	cmp	r4, #255	; 0xff
 8021a54:	eb05 0e02 	add.w	lr, r5, r2
 8021a58:	5aaa      	ldrh	r2, [r5, r2]
 8021a5a:	d018      	beq.n	8021a8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021a5c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8021a60:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021a64:	fb04 fa02 	mul.w	sl, r4, r2
 8021a68:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021a6c:	fb08 f805 	mul.w	r8, r8, r5
 8021a70:	f10a 0520 	add.w	r5, sl, #32
 8021a74:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8021a78:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8021a7c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021a80:	4442      	add	r2, r8
 8021a82:	0a2d      	lsrs	r5, r5, #8
 8021a84:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8021a88:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021a8c:	432a      	orrs	r2, r5
 8021a8e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021a90:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8021a94:	2cff      	cmp	r4, #255	; 0xff
 8021a96:	d01a      	beq.n	8021ace <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8021a98:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8021a9c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021aa0:	fb04 fa05 	mul.w	sl, r4, r5
 8021aa4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021aa8:	fb08 f80e 	mul.w	r8, r8, lr
 8021aac:	f10a 0e20 	add.w	lr, sl, #32
 8021ab0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021ab4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8021ab8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021abc:	4445      	add	r5, r8
 8021abe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021ac2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8021ac6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8021aca:	ea45 050e 	orr.w	r5, r5, lr
 8021ace:	fb1c fe01 	smulbb	lr, ip, r1
 8021ad2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8021ad6:	f1cc 0810 	rsb	r8, ip, #16
 8021ada:	eba8 0801 	sub.w	r8, r8, r1
 8021ade:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021ae2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8021ae6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8021aea:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8021aee:	4341      	muls	r1, r0
 8021af0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021af4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021af8:	ea4a 0202 	orr.w	r2, sl, r2
 8021afc:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8021b00:	fb09 1108 	mla	r1, r9, r8, r1
 8021b04:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021b08:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021b0c:	fb0c 1102 	mla	r1, ip, r2, r1
 8021b10:	ea4b 0505 	orr.w	r5, fp, r5
 8021b14:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021b18:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021b1c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021b20:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021b24:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021b28:	ea42 0e0e 	orr.w	lr, r2, lr
 8021b2c:	fa1f f28e 	uxth.w	r2, lr
 8021b30:	2bff      	cmp	r3, #255	; 0xff
 8021b32:	d103      	bne.n	8021b3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8021b34:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021b36:	29ff      	cmp	r1, #255	; 0xff
 8021b38:	f000 80de 	beq.w	8021cf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8021b3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021b3e:	8838      	ldrh	r0, [r7, #0]
 8021b40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021b42:	434b      	muls	r3, r1
 8021b44:	f103 0c01 	add.w	ip, r3, #1
 8021b48:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8021b4c:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8021b50:	fa5f fc83 	uxtb.w	ip, r3
 8021b54:	1203      	asrs	r3, r0, #8
 8021b56:	1215      	asrs	r5, r2, #8
 8021b58:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021b5c:	fb13 f30c 	smulbb	r3, r3, ip
 8021b60:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021b64:	fb05 3501 	mla	r5, r5, r1, r3
 8021b68:	10c3      	asrs	r3, r0, #3
 8021b6a:	10d1      	asrs	r1, r2, #3
 8021b6c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021b70:	fb13 f30c 	smulbb	r3, r3, ip
 8021b74:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021b78:	fb01 3104 	mla	r1, r1, r4, r3
 8021b7c:	00c3      	lsls	r3, r0, #3
 8021b7e:	00d2      	lsls	r2, r2, #3
 8021b80:	b2db      	uxtb	r3, r3
 8021b82:	b2d2      	uxtb	r2, r2
 8021b84:	fb13 f30c 	smulbb	r3, r3, ip
 8021b88:	b2ad      	uxth	r5, r5
 8021b8a:	fb02 3304 	mla	r3, r2, r4, r3
 8021b8e:	b29a      	uxth	r2, r3
 8021b90:	1c6b      	adds	r3, r5, #1
 8021b92:	b289      	uxth	r1, r1
 8021b94:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021b98:	1c53      	adds	r3, r2, #1
 8021b9a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021b9e:	1c4a      	adds	r2, r1, #1
 8021ba0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021ba4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021ba8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021bac:	0949      	lsrs	r1, r1, #5
 8021bae:	432b      	orrs	r3, r5
 8021bb0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021bb4:	430b      	orrs	r3, r1
 8021bb6:	803b      	strh	r3, [r7, #0]
 8021bb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021bba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021bbc:	4413      	add	r3, r2
 8021bbe:	9321      	str	r3, [sp, #132]	; 0x84
 8021bc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021bc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021bc4:	441a      	add	r2, r3
 8021bc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021bc8:	9222      	str	r2, [sp, #136]	; 0x88
 8021bca:	3b01      	subs	r3, #1
 8021bcc:	3702      	adds	r7, #2
 8021bce:	9313      	str	r3, [sp, #76]	; 0x4c
 8021bd0:	e689      	b.n	80218e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021bd4:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8021bd6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8021bd8:	4433      	add	r3, r6
 8021bda:	9321      	str	r3, [sp, #132]	; 0x84
 8021bdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021bde:	441c      	add	r4, r3
 8021be0:	9b08      	ldr	r3, [sp, #32]
 8021be2:	9422      	str	r4, [sp, #136]	; 0x88
 8021be4:	3b01      	subs	r3, #1
 8021be6:	9308      	str	r3, [sp, #32]
 8021be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021bea:	3302      	adds	r3, #2
 8021bec:	9309      	str	r3, [sp, #36]	; 0x24
 8021bee:	e658      	b.n	80218a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8021bf0:	d028      	beq.n	8021c44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021bf2:	9b08      	ldr	r3, [sp, #32]
 8021bf4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021bf6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8021bf8:	3b01      	subs	r3, #1
 8021bfa:	fb00 5003 	mla	r0, r0, r3, r5
 8021bfe:	1400      	asrs	r0, r0, #16
 8021c00:	f53f ae6c 	bmi.w	80218dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021c04:	3901      	subs	r1, #1
 8021c06:	4288      	cmp	r0, r1
 8021c08:	f6bf ae68 	bge.w	80218dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021c0c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021c0e:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021c10:	fb01 0303 	mla	r3, r1, r3, r0
 8021c14:	141b      	asrs	r3, r3, #16
 8021c16:	f53f ae61 	bmi.w	80218dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021c1a:	3a01      	subs	r2, #1
 8021c1c:	4293      	cmp	r3, r2
 8021c1e:	f6bf ae5d 	bge.w	80218dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021c22:	9b08      	ldr	r3, [sp, #32]
 8021c24:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8021c28:	9313      	str	r3, [sp, #76]	; 0x4c
 8021c2a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021c2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021c30:	2b00      	cmp	r3, #0
 8021c32:	f300 8082 	bgt.w	8021d3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8021c36:	9b08      	ldr	r3, [sp, #32]
 8021c38:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c3e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021c42:	9309      	str	r3, [sp, #36]	; 0x24
 8021c44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021c46:	2b00      	cmp	r3, #0
 8021c48:	f340 81ef 	ble.w	802202a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8021c4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021c50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021c54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021c58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021c5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021c5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021c62:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021c66:	eef0 6a62 	vmov.f32	s13, s5
 8021c6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021c6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021c72:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021c76:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8021c7a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021c7e:	eef0 6a43 	vmov.f32	s13, s6
 8021c82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021c86:	ee12 2a90 	vmov	r2, s5
 8021c8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021c8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c92:	ee13 2a10 	vmov	r2, s6
 8021c96:	9323      	str	r3, [sp, #140]	; 0x8c
 8021c98:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021c9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c9e:	9324      	str	r3, [sp, #144]	; 0x90
 8021ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021ca2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021ca4:	3b01      	subs	r3, #1
 8021ca6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021caa:	9311      	str	r3, [sp, #68]	; 0x44
 8021cac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021cae:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8021cb2:	bf08      	it	eq
 8021cb4:	4613      	moveq	r3, r2
 8021cb6:	9308      	str	r3, [sp, #32]
 8021cb8:	eeb0 3a67 	vmov.f32	s6, s15
 8021cbc:	eef0 2a47 	vmov.f32	s5, s14
 8021cc0:	e5e1      	b.n	8021886 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021cc2:	fb08 f505 	mul.w	r5, r8, r5
 8021cc6:	fb09 5303 	mla	r3, r9, r3, r5
 8021cca:	e661      	b.n	8021990 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8021ccc:	4681      	mov	r9, r0
 8021cce:	e688      	b.n	80219e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8021cd0:	f1c1 0210 	rsb	r2, r1, #16
 8021cd4:	4341      	muls	r1, r0
 8021cd6:	fb09 1902 	mla	r9, r9, r2, r1
 8021cda:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021cde:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8021ce2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021ce6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021cea:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021cee:	ea42 0909 	orr.w	r9, r2, r9
 8021cf2:	fa1f f289 	uxth.w	r2, r9
 8021cf6:	e71b      	b.n	8021b30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021cf8:	803a      	strh	r2, [r7, #0]
 8021cfa:	e75d      	b.n	8021bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021cfc:	f115 0e01 	adds.w	lr, r5, #1
 8021d00:	f53f af5a 	bmi.w	8021bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021d04:	4572      	cmp	r2, lr
 8021d06:	f6ff af57 	blt.w	8021bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021d0a:	f110 0e01 	adds.w	lr, r0, #1
 8021d0e:	f53f af53 	bmi.w	8021bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021d12:	4573      	cmp	r3, lr
 8021d14:	f6ff af50 	blt.w	8021bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021d18:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021d1a:	9502      	str	r5, [sp, #8]
 8021d1c:	b21b      	sxth	r3, r3
 8021d1e:	b212      	sxth	r2, r2
 8021d20:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8021d24:	9301      	str	r3, [sp, #4]
 8021d26:	9200      	str	r2, [sp, #0]
 8021d28:	e9cd c405 	strd	ip, r4, [sp, #20]
 8021d2c:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8021d30:	4639      	mov	r1, r7
 8021d32:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021d34:	f7ff fc04 	bl	8021540 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8021d38:	e73e      	b.n	8021bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021d3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021d3c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021d40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021d42:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8021d46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021d48:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021d4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021d4e:	141f      	asrs	r7, r3, #16
 8021d50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021d52:	141b      	asrs	r3, r3, #16
 8021d54:	fb01 3707 	mla	r7, r1, r7, r3
 8021d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021d5a:	fa1f fc82 	uxth.w	ip, r2
 8021d5e:	eb03 0a07 	add.w	sl, r3, r7
 8021d62:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8021d66:	f813 9007 	ldrb.w	r9, [r3, r7]
 8021d6a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021d6e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8021d72:	b29b      	uxth	r3, r3
 8021d74:	2d00      	cmp	r5, #0
 8021d76:	f000 813d 	beq.w	8021ff4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8021d7a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8021d7e:	940f      	str	r4, [sp, #60]	; 0x3c
 8021d80:	eb0a 0b01 	add.w	fp, sl, r1
 8021d84:	fa1f fa85 	uxth.w	sl, r5
 8021d88:	fb0a fc0c 	mul.w	ip, sl, ip
 8021d8c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8021d90:	fa1f fa8a 	uxth.w	sl, sl
 8021d94:	eba0 000c 	sub.w	r0, r0, ip
 8021d98:	eba3 030a 	sub.w	r3, r3, sl
 8021d9c:	b280      	uxth	r0, r0
 8021d9e:	fb08 f000 	mul.w	r0, r8, r0
 8021da2:	b29b      	uxth	r3, r3
 8021da4:	fb09 0303 	mla	r3, r9, r3, r0
 8021da8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021daa:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021dae:	9410      	str	r4, [sp, #64]	; 0x40
 8021db0:	fb0a 3300 	mla	r3, sl, r0, r3
 8021db4:	fb0c 3304 	mla	r3, ip, r4, r3
 8021db8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021dbc:	2b00      	cmp	r3, #0
 8021dbe:	f000 810b 	beq.w	8021fd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8021dc2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021dc4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021dc6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021dca:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8021dce:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8021dd2:	f000 8114 	beq.w	8021ffe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 8021dd6:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021dda:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021dde:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021de2:	fb09 f707 	mul.w	r7, r9, r7
 8021de6:	fb0a fc0c 	mul.w	ip, sl, ip
 8021dea:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8021dee:	f107 0b20 	add.w	fp, r7, #32
 8021df2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021df6:	44cc      	add	ip, r9
 8021df8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8021dfc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021e00:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021e04:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021e08:	ea4c 0909 	orr.w	r9, ip, r9
 8021e0c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021e10:	8847      	ldrh	r7, [r0, #2]
 8021e12:	d019      	beq.n	8021e48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8021e14:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021e18:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021e1c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021e20:	fb08 f807 	mul.w	r8, r8, r7
 8021e24:	fb0a fc0c 	mul.w	ip, sl, ip
 8021e28:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8021e2c:	f108 0b20 	add.w	fp, r8, #32
 8021e30:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021e34:	44bc      	add	ip, r7
 8021e36:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8021e3a:	0a3f      	lsrs	r7, r7, #8
 8021e3c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021e40:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021e44:	ea4c 0707 	orr.w	r7, ip, r7
 8021e48:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8021e4c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8021e50:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021e54:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021e58:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021e5c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021e60:	ea4c 0909 	orr.w	r9, ip, r9
 8021e64:	ea4a 0707 	orr.w	r7, sl, r7
 8021e68:	2d00      	cmp	r5, #0
 8021e6a:	f000 80ca 	beq.w	8022002 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8021e6e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8021e72:	3901      	subs	r1, #1
 8021e74:	0049      	lsls	r1, r1, #1
 8021e76:	3102      	adds	r1, #2
 8021e78:	eb00 0c01 	add.w	ip, r0, r1
 8021e7c:	5a41      	ldrh	r1, [r0, r1]
 8021e7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021e80:	28ff      	cmp	r0, #255	; 0xff
 8021e82:	d019      	beq.n	8021eb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8021e84:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021e86:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8021e8a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021e8e:	fb04 fa01 	mul.w	sl, r4, r1
 8021e92:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021e96:	fb08 f800 	mul.w	r8, r8, r0
 8021e9a:	f10a 0020 	add.w	r0, sl, #32
 8021e9e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8021ea2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8021ea6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021eaa:	4441      	add	r1, r8
 8021eac:	0a00      	lsrs	r0, r0, #8
 8021eae:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8021eb2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021eb6:	4301      	orrs	r1, r0
 8021eb8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021eba:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8021ebe:	2cff      	cmp	r4, #255	; 0xff
 8021ec0:	d01a      	beq.n	8021ef8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 8021ec2:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8021ec6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021eca:	fb04 fa00 	mul.w	sl, r4, r0
 8021ece:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021ed2:	fb08 f80c 	mul.w	r8, r8, ip
 8021ed6:	f10a 0c20 	add.w	ip, sl, #32
 8021eda:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8021ede:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8021ee2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021ee6:	4440      	add	r0, r8
 8021ee8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021eec:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8021ef0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021ef4:	ea40 000c 	orr.w	r0, r0, ip
 8021ef8:	fb15 fc02 	smulbb	ip, r5, r2
 8021efc:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8021f00:	f1c5 0810 	rsb	r8, r5, #16
 8021f04:	eba8 0802 	sub.w	r8, r8, r2
 8021f08:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8021f0c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8021f10:	437a      	muls	r2, r7
 8021f12:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8021f16:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8021f1a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021f1e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021f22:	fb09 2208 	mla	r2, r9, r8, r2
 8021f26:	ea4a 0101 	orr.w	r1, sl, r1
 8021f2a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8021f2e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021f32:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021f36:	fb05 2201 	mla	r2, r5, r1, r2
 8021f3a:	ea4b 0000 	orr.w	r0, fp, r0
 8021f3e:	fb0c 2200 	mla	r2, ip, r0, r2
 8021f42:	0d57      	lsrs	r7, r2, #21
 8021f44:	0952      	lsrs	r2, r2, #5
 8021f46:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021f4a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021f4e:	433a      	orrs	r2, r7
 8021f50:	2bff      	cmp	r3, #255	; 0xff
 8021f52:	b292      	uxth	r2, r2
 8021f54:	d102      	bne.n	8021f5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8021f56:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021f58:	29ff      	cmp	r1, #255	; 0xff
 8021f5a:	d063      	beq.n	8022024 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8021f5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021f5e:	f8be 1000 	ldrh.w	r1, [lr]
 8021f62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021f64:	4343      	muls	r3, r0
 8021f66:	1c58      	adds	r0, r3, #1
 8021f68:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8021f6c:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8021f70:	1208      	asrs	r0, r1, #8
 8021f72:	b2db      	uxtb	r3, r3
 8021f74:	1215      	asrs	r5, r2, #8
 8021f76:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021f7a:	fb10 f003 	smulbb	r0, r0, r3
 8021f7e:	10cf      	asrs	r7, r1, #3
 8021f80:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021f84:	00c9      	lsls	r1, r1, #3
 8021f86:	fb05 0504 	mla	r5, r5, r4, r0
 8021f8a:	b2c9      	uxtb	r1, r1
 8021f8c:	10d0      	asrs	r0, r2, #3
 8021f8e:	00d2      	lsls	r2, r2, #3
 8021f90:	fb11 f103 	smulbb	r1, r1, r3
 8021f94:	b2d2      	uxtb	r2, r2
 8021f96:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021f9a:	fb02 1204 	mla	r2, r2, r4, r1
 8021f9e:	fb17 f703 	smulbb	r7, r7, r3
 8021fa2:	b2ad      	uxth	r5, r5
 8021fa4:	b292      	uxth	r2, r2
 8021fa6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021faa:	fb00 7004 	mla	r0, r0, r4, r7
 8021fae:	1c6b      	adds	r3, r5, #1
 8021fb0:	1c57      	adds	r7, r2, #1
 8021fb2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021fb6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021fba:	b280      	uxth	r0, r0
 8021fbc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021fc0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021fc4:	433d      	orrs	r5, r7
 8021fc6:	1c47      	adds	r7, r0, #1
 8021fc8:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8021fcc:	097f      	lsrs	r7, r7, #5
 8021fce:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021fd2:	433d      	orrs	r5, r7
 8021fd4:	f8ae 5000 	strh.w	r5, [lr]
 8021fd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021fda:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021fdc:	4413      	add	r3, r2
 8021fde:	9321      	str	r3, [sp, #132]	; 0x84
 8021fe0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021fe2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021fe4:	441a      	add	r2, r3
 8021fe6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021fe8:	9222      	str	r2, [sp, #136]	; 0x88
 8021fea:	3b01      	subs	r3, #1
 8021fec:	f10e 0e02 	add.w	lr, lr, #2
 8021ff0:	9313      	str	r3, [sp, #76]	; 0x4c
 8021ff2:	e61c      	b.n	8021c2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8021ff4:	fb08 f000 	mul.w	r0, r8, r0
 8021ff8:	fb09 0303 	mla	r3, r9, r3, r0
 8021ffc:	e6dc      	b.n	8021db8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 8021ffe:	46b9      	mov	r9, r7
 8022000:	e704      	b.n	8021e0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 8022002:	f1c2 0110 	rsb	r1, r2, #16
 8022006:	437a      	muls	r2, r7
 8022008:	fb09 2901 	mla	r9, r9, r1, r2
 802200c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022010:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8022014:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022018:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802201c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022020:	4302      	orrs	r2, r0
 8022022:	e795      	b.n	8021f50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8022024:	f8ae 2000 	strh.w	r2, [lr]
 8022028:	e7d6      	b.n	8021fd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 802202a:	b017      	add	sp, #92	; 0x5c
 802202c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022030 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8022030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022034:	b085      	sub	sp, #20
 8022036:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 802203a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 802203e:	9103      	str	r1, [sp, #12]
 8022040:	fb00 7406 	mla	r4, r0, r6, r7
 8022044:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8022048:	2800      	cmp	r0, #0
 802204a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 802204e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8022052:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8022056:	9501      	str	r5, [sp, #4]
 8022058:	eb02 0904 	add.w	r9, r2, r4
 802205c:	f2c0 8141 	blt.w	80222e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8022060:	4583      	cmp	fp, r0
 8022062:	f340 813e 	ble.w	80222e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8022066:	2f00      	cmp	r7, #0
 8022068:	f2c0 8137 	blt.w	80222da <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 802206c:	42be      	cmp	r6, r7
 802206e:	f340 8134 	ble.w	80222da <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8022072:	f812 c004 	ldrb.w	ip, [r2, r4]
 8022076:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 802207a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802207e:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8022082:	4355      	muls	r5, r2
 8022084:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022088:	f64f 041f 	movw	r4, #63519	; 0xf81f
 802208c:	fb0c f203 	mul.w	r2, ip, r3
 8022090:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8022094:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8022098:	441d      	add	r5, r3
 802209a:	f102 0320 	add.w	r3, r2, #32
 802209e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80220a2:	0a1b      	lsrs	r3, r3, #8
 80220a4:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80220a8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80220ac:	431c      	orrs	r4, r3
 80220ae:	1c7b      	adds	r3, r7, #1
 80220b0:	f100 811c 	bmi.w	80222ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80220b4:	429e      	cmp	r6, r3
 80220b6:	f340 8119 	ble.w	80222ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80220ba:	2900      	cmp	r1, #0
 80220bc:	f000 8119 	beq.w	80222f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 80220c0:	9a01      	ldr	r2, [sp, #4]
 80220c2:	f899 3001 	ldrb.w	r3, [r9, #1]
 80220c6:	8855      	ldrh	r5, [r2, #2]
 80220c8:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80220cc:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 80220d0:	fb08 f802 	mul.w	r8, r8, r2
 80220d4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80220d8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80220dc:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80220e0:	435d      	muls	r5, r3
 80220e2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80220e6:	44d0      	add	r8, sl
 80220e8:	f105 0a20 	add.w	sl, r5, #32
 80220ec:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80220f0:	0a2d      	lsrs	r5, r5, #8
 80220f2:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80220f6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80220fa:	432a      	orrs	r2, r5
 80220fc:	3001      	adds	r0, #1
 80220fe:	f100 80fe 	bmi.w	80222fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8022102:	4583      	cmp	fp, r0
 8022104:	f340 80fb 	ble.w	80222fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8022108:	f1be 0f00 	cmp.w	lr, #0
 802210c:	f000 80fc 	beq.w	8022308 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8022110:	2f00      	cmp	r7, #0
 8022112:	f2c0 80f1 	blt.w	80222f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8022116:	42be      	cmp	r6, r7
 8022118:	f340 80ee 	ble.w	80222f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802211c:	9801      	ldr	r0, [sp, #4]
 802211e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8022122:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8022126:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802212a:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 802212e:	fb0a fa00 	mul.w	sl, sl, r0
 8022132:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8022136:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802213a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802213e:	fb05 f808 	mul.w	r8, r5, r8
 8022142:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8022146:	4482      	add	sl, r0
 8022148:	f108 0020 	add.w	r0, r8, #32
 802214c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8022150:	0a00      	lsrs	r0, r0, #8
 8022152:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8022156:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802215a:	ea4b 0b00 	orr.w	fp, fp, r0
 802215e:	3701      	adds	r7, #1
 8022160:	f100 80d7 	bmi.w	8022312 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8022164:	42be      	cmp	r6, r7
 8022166:	f340 80d4 	ble.w	8022312 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802216a:	2900      	cmp	r1, #0
 802216c:	f000 80d4 	beq.w	8022318 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8022170:	3601      	adds	r6, #1
 8022172:	9801      	ldr	r0, [sp, #4]
 8022174:	f819 7006 	ldrb.w	r7, [r9, r6]
 8022178:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 802217c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8022180:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8022184:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022188:	fb09 f906 	mul.w	r9, r9, r6
 802218c:	fb07 f800 	mul.w	r8, r7, r0
 8022190:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8022194:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8022198:	f609 0901 	addw	r9, r9, #2049	; 0x801
 802219c:	44d1      	add	r9, sl
 802219e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80221a2:	f108 0020 	add.w	r0, r8, #32
 80221a6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80221aa:	0a00      	lsrs	r0, r0, #8
 80221ac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80221b0:	4330      	orrs	r0, r6
 80221b2:	b28e      	uxth	r6, r1
 80221b4:	fa1f f98e 	uxth.w	r9, lr
 80221b8:	fb06 f809 	mul.w	r8, r6, r9
 80221bc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80221c0:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80221c4:	0136      	lsls	r6, r6, #4
 80221c6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80221ca:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80221ce:	9601      	str	r6, [sp, #4]
 80221d0:	ea4a 0404 	orr.w	r4, sl, r4
 80221d4:	fa1f f689 	uxth.w	r6, r9
 80221d8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80221dc:	fb11 f90e 	smulbb	r9, r1, lr
 80221e0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80221e4:	9602      	str	r6, [sp, #8]
 80221e6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80221ea:	4626      	mov	r6, r4
 80221ec:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80221f0:	f1ce 0410 	rsb	r4, lr, #16
 80221f4:	1a64      	subs	r4, r4, r1
 80221f6:	ea4a 0202 	orr.w	r2, sl, r2
 80221fa:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80221fe:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8022202:	434a      	muls	r2, r1
 8022204:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8022208:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802220c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022210:	fb04 2406 	mla	r4, r4, r6, r2
 8022214:	ea4a 0000 	orr.w	r0, sl, r0
 8022218:	fb09 4200 	mla	r2, r9, r0, r4
 802221c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8022220:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022224:	9801      	ldr	r0, [sp, #4]
 8022226:	9903      	ldr	r1, [sp, #12]
 8022228:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802222c:	ea44 0b0b 	orr.w	fp, r4, fp
 8022230:	9c02      	ldr	r4, [sp, #8]
 8022232:	8809      	ldrh	r1, [r1, #0]
 8022234:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8022238:	1b00      	subs	r0, r0, r4
 802223a:	9c01      	ldr	r4, [sp, #4]
 802223c:	eba4 0608 	sub.w	r6, r4, r8
 8022240:	b2b6      	uxth	r6, r6
 8022242:	b280      	uxth	r0, r0
 8022244:	4373      	muls	r3, r6
 8022246:	fb0c 3300 	mla	r3, ip, r0, r3
 802224a:	9802      	ldr	r0, [sp, #8]
 802224c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8022250:	fb00 3505 	mla	r5, r0, r5, r3
 8022254:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8022258:	fb08 5707 	mla	r7, r8, r7, r5
 802225c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022260:	120b      	asrs	r3, r1, #8
 8022262:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022266:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802226a:	b2ff      	uxtb	r7, r7
 802226c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022270:	10c8      	asrs	r0, r1, #3
 8022272:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022276:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802227a:	00c9      	lsls	r1, r1, #3
 802227c:	437b      	muls	r3, r7
 802227e:	ea42 0e0e 	orr.w	lr, r2, lr
 8022282:	b2c9      	uxtb	r1, r1
 8022284:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022288:	fa1f f28e 	uxth.w	r2, lr
 802228c:	4378      	muls	r0, r7
 802228e:	434f      	muls	r7, r1
 8022290:	1c59      	adds	r1, r3, #1
 8022292:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022296:	1213      	asrs	r3, r2, #8
 8022298:	f023 0307 	bic.w	r3, r3, #7
 802229c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80222a0:	1c41      	adds	r1, r0, #1
 80222a2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80222a6:	10d1      	asrs	r1, r2, #3
 80222a8:	f021 0103 	bic.w	r1, r1, #3
 80222ac:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80222b0:	021b      	lsls	r3, r3, #8
 80222b2:	00c9      	lsls	r1, r1, #3
 80222b4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80222b8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80222bc:	430b      	orrs	r3, r1
 80222be:	1c79      	adds	r1, r7, #1
 80222c0:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80222c4:	00d2      	lsls	r2, r2, #3
 80222c6:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80222ca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80222ce:	431a      	orrs	r2, r3
 80222d0:	9b03      	ldr	r3, [sp, #12]
 80222d2:	801a      	strh	r2, [r3, #0]
 80222d4:	b005      	add	sp, #20
 80222d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222da:	f04f 0c00 	mov.w	ip, #0
 80222de:	4664      	mov	r4, ip
 80222e0:	e6e5      	b.n	80220ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 80222e2:	2300      	movs	r3, #0
 80222e4:	469c      	mov	ip, r3
 80222e6:	461a      	mov	r2, r3
 80222e8:	461c      	mov	r4, r3
 80222ea:	e707      	b.n	80220fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80222ec:	2300      	movs	r3, #0
 80222ee:	461a      	mov	r2, r3
 80222f0:	e704      	b.n	80220fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80222f2:	460b      	mov	r3, r1
 80222f4:	460a      	mov	r2, r1
 80222f6:	e701      	b.n	80220fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80222f8:	2500      	movs	r5, #0
 80222fa:	46ab      	mov	fp, r5
 80222fc:	e72f      	b.n	802215e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 80222fe:	2700      	movs	r7, #0
 8022300:	463d      	mov	r5, r7
 8022302:	4638      	mov	r0, r7
 8022304:	46bb      	mov	fp, r7
 8022306:	e754      	b.n	80221b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8022308:	4677      	mov	r7, lr
 802230a:	4675      	mov	r5, lr
 802230c:	4670      	mov	r0, lr
 802230e:	46f3      	mov	fp, lr
 8022310:	e74f      	b.n	80221b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8022312:	2700      	movs	r7, #0
 8022314:	4638      	mov	r0, r7
 8022316:	e74c      	b.n	80221b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8022318:	460f      	mov	r7, r1
 802231a:	4608      	mov	r0, r1
 802231c:	e749      	b.n	80221b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08022320 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022324:	b093      	sub	sp, #76	; 0x4c
 8022326:	9210      	str	r2, [sp, #64]	; 0x40
 8022328:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802232a:	910e      	str	r1, [sp, #56]	; 0x38
 802232c:	9306      	str	r3, [sp, #24]
 802232e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8022332:	9011      	str	r0, [sp, #68]	; 0x44
 8022334:	6850      	ldr	r0, [r2, #4]
 8022336:	6812      	ldr	r2, [r2, #0]
 8022338:	fb00 1303 	mla	r3, r0, r3, r1
 802233c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022340:	9307      	str	r3, [sp, #28]
 8022342:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022344:	681b      	ldr	r3, [r3, #0]
 8022346:	9308      	str	r3, [sp, #32]
 8022348:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802234a:	685b      	ldr	r3, [r3, #4]
 802234c:	9309      	str	r3, [sp, #36]	; 0x24
 802234e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022350:	2b00      	cmp	r3, #0
 8022352:	dc03      	bgt.n	802235c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022356:	2b00      	cmp	r3, #0
 8022358:	f340 83b4 	ble.w	8022ac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 802235c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802235e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022362:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022366:	1e48      	subs	r0, r1, #1
 8022368:	1e55      	subs	r5, r2, #1
 802236a:	9b06      	ldr	r3, [sp, #24]
 802236c:	2b00      	cmp	r3, #0
 802236e:	f340 8163 	ble.w	8022638 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8022372:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8022374:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022376:	1436      	asrs	r6, r6, #16
 8022378:	ea4f 4323 	mov.w	r3, r3, asr #16
 802237c:	d406      	bmi.n	802238c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802237e:	4286      	cmp	r6, r0
 8022380:	da04      	bge.n	802238c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022382:	2b00      	cmp	r3, #0
 8022384:	db02      	blt.n	802238c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022386:	42ab      	cmp	r3, r5
 8022388:	f2c0 8157 	blt.w	802263a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802238c:	3601      	adds	r6, #1
 802238e:	f100 8144 	bmi.w	802261a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022392:	42b1      	cmp	r1, r6
 8022394:	f2c0 8141 	blt.w	802261a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022398:	3301      	adds	r3, #1
 802239a:	f100 813e 	bmi.w	802261a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802239e:	429a      	cmp	r2, r3
 80223a0:	f2c0 813b 	blt.w	802261a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80223a4:	9b06      	ldr	r3, [sp, #24]
 80223a6:	9f07      	ldr	r7, [sp, #28]
 80223a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80223aa:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80223ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80223b0:	2b00      	cmp	r3, #0
 80223b2:	f340 8164 	ble.w	802267e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80223b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80223b8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80223ba:	1418      	asrs	r0, r3, #16
 80223bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80223be:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80223c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80223c4:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80223c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80223ca:	142d      	asrs	r5, r5, #16
 80223cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80223d0:	f100 81ee 	bmi.w	80227b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80223d4:	f102 3eff 	add.w	lr, r2, #4294967295
 80223d8:	4575      	cmp	r5, lr
 80223da:	f280 81e9 	bge.w	80227b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80223de:	2800      	cmp	r0, #0
 80223e0:	f2c0 81e6 	blt.w	80227b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80223e4:	f103 3eff 	add.w	lr, r3, #4294967295
 80223e8:	4570      	cmp	r0, lr
 80223ea:	f280 81e1 	bge.w	80227b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80223ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223f0:	b212      	sxth	r2, r2
 80223f2:	fb00 5002 	mla	r0, r0, r2, r5
 80223f6:	fa1f fe81 	uxth.w	lr, r1
 80223fa:	eb03 0a00 	add.w	sl, r3, r0
 80223fe:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8022402:	f813 9000 	ldrb.w	r9, [r3, r0]
 8022406:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802240a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802240e:	b29b      	uxth	r3, r3
 8022410:	f1bc 0f00 	cmp.w	ip, #0
 8022414:	f000 8179 	beq.w	802270a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8022418:	f81a 4002 	ldrb.w	r4, [sl, r2]
 802241c:	940a      	str	r4, [sp, #40]	; 0x28
 802241e:	eb0a 0b02 	add.w	fp, sl, r2
 8022422:	fa1f fa8c 	uxth.w	sl, ip
 8022426:	fb0a fe0e 	mul.w	lr, sl, lr
 802242a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802242e:	fa1f fa8a 	uxth.w	sl, sl
 8022432:	eba5 050e 	sub.w	r5, r5, lr
 8022436:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802243a:	940b      	str	r4, [sp, #44]	; 0x2c
 802243c:	eba3 030a 	sub.w	r3, r3, sl
 8022440:	b2ad      	uxth	r5, r5
 8022442:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022444:	b29b      	uxth	r3, r3
 8022446:	fb08 f505 	mul.w	r5, r8, r5
 802244a:	fb09 5303 	mla	r3, r9, r3, r5
 802244e:	fb0a 3304 	mla	r3, sl, r4, r3
 8022452:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022454:	fb0e 3304 	mla	r3, lr, r4, r3
 8022458:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802245c:	2b00      	cmp	r3, #0
 802245e:	f000 80cf 	beq.w	8022600 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022462:	9c08      	ldr	r4, [sp, #32]
 8022464:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022468:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 802246c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8022470:	f000 8150 	beq.w	8022714 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022474:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022478:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802247c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022480:	fb09 f000 	mul.w	r0, r9, r0
 8022484:	fb0a fe0e 	mul.w	lr, sl, lr
 8022488:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802248c:	f100 0b20 	add.w	fp, r0, #32
 8022490:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022494:	44ce      	add	lr, r9
 8022496:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802249a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802249e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80224a2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80224a6:	ea4e 0909 	orr.w	r9, lr, r9
 80224aa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80224ae:	8868      	ldrh	r0, [r5, #2]
 80224b0:	d019      	beq.n	80224e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80224b2:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80224b6:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80224ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80224be:	fb08 f800 	mul.w	r8, r8, r0
 80224c2:	fb0a fe0e 	mul.w	lr, sl, lr
 80224c6:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80224ca:	f108 0b20 	add.w	fp, r8, #32
 80224ce:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80224d2:	4486      	add	lr, r0
 80224d4:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80224d8:	0a00      	lsrs	r0, r0, #8
 80224da:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80224de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80224e2:	ea4e 0000 	orr.w	r0, lr, r0
 80224e6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80224ea:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80224ee:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80224f2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80224f6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80224fa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80224fe:	ea4e 0909 	orr.w	r9, lr, r9
 8022502:	ea4a 0000 	orr.w	r0, sl, r0
 8022506:	f1bc 0f00 	cmp.w	ip, #0
 802250a:	f000 8105 	beq.w	8022718 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802250e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8022512:	3a01      	subs	r2, #1
 8022514:	0052      	lsls	r2, r2, #1
 8022516:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022518:	3202      	adds	r2, #2
 802251a:	2cff      	cmp	r4, #255	; 0xff
 802251c:	eb05 0e02 	add.w	lr, r5, r2
 8022520:	5aaa      	ldrh	r2, [r5, r2]
 8022522:	d018      	beq.n	8022556 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8022524:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8022528:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802252c:	fb04 fa02 	mul.w	sl, r4, r2
 8022530:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022534:	fb08 f805 	mul.w	r8, r8, r5
 8022538:	f10a 0520 	add.w	r5, sl, #32
 802253c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8022540:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8022544:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022548:	4442      	add	r2, r8
 802254a:	0a2d      	lsrs	r5, r5, #8
 802254c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8022550:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022554:	432a      	orrs	r2, r5
 8022556:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022558:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802255c:	2cff      	cmp	r4, #255	; 0xff
 802255e:	d01a      	beq.n	8022596 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8022560:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8022564:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022568:	fb04 fa05 	mul.w	sl, r4, r5
 802256c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022570:	fb08 f80e 	mul.w	r8, r8, lr
 8022574:	f10a 0e20 	add.w	lr, sl, #32
 8022578:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802257c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8022580:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022584:	4445      	add	r5, r8
 8022586:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802258a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802258e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8022592:	ea45 050e 	orr.w	r5, r5, lr
 8022596:	fb1c fe01 	smulbb	lr, ip, r1
 802259a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802259e:	f1cc 0810 	rsb	r8, ip, #16
 80225a2:	eba8 0801 	sub.w	r8, r8, r1
 80225a6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80225aa:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80225ae:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80225b2:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80225b6:	4341      	muls	r1, r0
 80225b8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80225bc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80225c0:	ea4a 0202 	orr.w	r2, sl, r2
 80225c4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80225c8:	fb09 1108 	mla	r1, r9, r8, r1
 80225cc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80225d0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80225d4:	fb0c 1102 	mla	r1, ip, r2, r1
 80225d8:	ea4b 0505 	orr.w	r5, fp, r5
 80225dc:	fb0e 1e05 	mla	lr, lr, r5, r1
 80225e0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80225e4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80225e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80225ec:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80225f0:	ea42 0e0e 	orr.w	lr, r2, lr
 80225f4:	fa1f f28e 	uxth.w	r2, lr
 80225f8:	2bff      	cmp	r3, #255	; 0xff
 80225fa:	f040 80a1 	bne.w	8022740 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80225fe:	803a      	strh	r2, [r7, #0]
 8022600:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022602:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022604:	4413      	add	r3, r2
 8022606:	931d      	str	r3, [sp, #116]	; 0x74
 8022608:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802260a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802260c:	441a      	add	r2, r3
 802260e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022610:	921e      	str	r2, [sp, #120]	; 0x78
 8022612:	3b01      	subs	r3, #1
 8022614:	3702      	adds	r7, #2
 8022616:	930f      	str	r3, [sp, #60]	; 0x3c
 8022618:	e6c9      	b.n	80223ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802261a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802261c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 802261e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8022620:	4433      	add	r3, r6
 8022622:	931d      	str	r3, [sp, #116]	; 0x74
 8022624:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022626:	441c      	add	r4, r3
 8022628:	9b06      	ldr	r3, [sp, #24]
 802262a:	941e      	str	r4, [sp, #120]	; 0x78
 802262c:	3b01      	subs	r3, #1
 802262e:	9306      	str	r3, [sp, #24]
 8022630:	9b07      	ldr	r3, [sp, #28]
 8022632:	3302      	adds	r3, #2
 8022634:	9307      	str	r3, [sp, #28]
 8022636:	e698      	b.n	802236a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022638:	d028      	beq.n	802268c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802263a:	9b06      	ldr	r3, [sp, #24]
 802263c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802263e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8022640:	3b01      	subs	r3, #1
 8022642:	fb00 5003 	mla	r0, r0, r3, r5
 8022646:	1400      	asrs	r0, r0, #16
 8022648:	f53f aeac 	bmi.w	80223a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802264c:	3901      	subs	r1, #1
 802264e:	4288      	cmp	r0, r1
 8022650:	f6bf aea8 	bge.w	80223a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022654:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022656:	981e      	ldr	r0, [sp, #120]	; 0x78
 8022658:	fb01 0303 	mla	r3, r1, r3, r0
 802265c:	141b      	asrs	r3, r3, #16
 802265e:	f53f aea1 	bmi.w	80223a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022662:	3a01      	subs	r2, #1
 8022664:	4293      	cmp	r3, r2
 8022666:	f6bf ae9d 	bge.w	80223a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802266a:	9b06      	ldr	r3, [sp, #24]
 802266c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022670:	930f      	str	r3, [sp, #60]	; 0x3c
 8022672:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022678:	2b00      	cmp	r3, #0
 802267a:	f300 80b6 	bgt.w	80227ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 802267e:	9b06      	ldr	r3, [sp, #24]
 8022680:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022684:	9b07      	ldr	r3, [sp, #28]
 8022686:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802268a:	9307      	str	r3, [sp, #28]
 802268c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802268e:	2b00      	cmp	r3, #0
 8022690:	f340 8218 	ble.w	8022ac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8022694:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022698:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802269c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80226a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80226a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80226a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80226aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80226ae:	eef0 6a62 	vmov.f32	s13, s5
 80226b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80226b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80226ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80226be:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80226c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80226c6:	eef0 6a43 	vmov.f32	s13, s6
 80226ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80226ce:	ee12 2a90 	vmov	r2, s5
 80226d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80226d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80226da:	ee13 2a10 	vmov	r2, s6
 80226de:	931f      	str	r3, [sp, #124]	; 0x7c
 80226e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80226e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80226e6:	9320      	str	r3, [sp, #128]	; 0x80
 80226e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80226ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80226ec:	3b01      	subs	r3, #1
 80226ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80226f2:	930e      	str	r3, [sp, #56]	; 0x38
 80226f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80226f6:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 80226fa:	bf08      	it	eq
 80226fc:	4613      	moveq	r3, r2
 80226fe:	9306      	str	r3, [sp, #24]
 8022700:	eeb0 3a67 	vmov.f32	s6, s15
 8022704:	eef0 2a47 	vmov.f32	s5, s14
 8022708:	e621      	b.n	802234e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802270a:	fb08 f505 	mul.w	r5, r8, r5
 802270e:	fb09 5303 	mla	r3, r9, r3, r5
 8022712:	e6a1      	b.n	8022458 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8022714:	4681      	mov	r9, r0
 8022716:	e6c8      	b.n	80224aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8022718:	f1c1 0210 	rsb	r2, r1, #16
 802271c:	4341      	muls	r1, r0
 802271e:	fb09 1902 	mla	r9, r9, r2, r1
 8022722:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022726:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802272a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802272e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022732:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022736:	ea42 0909 	orr.w	r9, r2, r9
 802273a:	fa1f f289 	uxth.w	r2, r9
 802273e:	e75b      	b.n	80225f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022740:	f8b7 c000 	ldrh.w	ip, [r7]
 8022744:	43db      	mvns	r3, r3
 8022746:	ea4f 202c 	mov.w	r0, ip, asr #8
 802274a:	fa5f fe83 	uxtb.w	lr, r3
 802274e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022752:	fb00 f00e 	mul.w	r0, r0, lr
 8022756:	1c41      	adds	r1, r0, #1
 8022758:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802275c:	1211      	asrs	r1, r2, #8
 802275e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022762:	f021 0107 	bic.w	r1, r1, #7
 8022766:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802276a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802276e:	48d7      	ldr	r0, [pc, #860]	; (8022acc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8022770:	fb05 f50e 	mul.w	r5, r5, lr
 8022774:	b2c9      	uxtb	r1, r1
 8022776:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 802277a:	1c69      	adds	r1, r5, #1
 802277c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022780:	10d1      	asrs	r1, r2, #3
 8022782:	f021 0103 	bic.w	r1, r1, #3
 8022786:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802278a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802278e:	b2db      	uxtb	r3, r3
 8022790:	00c9      	lsls	r1, r1, #3
 8022792:	fb03 f30e 	mul.w	r3, r3, lr
 8022796:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802279a:	4301      	orrs	r1, r0
 802279c:	1c58      	adds	r0, r3, #1
 802279e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80227a2:	00d2      	lsls	r2, r2, #3
 80227a4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80227a8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80227ac:	430a      	orrs	r2, r1
 80227ae:	e726      	b.n	80225fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 80227b0:	f115 0e01 	adds.w	lr, r5, #1
 80227b4:	f53f af24 	bmi.w	8022600 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80227b8:	4572      	cmp	r2, lr
 80227ba:	f6ff af21 	blt.w	8022600 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80227be:	f110 0e01 	adds.w	lr, r0, #1
 80227c2:	f53f af1d 	bmi.w	8022600 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80227c6:	4573      	cmp	r3, lr
 80227c8:	f6ff af1a 	blt.w	8022600 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80227cc:	b21b      	sxth	r3, r3
 80227ce:	b212      	sxth	r2, r2
 80227d0:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80227d4:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80227d8:	9301      	str	r3, [sp, #4]
 80227da:	9200      	str	r2, [sp, #0]
 80227dc:	4639      	mov	r1, r7
 80227de:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80227e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80227e4:	f7ff fc24 	bl	8022030 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80227e8:	e70a      	b.n	8022600 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80227ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80227ec:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80227f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80227f2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80227f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80227f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80227fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80227fe:	141f      	asrs	r7, r3, #16
 8022800:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022802:	141b      	asrs	r3, r3, #16
 8022804:	fb01 3707 	mla	r7, r1, r7, r3
 8022808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802280a:	fa1f fc82 	uxth.w	ip, r2
 802280e:	eb03 0a07 	add.w	sl, r3, r7
 8022812:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8022816:	f813 9007 	ldrb.w	r9, [r3, r7]
 802281a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802281e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022822:	b29b      	uxth	r3, r3
 8022824:	2d00      	cmp	r5, #0
 8022826:	f000 80fe 	beq.w	8022a26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 802282a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802282e:	940c      	str	r4, [sp, #48]	; 0x30
 8022830:	eb0a 0b01 	add.w	fp, sl, r1
 8022834:	fa1f fa85 	uxth.w	sl, r5
 8022838:	fb0a fc0c 	mul.w	ip, sl, ip
 802283c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8022840:	fa1f fa8a 	uxth.w	sl, sl
 8022844:	eba0 000c 	sub.w	r0, r0, ip
 8022848:	eba3 030a 	sub.w	r3, r3, sl
 802284c:	b280      	uxth	r0, r0
 802284e:	fb08 f000 	mul.w	r0, r8, r0
 8022852:	b29b      	uxth	r3, r3
 8022854:	fb09 0303 	mla	r3, r9, r3, r0
 8022858:	980c      	ldr	r0, [sp, #48]	; 0x30
 802285a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802285e:	940d      	str	r4, [sp, #52]	; 0x34
 8022860:	fb0a 3300 	mla	r3, sl, r0, r3
 8022864:	fb0c 3304 	mla	r3, ip, r4, r3
 8022868:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802286c:	2b00      	cmp	r3, #0
 802286e:	f000 80cc 	beq.w	8022a0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8022872:	9808      	ldr	r0, [sp, #32]
 8022874:	9c08      	ldr	r4, [sp, #32]
 8022876:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802287a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802287e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8022882:	f000 80d5 	beq.w	8022a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8022886:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802288a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802288e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022892:	fb09 f707 	mul.w	r7, r9, r7
 8022896:	fb0a fc0c 	mul.w	ip, sl, ip
 802289a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802289e:	f107 0b20 	add.w	fp, r7, #32
 80228a2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80228a6:	44cc      	add	ip, r9
 80228a8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80228ac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80228b0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80228b4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80228b8:	ea4c 0909 	orr.w	r9, ip, r9
 80228bc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80228c0:	8847      	ldrh	r7, [r0, #2]
 80228c2:	d019      	beq.n	80228f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 80228c4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80228c8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80228cc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80228d0:	fb08 f807 	mul.w	r8, r8, r7
 80228d4:	fb0a fc0c 	mul.w	ip, sl, ip
 80228d8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80228dc:	f108 0b20 	add.w	fp, r8, #32
 80228e0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80228e4:	44bc      	add	ip, r7
 80228e6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80228ea:	0a3f      	lsrs	r7, r7, #8
 80228ec:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80228f0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80228f4:	ea4c 0707 	orr.w	r7, ip, r7
 80228f8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80228fc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022900:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022904:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022908:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802290c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022910:	ea4c 0909 	orr.w	r9, ip, r9
 8022914:	ea4a 0707 	orr.w	r7, sl, r7
 8022918:	2d00      	cmp	r5, #0
 802291a:	f000 808b 	beq.w	8022a34 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802291e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022922:	3901      	subs	r1, #1
 8022924:	0049      	lsls	r1, r1, #1
 8022926:	3102      	adds	r1, #2
 8022928:	eb00 0c01 	add.w	ip, r0, r1
 802292c:	5a41      	ldrh	r1, [r0, r1]
 802292e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022930:	28ff      	cmp	r0, #255	; 0xff
 8022932:	d019      	beq.n	8022968 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 8022934:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022936:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802293a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802293e:	fb04 fa01 	mul.w	sl, r4, r1
 8022942:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022946:	fb08 f800 	mul.w	r8, r8, r0
 802294a:	f10a 0020 	add.w	r0, sl, #32
 802294e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8022952:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022956:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802295a:	4441      	add	r1, r8
 802295c:	0a00      	lsrs	r0, r0, #8
 802295e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8022962:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022966:	4301      	orrs	r1, r0
 8022968:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802296a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802296e:	2cff      	cmp	r4, #255	; 0xff
 8022970:	d01a      	beq.n	80229a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 8022972:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022976:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802297a:	fb04 fa00 	mul.w	sl, r4, r0
 802297e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022982:	fb08 f80c 	mul.w	r8, r8, ip
 8022986:	f10a 0c20 	add.w	ip, sl, #32
 802298a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802298e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8022992:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022996:	4440      	add	r0, r8
 8022998:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802299c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80229a0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80229a4:	ea40 000c 	orr.w	r0, r0, ip
 80229a8:	fb15 fc02 	smulbb	ip, r5, r2
 80229ac:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80229b0:	f1c5 0810 	rsb	r8, r5, #16
 80229b4:	eba8 0802 	sub.w	r8, r8, r2
 80229b8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80229bc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80229c0:	437a      	muls	r2, r7
 80229c2:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80229c6:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80229ca:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80229ce:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80229d2:	fb09 2208 	mla	r2, r9, r8, r2
 80229d6:	ea4a 0101 	orr.w	r1, sl, r1
 80229da:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80229de:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80229e2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80229e6:	fb05 2201 	mla	r2, r5, r1, r2
 80229ea:	ea4b 0000 	orr.w	r0, fp, r0
 80229ee:	fb0c 2200 	mla	r2, ip, r0, r2
 80229f2:	0d57      	lsrs	r7, r2, #21
 80229f4:	0952      	lsrs	r2, r2, #5
 80229f6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80229fa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80229fe:	433a      	orrs	r2, r7
 8022a00:	2bff      	cmp	r3, #255	; 0xff
 8022a02:	b292      	uxth	r2, r2
 8022a04:	d127      	bne.n	8022a56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8022a06:	f8ae 2000 	strh.w	r2, [lr]
 8022a0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022a0c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022a0e:	4413      	add	r3, r2
 8022a10:	931d      	str	r3, [sp, #116]	; 0x74
 8022a12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022a14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022a16:	441a      	add	r2, r3
 8022a18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022a1a:	921e      	str	r2, [sp, #120]	; 0x78
 8022a1c:	3b01      	subs	r3, #1
 8022a1e:	f10e 0e02 	add.w	lr, lr, #2
 8022a22:	930f      	str	r3, [sp, #60]	; 0x3c
 8022a24:	e627      	b.n	8022676 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022a26:	fb08 f000 	mul.w	r0, r8, r0
 8022a2a:	fb09 0303 	mla	r3, r9, r3, r0
 8022a2e:	e71b      	b.n	8022868 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8022a30:	46b9      	mov	r9, r7
 8022a32:	e743      	b.n	80228bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8022a34:	f1c2 0110 	rsb	r1, r2, #16
 8022a38:	437a      	muls	r2, r7
 8022a3a:	fb09 2901 	mla	r9, r9, r1, r2
 8022a3e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022a42:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8022a46:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022a4a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022a4e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022a52:	4302      	orrs	r2, r0
 8022a54:	e7d4      	b.n	8022a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8022a56:	f8be 7000 	ldrh.w	r7, [lr]
 8022a5a:	4c1c      	ldr	r4, [pc, #112]	; (8022acc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8022a5c:	43db      	mvns	r3, r3
 8022a5e:	1238      	asrs	r0, r7, #8
 8022a60:	fa5f fc83 	uxtb.w	ip, r3
 8022a64:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022a68:	10fd      	asrs	r5, r7, #3
 8022a6a:	fb00 f00c 	mul.w	r0, r0, ip
 8022a6e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022a72:	fb05 f10c 	mul.w	r1, r5, ip
 8022a76:	1c45      	adds	r5, r0, #1
 8022a78:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022a7c:	1215      	asrs	r5, r2, #8
 8022a7e:	f025 0507 	bic.w	r5, r5, #7
 8022a82:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022a86:	1c4d      	adds	r5, r1, #1
 8022a88:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8022a8c:	10d1      	asrs	r1, r2, #3
 8022a8e:	f021 0103 	bic.w	r1, r1, #3
 8022a92:	00fb      	lsls	r3, r7, #3
 8022a94:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022a98:	b2db      	uxtb	r3, r3
 8022a9a:	b2c0      	uxtb	r0, r0
 8022a9c:	00c9      	lsls	r1, r1, #3
 8022a9e:	fb03 f30c 	mul.w	r3, r3, ip
 8022aa2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022aa6:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8022aaa:	4308      	orrs	r0, r1
 8022aac:	1c59      	adds	r1, r3, #1
 8022aae:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022ab2:	00d2      	lsls	r2, r2, #3
 8022ab4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022ab8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8022abc:	4318      	orrs	r0, r3
 8022abe:	f8ae 0000 	strh.w	r0, [lr]
 8022ac2:	e7a2      	b.n	8022a0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8022ac4:	b013      	add	sp, #76	; 0x4c
 8022ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022aca:	bf00      	nop
 8022acc:	fffff800 	.word	0xfffff800

08022ad0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8022ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022ad4:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8022ad8:	fb05 4c03 	mla	ip, r5, r3, r4
 8022adc:	2d00      	cmp	r5, #0
 8022ade:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8022ae2:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8022ae6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8022aea:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8022aee:	8808      	ldrh	r0, [r1, #0]
 8022af0:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8022af4:	f2c0 80a7 	blt.w	8022c46 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8022af8:	45aa      	cmp	sl, r5
 8022afa:	f340 80a4 	ble.w	8022c46 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8022afe:	2c00      	cmp	r4, #0
 8022b00:	f2c0 809f 	blt.w	8022c42 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8022b04:	42a3      	cmp	r3, r4
 8022b06:	f340 809c 	ble.w	8022c42 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8022b0a:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8022b0e:	1c62      	adds	r2, r4, #1
 8022b10:	f100 809c 	bmi.w	8022c4c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022b14:	4293      	cmp	r3, r2
 8022b16:	f340 8099 	ble.w	8022c4c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022b1a:	f1b9 0f00 	cmp.w	r9, #0
 8022b1e:	f000 8095 	beq.w	8022c4c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022b22:	f8be c002 	ldrh.w	ip, [lr, #2]
 8022b26:	3501      	adds	r5, #1
 8022b28:	f100 8094 	bmi.w	8022c54 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022b2c:	45aa      	cmp	sl, r5
 8022b2e:	f340 8091 	ble.w	8022c54 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022b32:	2f00      	cmp	r7, #0
 8022b34:	f000 808e 	beq.w	8022c54 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022b38:	2c00      	cmp	r4, #0
 8022b3a:	f2c0 8089 	blt.w	8022c50 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8022b3e:	42a3      	cmp	r3, r4
 8022b40:	f340 8086 	ble.w	8022c50 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8022b44:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8022b48:	3401      	adds	r4, #1
 8022b4a:	f100 8086 	bmi.w	8022c5a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8022b4e:	42a3      	cmp	r3, r4
 8022b50:	f340 8083 	ble.w	8022c5a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8022b54:	f1b9 0f00 	cmp.w	r9, #0
 8022b58:	d07f      	beq.n	8022c5a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8022b5a:	3301      	adds	r3, #1
 8022b5c:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8022b60:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8022b64:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022b68:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8022b6c:	fb19 fe07 	smulbb	lr, r9, r7
 8022b70:	ea44 0808 	orr.w	r8, r4, r8
 8022b74:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8022b78:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8022b7c:	f1c7 0210 	rsb	r2, r7, #16
 8022b80:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022b84:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022b88:	ea44 0c0c 	orr.w	ip, r4, ip
 8022b8c:	eba2 0209 	sub.w	r2, r2, r9
 8022b90:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8022b94:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8022b98:	fb04 f40c 	mul.w	r4, r4, ip
 8022b9c:	fb02 4808 	mla	r8, r2, r8, r4
 8022ba0:	041a      	lsls	r2, r3, #16
 8022ba2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022ba6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022baa:	4313      	orrs	r3, r2
 8022bac:	042a      	lsls	r2, r5, #16
 8022bae:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022bb2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022bb6:	fb0e 8303 	mla	r3, lr, r3, r8
 8022bba:	432a      	orrs	r2, r5
 8022bbc:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8022bc0:	fb07 3202 	mla	r2, r7, r2, r3
 8022bc4:	0d53      	lsrs	r3, r2, #21
 8022bc6:	0952      	lsrs	r2, r2, #5
 8022bc8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022bcc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022bd0:	431a      	orrs	r2, r3
 8022bd2:	b293      	uxth	r3, r2
 8022bd4:	b2b4      	uxth	r4, r6
 8022bd6:	1202      	asrs	r2, r0, #8
 8022bd8:	43f6      	mvns	r6, r6
 8022bda:	b2f6      	uxtb	r6, r6
 8022bdc:	121d      	asrs	r5, r3, #8
 8022bde:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022be2:	fb12 f206 	smulbb	r2, r2, r6
 8022be6:	10c7      	asrs	r7, r0, #3
 8022be8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022bec:	00c0      	lsls	r0, r0, #3
 8022bee:	fb05 2504 	mla	r5, r5, r4, r2
 8022bf2:	b2c0      	uxtb	r0, r0
 8022bf4:	10da      	asrs	r2, r3, #3
 8022bf6:	00db      	lsls	r3, r3, #3
 8022bf8:	b2db      	uxtb	r3, r3
 8022bfa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022bfe:	fb10 f006 	smulbb	r0, r0, r6
 8022c02:	b2ad      	uxth	r5, r5
 8022c04:	fb03 0004 	mla	r0, r3, r4, r0
 8022c08:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022c0c:	fb17 f706 	smulbb	r7, r7, r6
 8022c10:	b280      	uxth	r0, r0
 8022c12:	1c6b      	adds	r3, r5, #1
 8022c14:	fb02 7204 	mla	r2, r2, r4, r7
 8022c18:	b292      	uxth	r2, r2
 8022c1a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022c1e:	1c43      	adds	r3, r0, #1
 8022c20:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022c24:	1c50      	adds	r0, r2, #1
 8022c26:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022c2a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022c2e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022c32:	0952      	lsrs	r2, r2, #5
 8022c34:	432b      	orrs	r3, r5
 8022c36:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022c3a:	4313      	orrs	r3, r2
 8022c3c:	800b      	strh	r3, [r1, #0]
 8022c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c42:	4680      	mov	r8, r0
 8022c44:	e763      	b.n	8022b0e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8022c46:	4684      	mov	ip, r0
 8022c48:	4680      	mov	r8, r0
 8022c4a:	e76c      	b.n	8022b26 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8022c4c:	4684      	mov	ip, r0
 8022c4e:	e76a      	b.n	8022b26 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8022c50:	4605      	mov	r5, r0
 8022c52:	e779      	b.n	8022b48 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8022c54:	4603      	mov	r3, r0
 8022c56:	4605      	mov	r5, r0
 8022c58:	e782      	b.n	8022b60 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8022c5a:	4603      	mov	r3, r0
 8022c5c:	e780      	b.n	8022b60 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08022c5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022c5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c62:	b093      	sub	sp, #76	; 0x4c
 8022c64:	461d      	mov	r5, r3
 8022c66:	9210      	str	r2, [sp, #64]	; 0x40
 8022c68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022c6a:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8022c6e:	920b      	str	r2, [sp, #44]	; 0x2c
 8022c70:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8022c74:	910a      	str	r1, [sp, #40]	; 0x28
 8022c76:	6859      	ldr	r1, [r3, #4]
 8022c78:	681b      	ldr	r3, [r3, #0]
 8022c7a:	9011      	str	r0, [sp, #68]	; 0x44
 8022c7c:	fb01 2707 	mla	r7, r1, r7, r2
 8022c80:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8022c84:	9307      	str	r3, [sp, #28]
 8022c86:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022c88:	681b      	ldr	r3, [r3, #0]
 8022c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8022c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022c8e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8022c92:	43db      	mvns	r3, r3
 8022c94:	b2db      	uxtb	r3, r3
 8022c96:	9308      	str	r3, [sp, #32]
 8022c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c9a:	2b00      	cmp	r3, #0
 8022c9c:	dc03      	bgt.n	8022ca6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022c9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022ca0:	2b00      	cmp	r3, #0
 8022ca2:	f340 8203 	ble.w	80230ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022ca6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022ca8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022cac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022cb0:	1e48      	subs	r0, r1, #1
 8022cb2:	f102 3cff 	add.w	ip, r2, #4294967295
 8022cb6:	2d00      	cmp	r5, #0
 8022cb8:	f340 80da 	ble.w	8022e70 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8022cbc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022cc0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022cc4:	d406      	bmi.n	8022cd4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022cc6:	4586      	cmp	lr, r0
 8022cc8:	da04      	bge.n	8022cd4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022cca:	2b00      	cmp	r3, #0
 8022ccc:	db02      	blt.n	8022cd4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022cce:	4563      	cmp	r3, ip
 8022cd0:	f2c0 80cf 	blt.w	8022e72 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022cd4:	f11e 0e01 	adds.w	lr, lr, #1
 8022cd8:	f100 80c1 	bmi.w	8022e5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022cdc:	4571      	cmp	r1, lr
 8022cde:	f2c0 80be 	blt.w	8022e5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022ce2:	3301      	adds	r3, #1
 8022ce4:	f100 80bb 	bmi.w	8022e5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022ce8:	429a      	cmp	r2, r3
 8022cea:	f2c0 80b8 	blt.w	8022e5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022cee:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8022cf2:	46a9      	mov	r9, r5
 8022cf4:	f1b9 0f00 	cmp.w	r9, #0
 8022cf8:	f340 80d8 	ble.w	8022eac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8022cfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022cfe:	1421      	asrs	r1, r4, #16
 8022d00:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022d04:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022d08:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022d0c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022d10:	f100 8111 	bmi.w	8022f36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022d14:	f10e 3aff 	add.w	sl, lr, #4294967295
 8022d18:	4551      	cmp	r1, sl
 8022d1a:	f280 810c 	bge.w	8022f36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022d1e:	2800      	cmp	r0, #0
 8022d20:	f2c0 8109 	blt.w	8022f36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022d24:	f103 3aff 	add.w	sl, r3, #4294967295
 8022d28:	4550      	cmp	r0, sl
 8022d2a:	f280 8104 	bge.w	8022f36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022d2e:	fa0f f38e 	sxth.w	r3, lr
 8022d32:	fb00 1103 	mla	r1, r0, r3, r1
 8022d36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022d38:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8022d3c:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8022d40:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8022d44:	f1bc 0f00 	cmp.w	ip, #0
 8022d48:	d007      	beq.n	8022d5a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8022d4a:	005b      	lsls	r3, r3, #1
 8022d4c:	eb0a 0003 	add.w	r0, sl, r3
 8022d50:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8022d54:	930c      	str	r3, [sp, #48]	; 0x30
 8022d56:	8843      	ldrh	r3, [r0, #2]
 8022d58:	930d      	str	r3, [sp, #52]	; 0x34
 8022d5a:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8022d5e:	fb12 f30c 	smulbb	r3, r2, ip
 8022d62:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022d66:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022d6a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022d6e:	10db      	asrs	r3, r3, #3
 8022d70:	ea40 000e 	orr.w	r0, r0, lr
 8022d74:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022d78:	f1cc 0e10 	rsb	lr, ip, #16
 8022d7c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022d80:	ebae 0e02 	sub.w	lr, lr, r2
 8022d84:	ea4a 0101 	orr.w	r1, sl, r1
 8022d88:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022d8c:	4351      	muls	r1, r2
 8022d8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022d90:	9f08      	ldr	r7, [sp, #32]
 8022d92:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8022d96:	fb0e 1e00 	mla	lr, lr, r0, r1
 8022d9a:	0410      	lsls	r0, r2, #16
 8022d9c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022da0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022da4:	4310      	orrs	r0, r2
 8022da6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022da8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022daa:	0412      	lsls	r2, r2, #16
 8022dac:	fb03 e000 	mla	r0, r3, r0, lr
 8022db0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022db4:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8022db8:	ea42 020e 	orr.w	r2, r2, lr
 8022dbc:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8022dc0:	fb03 0302 	mla	r3, r3, r2, r0
 8022dc4:	0d5a      	lsrs	r2, r3, #21
 8022dc6:	095b      	lsrs	r3, r3, #5
 8022dc8:	f8b8 0000 	ldrh.w	r0, [r8]
 8022dcc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022dd0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022dd4:	4313      	orrs	r3, r2
 8022dd6:	b29b      	uxth	r3, r3
 8022dd8:	1201      	asrs	r1, r0, #8
 8022dda:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8022dde:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022de2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022de6:	fb11 f107 	smulbb	r1, r1, r7
 8022dea:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8022dee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022df2:	00c0      	lsls	r0, r0, #3
 8022df4:	fb0c 1c02 	mla	ip, ip, r2, r1
 8022df8:	b2c0      	uxtb	r0, r0
 8022dfa:	10d9      	asrs	r1, r3, #3
 8022dfc:	00db      	lsls	r3, r3, #3
 8022dfe:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022e02:	b2db      	uxtb	r3, r3
 8022e04:	fb10 f007 	smulbb	r0, r0, r7
 8022e08:	fa1f fc8c 	uxth.w	ip, ip
 8022e0c:	fb03 0302 	mla	r3, r3, r2, r0
 8022e10:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022e14:	fb1e fe07 	smulbb	lr, lr, r7
 8022e18:	fb01 e102 	mla	r1, r1, r2, lr
 8022e1c:	b29a      	uxth	r2, r3
 8022e1e:	f10c 0301 	add.w	r3, ip, #1
 8022e22:	b289      	uxth	r1, r1
 8022e24:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022e28:	1c53      	adds	r3, r2, #1
 8022e2a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022e2e:	1c4a      	adds	r2, r1, #1
 8022e30:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022e34:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022e38:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022e3c:	0949      	lsrs	r1, r1, #5
 8022e3e:	ea43 030c 	orr.w	r3, r3, ip
 8022e42:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022e46:	430b      	orrs	r3, r1
 8022e48:	f8a8 3000 	strh.w	r3, [r8]
 8022e4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022e4e:	441c      	add	r4, r3
 8022e50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022e52:	f108 0802 	add.w	r8, r8, #2
 8022e56:	441e      	add	r6, r3
 8022e58:	f109 39ff 	add.w	r9, r9, #4294967295
 8022e5c:	e74a      	b.n	8022cf4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022e5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022e60:	441c      	add	r4, r3
 8022e62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022e64:	441e      	add	r6, r3
 8022e66:	9b07      	ldr	r3, [sp, #28]
 8022e68:	3302      	adds	r3, #2
 8022e6a:	3d01      	subs	r5, #1
 8022e6c:	9307      	str	r3, [sp, #28]
 8022e6e:	e722      	b.n	8022cb6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022e70:	d022      	beq.n	8022eb8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8022e72:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022e74:	1e6b      	subs	r3, r5, #1
 8022e76:	fb00 4003 	mla	r0, r0, r3, r4
 8022e7a:	1400      	asrs	r0, r0, #16
 8022e7c:	f53f af37 	bmi.w	8022cee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022e80:	3901      	subs	r1, #1
 8022e82:	4288      	cmp	r0, r1
 8022e84:	f6bf af33 	bge.w	8022cee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022e88:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022e8a:	fb01 6303 	mla	r3, r1, r3, r6
 8022e8e:	141b      	asrs	r3, r3, #16
 8022e90:	f53f af2d 	bmi.w	8022cee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022e94:	3a01      	subs	r2, #1
 8022e96:	4293      	cmp	r3, r2
 8022e98:	f6bf af29 	bge.w	8022cee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022e9c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8022ea0:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8022ea4:	46a8      	mov	r8, r5
 8022ea6:	f1b8 0f00 	cmp.w	r8, #0
 8022eaa:	dc5e      	bgt.n	8022f6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8022eac:	9b07      	ldr	r3, [sp, #28]
 8022eae:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022eb2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8022eb6:	9307      	str	r3, [sp, #28]
 8022eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022eba:	2b00      	cmp	r3, #0
 8022ebc:	f340 80f6 	ble.w	80230ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022ec0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022ec4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022ec8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022ecc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022ece:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022ed2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022ed6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022eda:	eef0 6a62 	vmov.f32	s13, s5
 8022ede:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022ee2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ee6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022eea:	ee16 4a90 	vmov	r4, s13
 8022eee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022ef2:	eef0 6a43 	vmov.f32	s13, s6
 8022ef6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022efa:	ee12 2a90 	vmov	r2, s5
 8022efe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022f02:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f06:	ee13 2a10 	vmov	r2, s6
 8022f0a:	931f      	str	r3, [sp, #124]	; 0x7c
 8022f0c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022f0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f12:	9320      	str	r3, [sp, #128]	; 0x80
 8022f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022f18:	3b01      	subs	r3, #1
 8022f1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8022f20:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022f22:	ee16 6a90 	vmov	r6, s13
 8022f26:	bf14      	ite	ne
 8022f28:	461d      	movne	r5, r3
 8022f2a:	4615      	moveq	r5, r2
 8022f2c:	eeb0 3a67 	vmov.f32	s6, s15
 8022f30:	eef0 2a47 	vmov.f32	s5, s14
 8022f34:	e6b0      	b.n	8022c98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022f36:	f111 0a01 	adds.w	sl, r1, #1
 8022f3a:	d487      	bmi.n	8022e4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022f3c:	45d6      	cmp	lr, sl
 8022f3e:	db85      	blt.n	8022e4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022f40:	f110 0a01 	adds.w	sl, r0, #1
 8022f44:	d482      	bmi.n	8022e4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022f46:	4553      	cmp	r3, sl
 8022f48:	db80      	blt.n	8022e4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022f4a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022f4c:	9101      	str	r1, [sp, #4]
 8022f4e:	b21b      	sxth	r3, r3
 8022f50:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8022f54:	9300      	str	r3, [sp, #0]
 8022f56:	e9cd c704 	strd	ip, r7, [sp, #16]
 8022f5a:	fa0f f38e 	sxth.w	r3, lr
 8022f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022f60:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022f62:	4641      	mov	r1, r8
 8022f64:	f7ff fdb4 	bl	8022ad0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8022f68:	e770      	b.n	8022e4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022f6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022f6c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022f6e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022f72:	1430      	asrs	r0, r6, #16
 8022f74:	1423      	asrs	r3, r4, #16
 8022f76:	fb01 3000 	mla	r0, r1, r0, r3
 8022f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f7c:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8022f80:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8022f84:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8022f88:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022f8c:	8858      	ldrh	r0, [r3, #2]
 8022f8e:	f1be 0f00 	cmp.w	lr, #0
 8022f92:	d00b      	beq.n	8022fac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8022f94:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022f98:	3901      	subs	r1, #1
 8022f9a:	0049      	lsls	r1, r1, #1
 8022f9c:	3102      	adds	r1, #2
 8022f9e:	eb03 0b01 	add.w	fp, r3, r1
 8022fa2:	5a5b      	ldrh	r3, [r3, r1]
 8022fa4:	930e      	str	r3, [sp, #56]	; 0x38
 8022fa6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8022faa:	930f      	str	r3, [sp, #60]	; 0x3c
 8022fac:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8022fb0:	fb12 f30e 	smulbb	r3, r2, lr
 8022fb4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022fb8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022fbc:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8022fc0:	10db      	asrs	r3, r3, #3
 8022fc2:	ea41 010c 	orr.w	r1, r1, ip
 8022fc6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022fca:	f1ce 0c10 	rsb	ip, lr, #16
 8022fce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022fd2:	ebac 0c02 	sub.w	ip, ip, r2
 8022fd6:	ea4b 0000 	orr.w	r0, fp, r0
 8022fda:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022fde:	4350      	muls	r0, r2
 8022fe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022fe2:	9f08      	ldr	r7, [sp, #32]
 8022fe4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8022fe8:	fb0c 0c01 	mla	ip, ip, r1, r0
 8022fec:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8022ff0:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8022ff4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022ff6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022ff8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022ffc:	0412      	lsls	r2, r2, #16
 8022ffe:	ea4b 0101 	orr.w	r1, fp, r1
 8023002:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023006:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802300a:	fb03 c101 	mla	r1, r3, r1, ip
 802300e:	4302      	orrs	r2, r0
 8023010:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8023014:	fb03 1202 	mla	r2, r3, r2, r1
 8023018:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802301c:	0952      	lsrs	r2, r2, #5
 802301e:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8023022:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8023026:	f8b9 2000 	ldrh.w	r2, [r9]
 802302a:	ea4b 0303 	orr.w	r3, fp, r3
 802302e:	b29b      	uxth	r3, r3
 8023030:	1211      	asrs	r1, r2, #8
 8023032:	1218      	asrs	r0, r3, #8
 8023034:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023038:	fb11 f107 	smulbb	r1, r1, r7
 802303c:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8023040:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023044:	00d2      	lsls	r2, r2, #3
 8023046:	fb00 100a 	mla	r0, r0, sl, r1
 802304a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802304e:	10d9      	asrs	r1, r3, #3
 8023050:	b2d2      	uxtb	r2, r2
 8023052:	00db      	lsls	r3, r3, #3
 8023054:	fb1c fc07 	smulbb	ip, ip, r7
 8023058:	fb12 f207 	smulbb	r2, r2, r7
 802305c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023060:	b2db      	uxtb	r3, r3
 8023062:	b280      	uxth	r0, r0
 8023064:	fb01 c10a 	mla	r1, r1, sl, ip
 8023068:	fb03 230a 	mla	r3, r3, sl, r2
 802306c:	b29b      	uxth	r3, r3
 802306e:	b289      	uxth	r1, r1
 8023070:	1c42      	adds	r2, r0, #1
 8023072:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023076:	f101 0c01 	add.w	ip, r1, #1
 802307a:	1c5a      	adds	r2, r3, #1
 802307c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023080:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8023084:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023086:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802308a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802308e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023092:	4310      	orrs	r0, r2
 8023094:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023098:	441c      	add	r4, r3
 802309a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802309c:	ea40 000c 	orr.w	r0, r0, ip
 80230a0:	f829 0b02 	strh.w	r0, [r9], #2
 80230a4:	441e      	add	r6, r3
 80230a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80230aa:	e6fc      	b.n	8022ea6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80230ac:	b013      	add	sp, #76	; 0x4c
 80230ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080230b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80230b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80230b6:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 80230ba:	fb0e 4703 	mla	r7, lr, r3, r4
 80230be:	f1be 0f00 	cmp.w	lr, #0
 80230c2:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 80230c6:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 80230ca:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 80230ce:	8808      	ldrh	r0, [r1, #0]
 80230d0:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 80230d4:	db60      	blt.n	8023198 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80230d6:	45f1      	cmp	r9, lr
 80230d8:	dd5e      	ble.n	8023198 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80230da:	2c00      	cmp	r4, #0
 80230dc:	db5a      	blt.n	8023194 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80230de:	42a3      	cmp	r3, r4
 80230e0:	dd58      	ble.n	8023194 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80230e2:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 80230e6:	1c62      	adds	r2, r4, #1
 80230e8:	d459      	bmi.n	802319e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80230ea:	4293      	cmp	r3, r2
 80230ec:	dd57      	ble.n	802319e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80230ee:	2d00      	cmp	r5, #0
 80230f0:	d055      	beq.n	802319e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80230f2:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 80230f6:	f11e 0e01 	adds.w	lr, lr, #1
 80230fa:	d454      	bmi.n	80231a6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80230fc:	45f1      	cmp	r9, lr
 80230fe:	dd52      	ble.n	80231a6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8023100:	2e00      	cmp	r6, #0
 8023102:	d050      	beq.n	80231a6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8023104:	2c00      	cmp	r4, #0
 8023106:	db4c      	blt.n	80231a2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8023108:	42a3      	cmp	r3, r4
 802310a:	dd4a      	ble.n	80231a2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802310c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8023110:	3401      	adds	r4, #1
 8023112:	d405      	bmi.n	8023120 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023114:	42a3      	cmp	r3, r4
 8023116:	dd03      	ble.n	8023120 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023118:	b115      	cbz	r5, 8023120 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802311a:	3301      	adds	r3, #1
 802311c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8023120:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8023124:	fb15 f406 	smulbb	r4, r5, r6
 8023128:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802312c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8023130:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023134:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8023138:	ea43 0c0c 	orr.w	ip, r3, ip
 802313c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023140:	f1c6 0310 	rsb	r3, r6, #16
 8023144:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023148:	1b5b      	subs	r3, r3, r5
 802314a:	ea4e 0707 	orr.w	r7, lr, r7
 802314e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8023152:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8023156:	437d      	muls	r5, r7
 8023158:	fb03 5c0c 	mla	ip, r3, ip, r5
 802315c:	0403      	lsls	r3, r0, #16
 802315e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023162:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023166:	4318      	orrs	r0, r3
 8023168:	0413      	lsls	r3, r2, #16
 802316a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802316e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023172:	4313      	orrs	r3, r2
 8023174:	fb04 c000 	mla	r0, r4, r0, ip
 8023178:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 802317c:	fb06 0003 	mla	r0, r6, r3, r0
 8023180:	0d43      	lsrs	r3, r0, #21
 8023182:	0940      	lsrs	r0, r0, #5
 8023184:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023188:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802318c:	4318      	orrs	r0, r3
 802318e:	8008      	strh	r0, [r1, #0]
 8023190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023194:	4684      	mov	ip, r0
 8023196:	e7a6      	b.n	80230e6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8023198:	4607      	mov	r7, r0
 802319a:	4684      	mov	ip, r0
 802319c:	e7ab      	b.n	80230f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802319e:	4607      	mov	r7, r0
 80231a0:	e7a9      	b.n	80230f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80231a2:	4602      	mov	r2, r0
 80231a4:	e7b4      	b.n	8023110 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 80231a6:	4602      	mov	r2, r0
 80231a8:	e7ba      	b.n	8023120 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

080231aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80231aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231ae:	b08f      	sub	sp, #60	; 0x3c
 80231b0:	461d      	mov	r5, r3
 80231b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80231b4:	920c      	str	r2, [sp, #48]	; 0x30
 80231b6:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 80231ba:	9107      	str	r1, [sp, #28]
 80231bc:	6859      	ldr	r1, [r3, #4]
 80231be:	681b      	ldr	r3, [r3, #0]
 80231c0:	900d      	str	r0, [sp, #52]	; 0x34
 80231c2:	fb01 2707 	mla	r7, r1, r7, r2
 80231c6:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80231ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80231cc:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 80231d0:	f8d3 8000 	ldr.w	r8, [r3]
 80231d4:	9b07      	ldr	r3, [sp, #28]
 80231d6:	2b00      	cmp	r3, #0
 80231d8:	dc03      	bgt.n	80231e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80231da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80231dc:	2b00      	cmp	r3, #0
 80231de:	f340 8181 	ble.w	80234e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80231e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80231e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80231e8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80231ec:	1e48      	subs	r0, r1, #1
 80231ee:	f102 3cff 	add.w	ip, r2, #4294967295
 80231f2:	2d00      	cmp	r5, #0
 80231f4:	f340 809b 	ble.w	802332e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 80231f8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80231fc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023200:	d406      	bmi.n	8023210 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023202:	4586      	cmp	lr, r0
 8023204:	da04      	bge.n	8023210 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023206:	2b00      	cmp	r3, #0
 8023208:	db02      	blt.n	8023210 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802320a:	4563      	cmp	r3, ip
 802320c:	f2c0 8090 	blt.w	8023330 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023210:	f11e 0e01 	adds.w	lr, lr, #1
 8023214:	f100 8084 	bmi.w	8023320 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8023218:	4571      	cmp	r1, lr
 802321a:	f2c0 8081 	blt.w	8023320 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802321e:	3301      	adds	r3, #1
 8023220:	d47e      	bmi.n	8023320 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8023222:	429a      	cmp	r2, r3
 8023224:	db7c      	blt.n	8023320 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8023226:	46aa      	mov	sl, r5
 8023228:	46b9      	mov	r9, r7
 802322a:	f1ba 0f00 	cmp.w	sl, #0
 802322e:	f340 8099 	ble.w	8023364 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023232:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023234:	1421      	asrs	r1, r4, #16
 8023236:	ea4f 4026 	mov.w	r0, r6, asr #16
 802323a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802323e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023242:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8023246:	f100 80d0 	bmi.w	80233ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802324a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802324e:	4559      	cmp	r1, fp
 8023250:	f280 80cb 	bge.w	80233ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023254:	2800      	cmp	r0, #0
 8023256:	f2c0 80c8 	blt.w	80233ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802325a:	f103 3bff 	add.w	fp, r3, #4294967295
 802325e:	4558      	cmp	r0, fp
 8023260:	f280 80c3 	bge.w	80233ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023264:	fa0f fe8e 	sxth.w	lr, lr
 8023268:	fb00 110e 	mla	r1, r0, lr, r1
 802326c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8023270:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8023274:	8841      	ldrh	r1, [r0, #2]
 8023276:	f1bc 0f00 	cmp.w	ip, #0
 802327a:	d00b      	beq.n	8023294 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 802327c:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8023280:	3b01      	subs	r3, #1
 8023282:	005b      	lsls	r3, r3, #1
 8023284:	3302      	adds	r3, #2
 8023286:	eb00 0e03 	add.w	lr, r0, r3
 802328a:	5ac3      	ldrh	r3, [r0, r3]
 802328c:	9308      	str	r3, [sp, #32]
 802328e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8023292:	9309      	str	r3, [sp, #36]	; 0x24
 8023294:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8023298:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802329c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80232a0:	ea40 000b 	orr.w	r0, r0, fp
 80232a4:	fb12 f30c 	smulbb	r3, r2, ip
 80232a8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80232ac:	10db      	asrs	r3, r3, #3
 80232ae:	f1cc 0e10 	rsb	lr, ip, #16
 80232b2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80232b6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80232ba:	ebae 0e02 	sub.w	lr, lr, r2
 80232be:	ea4b 0101 	orr.w	r1, fp, r1
 80232c2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80232c6:	4351      	muls	r1, r2
 80232c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80232ca:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80232ce:	fb0e 1e00 	mla	lr, lr, r0, r1
 80232d2:	0410      	lsls	r0, r2, #16
 80232d4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80232d8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80232dc:	4310      	orrs	r0, r2
 80232de:	9a08      	ldr	r2, [sp, #32]
 80232e0:	9908      	ldr	r1, [sp, #32]
 80232e2:	0412      	lsls	r2, r2, #16
 80232e4:	fb03 e000 	mla	r0, r3, r0, lr
 80232e8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80232ec:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80232f0:	ea42 020e 	orr.w	r2, r2, lr
 80232f4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80232f8:	fb03 0302 	mla	r3, r3, r2, r0
 80232fc:	0d5a      	lsrs	r2, r3, #21
 80232fe:	095b      	lsrs	r3, r3, #5
 8023300:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023304:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023308:	4313      	orrs	r3, r2
 802330a:	f8a9 3000 	strh.w	r3, [r9]
 802330e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023310:	441c      	add	r4, r3
 8023312:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023314:	f109 0902 	add.w	r9, r9, #2
 8023318:	441e      	add	r6, r3
 802331a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802331e:	e784      	b.n	802322a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8023320:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023322:	441c      	add	r4, r3
 8023324:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023326:	3d01      	subs	r5, #1
 8023328:	441e      	add	r6, r3
 802332a:	3702      	adds	r7, #2
 802332c:	e761      	b.n	80231f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802332e:	d01d      	beq.n	802336c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023330:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023332:	1e6b      	subs	r3, r5, #1
 8023334:	fb00 4003 	mla	r0, r0, r3, r4
 8023338:	1400      	asrs	r0, r0, #16
 802333a:	f53f af74 	bmi.w	8023226 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802333e:	3901      	subs	r1, #1
 8023340:	4288      	cmp	r0, r1
 8023342:	f6bf af70 	bge.w	8023226 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023346:	991c      	ldr	r1, [sp, #112]	; 0x70
 8023348:	fb01 6303 	mla	r3, r1, r3, r6
 802334c:	141b      	asrs	r3, r3, #16
 802334e:	f53f af6a 	bmi.w	8023226 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023352:	3a01      	subs	r2, #1
 8023354:	4293      	cmp	r3, r2
 8023356:	f6bf af66 	bge.w	8023226 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802335a:	46a9      	mov	r9, r5
 802335c:	46ba      	mov	sl, r7
 802335e:	f1b9 0f00 	cmp.w	r9, #0
 8023362:	dc5a      	bgt.n	802341a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 8023364:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8023368:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802336c:	9b07      	ldr	r3, [sp, #28]
 802336e:	2b00      	cmp	r3, #0
 8023370:	f340 80b8 	ble.w	80234e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8023374:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802337c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023380:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023382:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023386:	ee31 1a05 	vadd.f32	s2, s2, s10
 802338a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802338e:	eef0 6a62 	vmov.f32	s13, s5
 8023392:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023396:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802339a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802339e:	ee16 4a90 	vmov	r4, s13
 80233a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80233a6:	eef0 6a43 	vmov.f32	s13, s6
 80233aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80233ae:	ee12 2a90 	vmov	r2, s5
 80233b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80233b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80233ba:	ee13 2a10 	vmov	r2, s6
 80233be:	931b      	str	r3, [sp, #108]	; 0x6c
 80233c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80233c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80233c6:	931c      	str	r3, [sp, #112]	; 0x70
 80233c8:	9b07      	ldr	r3, [sp, #28]
 80233ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80233cc:	3b01      	subs	r3, #1
 80233ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80233d2:	9307      	str	r3, [sp, #28]
 80233d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80233d6:	ee16 6a90 	vmov	r6, s13
 80233da:	bf14      	ite	ne
 80233dc:	461d      	movne	r5, r3
 80233de:	4615      	moveq	r5, r2
 80233e0:	eeb0 3a67 	vmov.f32	s6, s15
 80233e4:	eef0 2a47 	vmov.f32	s5, s14
 80233e8:	e6f4      	b.n	80231d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80233ea:	f111 0b01 	adds.w	fp, r1, #1
 80233ee:	d48e      	bmi.n	802330e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80233f0:	45de      	cmp	lr, fp
 80233f2:	db8c      	blt.n	802330e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80233f4:	f110 0b01 	adds.w	fp, r0, #1
 80233f8:	d489      	bmi.n	802330e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80233fa:	455b      	cmp	r3, fp
 80233fc:	db87      	blt.n	802330e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80233fe:	b21b      	sxth	r3, r3
 8023400:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8023404:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8023408:	9300      	str	r3, [sp, #0]
 802340a:	4642      	mov	r2, r8
 802340c:	fa0f f38e 	sxth.w	r3, lr
 8023410:	4649      	mov	r1, r9
 8023412:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023414:	f7ff fe4d 	bl	80230b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8023418:	e779      	b.n	802330e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802341a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802341c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023420:	1420      	asrs	r0, r4, #16
 8023422:	1431      	asrs	r1, r6, #16
 8023424:	fb03 0101 	mla	r1, r3, r1, r0
 8023428:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802342c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8023430:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8023434:	8841      	ldrh	r1, [r0, #2]
 8023436:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802343a:	f1be 0f00 	cmp.w	lr, #0
 802343e:	d00b      	beq.n	8023458 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8023440:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8023444:	3b01      	subs	r3, #1
 8023446:	005b      	lsls	r3, r3, #1
 8023448:	3302      	adds	r3, #2
 802344a:	eb00 0b03 	add.w	fp, r0, r3
 802344e:	5ac3      	ldrh	r3, [r0, r3]
 8023450:	930a      	str	r3, [sp, #40]	; 0x28
 8023452:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8023456:	930b      	str	r3, [sp, #44]	; 0x2c
 8023458:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802345c:	fb12 f30e 	smulbb	r3, r2, lr
 8023460:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023464:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023468:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802346c:	10db      	asrs	r3, r3, #3
 802346e:	ea40 000c 	orr.w	r0, r0, ip
 8023472:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023476:	f1ce 0c10 	rsb	ip, lr, #16
 802347a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802347e:	ebac 0c02 	sub.w	ip, ip, r2
 8023482:	ea4b 0101 	orr.w	r1, fp, r1
 8023486:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802348a:	4351      	muls	r1, r2
 802348c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802348e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8023492:	fb0c 1c00 	mla	ip, ip, r0, r1
 8023496:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802349a:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 802349e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80234a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80234a2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80234a6:	0412      	lsls	r2, r2, #16
 80234a8:	ea4b 0000 	orr.w	r0, fp, r0
 80234ac:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80234b0:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80234b4:	fb03 c000 	mla	r0, r3, r0, ip
 80234b8:	ea42 0b0b 	orr.w	fp, r2, fp
 80234bc:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80234c0:	fb03 000b 	mla	r0, r3, fp, r0
 80234c4:	0d43      	lsrs	r3, r0, #21
 80234c6:	0940      	lsrs	r0, r0, #5
 80234c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80234cc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80234d0:	4318      	orrs	r0, r3
 80234d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80234d4:	f82a 0b02 	strh.w	r0, [sl], #2
 80234d8:	441c      	add	r4, r3
 80234da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80234dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80234e0:	441e      	add	r6, r3
 80234e2:	e73c      	b.n	802335e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80234e4:	b00f      	add	sp, #60	; 0x3c
 80234e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080234ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80234ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234ee:	b085      	sub	sp, #20
 80234f0:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 80234f4:	9102      	str	r1, [sp, #8]
 80234f6:	2c00      	cmp	r4, #0
 80234f8:	fb04 7103 	mla	r1, r4, r3, r7
 80234fc:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8023500:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8023504:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8023508:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802350c:	f2c0 811b 	blt.w	8023746 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8023510:	45a6      	cmp	lr, r4
 8023512:	f340 8118 	ble.w	8023746 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8023516:	2f00      	cmp	r7, #0
 8023518:	f2c0 8113 	blt.w	8023742 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802351c:	42bb      	cmp	r3, r7
 802351e:	f340 8110 	ble.w	8023742 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8023522:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8023526:	1c7a      	adds	r2, r7, #1
 8023528:	f100 8110 	bmi.w	802374c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802352c:	4293      	cmp	r3, r2
 802352e:	f340 810d 	ble.w	802374c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8023532:	2e00      	cmp	r6, #0
 8023534:	f000 810c 	beq.w	8023750 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8023538:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802353c:	3401      	adds	r4, #1
 802353e:	f100 810b 	bmi.w	8023758 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8023542:	45a6      	cmp	lr, r4
 8023544:	f340 8108 	ble.w	8023758 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8023548:	2800      	cmp	r0, #0
 802354a:	f000 8108 	beq.w	802375e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 802354e:	2f00      	cmp	r7, #0
 8023550:	f2c0 8100 	blt.w	8023754 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8023554:	42bb      	cmp	r3, r7
 8023556:	f340 80fd 	ble.w	8023754 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802355a:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802355e:	3701      	adds	r7, #1
 8023560:	f100 8100 	bmi.w	8023764 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8023564:	42bb      	cmp	r3, r7
 8023566:	f340 80fd 	ble.w	8023764 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802356a:	2e00      	cmp	r6, #0
 802356c:	f000 80fc 	beq.w	8023768 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8023570:	3301      	adds	r3, #1
 8023572:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8023576:	b2b6      	uxth	r6, r6
 8023578:	b280      	uxth	r0, r0
 802357a:	fb00 fe06 	mul.w	lr, r0, r6
 802357e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8023582:	0136      	lsls	r6, r6, #4
 8023584:	eba6 070e 	sub.w	r7, r6, lr
 8023588:	b280      	uxth	r0, r0
 802358a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802358e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023592:	b2bf      	uxth	r7, r7
 8023594:	1a1b      	subs	r3, r3, r0
 8023596:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802359a:	b29b      	uxth	r3, r3
 802359c:	fb0a f607 	mul.w	r6, sl, r7
 80235a0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80235a4:	fb0b 6603 	mla	r6, fp, r3, r6
 80235a8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80235ac:	fb00 6609 	mla	r6, r0, r9, r6
 80235b0:	fb0e 6608 	mla	r6, lr, r8, r6
 80235b4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80235b8:	9600      	str	r6, [sp, #0]
 80235ba:	2e00      	cmp	r6, #0
 80235bc:	f000 80be 	beq.w	802373c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 80235c0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80235c4:	fb0b fc0c 	mul.w	ip, fp, ip
 80235c8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80235cc:	fb0b f505 	mul.w	r5, fp, r5
 80235d0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80235d4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80235d8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80235dc:	44dc      	add	ip, fp
 80235de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80235e2:	9501      	str	r5, [sp, #4]
 80235e4:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80235e8:	9503      	str	r5, [sp, #12]
 80235ea:	9d01      	ldr	r5, [sp, #4]
 80235ec:	9e02      	ldr	r6, [sp, #8]
 80235ee:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80235f2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80235f6:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80235fa:	fb0a fc0c 	mul.w	ip, sl, ip
 80235fe:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8023602:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023606:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802360a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802360e:	4465      	add	r5, ip
 8023610:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023614:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023618:	fb09 fc0c 	mul.w	ip, r9, ip
 802361c:	fb09 f904 	mul.w	r9, r9, r4
 8023620:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8023624:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023628:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802362c:	fb08 f404 	mul.w	r4, r8, r4
 8023630:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023634:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023638:	fb08 f802 	mul.w	r8, r8, r2
 802363c:	fb0a fa01 	mul.w	sl, sl, r1
 8023640:	0a22      	lsrs	r2, r4, #8
 8023642:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8023646:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802364a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802364e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8023652:	4414      	add	r4, r2
 8023654:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8023658:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802365c:	0a2d      	lsrs	r5, r5, #8
 802365e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023662:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023666:	9a03      	ldr	r2, [sp, #12]
 8023668:	8836      	ldrh	r6, [r6, #0]
 802366a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802366e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023672:	437d      	muls	r5, r7
 8023674:	4461      	add	r1, ip
 8023676:	0a24      	lsrs	r4, r4, #8
 8023678:	fb02 5503 	mla	r5, r2, r3, r5
 802367c:	0a09      	lsrs	r1, r1, #8
 802367e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023682:	fb04 540e 	mla	r4, r4, lr, r5
 8023686:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802368a:	fb01 4100 	mla	r1, r1, r0, r4
 802368e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023692:	0a09      	lsrs	r1, r1, #8
 8023694:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023698:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802369c:	fb07 f70a 	mul.w	r7, r7, sl
 80236a0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80236a4:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80236a8:	fb03 7101 	mla	r1, r3, r1, r7
 80236ac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80236b0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80236b4:	fb0e 1e08 	mla	lr, lr, r8, r1
 80236b8:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80236bc:	fb00 e101 	mla	r1, r0, r1, lr
 80236c0:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80236c4:	9a00      	ldr	r2, [sp, #0]
 80236c6:	b287      	uxth	r7, r0
 80236c8:	437a      	muls	r2, r7
 80236ca:	0a09      	lsrs	r1, r1, #8
 80236cc:	1c53      	adds	r3, r2, #1
 80236ce:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80236d2:	4321      	orrs	r1, r4
 80236d4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80236d8:	1235      	asrs	r5, r6, #8
 80236da:	0c0a      	lsrs	r2, r1, #16
 80236dc:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80236e0:	b2db      	uxtb	r3, r3
 80236e2:	fb12 f207 	smulbb	r2, r2, r7
 80236e6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80236ea:	fb05 2503 	mla	r5, r5, r3, r2
 80236ee:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80236f2:	10f2      	asrs	r2, r6, #3
 80236f4:	b2c8      	uxtb	r0, r1
 80236f6:	00f6      	lsls	r6, r6, #3
 80236f8:	fb14 f407 	smulbb	r4, r4, r7
 80236fc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023700:	b2f6      	uxtb	r6, r6
 8023702:	fb10 f007 	smulbb	r0, r0, r7
 8023706:	fb02 4203 	mla	r2, r2, r3, r4
 802370a:	b2ad      	uxth	r5, r5
 802370c:	fb06 0303 	mla	r3, r6, r3, r0
 8023710:	b299      	uxth	r1, r3
 8023712:	b294      	uxth	r4, r2
 8023714:	1c6b      	adds	r3, r5, #1
 8023716:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802371a:	1c62      	adds	r2, r4, #1
 802371c:	1c4b      	adds	r3, r1, #1
 802371e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023722:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023726:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802372a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802372e:	0952      	lsrs	r2, r2, #5
 8023730:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023734:	432b      	orrs	r3, r5
 8023736:	4313      	orrs	r3, r2
 8023738:	9a02      	ldr	r2, [sp, #8]
 802373a:	8013      	strh	r3, [r2, #0]
 802373c:	b005      	add	sp, #20
 802373e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023742:	2500      	movs	r5, #0
 8023744:	e6ef      	b.n	8023526 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8023746:	2100      	movs	r1, #0
 8023748:	460d      	mov	r5, r1
 802374a:	e6f7      	b.n	802353c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802374c:	2100      	movs	r1, #0
 802374e:	e6f5      	b.n	802353c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023750:	4631      	mov	r1, r6
 8023752:	e6f3      	b.n	802353c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023754:	2400      	movs	r4, #0
 8023756:	e702      	b.n	802355e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8023758:	2200      	movs	r2, #0
 802375a:	4614      	mov	r4, r2
 802375c:	e70b      	b.n	8023576 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802375e:	4602      	mov	r2, r0
 8023760:	4604      	mov	r4, r0
 8023762:	e708      	b.n	8023576 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023764:	2200      	movs	r2, #0
 8023766:	e706      	b.n	8023576 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023768:	4632      	mov	r2, r6
 802376a:	e704      	b.n	8023576 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0802376c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802376c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023770:	b09d      	sub	sp, #116	; 0x74
 8023772:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8023776:	9219      	str	r2, [sp, #100]	; 0x64
 8023778:	9307      	str	r3, [sp, #28]
 802377a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802377c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8023780:	931a      	str	r3, [sp, #104]	; 0x68
 8023782:	9117      	str	r1, [sp, #92]	; 0x5c
 8023784:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023788:	901b      	str	r0, [sp, #108]	; 0x6c
 802378a:	6850      	ldr	r0, [r2, #4]
 802378c:	6812      	ldr	r2, [r2, #0]
 802378e:	fb00 1303 	mla	r3, r0, r3, r1
 8023792:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023796:	930a      	str	r3, [sp, #40]	; 0x28
 8023798:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802379a:	681b      	ldr	r3, [r3, #0]
 802379c:	9310      	str	r3, [sp, #64]	; 0x40
 802379e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80237a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80237a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80237a6:	2b00      	cmp	r3, #0
 80237a8:	dc03      	bgt.n	80237b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80237aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80237ac:	2b00      	cmp	r3, #0
 80237ae:	f340 8375 	ble.w	8023e9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80237b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80237b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80237b8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80237bc:	1e48      	subs	r0, r1, #1
 80237be:	1e57      	subs	r7, r2, #1
 80237c0:	9b07      	ldr	r3, [sp, #28]
 80237c2:	2b00      	cmp	r3, #0
 80237c4:	f340 818e 	ble.w	8023ae4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80237c8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80237cc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80237d0:	d406      	bmi.n	80237e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80237d2:	4584      	cmp	ip, r0
 80237d4:	da04      	bge.n	80237e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80237d6:	2b00      	cmp	r3, #0
 80237d8:	db02      	blt.n	80237e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80237da:	42bb      	cmp	r3, r7
 80237dc:	f2c0 8183 	blt.w	8023ae6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80237e0:	f11c 0c01 	adds.w	ip, ip, #1
 80237e4:	f100 8173 	bmi.w	8023ace <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80237e8:	4561      	cmp	r1, ip
 80237ea:	f2c0 8170 	blt.w	8023ace <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80237ee:	3301      	adds	r3, #1
 80237f0:	f100 816d 	bmi.w	8023ace <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80237f4:	429a      	cmp	r2, r3
 80237f6:	f2c0 816a 	blt.w	8023ace <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80237fa:	9b07      	ldr	r3, [sp, #28]
 80237fc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80237fe:	9318      	str	r3, [sp, #96]	; 0x60
 8023800:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023802:	2b00      	cmp	r3, #0
 8023804:	f340 818c 	ble.w	8023b20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8023808:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802380a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802380c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023810:	689b      	ldr	r3, [r3, #8]
 8023812:	1422      	asrs	r2, r4, #16
 8023814:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023818:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802381c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023820:	f100 81cd 	bmi.w	8023bbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023824:	f103 38ff 	add.w	r8, r3, #4294967295
 8023828:	4542      	cmp	r2, r8
 802382a:	f280 81c8 	bge.w	8023bbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802382e:	f1bc 0f00 	cmp.w	ip, #0
 8023832:	f2c0 81c4 	blt.w	8023bbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023836:	f10e 38ff 	add.w	r8, lr, #4294967295
 802383a:	45c4      	cmp	ip, r8
 802383c:	f280 81bf 	bge.w	8023bbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023840:	b21b      	sxth	r3, r3
 8023842:	fb0c 2203 	mla	r2, ip, r3, r2
 8023846:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023848:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802384c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023850:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023854:	2800      	cmp	r0, #0
 8023856:	f000 81a9 	beq.w	8023bac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802385a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802385e:	950c      	str	r5, [sp, #48]	; 0x30
 8023860:	0e2d      	lsrs	r5, r5, #24
 8023862:	9513      	str	r5, [sp, #76]	; 0x4c
 8023864:	b181      	cbz	r1, 8023888 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023866:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802386a:	3b01      	subs	r3, #1
 802386c:	009b      	lsls	r3, r3, #2
 802386e:	3304      	adds	r3, #4
 8023870:	eb08 0c03 	add.w	ip, r8, r3
 8023874:	f858 3003 	ldr.w	r3, [r8, r3]
 8023878:	9308      	str	r3, [sp, #32]
 802387a:	0e1b      	lsrs	r3, r3, #24
 802387c:	9311      	str	r3, [sp, #68]	; 0x44
 802387e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023882:	930d      	str	r3, [sp, #52]	; 0x34
 8023884:	0e1b      	lsrs	r3, r3, #24
 8023886:	9314      	str	r3, [sp, #80]	; 0x50
 8023888:	b280      	uxth	r0, r0
 802388a:	b289      	uxth	r1, r1
 802388c:	fb00 f901 	mul.w	r9, r0, r1
 8023890:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023894:	0100      	lsls	r0, r0, #4
 8023896:	eba0 0809 	sub.w	r8, r0, r9
 802389a:	b289      	uxth	r1, r1
 802389c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80238a0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80238a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80238a4:	fa1f f888 	uxth.w	r8, r8
 80238a8:	1a5b      	subs	r3, r3, r1
 80238aa:	b29b      	uxth	r3, r3
 80238ac:	fb08 f000 	mul.w	r0, r8, r0
 80238b0:	fb03 000e 	mla	r0, r3, lr, r0
 80238b4:	fb01 0005 	mla	r0, r1, r5, r0
 80238b8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80238ba:	fb09 0005 	mla	r0, r9, r5, r0
 80238be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80238c2:	2800      	cmp	r0, #0
 80238c4:	f000 80fa 	beq.w	8023abc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80238c8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80238cc:	d01b      	beq.n	8023906 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80238ce:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80238d2:	fb0e fa0a 	mul.w	sl, lr, sl
 80238d6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80238da:	fb0e fe02 	mul.w	lr, lr, r2
 80238de:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80238e2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80238e6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80238ea:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80238ee:	4452      	add	r2, sl
 80238f0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80238f4:	0a12      	lsrs	r2, r2, #8
 80238f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80238fa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80238fe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023902:	ea42 020c 	orr.w	r2, r2, ip
 8023906:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023908:	2dff      	cmp	r5, #255	; 0xff
 802390a:	d021      	beq.n	8023950 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802390c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802390e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023912:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023914:	fb05 fb0b 	mul.w	fp, r5, fp
 8023918:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802391a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802391e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023920:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023924:	fb05 fa0a 	mul.w	sl, r5, sl
 8023928:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802392c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023930:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023934:	44de      	add	lr, fp
 8023936:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802393a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802393e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023942:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023946:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802394a:	ea4e 050a 	orr.w	r5, lr, sl
 802394e:	950c      	str	r5, [sp, #48]	; 0x30
 8023950:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023952:	2dff      	cmp	r5, #255	; 0xff
 8023954:	d021      	beq.n	802399a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8023956:	9d08      	ldr	r5, [sp, #32]
 8023958:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802395c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802395e:	fb05 fb0b 	mul.w	fp, r5, fp
 8023962:	9d08      	ldr	r5, [sp, #32]
 8023964:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023968:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802396a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802396e:	fb05 fa0a 	mul.w	sl, r5, sl
 8023972:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023976:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802397a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802397e:	44de      	add	lr, fp
 8023980:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023984:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023988:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802398c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023990:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023994:	ea4e 050a 	orr.w	r5, lr, sl
 8023998:	9508      	str	r5, [sp, #32]
 802399a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802399c:	2dff      	cmp	r5, #255	; 0xff
 802399e:	d021      	beq.n	80239e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80239a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80239a2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80239a6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80239a8:	fb05 fb0b 	mul.w	fp, r5, fp
 80239ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80239ae:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80239b2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80239b4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80239b8:	fb05 fa0a 	mul.w	sl, r5, sl
 80239bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80239c0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80239c4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80239c8:	44de      	add	lr, fp
 80239ca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80239ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80239d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80239d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80239da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80239de:	ea4e 050a 	orr.w	r5, lr, sl
 80239e2:	950d      	str	r5, [sp, #52]	; 0x34
 80239e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80239e6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80239ea:	9d08      	ldr	r5, [sp, #32]
 80239ec:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80239f0:	fb08 fc0c 	mul.w	ip, r8, ip
 80239f4:	fb03 cc0e 	mla	ip, r3, lr, ip
 80239f8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80239fc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80239fe:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023a02:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023a06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023a08:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023a0c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023a10:	fb08 f80e 	mul.w	r8, r8, lr
 8023a14:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023a18:	fb03 8202 	mla	r2, r3, r2, r8
 8023a1c:	9b08      	ldr	r3, [sp, #32]
 8023a1e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023a20:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8023a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023a26:	fb01 220a 	mla	r2, r1, sl, r2
 8023a2a:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8023a2e:	fb09 2901 	mla	r9, r9, r1, r2
 8023a32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023a34:	883b      	ldrh	r3, [r7, #0]
 8023a36:	4342      	muls	r2, r0
 8023a38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023a3c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023a40:	1c50      	adds	r0, r2, #1
 8023a42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023a46:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023a4a:	ea4c 0c09 	orr.w	ip, ip, r9
 8023a4e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023a52:	1219      	asrs	r1, r3, #8
 8023a54:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8023a58:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023a5c:	b2c0      	uxtb	r0, r0
 8023a5e:	fb12 f205 	smulbb	r2, r2, r5
 8023a62:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023a66:	fb01 2100 	mla	r1, r1, r0, r2
 8023a6a:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8023a6e:	10da      	asrs	r2, r3, #3
 8023a70:	fa5f fc8c 	uxtb.w	ip, ip
 8023a74:	00db      	lsls	r3, r3, #3
 8023a76:	fb1c fc05 	smulbb	ip, ip, r5
 8023a7a:	b2db      	uxtb	r3, r3
 8023a7c:	b289      	uxth	r1, r1
 8023a7e:	fb03 c300 	mla	r3, r3, r0, ip
 8023a82:	fa1f fc83 	uxth.w	ip, r3
 8023a86:	1c4b      	adds	r3, r1, #1
 8023a88:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023a8c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023a90:	fb1e fe05 	smulbb	lr, lr, r5
 8023a94:	f10c 0301 	add.w	r3, ip, #1
 8023a98:	fb02 e200 	mla	r2, r2, r0, lr
 8023a9c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023aa0:	b292      	uxth	r2, r2
 8023aa2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023aa6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023aaa:	430b      	orrs	r3, r1
 8023aac:	1c51      	adds	r1, r2, #1
 8023aae:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023ab2:	0952      	lsrs	r2, r2, #5
 8023ab4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023ab8:	4313      	orrs	r3, r2
 8023aba:	803b      	strh	r3, [r7, #0]
 8023abc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023abe:	441c      	add	r4, r3
 8023ac0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023ac2:	441e      	add	r6, r3
 8023ac4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023ac6:	3b01      	subs	r3, #1
 8023ac8:	3702      	adds	r7, #2
 8023aca:	9318      	str	r3, [sp, #96]	; 0x60
 8023acc:	e698      	b.n	8023800 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023ace:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023ad0:	441c      	add	r4, r3
 8023ad2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023ad4:	441e      	add	r6, r3
 8023ad6:	9b07      	ldr	r3, [sp, #28]
 8023ad8:	3b01      	subs	r3, #1
 8023ada:	9307      	str	r3, [sp, #28]
 8023adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ade:	3302      	adds	r3, #2
 8023ae0:	930a      	str	r3, [sp, #40]	; 0x28
 8023ae2:	e66d      	b.n	80237c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8023ae4:	d023      	beq.n	8023b2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8023ae6:	9b07      	ldr	r3, [sp, #28]
 8023ae8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023aea:	3b01      	subs	r3, #1
 8023aec:	fb00 4003 	mla	r0, r0, r3, r4
 8023af0:	1400      	asrs	r0, r0, #16
 8023af2:	f53f ae82 	bmi.w	80237fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023af6:	3901      	subs	r1, #1
 8023af8:	4288      	cmp	r0, r1
 8023afa:	f6bf ae7e 	bge.w	80237fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023afe:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023b00:	fb01 6303 	mla	r3, r1, r3, r6
 8023b04:	141b      	asrs	r3, r3, #16
 8023b06:	f53f ae78 	bmi.w	80237fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023b0a:	3a01      	subs	r2, #1
 8023b0c:	4293      	cmp	r3, r2
 8023b0e:	f6bf ae74 	bge.w	80237fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023b12:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023b16:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8023b1a:	f1bb 0f00 	cmp.w	fp, #0
 8023b1e:	dc6c      	bgt.n	8023bfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8023b20:	9b07      	ldr	r3, [sp, #28]
 8023b22:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023b28:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023b2c:	930a      	str	r3, [sp, #40]	; 0x28
 8023b2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023b30:	2b00      	cmp	r3, #0
 8023b32:	f340 81b3 	ble.w	8023e9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023b36:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023b3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023b42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023b44:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023b48:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023b4c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023b50:	eef0 6a62 	vmov.f32	s13, s5
 8023b54:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023b58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b5c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023b60:	ee16 4a90 	vmov	r4, s13
 8023b64:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023b68:	eef0 6a43 	vmov.f32	s13, s6
 8023b6c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023b70:	ee12 2a90 	vmov	r2, s5
 8023b74:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023b78:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b7c:	ee13 2a10 	vmov	r2, s6
 8023b80:	9329      	str	r3, [sp, #164]	; 0xa4
 8023b82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023b84:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b88:	932a      	str	r3, [sp, #168]	; 0xa8
 8023b8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023b8c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023b8e:	3b01      	subs	r3, #1
 8023b90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b94:	9317      	str	r3, [sp, #92]	; 0x5c
 8023b96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023b98:	bf08      	it	eq
 8023b9a:	4613      	moveq	r3, r2
 8023b9c:	ee16 6a90 	vmov	r6, s13
 8023ba0:	9307      	str	r3, [sp, #28]
 8023ba2:	eeb0 3a67 	vmov.f32	s6, s15
 8023ba6:	eef0 2a47 	vmov.f32	s5, s14
 8023baa:	e5fb      	b.n	80237a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023bac:	2900      	cmp	r1, #0
 8023bae:	f43f ae6b 	beq.w	8023888 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023bb2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023bb6:	9308      	str	r3, [sp, #32]
 8023bb8:	0e1b      	lsrs	r3, r3, #24
 8023bba:	9311      	str	r3, [sp, #68]	; 0x44
 8023bbc:	e664      	b.n	8023888 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023bbe:	f112 0801 	adds.w	r8, r2, #1
 8023bc2:	f53f af7b 	bmi.w	8023abc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023bc6:	4543      	cmp	r3, r8
 8023bc8:	f6ff af78 	blt.w	8023abc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023bcc:	f11c 0801 	adds.w	r8, ip, #1
 8023bd0:	f53f af74 	bmi.w	8023abc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023bd4:	45c6      	cmp	lr, r8
 8023bd6:	f6ff af71 	blt.w	8023abc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023bda:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8023bdc:	9201      	str	r2, [sp, #4]
 8023bde:	fa0f f28e 	sxth.w	r2, lr
 8023be2:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8023be6:	e9cd c002 	strd	ip, r0, [sp, #8]
 8023bea:	9200      	str	r2, [sp, #0]
 8023bec:	b21b      	sxth	r3, r3
 8023bee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023bf0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023bf2:	4639      	mov	r1, r7
 8023bf4:	f7ff fc79 	bl	80234ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8023bf8:	e760      	b.n	8023abc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023bfa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023bfc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023bfe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023c02:	1427      	asrs	r7, r4, #16
 8023c04:	1433      	asrs	r3, r6, #16
 8023c06:	fb01 7303 	mla	r3, r1, r3, r7
 8023c0a:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8023c0e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023c12:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023c16:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023c1a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023c1e:	2a00      	cmp	r2, #0
 8023c20:	f000 8133 	beq.w	8023e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8023c24:	687d      	ldr	r5, [r7, #4]
 8023c26:	950e      	str	r5, [sp, #56]	; 0x38
 8023c28:	0e2d      	lsrs	r5, r5, #24
 8023c2a:	9515      	str	r5, [sp, #84]	; 0x54
 8023c2c:	b178      	cbz	r0, 8023c4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8023c2e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8023c32:	3901      	subs	r1, #1
 8023c34:	0089      	lsls	r1, r1, #2
 8023c36:	3104      	adds	r1, #4
 8023c38:	eb07 0e01 	add.w	lr, r7, r1
 8023c3c:	5879      	ldr	r1, [r7, r1]
 8023c3e:	9109      	str	r1, [sp, #36]	; 0x24
 8023c40:	0e09      	lsrs	r1, r1, #24
 8023c42:	9112      	str	r1, [sp, #72]	; 0x48
 8023c44:	f8de 1004 	ldr.w	r1, [lr, #4]
 8023c48:	910f      	str	r1, [sp, #60]	; 0x3c
 8023c4a:	0e09      	lsrs	r1, r1, #24
 8023c4c:	9116      	str	r1, [sp, #88]	; 0x58
 8023c4e:	b292      	uxth	r2, r2
 8023c50:	b280      	uxth	r0, r0
 8023c52:	fb02 f800 	mul.w	r8, r2, r0
 8023c56:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023c5a:	0112      	lsls	r2, r2, #4
 8023c5c:	eba2 0e08 	sub.w	lr, r2, r8
 8023c60:	b280      	uxth	r0, r0
 8023c62:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023c66:	9915      	ldr	r1, [sp, #84]	; 0x54
 8023c68:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023c6a:	fa1f fe8e 	uxth.w	lr, lr
 8023c6e:	1a12      	subs	r2, r2, r0
 8023c70:	b292      	uxth	r2, r2
 8023c72:	fb0e f101 	mul.w	r1, lr, r1
 8023c76:	fb02 110c 	mla	r1, r2, ip, r1
 8023c7a:	fb00 1105 	mla	r1, r0, r5, r1
 8023c7e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023c80:	fb08 1105 	mla	r1, r8, r5, r1
 8023c84:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023c88:	2900      	cmp	r1, #0
 8023c8a:	f000 80f5 	beq.w	8023e78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8023c8e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023c92:	d019      	beq.n	8023cc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8023c94:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023c98:	fb0c fa0a 	mul.w	sl, ip, sl
 8023c9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023ca0:	fb0c fc03 	mul.w	ip, ip, r3
 8023ca4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023ca8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023cac:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023cb0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023cb4:	4453      	add	r3, sl
 8023cb6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023cba:	0a1b      	lsrs	r3, r3, #8
 8023cbc:	0a3f      	lsrs	r7, r7, #8
 8023cbe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023cc2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023cc6:	433b      	orrs	r3, r7
 8023cc8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023cca:	2dff      	cmp	r5, #255	; 0xff
 8023ccc:	d020      	beq.n	8023d10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8023cce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023cd0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023cd4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023cd6:	436f      	muls	r7, r5
 8023cd8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023cda:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023cde:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023ce0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023ce4:	fb05 fa0a 	mul.w	sl, r5, sl
 8023ce8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023cec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023cf0:	44bc      	add	ip, r7
 8023cf2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023cf6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023cfa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023cfe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d0a:	ea4c 050a 	orr.w	r5, ip, sl
 8023d0e:	950e      	str	r5, [sp, #56]	; 0x38
 8023d10:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023d12:	2dff      	cmp	r5, #255	; 0xff
 8023d14:	d020      	beq.n	8023d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8023d16:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023d18:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023d1c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023d1e:	436f      	muls	r7, r5
 8023d20:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023d22:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023d26:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023d28:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023d2c:	fb05 fa0a 	mul.w	sl, r5, sl
 8023d30:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023d34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d38:	44bc      	add	ip, r7
 8023d3a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023d3e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023d42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d46:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d4e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d52:	ea4c 050a 	orr.w	r5, ip, sl
 8023d56:	9509      	str	r5, [sp, #36]	; 0x24
 8023d58:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023d5a:	2dff      	cmp	r5, #255	; 0xff
 8023d5c:	d020      	beq.n	8023da0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8023d5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023d60:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023d64:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023d66:	436f      	muls	r7, r5
 8023d68:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023d6a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023d6e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023d70:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023d74:	fb05 fa0a 	mul.w	sl, r5, sl
 8023d78:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023d7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d80:	44bc      	add	ip, r7
 8023d82:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023d86:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023d8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d9a:	ea4c 050a 	orr.w	r5, ip, sl
 8023d9e:	950f      	str	r5, [sp, #60]	; 0x3c
 8023da0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023da2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023da6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023da8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023dac:	fb0e f707 	mul.w	r7, lr, r7
 8023db0:	fb02 770c 	mla	r7, r2, ip, r7
 8023db4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023db8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023dba:	fb00 770c 	mla	r7, r0, ip, r7
 8023dbe:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023dc2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023dc4:	fb08 770c 	mla	r7, r8, ip, r7
 8023dc8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8023dcc:	fb0e fe0c 	mul.w	lr, lr, ip
 8023dd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023dd4:	fb02 e303 	mla	r3, r2, r3, lr
 8023dd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023dda:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023ddc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023de0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023de2:	fb00 330a 	mla	r3, r0, sl, r3
 8023de6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023dea:	fb08 3c0c 	mla	ip, r8, ip, r3
 8023dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023df0:	f8b9 0000 	ldrh.w	r0, [r9]
 8023df4:	4359      	muls	r1, r3
 8023df6:	0a3f      	lsrs	r7, r7, #8
 8023df8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023dfc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023e00:	1c4b      	adds	r3, r1, #1
 8023e02:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023e06:	ea47 070c 	orr.w	r7, r7, ip
 8023e0a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023e0e:	1202      	asrs	r2, r0, #8
 8023e10:	0c3b      	lsrs	r3, r7, #16
 8023e12:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023e16:	b2c9      	uxtb	r1, r1
 8023e18:	fb13 f305 	smulbb	r3, r3, r5
 8023e1c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023e20:	fb02 3201 	mla	r2, r2, r1, r3
 8023e24:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8023e28:	10c3      	asrs	r3, r0, #3
 8023e2a:	b2ff      	uxtb	r7, r7
 8023e2c:	00c0      	lsls	r0, r0, #3
 8023e2e:	b2c0      	uxtb	r0, r0
 8023e30:	fb17 f705 	smulbb	r7, r7, r5
 8023e34:	fb00 7001 	mla	r0, r0, r1, r7
 8023e38:	b292      	uxth	r2, r2
 8023e3a:	fb1c fc05 	smulbb	ip, ip, r5
 8023e3e:	b280      	uxth	r0, r0
 8023e40:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8023e44:	fb03 c301 	mla	r3, r3, r1, ip
 8023e48:	1c51      	adds	r1, r2, #1
 8023e4a:	f100 0c01 	add.w	ip, r0, #1
 8023e4e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023e52:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8023e56:	b29b      	uxth	r3, r3
 8023e58:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023e5c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8023e60:	ea4c 0202 	orr.w	r2, ip, r2
 8023e64:	f103 0c01 	add.w	ip, r3, #1
 8023e68:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8023e6c:	095b      	lsrs	r3, r3, #5
 8023e6e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023e72:	431a      	orrs	r2, r3
 8023e74:	f8a9 2000 	strh.w	r2, [r9]
 8023e78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023e7a:	441c      	add	r4, r3
 8023e7c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023e7e:	f109 0902 	add.w	r9, r9, #2
 8023e82:	441e      	add	r6, r3
 8023e84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023e88:	e647      	b.n	8023b1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023e8a:	2800      	cmp	r0, #0
 8023e8c:	f43f aedf 	beq.w	8023c4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8023e90:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8023e94:	9109      	str	r1, [sp, #36]	; 0x24
 8023e96:	0e09      	lsrs	r1, r1, #24
 8023e98:	9112      	str	r1, [sp, #72]	; 0x48
 8023e9a:	e6d8      	b.n	8023c4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8023e9c:	b01d      	add	sp, #116	; 0x74
 8023e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023ea2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8023ea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ea6:	b085      	sub	sp, #20
 8023ea8:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8023eac:	9102      	str	r1, [sp, #8]
 8023eae:	2c00      	cmp	r4, #0
 8023eb0:	fb04 7103 	mla	r1, r4, r3, r7
 8023eb4:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8023eb8:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8023ebc:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8023ec0:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8023ec4:	f2c0 810c 	blt.w	80240e0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8023ec8:	45a6      	cmp	lr, r4
 8023eca:	f340 8109 	ble.w	80240e0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8023ece:	2f00      	cmp	r7, #0
 8023ed0:	f2c0 8104 	blt.w	80240dc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8023ed4:	42bb      	cmp	r3, r7
 8023ed6:	f340 8101 	ble.w	80240dc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8023eda:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8023ede:	1c7a      	adds	r2, r7, #1
 8023ee0:	f100 8101 	bmi.w	80240e6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8023ee4:	4293      	cmp	r3, r2
 8023ee6:	f340 80fe 	ble.w	80240e6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8023eea:	2e00      	cmp	r6, #0
 8023eec:	f000 80fd 	beq.w	80240ea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8023ef0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023ef4:	3401      	adds	r4, #1
 8023ef6:	f100 80fc 	bmi.w	80240f2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8023efa:	45a6      	cmp	lr, r4
 8023efc:	f340 80f9 	ble.w	80240f2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8023f00:	2800      	cmp	r0, #0
 8023f02:	f000 80f9 	beq.w	80240f8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8023f06:	2f00      	cmp	r7, #0
 8023f08:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8023f0c:	f2c0 80ef 	blt.w	80240ee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8023f10:	42bb      	cmp	r3, r7
 8023f12:	f340 80ec 	ble.w	80240ee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8023f16:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8023f1a:	3701      	adds	r7, #1
 8023f1c:	f100 80ef 	bmi.w	80240fe <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8023f20:	42bb      	cmp	r3, r7
 8023f22:	f340 80ec 	ble.w	80240fe <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8023f26:	2e00      	cmp	r6, #0
 8023f28:	f000 80eb 	beq.w	8024102 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8023f2c:	6852      	ldr	r2, [r2, #4]
 8023f2e:	b2b6      	uxth	r6, r6
 8023f30:	b280      	uxth	r0, r0
 8023f32:	fb00 fe06 	mul.w	lr, r0, r6
 8023f36:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8023f3a:	0136      	lsls	r6, r6, #4
 8023f3c:	eba6 070e 	sub.w	r7, r6, lr
 8023f40:	b280      	uxth	r0, r0
 8023f42:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8023f46:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023f4a:	b2bf      	uxth	r7, r7
 8023f4c:	1a1b      	subs	r3, r3, r0
 8023f4e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8023f52:	b29b      	uxth	r3, r3
 8023f54:	fb07 f60a 	mul.w	r6, r7, sl
 8023f58:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023f5c:	fb0b 6603 	mla	r6, fp, r3, r6
 8023f60:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023f64:	fb00 6609 	mla	r6, r0, r9, r6
 8023f68:	fb0e 6608 	mla	r6, lr, r8, r6
 8023f6c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023f70:	9600      	str	r6, [sp, #0]
 8023f72:	2e00      	cmp	r6, #0
 8023f74:	f000 80af 	beq.w	80240d6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8023f78:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023f7c:	fb0b fc0c 	mul.w	ip, fp, ip
 8023f80:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023f84:	fb0b f505 	mul.w	r5, fp, r5
 8023f88:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023f8c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023f90:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023f94:	44dc      	add	ip, fp
 8023f96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f9a:	9501      	str	r5, [sp, #4]
 8023f9c:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8023fa0:	9503      	str	r5, [sp, #12]
 8023fa2:	9d01      	ldr	r5, [sp, #4]
 8023fa4:	9e02      	ldr	r6, [sp, #8]
 8023fa6:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8023faa:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023fae:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8023fb2:	fb0a fc0c 	mul.w	ip, sl, ip
 8023fb6:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8023fba:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023fbe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023fc2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023fc6:	4465      	add	r5, ip
 8023fc8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023fcc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023fd0:	fb09 fc0c 	mul.w	ip, r9, ip
 8023fd4:	fb09 f904 	mul.w	r9, r9, r4
 8023fd8:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8023fdc:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023fe0:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8023fe4:	fb08 f404 	mul.w	r4, r8, r4
 8023fe8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023fec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023ff0:	fb08 f802 	mul.w	r8, r8, r2
 8023ff4:	fb0a fa01 	mul.w	sl, sl, r1
 8023ff8:	0a22      	lsrs	r2, r4, #8
 8023ffa:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8023ffe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024002:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8024006:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802400a:	4414      	add	r4, r2
 802400c:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8024010:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8024014:	0a2d      	lsrs	r5, r5, #8
 8024016:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802401a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802401e:	9a03      	ldr	r2, [sp, #12]
 8024020:	8836      	ldrh	r6, [r6, #0]
 8024022:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024026:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802402a:	437d      	muls	r5, r7
 802402c:	4461      	add	r1, ip
 802402e:	0a24      	lsrs	r4, r4, #8
 8024030:	fb02 5503 	mla	r5, r2, r3, r5
 8024034:	0a09      	lsrs	r1, r1, #8
 8024036:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802403a:	fb04 540e 	mla	r4, r4, lr, r5
 802403e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024042:	fb01 4100 	mla	r1, r1, r0, r4
 8024046:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802404a:	0a09      	lsrs	r1, r1, #8
 802404c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024050:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8024054:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024058:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802405c:	fb07 f70a 	mul.w	r7, r7, sl
 8024060:	fb03 7101 	mla	r1, r3, r1, r7
 8024064:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024068:	9b00      	ldr	r3, [sp, #0]
 802406a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802406e:	fb0e 1e08 	mla	lr, lr, r8, r1
 8024072:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8024076:	fb00 e101 	mla	r1, r0, r1, lr
 802407a:	43da      	mvns	r2, r3
 802407c:	1233      	asrs	r3, r6, #8
 802407e:	b2d2      	uxtb	r2, r2
 8024080:	10f0      	asrs	r0, r6, #3
 8024082:	0a09      	lsrs	r1, r1, #8
 8024084:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024088:	00f6      	lsls	r6, r6, #3
 802408a:	4353      	muls	r3, r2
 802408c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024090:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024094:	b2f6      	uxtb	r6, r6
 8024096:	4321      	orrs	r1, r4
 8024098:	4350      	muls	r0, r2
 802409a:	4356      	muls	r6, r2
 802409c:	1c5a      	adds	r2, r3, #1
 802409e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80240a2:	0c0b      	lsrs	r3, r1, #16
 80240a4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80240a8:	1c42      	adds	r2, r0, #1
 80240aa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80240ae:	0a0a      	lsrs	r2, r1, #8
 80240b0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80240b4:	021b      	lsls	r3, r3, #8
 80240b6:	00d2      	lsls	r2, r2, #3
 80240b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80240bc:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80240c0:	4313      	orrs	r3, r2
 80240c2:	1c72      	adds	r2, r6, #1
 80240c4:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80240c8:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80240cc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80240d0:	4319      	orrs	r1, r3
 80240d2:	9b02      	ldr	r3, [sp, #8]
 80240d4:	8019      	strh	r1, [r3, #0]
 80240d6:	b005      	add	sp, #20
 80240d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240dc:	2500      	movs	r5, #0
 80240de:	e6fe      	b.n	8023ede <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 80240e0:	2100      	movs	r1, #0
 80240e2:	460d      	mov	r5, r1
 80240e4:	e706      	b.n	8023ef4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80240e6:	2100      	movs	r1, #0
 80240e8:	e704      	b.n	8023ef4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80240ea:	4631      	mov	r1, r6
 80240ec:	e702      	b.n	8023ef4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80240ee:	2400      	movs	r4, #0
 80240f0:	e713      	b.n	8023f1a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 80240f2:	2200      	movs	r2, #0
 80240f4:	4614      	mov	r4, r2
 80240f6:	e71a      	b.n	8023f2e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80240f8:	4602      	mov	r2, r0
 80240fa:	4604      	mov	r4, r0
 80240fc:	e717      	b.n	8023f2e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80240fe:	2200      	movs	r2, #0
 8024100:	e715      	b.n	8023f2e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8024102:	4632      	mov	r2, r6
 8024104:	e713      	b.n	8023f2e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

08024108 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802410c:	b09b      	sub	sp, #108	; 0x6c
 802410e:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8024112:	9218      	str	r2, [sp, #96]	; 0x60
 8024114:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024116:	9116      	str	r1, [sp, #88]	; 0x58
 8024118:	9307      	str	r3, [sp, #28]
 802411a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802411e:	9019      	str	r0, [sp, #100]	; 0x64
 8024120:	6850      	ldr	r0, [r2, #4]
 8024122:	6812      	ldr	r2, [r2, #0]
 8024124:	fb00 1303 	mla	r3, r0, r3, r1
 8024128:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802412c:	930a      	str	r3, [sp, #40]	; 0x28
 802412e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024130:	681b      	ldr	r3, [r3, #0]
 8024132:	930f      	str	r3, [sp, #60]	; 0x3c
 8024134:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024136:	2b00      	cmp	r3, #0
 8024138:	dc03      	bgt.n	8024142 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802413a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802413c:	2b00      	cmp	r3, #0
 802413e:	f340 8386 	ble.w	802484e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8024142:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024144:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024148:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802414c:	1e48      	subs	r0, r1, #1
 802414e:	1e57      	subs	r7, r2, #1
 8024150:	9b07      	ldr	r3, [sp, #28]
 8024152:	2b00      	cmp	r3, #0
 8024154:	f340 8166 	ble.w	8024424 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8024158:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802415c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024160:	d406      	bmi.n	8024170 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8024162:	4584      	cmp	ip, r0
 8024164:	da04      	bge.n	8024170 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8024166:	2b00      	cmp	r3, #0
 8024168:	db02      	blt.n	8024170 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802416a:	42bb      	cmp	r3, r7
 802416c:	f2c0 815b 	blt.w	8024426 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8024170:	f11c 0c01 	adds.w	ip, ip, #1
 8024174:	f100 814b 	bmi.w	802440e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024178:	4561      	cmp	r1, ip
 802417a:	f2c0 8148 	blt.w	802440e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802417e:	3301      	adds	r3, #1
 8024180:	f100 8145 	bmi.w	802440e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024184:	429a      	cmp	r2, r3
 8024186:	f2c0 8142 	blt.w	802440e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802418a:	9b07      	ldr	r3, [sp, #28]
 802418c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802418e:	9317      	str	r3, [sp, #92]	; 0x5c
 8024190:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024192:	2b00      	cmp	r3, #0
 8024194:	f340 8165 	ble.w	8024462 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024198:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802419a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802419c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80241a0:	689b      	ldr	r3, [r3, #8]
 80241a2:	1422      	asrs	r2, r4, #16
 80241a4:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80241a8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80241ac:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80241b0:	f100 81d5 	bmi.w	802455e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80241b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80241b8:	4542      	cmp	r2, r8
 80241ba:	f280 81d0 	bge.w	802455e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80241be:	f1bc 0f00 	cmp.w	ip, #0
 80241c2:	f2c0 81cc 	blt.w	802455e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80241c6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80241ca:	45c4      	cmp	ip, r8
 80241cc:	f280 81c7 	bge.w	802455e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80241d0:	b21b      	sxth	r3, r3
 80241d2:	fb0c 2203 	mla	r2, ip, r3, r2
 80241d6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80241d8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80241dc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80241e0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80241e4:	2900      	cmp	r1, #0
 80241e6:	f000 8182 	beq.w	80244ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80241ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80241ee:	950b      	str	r5, [sp, #44]	; 0x2c
 80241f0:	0e2d      	lsrs	r5, r5, #24
 80241f2:	9512      	str	r5, [sp, #72]	; 0x48
 80241f4:	b180      	cbz	r0, 8024218 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80241f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80241fa:	3b01      	subs	r3, #1
 80241fc:	009b      	lsls	r3, r3, #2
 80241fe:	3304      	adds	r3, #4
 8024200:	eb08 0c03 	add.w	ip, r8, r3
 8024204:	f858 3003 	ldr.w	r3, [r8, r3]
 8024208:	9308      	str	r3, [sp, #32]
 802420a:	0e1b      	lsrs	r3, r3, #24
 802420c:	9310      	str	r3, [sp, #64]	; 0x40
 802420e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8024212:	930c      	str	r3, [sp, #48]	; 0x30
 8024214:	0e1b      	lsrs	r3, r3, #24
 8024216:	9313      	str	r3, [sp, #76]	; 0x4c
 8024218:	b289      	uxth	r1, r1
 802421a:	b280      	uxth	r0, r0
 802421c:	fb01 f900 	mul.w	r9, r1, r0
 8024220:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024224:	0109      	lsls	r1, r1, #4
 8024226:	eba1 0809 	sub.w	r8, r1, r9
 802422a:	b280      	uxth	r0, r0
 802422c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8024230:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024232:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024234:	fa1f f888 	uxth.w	r8, r8
 8024238:	1a09      	subs	r1, r1, r0
 802423a:	b289      	uxth	r1, r1
 802423c:	fb08 f303 	mul.w	r3, r8, r3
 8024240:	fb01 330e 	mla	r3, r1, lr, r3
 8024244:	fb00 3305 	mla	r3, r0, r5, r3
 8024248:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802424a:	fb09 3305 	mla	r3, r9, r5, r3
 802424e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024252:	2b00      	cmp	r3, #0
 8024254:	f000 80d2 	beq.w	80243fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024258:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802425c:	d01b      	beq.n	8024296 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802425e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8024262:	fb0e fa0a 	mul.w	sl, lr, sl
 8024266:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802426a:	fb0e fe02 	mul.w	lr, lr, r2
 802426e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8024272:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024276:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802427a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802427e:	4452      	add	r2, sl
 8024280:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024284:	0a12      	lsrs	r2, r2, #8
 8024286:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802428a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802428e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024292:	ea42 020c 	orr.w	r2, r2, ip
 8024296:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024298:	2dff      	cmp	r5, #255	; 0xff
 802429a:	d021      	beq.n	80242e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802429c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802429e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80242a2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80242a4:	fb05 fb0b 	mul.w	fp, r5, fp
 80242a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80242aa:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80242ae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80242b0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80242b4:	fb05 fa0a 	mul.w	sl, r5, sl
 80242b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80242bc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80242c0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80242c4:	44de      	add	lr, fp
 80242c6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80242ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80242ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80242d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80242d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80242da:	ea4e 050a 	orr.w	r5, lr, sl
 80242de:	950b      	str	r5, [sp, #44]	; 0x2c
 80242e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80242e2:	2dff      	cmp	r5, #255	; 0xff
 80242e4:	d021      	beq.n	802432a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80242e6:	9d08      	ldr	r5, [sp, #32]
 80242e8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80242ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80242ee:	fb05 fb0b 	mul.w	fp, r5, fp
 80242f2:	9d08      	ldr	r5, [sp, #32]
 80242f4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80242f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80242fa:	fb05 fa0e 	mul.w	sl, r5, lr
 80242fe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024302:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024306:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802430a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802430e:	44de      	add	lr, fp
 8024310:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024314:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024318:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802431c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024320:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024324:	ea4e 050a 	orr.w	r5, lr, sl
 8024328:	9508      	str	r5, [sp, #32]
 802432a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802432c:	2dff      	cmp	r5, #255	; 0xff
 802432e:	d021      	beq.n	8024374 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8024330:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024332:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024336:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024338:	fb05 fb0b 	mul.w	fp, r5, fp
 802433c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802433e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024342:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024344:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024348:	fb05 fa0a 	mul.w	sl, r5, sl
 802434c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024350:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024354:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024358:	44de      	add	lr, fp
 802435a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802435e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024362:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024366:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802436a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802436e:	ea4e 050a 	orr.w	r5, lr, sl
 8024372:	950c      	str	r5, [sp, #48]	; 0x30
 8024374:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024376:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802437a:	9d08      	ldr	r5, [sp, #32]
 802437c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8024380:	fb08 fc0c 	mul.w	ip, r8, ip
 8024384:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024388:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802438c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802438e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8024392:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024396:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024398:	fb09 cc0e 	mla	ip, r9, lr, ip
 802439c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80243a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80243a4:	fb08 f80e 	mul.w	r8, r8, lr
 80243a8:	fb01 8202 	mla	r2, r1, r2, r8
 80243ac:	9908      	ldr	r1, [sp, #32]
 80243ae:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80243b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80243b4:	fb00 220a 	mla	r2, r0, sl, r2
 80243b8:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80243bc:	fb09 2900 	mla	r9, r9, r0, r2
 80243c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80243c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80243c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80243cc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80243d0:	ea4c 0c09 	orr.w	ip, ip, r9
 80243d4:	2bff      	cmp	r3, #255	; 0xff
 80243d6:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80243da:	f040 8091 	bne.w	8024500 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80243de:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80243e2:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80243e6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80243ea:	f022 0207 	bic.w	r2, r2, #7
 80243ee:	431a      	orrs	r2, r3
 80243f0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80243f4:	ea4c 0c02 	orr.w	ip, ip, r2
 80243f8:	f8a7 c000 	strh.w	ip, [r7]
 80243fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80243fe:	441c      	add	r4, r3
 8024400:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024402:	441e      	add	r6, r3
 8024404:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024406:	3b01      	subs	r3, #1
 8024408:	3702      	adds	r7, #2
 802440a:	9317      	str	r3, [sp, #92]	; 0x5c
 802440c:	e6c0      	b.n	8024190 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802440e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024410:	441c      	add	r4, r3
 8024412:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024414:	441e      	add	r6, r3
 8024416:	9b07      	ldr	r3, [sp, #28]
 8024418:	3b01      	subs	r3, #1
 802441a:	9307      	str	r3, [sp, #28]
 802441c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802441e:	3302      	adds	r3, #2
 8024420:	930a      	str	r3, [sp, #40]	; 0x28
 8024422:	e695      	b.n	8024150 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024424:	d024      	beq.n	8024470 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8024426:	9b07      	ldr	r3, [sp, #28]
 8024428:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802442a:	3b01      	subs	r3, #1
 802442c:	fb00 4003 	mla	r0, r0, r3, r4
 8024430:	1400      	asrs	r0, r0, #16
 8024432:	f53f aeaa 	bmi.w	802418a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024436:	3901      	subs	r1, #1
 8024438:	4288      	cmp	r0, r1
 802443a:	f6bf aea6 	bge.w	802418a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802443e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024440:	fb01 6303 	mla	r3, r1, r3, r6
 8024444:	141b      	asrs	r3, r3, #16
 8024446:	f53f aea0 	bmi.w	802418a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802444a:	3a01      	subs	r2, #1
 802444c:	4293      	cmp	r3, r2
 802444e:	f6bf ae9c 	bge.w	802418a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024452:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024456:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802445a:	f1bb 0f00 	cmp.w	fp, #0
 802445e:	f300 809a 	bgt.w	8024596 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8024462:	9b07      	ldr	r3, [sp, #28]
 8024464:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802446a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802446e:	930a      	str	r3, [sp, #40]	; 0x28
 8024470:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024472:	2b00      	cmp	r3, #0
 8024474:	f340 81eb 	ble.w	802484e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8024478:	ee30 0a04 	vadd.f32	s0, s0, s8
 802447c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024480:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024484:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024486:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802448a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802448e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024492:	eef0 6a62 	vmov.f32	s13, s5
 8024496:	ee61 7a27 	vmul.f32	s15, s2, s15
 802449a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802449e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80244a2:	ee16 4a90 	vmov	r4, s13
 80244a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80244aa:	eef0 6a43 	vmov.f32	s13, s6
 80244ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80244b2:	ee12 2a90 	vmov	r2, s5
 80244b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80244ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80244be:	ee13 2a10 	vmov	r2, s6
 80244c2:	9327      	str	r3, [sp, #156]	; 0x9c
 80244c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80244c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80244ca:	9328      	str	r3, [sp, #160]	; 0xa0
 80244cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80244ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80244d0:	3b01      	subs	r3, #1
 80244d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80244d6:	9316      	str	r3, [sp, #88]	; 0x58
 80244d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80244da:	bf08      	it	eq
 80244dc:	4613      	moveq	r3, r2
 80244de:	ee16 6a90 	vmov	r6, s13
 80244e2:	9307      	str	r3, [sp, #28]
 80244e4:	eeb0 3a67 	vmov.f32	s6, s15
 80244e8:	eef0 2a47 	vmov.f32	s5, s14
 80244ec:	e622      	b.n	8024134 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80244ee:	2800      	cmp	r0, #0
 80244f0:	f43f ae92 	beq.w	8024218 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80244f4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80244f8:	9308      	str	r3, [sp, #32]
 80244fa:	0e1b      	lsrs	r3, r3, #24
 80244fc:	9310      	str	r3, [sp, #64]	; 0x40
 80244fe:	e68b      	b.n	8024218 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8024500:	8839      	ldrh	r1, [r7, #0]
 8024502:	4dd4      	ldr	r5, [pc, #848]	; (8024854 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8024504:	43db      	mvns	r3, r3
 8024506:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802450a:	fa5f f883 	uxtb.w	r8, r3
 802450e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8024512:	fb0e fe08 	mul.w	lr, lr, r8
 8024516:	10c8      	asrs	r0, r1, #3
 8024518:	00cb      	lsls	r3, r1, #3
 802451a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802451e:	f10e 0101 	add.w	r1, lr, #1
 8024522:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8024526:	fb00 f008 	mul.w	r0, r0, r8
 802452a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802452e:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8024532:	f100 0e01 	add.w	lr, r0, #1
 8024536:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802453a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802453e:	b2db      	uxtb	r3, r3
 8024540:	b2c9      	uxtb	r1, r1
 8024542:	00d2      	lsls	r2, r2, #3
 8024544:	fb03 f308 	mul.w	r3, r3, r8
 8024548:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802454c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024550:	430a      	orrs	r2, r1
 8024552:	1c59      	adds	r1, r3, #1
 8024554:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024558:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802455c:	e748      	b.n	80243f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802455e:	f112 0801 	adds.w	r8, r2, #1
 8024562:	f53f af4b 	bmi.w	80243fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024566:	4543      	cmp	r3, r8
 8024568:	f6ff af48 	blt.w	80243fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802456c:	f11c 0801 	adds.w	r8, ip, #1
 8024570:	f53f af44 	bmi.w	80243fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024574:	45c6      	cmp	lr, r8
 8024576:	f6ff af41 	blt.w	80243fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802457a:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802457e:	fa0f f28e 	sxth.w	r2, lr
 8024582:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8024586:	9200      	str	r2, [sp, #0]
 8024588:	b21b      	sxth	r3, r3
 802458a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802458c:	9819      	ldr	r0, [sp, #100]	; 0x64
 802458e:	4639      	mov	r1, r7
 8024590:	f7ff fc87 	bl	8023ea2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8024594:	e732      	b.n	80243fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024596:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024598:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802459a:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802459e:	1421      	asrs	r1, r4, #16
 80245a0:	1433      	asrs	r3, r6, #16
 80245a2:	fb07 1303 	mla	r3, r7, r3, r1
 80245a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80245a8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80245ac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80245b0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80245b4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80245b8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80245bc:	2a00      	cmp	r2, #0
 80245be:	f000 8107 	beq.w	80247d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c8>
 80245c2:	684d      	ldr	r5, [r1, #4]
 80245c4:	950d      	str	r5, [sp, #52]	; 0x34
 80245c6:	0e2d      	lsrs	r5, r5, #24
 80245c8:	9514      	str	r5, [sp, #80]	; 0x50
 80245ca:	b178      	cbz	r0, 80245ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80245cc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80245d0:	3f01      	subs	r7, #1
 80245d2:	00bf      	lsls	r7, r7, #2
 80245d4:	3704      	adds	r7, #4
 80245d6:	eb01 0e07 	add.w	lr, r1, r7
 80245da:	59c9      	ldr	r1, [r1, r7]
 80245dc:	9109      	str	r1, [sp, #36]	; 0x24
 80245de:	0e09      	lsrs	r1, r1, #24
 80245e0:	9111      	str	r1, [sp, #68]	; 0x44
 80245e2:	f8de 1004 	ldr.w	r1, [lr, #4]
 80245e6:	910e      	str	r1, [sp, #56]	; 0x38
 80245e8:	0e09      	lsrs	r1, r1, #24
 80245ea:	9115      	str	r1, [sp, #84]	; 0x54
 80245ec:	b292      	uxth	r2, r2
 80245ee:	b280      	uxth	r0, r0
 80245f0:	fb02 f900 	mul.w	r9, r2, r0
 80245f4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80245f8:	0112      	lsls	r2, r2, #4
 80245fa:	eba2 0e09 	sub.w	lr, r2, r9
 80245fe:	b280      	uxth	r0, r0
 8024600:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8024604:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024606:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024608:	fa1f fe8e 	uxth.w	lr, lr
 802460c:	1a09      	subs	r1, r1, r0
 802460e:	b289      	uxth	r1, r1
 8024610:	fb0e f202 	mul.w	r2, lr, r2
 8024614:	fb01 220c 	mla	r2, r1, ip, r2
 8024618:	fb00 2205 	mla	r2, r0, r5, r2
 802461c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802461e:	fb09 2205 	mla	r2, r9, r5, r2
 8024622:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024626:	2a00      	cmp	r2, #0
 8024628:	f000 80c9 	beq.w	80247be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 802462c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024630:	d019      	beq.n	8024666 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8024632:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024636:	fb0c fa0a 	mul.w	sl, ip, sl
 802463a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802463e:	fb0c fc03 	mul.w	ip, ip, r3
 8024642:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024646:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802464a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802464e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024652:	4453      	add	r3, sl
 8024654:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024658:	0a1b      	lsrs	r3, r3, #8
 802465a:	0a3f      	lsrs	r7, r7, #8
 802465c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024660:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024664:	433b      	orrs	r3, r7
 8024666:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024668:	2dff      	cmp	r5, #255	; 0xff
 802466a:	d020      	beq.n	80246ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 802466c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802466e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024672:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024674:	436f      	muls	r7, r5
 8024676:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024678:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802467c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802467e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024682:	fb05 fa0a 	mul.w	sl, r5, sl
 8024686:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802468a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802468e:	44bc      	add	ip, r7
 8024690:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024694:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024698:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802469c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80246a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80246a8:	ea4c 050a 	orr.w	r5, ip, sl
 80246ac:	950d      	str	r5, [sp, #52]	; 0x34
 80246ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80246b0:	2dff      	cmp	r5, #255	; 0xff
 80246b2:	d020      	beq.n	80246f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 80246b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80246b6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80246ba:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80246bc:	436f      	muls	r7, r5
 80246be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80246c0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80246c4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80246c6:	fb05 fa0c 	mul.w	sl, r5, ip
 80246ca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80246ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80246d2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80246d6:	44bc      	add	ip, r7
 80246d8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80246dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80246e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80246e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80246ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80246f0:	ea4c 050a 	orr.w	r5, ip, sl
 80246f4:	9509      	str	r5, [sp, #36]	; 0x24
 80246f6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80246f8:	2dff      	cmp	r5, #255	; 0xff
 80246fa:	d020      	beq.n	802473e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80246fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80246fe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024702:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024704:	436f      	muls	r7, r5
 8024706:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024708:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802470c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802470e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024712:	fb05 fa0a 	mul.w	sl, r5, sl
 8024716:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802471a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802471e:	44bc      	add	ip, r7
 8024720:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024724:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024728:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802472c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024730:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024734:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024738:	ea4c 050a 	orr.w	r5, ip, sl
 802473c:	950e      	str	r5, [sp, #56]	; 0x38
 802473e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024740:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024744:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024746:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802474a:	fb0e f707 	mul.w	r7, lr, r7
 802474e:	fb01 770c 	mla	r7, r1, ip, r7
 8024752:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024756:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024758:	fb00 770c 	mla	r7, r0, ip, r7
 802475c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024760:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024762:	fb09 770c 	mla	r7, r9, ip, r7
 8024766:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802476a:	fb0e fe0c 	mul.w	lr, lr, ip
 802476e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024772:	fb01 e303 	mla	r3, r1, r3, lr
 8024776:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024778:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802477c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802477e:	fb00 330a 	mla	r3, r0, sl, r3
 8024782:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024786:	fb09 3c0c 	mla	ip, r9, ip, r3
 802478a:	0a3f      	lsrs	r7, r7, #8
 802478c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024790:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024794:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024798:	ea47 070c 	orr.w	r7, r7, ip
 802479c:	2aff      	cmp	r2, #255	; 0xff
 802479e:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80247a2:	d11e      	bne.n	80247e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 80247a4:	097a      	lsrs	r2, r7, #5
 80247a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80247aa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80247ae:	f023 0307 	bic.w	r3, r3, #7
 80247b2:	4313      	orrs	r3, r2
 80247b4:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80247b8:	431f      	orrs	r7, r3
 80247ba:	f8a8 7000 	strh.w	r7, [r8]
 80247be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80247c0:	441c      	add	r4, r3
 80247c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80247c4:	f108 0802 	add.w	r8, r8, #2
 80247c8:	441e      	add	r6, r3
 80247ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80247ce:	e644      	b.n	802445a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80247d0:	2800      	cmp	r0, #0
 80247d2:	f43f af0b 	beq.w	80245ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80247d6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80247da:	9109      	str	r1, [sp, #36]	; 0x24
 80247dc:	0e09      	lsrs	r1, r1, #24
 80247de:	9111      	str	r1, [sp, #68]	; 0x44
 80247e0:	e704      	b.n	80245ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80247e2:	f8b8 1000 	ldrh.w	r1, [r8]
 80247e6:	43d2      	mvns	r2, r2
 80247e8:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80247ec:	fa5f fe82 	uxtb.w	lr, r2
 80247f0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80247f4:	fb0c fc0e 	mul.w	ip, ip, lr
 80247f8:	10c8      	asrs	r0, r1, #3
 80247fa:	00ca      	lsls	r2, r1, #3
 80247fc:	f10c 0101 	add.w	r1, ip, #1
 8024800:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024804:	0c39      	lsrs	r1, r7, #16
 8024806:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802480a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802480e:	4911      	ldr	r1, [pc, #68]	; (8024854 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8024810:	fb00 f00e 	mul.w	r0, r0, lr
 8024814:	fa5f fc8c 	uxtb.w	ip, ip
 8024818:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802481c:	b2d2      	uxtb	r2, r2
 802481e:	1c41      	adds	r1, r0, #1
 8024820:	fb02 f20e 	mul.w	r2, r2, lr
 8024824:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8024828:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802482c:	1c51      	adds	r1, r2, #1
 802482e:	00c0      	lsls	r0, r0, #3
 8024830:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024834:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024838:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802483c:	ea4c 0c00 	orr.w	ip, ip, r0
 8024840:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024844:	ea47 0c0c 	orr.w	ip, r7, ip
 8024848:	f8a8 c000 	strh.w	ip, [r8]
 802484c:	e7b7      	b.n	80247be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 802484e:	b01b      	add	sp, #108	; 0x6c
 8024850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024854:	fffff800 	.word	0xfffff800

08024858 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8024858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802485c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8024860:	2d00      	cmp	r5, #0
 8024862:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8024866:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802486a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802486e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8024872:	fb05 0e03 	mla	lr, r5, r3, r0
 8024876:	f2c0 808c 	blt.w	8024992 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802487a:	45a9      	cmp	r9, r5
 802487c:	f340 8089 	ble.w	8024992 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024880:	2800      	cmp	r0, #0
 8024882:	f2c0 8084 	blt.w	802498e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8024886:	4580      	cmp	r8, r0
 8024888:	f340 8081 	ble.w	802498e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802488c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024890:	f01e 0f01 	tst.w	lr, #1
 8024894:	5d16      	ldrb	r6, [r2, r4]
 8024896:	bf0c      	ite	eq
 8024898:	f006 060f 	andeq.w	r6, r6, #15
 802489c:	1136      	asrne	r6, r6, #4
 802489e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80248a2:	b2f6      	uxtb	r6, r6
 80248a4:	1c44      	adds	r4, r0, #1
 80248a6:	d477      	bmi.n	8024998 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80248a8:	45a0      	cmp	r8, r4
 80248aa:	dd75      	ble.n	8024998 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80248ac:	2f00      	cmp	r7, #0
 80248ae:	d075      	beq.n	802499c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 80248b0:	f10e 0a01 	add.w	sl, lr, #1
 80248b4:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80248b8:	f01a 0f01 	tst.w	sl, #1
 80248bc:	5d14      	ldrb	r4, [r2, r4]
 80248be:	bf0c      	ite	eq
 80248c0:	f004 040f 	andeq.w	r4, r4, #15
 80248c4:	1124      	asrne	r4, r4, #4
 80248c6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80248ca:	b2e4      	uxtb	r4, r4
 80248cc:	3501      	adds	r5, #1
 80248ce:	d469      	bmi.n	80249a4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80248d0:	45a9      	cmp	r9, r5
 80248d2:	dd67      	ble.n	80249a4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80248d4:	f1bc 0f00 	cmp.w	ip, #0
 80248d8:	d067      	beq.n	80249aa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 80248da:	2800      	cmp	r0, #0
 80248dc:	db60      	blt.n	80249a0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80248de:	4580      	cmp	r8, r0
 80248e0:	dd5e      	ble.n	80249a0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80248e2:	eb03 090e 	add.w	r9, r3, lr
 80248e6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80248ea:	f019 0f01 	tst.w	r9, #1
 80248ee:	5d55      	ldrb	r5, [r2, r5]
 80248f0:	bf0c      	ite	eq
 80248f2:	f005 050f 	andeq.w	r5, r5, #15
 80248f6:	112d      	asrne	r5, r5, #4
 80248f8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80248fc:	b2ed      	uxtb	r5, r5
 80248fe:	3001      	adds	r0, #1
 8024900:	d456      	bmi.n	80249b0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8024902:	4580      	cmp	r8, r0
 8024904:	dd54      	ble.n	80249b0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8024906:	2f00      	cmp	r7, #0
 8024908:	d054      	beq.n	80249b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802490a:	3301      	adds	r3, #1
 802490c:	449e      	add	lr, r3
 802490e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024912:	f01e 0f01 	tst.w	lr, #1
 8024916:	5cd0      	ldrb	r0, [r2, r3]
 8024918:	bf0c      	ite	eq
 802491a:	f000 000f 	andeq.w	r0, r0, #15
 802491e:	1100      	asrne	r0, r0, #4
 8024920:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024924:	b2c3      	uxtb	r3, r0
 8024926:	b2ba      	uxth	r2, r7
 8024928:	fa1f fc8c 	uxth.w	ip, ip
 802492c:	fb02 f00c 	mul.w	r0, r2, ip
 8024930:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8024934:	0112      	lsls	r2, r2, #4
 8024936:	fa1f fc8c 	uxth.w	ip, ip
 802493a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802493e:	1a12      	subs	r2, r2, r0
 8024940:	eba7 070c 	sub.w	r7, r7, ip
 8024944:	b292      	uxth	r2, r2
 8024946:	b2bf      	uxth	r7, r7
 8024948:	4362      	muls	r2, r4
 802494a:	fb06 2207 	mla	r2, r6, r7, r2
 802494e:	fb0c 2505 	mla	r5, ip, r5, r2
 8024952:	fb00 5303 	mla	r3, r0, r3, r5
 8024956:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802495a:	b1b3      	cbz	r3, 802498a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802495c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8024960:	435a      	muls	r2, r3
 8024962:	1c53      	adds	r3, r2, #1
 8024964:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024968:	4a2d      	ldr	r2, [pc, #180]	; (8024a20 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802496a:	121b      	asrs	r3, r3, #8
 802496c:	6812      	ldr	r2, [r2, #0]
 802496e:	2bff      	cmp	r3, #255	; 0xff
 8024970:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8024974:	d120      	bne.n	80249b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8024976:	4b2b      	ldr	r3, [pc, #172]	; (8024a24 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8024978:	0950      	lsrs	r0, r2, #5
 802497a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802497e:	4033      	ands	r3, r6
 8024980:	4318      	orrs	r0, r3
 8024982:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024986:	4302      	orrs	r2, r0
 8024988:	800a      	strh	r2, [r1, #0]
 802498a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802498e:	2600      	movs	r6, #0
 8024990:	e788      	b.n	80248a4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8024992:	2400      	movs	r4, #0
 8024994:	4626      	mov	r6, r4
 8024996:	e799      	b.n	80248cc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024998:	2400      	movs	r4, #0
 802499a:	e797      	b.n	80248cc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802499c:	463c      	mov	r4, r7
 802499e:	e795      	b.n	80248cc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80249a0:	2500      	movs	r5, #0
 80249a2:	e7ac      	b.n	80248fe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 80249a4:	2300      	movs	r3, #0
 80249a6:	461d      	mov	r5, r3
 80249a8:	e7bd      	b.n	8024926 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80249aa:	4663      	mov	r3, ip
 80249ac:	4665      	mov	r5, ip
 80249ae:	e7ba      	b.n	8024926 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80249b0:	2300      	movs	r3, #0
 80249b2:	e7b8      	b.n	8024926 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80249b4:	463b      	mov	r3, r7
 80249b6:	e7b6      	b.n	8024926 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80249b8:	880d      	ldrh	r5, [r1, #0]
 80249ba:	b29f      	uxth	r7, r3
 80249bc:	122c      	asrs	r4, r5, #8
 80249be:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80249c2:	43db      	mvns	r3, r3
 80249c4:	b2db      	uxtb	r3, r3
 80249c6:	fb10 f007 	smulbb	r0, r0, r7
 80249ca:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80249ce:	fb04 0403 	mla	r4, r4, r3, r0
 80249d2:	b2f6      	uxtb	r6, r6
 80249d4:	10e8      	asrs	r0, r5, #3
 80249d6:	b2d2      	uxtb	r2, r2
 80249d8:	00ed      	lsls	r5, r5, #3
 80249da:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80249de:	fb12 f207 	smulbb	r2, r2, r7
 80249e2:	fb16 f607 	smulbb	r6, r6, r7
 80249e6:	b2ed      	uxtb	r5, r5
 80249e8:	b2a4      	uxth	r4, r4
 80249ea:	fb00 6603 	mla	r6, r0, r3, r6
 80249ee:	fb05 2303 	mla	r3, r5, r3, r2
 80249f2:	b29a      	uxth	r2, r3
 80249f4:	1c63      	adds	r3, r4, #1
 80249f6:	b2b0      	uxth	r0, r6
 80249f8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80249fc:	1c53      	adds	r3, r2, #1
 80249fe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024a02:	1c42      	adds	r2, r0, #1
 8024a04:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024a08:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024a0c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024a10:	0940      	lsrs	r0, r0, #5
 8024a12:	4323      	orrs	r3, r4
 8024a14:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024a18:	4303      	orrs	r3, r0
 8024a1a:	800b      	strh	r3, [r1, #0]
 8024a1c:	e7b5      	b.n	802498a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024a1e:	bf00      	nop
 8024a20:	20008818 	.word	0x20008818
 8024a24:	00fff800 	.word	0x00fff800

08024a28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a2c:	b097      	sub	sp, #92	; 0x5c
 8024a2e:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8024a32:	9214      	str	r2, [sp, #80]	; 0x50
 8024a34:	9309      	str	r3, [sp, #36]	; 0x24
 8024a36:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024a38:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8024a3c:	910d      	str	r1, [sp, #52]	; 0x34
 8024a3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8024a40:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8024a44:	9015      	str	r0, [sp, #84]	; 0x54
 8024a46:	6850      	ldr	r0, [r2, #4]
 8024a48:	6812      	ldr	r2, [r2, #0]
 8024a4a:	fb00 1303 	mla	r3, r0, r3, r1
 8024a4e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024a52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a54:	689b      	ldr	r3, [r3, #8]
 8024a56:	3301      	adds	r3, #1
 8024a58:	f023 0301 	bic.w	r3, r3, #1
 8024a5c:	930a      	str	r3, [sp, #40]	; 0x28
 8024a5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a60:	681f      	ldr	r7, [r3, #0]
 8024a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024a64:	2b00      	cmp	r3, #0
 8024a66:	dc03      	bgt.n	8024a70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024a68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024a6a:	2b00      	cmp	r3, #0
 8024a6c:	f340 8287 	ble.w	8024f7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8024a70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a72:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024a76:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024a7a:	1e48      	subs	r0, r1, #1
 8024a7c:	f102 3cff 	add.w	ip, r2, #4294967295
 8024a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a82:	2b00      	cmp	r3, #0
 8024a84:	f340 80c4 	ble.w	8024c10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8024a88:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024a8c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024a90:	d406      	bmi.n	8024aa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024a92:	4586      	cmp	lr, r0
 8024a94:	da04      	bge.n	8024aa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024a96:	2b00      	cmp	r3, #0
 8024a98:	db02      	blt.n	8024aa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024a9a:	4563      	cmp	r3, ip
 8024a9c:	f2c0 80b9 	blt.w	8024c12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024aa0:	f11e 0e01 	adds.w	lr, lr, #1
 8024aa4:	f100 80aa 	bmi.w	8024bfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8024aa8:	4571      	cmp	r1, lr
 8024aaa:	f2c0 80a7 	blt.w	8024bfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8024aae:	3301      	adds	r3, #1
 8024ab0:	f100 80a4 	bmi.w	8024bfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8024ab4:	429a      	cmp	r2, r3
 8024ab6:	f2c0 80a1 	blt.w	8024bfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8024aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024abc:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8024ac0:	930e      	str	r3, [sp, #56]	; 0x38
 8024ac2:	46c8      	mov	r8, r9
 8024ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024ac6:	2b00      	cmp	r3, #0
 8024ac8:	f340 80c3 	ble.w	8024c52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8024acc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024ace:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024ad2:	1423      	asrs	r3, r4, #16
 8024ad4:	ea4f 4026 	mov.w	r0, r6, asr #16
 8024ad8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024adc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024ae0:	f100 814d 	bmi.w	8024d7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024ae4:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024ae8:	455b      	cmp	r3, fp
 8024aea:	f280 8148 	bge.w	8024d7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024aee:	2800      	cmp	r0, #0
 8024af0:	f2c0 8145 	blt.w	8024d7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024af4:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024af8:	4558      	cmp	r0, fp
 8024afa:	f280 8140 	bge.w	8024d7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024afe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024b00:	fb00 3305 	mla	r3, r0, r5, r3
 8024b04:	0858      	lsrs	r0, r3, #1
 8024b06:	07dd      	lsls	r5, r3, #31
 8024b08:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024b0c:	bf54      	ite	pl
 8024b0e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024b12:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024b16:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024b1a:	fa5f fc8c 	uxtb.w	ip, ip
 8024b1e:	2a00      	cmp	r2, #0
 8024b20:	f000 80db 	beq.w	8024cda <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 8024b24:	1c58      	adds	r0, r3, #1
 8024b26:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024b2a:	07c0      	lsls	r0, r0, #31
 8024b2c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024b30:	bf54      	ite	pl
 8024b32:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024b36:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024b3a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024b3e:	fa5f f08e 	uxtb.w	r0, lr
 8024b42:	9010      	str	r0, [sp, #64]	; 0x40
 8024b44:	b1c9      	cbz	r1, 8024b7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8024b46:	4453      	add	r3, sl
 8024b48:	0858      	lsrs	r0, r3, #1
 8024b4a:	07dd      	lsls	r5, r3, #31
 8024b4c:	5c38      	ldrb	r0, [r7, r0]
 8024b4e:	bf54      	ite	pl
 8024b50:	f000 000f 	andpl.w	r0, r0, #15
 8024b54:	1100      	asrmi	r0, r0, #4
 8024b56:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024b5a:	3301      	adds	r3, #1
 8024b5c:	b2c0      	uxtb	r0, r0
 8024b5e:	900b      	str	r0, [sp, #44]	; 0x2c
 8024b60:	0858      	lsrs	r0, r3, #1
 8024b62:	07dd      	lsls	r5, r3, #31
 8024b64:	f817 e000 	ldrb.w	lr, [r7, r0]
 8024b68:	bf54      	ite	pl
 8024b6a:	f00e 030f 	andpl.w	r3, lr, #15
 8024b6e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8024b72:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024b76:	b2db      	uxtb	r3, r3
 8024b78:	9311      	str	r3, [sp, #68]	; 0x44
 8024b7a:	b292      	uxth	r2, r2
 8024b7c:	b289      	uxth	r1, r1
 8024b7e:	fb02 f301 	mul.w	r3, r2, r1
 8024b82:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024b86:	0112      	lsls	r2, r2, #4
 8024b88:	b289      	uxth	r1, r1
 8024b8a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8024b8e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024b90:	1ad2      	subs	r2, r2, r3
 8024b92:	1a40      	subs	r0, r0, r1
 8024b94:	b292      	uxth	r2, r2
 8024b96:	436a      	muls	r2, r5
 8024b98:	b280      	uxth	r0, r0
 8024b9a:	fb0c 2c00 	mla	ip, ip, r0, r2
 8024b9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024ba0:	fb01 c102 	mla	r1, r1, r2, ip
 8024ba4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024ba6:	fb03 1302 	mla	r3, r3, r2, r1
 8024baa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024bae:	b1db      	cbz	r3, 8024be8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8024bb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024bb2:	4353      	muls	r3, r2
 8024bb4:	1c5a      	adds	r2, r3, #1
 8024bb6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024bba:	4ac6      	ldr	r2, [pc, #792]	; (8024ed4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8024bbc:	121b      	asrs	r3, r3, #8
 8024bbe:	6812      	ldr	r2, [r2, #0]
 8024bc0:	2bff      	cmp	r3, #255	; 0xff
 8024bc2:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8024bc6:	f040 8099 	bne.w	8024cfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8024bca:	0953      	lsrs	r3, r2, #5
 8024bcc:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8024bd0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024bd4:	f02c 0c07 	bic.w	ip, ip, #7
 8024bd8:	ea43 0c0c 	orr.w	ip, r3, ip
 8024bdc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024be0:	ea4c 0202 	orr.w	r2, ip, r2
 8024be4:	f8a8 2000 	strh.w	r2, [r8]
 8024be8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024bea:	441c      	add	r4, r3
 8024bec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024bee:	441e      	add	r6, r3
 8024bf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024bf2:	3b01      	subs	r3, #1
 8024bf4:	f108 0802 	add.w	r8, r8, #2
 8024bf8:	930e      	str	r3, [sp, #56]	; 0x38
 8024bfa:	e763      	b.n	8024ac4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024bfc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024bfe:	441c      	add	r4, r3
 8024c00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024c02:	441e      	add	r6, r3
 8024c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c06:	3b01      	subs	r3, #1
 8024c08:	9309      	str	r3, [sp, #36]	; 0x24
 8024c0a:	f109 0902 	add.w	r9, r9, #2
 8024c0e:	e737      	b.n	8024a80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024c10:	d024      	beq.n	8024c5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c14:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024c16:	3b01      	subs	r3, #1
 8024c18:	fb00 4003 	mla	r0, r0, r3, r4
 8024c1c:	1400      	asrs	r0, r0, #16
 8024c1e:	f53f af4c 	bmi.w	8024aba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024c22:	3901      	subs	r1, #1
 8024c24:	4288      	cmp	r0, r1
 8024c26:	f6bf af48 	bge.w	8024aba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024c2a:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024c2c:	fb01 6303 	mla	r3, r1, r3, r6
 8024c30:	141b      	asrs	r3, r3, #16
 8024c32:	f53f af42 	bmi.w	8024aba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024c36:	3a01      	subs	r2, #1
 8024c38:	4293      	cmp	r3, r2
 8024c3a:	f6bf af3e 	bge.w	8024aba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024c3e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8024c42:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024c46:	930e      	str	r3, [sp, #56]	; 0x38
 8024c48:	46c8      	mov	r8, r9
 8024c4a:	f1bb 0f00 	cmp.w	fp, #0
 8024c4e:	f300 80b7 	bgt.w	8024dc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8024c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c54:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024c58:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024c5e:	2b00      	cmp	r3, #0
 8024c60:	f340 818d 	ble.w	8024f7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8024c64:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024c6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024c70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024c72:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024c76:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024c7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024c7e:	eef0 6a62 	vmov.f32	s13, s5
 8024c82:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024c86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c8a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024c8e:	ee16 4a90 	vmov	r4, s13
 8024c92:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024c96:	eef0 6a43 	vmov.f32	s13, s6
 8024c9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024c9e:	ee12 2a90 	vmov	r2, s5
 8024ca2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024ca6:	fb92 f3f3 	sdiv	r3, r2, r3
 8024caa:	ee13 2a10 	vmov	r2, s6
 8024cae:	9323      	str	r3, [sp, #140]	; 0x8c
 8024cb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024cb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8024cb6:	9324      	str	r3, [sp, #144]	; 0x90
 8024cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024cba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024cbc:	3b01      	subs	r3, #1
 8024cbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024cc2:	930d      	str	r3, [sp, #52]	; 0x34
 8024cc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024cc6:	bf08      	it	eq
 8024cc8:	4613      	moveq	r3, r2
 8024cca:	ee16 6a90 	vmov	r6, s13
 8024cce:	9309      	str	r3, [sp, #36]	; 0x24
 8024cd0:	eeb0 3a67 	vmov.f32	s6, s15
 8024cd4:	eef0 2a47 	vmov.f32	s5, s14
 8024cd8:	e6c3      	b.n	8024a62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024cda:	2900      	cmp	r1, #0
 8024cdc:	f43f af4d 	beq.w	8024b7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8024ce0:	eb0a 0003 	add.w	r0, sl, r3
 8024ce4:	0843      	lsrs	r3, r0, #1
 8024ce6:	07c0      	lsls	r0, r0, #31
 8024ce8:	5cfb      	ldrb	r3, [r7, r3]
 8024cea:	bf54      	ite	pl
 8024cec:	f003 030f 	andpl.w	r3, r3, #15
 8024cf0:	111b      	asrmi	r3, r3, #4
 8024cf2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024cf6:	b2db      	uxtb	r3, r3
 8024cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8024cfa:	e73e      	b.n	8024b7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8024cfc:	f8b8 e000 	ldrh.w	lr, [r8]
 8024d00:	fa1f fb83 	uxth.w	fp, r3
 8024d04:	ea4f 202e 	mov.w	r0, lr, asr #8
 8024d08:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8024d0c:	43db      	mvns	r3, r3
 8024d0e:	b2db      	uxtb	r3, r3
 8024d10:	fb11 f10b 	smulbb	r1, r1, fp
 8024d14:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024d18:	fb00 1003 	mla	r0, r0, r3, r1
 8024d1c:	fa5f fc8c 	uxtb.w	ip, ip
 8024d20:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8024d24:	b2d2      	uxtb	r2, r2
 8024d26:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024d2a:	b280      	uxth	r0, r0
 8024d2c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024d30:	fb1c fc0b 	smulbb	ip, ip, fp
 8024d34:	fa5f fe8e 	uxtb.w	lr, lr
 8024d38:	fb12 fb0b 	smulbb	fp, r2, fp
 8024d3c:	fb01 cc03 	mla	ip, r1, r3, ip
 8024d40:	fb0e bb03 	mla	fp, lr, r3, fp
 8024d44:	1c43      	adds	r3, r0, #1
 8024d46:	fa1f fc8c 	uxth.w	ip, ip
 8024d4a:	fa1f fb8b 	uxth.w	fp, fp
 8024d4e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024d52:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8024d56:	f10c 0101 	add.w	r1, ip, #1
 8024d5a:	f10b 0001 	add.w	r0, fp, #1
 8024d5e:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024d62:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024d66:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8024d6a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024d6e:	4318      	orrs	r0, r3
 8024d70:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024d74:	ea40 000c 	orr.w	r0, r0, ip
 8024d78:	f8a8 0000 	strh.w	r0, [r8]
 8024d7c:	e734      	b.n	8024be8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8024d7e:	f113 0b01 	adds.w	fp, r3, #1
 8024d82:	f53f af31 	bmi.w	8024be8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8024d86:	45dc      	cmp	ip, fp
 8024d88:	f6ff af2e 	blt.w	8024be8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8024d8c:	f110 0b01 	adds.w	fp, r0, #1
 8024d90:	f53f af2a 	bmi.w	8024be8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8024d94:	45de      	cmp	lr, fp
 8024d96:	f6ff af27 	blt.w	8024be8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8024d9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024d9c:	9302      	str	r3, [sp, #8]
 8024d9e:	fa0f f38e 	sxth.w	r3, lr
 8024da2:	9301      	str	r3, [sp, #4]
 8024da4:	fa0f f38c 	sxth.w	r3, ip
 8024da8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024dac:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8024db0:	9300      	str	r3, [sp, #0]
 8024db2:	463a      	mov	r2, r7
 8024db4:	4653      	mov	r3, sl
 8024db6:	4641      	mov	r1, r8
 8024db8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024dba:	f7ff fd4d 	bl	8024858 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8024dbe:	e713      	b.n	8024be8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8024dc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024dc2:	1422      	asrs	r2, r4, #16
 8024dc4:	1433      	asrs	r3, r6, #16
 8024dc6:	fb05 2303 	mla	r3, r5, r3, r2
 8024dca:	085a      	lsrs	r2, r3, #1
 8024dcc:	07dd      	lsls	r5, r3, #31
 8024dce:	5cba      	ldrb	r2, [r7, r2]
 8024dd0:	bf54      	ite	pl
 8024dd2:	f002 020f 	andpl.w	r2, r2, #15
 8024dd6:	1112      	asrmi	r2, r2, #4
 8024dd8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024ddc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024de0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024de4:	b2d2      	uxtb	r2, r2
 8024de6:	2900      	cmp	r1, #0
 8024de8:	d076      	beq.n	8024ed8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8024dea:	f103 0e01 	add.w	lr, r3, #1
 8024dee:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8024df2:	f01e 0f01 	tst.w	lr, #1
 8024df6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024dfa:	bf0c      	ite	eq
 8024dfc:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024e00:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024e04:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024e08:	fa5f f58c 	uxtb.w	r5, ip
 8024e0c:	9512      	str	r5, [sp, #72]	; 0x48
 8024e0e:	b300      	cbz	r0, 8024e52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024e10:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024e12:	442b      	add	r3, r5
 8024e14:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024e18:	07dd      	lsls	r5, r3, #31
 8024e1a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024e1e:	bf54      	ite	pl
 8024e20:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024e24:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024e28:	3301      	adds	r3, #1
 8024e2a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024e2e:	fa5f f58c 	uxtb.w	r5, ip
 8024e32:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024e36:	950c      	str	r5, [sp, #48]	; 0x30
 8024e38:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024e3c:	07dd      	lsls	r5, r3, #31
 8024e3e:	bf54      	ite	pl
 8024e40:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024e44:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024e48:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024e4c:	fa5f f38c 	uxtb.w	r3, ip
 8024e50:	9313      	str	r3, [sp, #76]	; 0x4c
 8024e52:	b289      	uxth	r1, r1
 8024e54:	b280      	uxth	r0, r0
 8024e56:	fb01 f300 	mul.w	r3, r1, r0
 8024e5a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8024e5e:	0109      	lsls	r1, r1, #4
 8024e60:	b280      	uxth	r0, r0
 8024e62:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8024e66:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024e68:	1ac9      	subs	r1, r1, r3
 8024e6a:	ebac 0c00 	sub.w	ip, ip, r0
 8024e6e:	b289      	uxth	r1, r1
 8024e70:	4369      	muls	r1, r5
 8024e72:	fa1f fc8c 	uxth.w	ip, ip
 8024e76:	fb02 120c 	mla	r2, r2, ip, r1
 8024e7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024e7c:	fb00 2001 	mla	r0, r0, r1, r2
 8024e80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8024e82:	fb03 0302 	mla	r3, r3, r2, r0
 8024e86:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024e8a:	b1d3      	cbz	r3, 8024ec2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8024e8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024e8e:	4353      	muls	r3, r2
 8024e90:	1c5a      	adds	r2, r3, #1
 8024e92:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024e96:	4a0f      	ldr	r2, [pc, #60]	; (8024ed4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8024e98:	121b      	asrs	r3, r3, #8
 8024e9a:	6812      	ldr	r2, [r2, #0]
 8024e9c:	2bff      	cmp	r3, #255	; 0xff
 8024e9e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8024ea2:	d12d      	bne.n	8024f00 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024ea4:	0953      	lsrs	r3, r2, #5
 8024ea6:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8024eaa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024eae:	f02c 0c07 	bic.w	ip, ip, #7
 8024eb2:	ea43 0c0c 	orr.w	ip, r3, ip
 8024eb6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024eba:	ea4c 0202 	orr.w	r2, ip, r2
 8024ebe:	f8a8 2000 	strh.w	r2, [r8]
 8024ec2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024ec4:	441c      	add	r4, r3
 8024ec6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024ec8:	f108 0802 	add.w	r8, r8, #2
 8024ecc:	441e      	add	r6, r3
 8024ece:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024ed2:	e6ba      	b.n	8024c4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8024ed4:	20008818 	.word	0x20008818
 8024ed8:	2800      	cmp	r0, #0
 8024eda:	d0ba      	beq.n	8024e52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024edc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024ede:	442b      	add	r3, r5
 8024ee0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024ee4:	07db      	lsls	r3, r3, #31
 8024ee6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024eea:	bf54      	ite	pl
 8024eec:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024ef0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024ef4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024ef8:	fa5f f38c 	uxtb.w	r3, ip
 8024efc:	930c      	str	r3, [sp, #48]	; 0x30
 8024efe:	e7a8      	b.n	8024e52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024f00:	f8b8 e000 	ldrh.w	lr, [r8]
 8024f04:	fa1f fa83 	uxth.w	sl, r3
 8024f08:	ea4f 202e 	mov.w	r0, lr, asr #8
 8024f0c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8024f10:	43db      	mvns	r3, r3
 8024f12:	b2db      	uxtb	r3, r3
 8024f14:	fb11 f10a 	smulbb	r1, r1, sl
 8024f18:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024f1c:	fb00 1003 	mla	r0, r0, r3, r1
 8024f20:	b2d2      	uxtb	r2, r2
 8024f22:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8024f26:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024f2a:	fa5f fe8e 	uxtb.w	lr, lr
 8024f2e:	fb12 f20a 	smulbb	r2, r2, sl
 8024f32:	fb0e 2203 	mla	r2, lr, r3, r2
 8024f36:	fa5f fc8c 	uxtb.w	ip, ip
 8024f3a:	b280      	uxth	r0, r0
 8024f3c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024f40:	b292      	uxth	r2, r2
 8024f42:	fb1c fc0a 	smulbb	ip, ip, sl
 8024f46:	fb01 cc03 	mla	ip, r1, r3, ip
 8024f4a:	1c43      	adds	r3, r0, #1
 8024f4c:	1c51      	adds	r1, r2, #1
 8024f4e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024f52:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8024f56:	fa1f fc8c 	uxth.w	ip, ip
 8024f5a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024f5e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024f62:	4308      	orrs	r0, r1
 8024f64:	f10c 0101 	add.w	r1, ip, #1
 8024f68:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024f6c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024f70:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024f74:	ea40 000c 	orr.w	r0, r0, ip
 8024f78:	f8a8 0000 	strh.w	r0, [r8]
 8024f7c:	e7a1      	b.n	8024ec2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8024f7e:	b017      	add	sp, #92	; 0x5c
 8024f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024f84 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8024f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024f88:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8024f8c:	2d00      	cmp	r5, #0
 8024f8e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8024f92:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024f96:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8024f9a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8024f9e:	fb05 0e03 	mla	lr, r5, r3, r0
 8024fa2:	f2c0 80b0 	blt.w	8025106 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8024fa6:	45a9      	cmp	r9, r5
 8024fa8:	f340 80ad 	ble.w	8025106 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8024fac:	2800      	cmp	r0, #0
 8024fae:	f2c0 80a8 	blt.w	8025102 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8024fb2:	4580      	cmp	r8, r0
 8024fb4:	f340 80a5 	ble.w	8025102 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8024fb8:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024fbc:	f01e 0f01 	tst.w	lr, #1
 8024fc0:	5d16      	ldrb	r6, [r2, r4]
 8024fc2:	bf0c      	ite	eq
 8024fc4:	f006 060f 	andeq.w	r6, r6, #15
 8024fc8:	1136      	asrne	r6, r6, #4
 8024fca:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024fce:	b2f6      	uxtb	r6, r6
 8024fd0:	1c44      	adds	r4, r0, #1
 8024fd2:	f100 809b 	bmi.w	802510c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8024fd6:	45a0      	cmp	r8, r4
 8024fd8:	f340 8098 	ble.w	802510c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8024fdc:	2f00      	cmp	r7, #0
 8024fde:	f000 8097 	beq.w	8025110 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8024fe2:	f10e 0a01 	add.w	sl, lr, #1
 8024fe6:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8024fea:	f01a 0f01 	tst.w	sl, #1
 8024fee:	5d14      	ldrb	r4, [r2, r4]
 8024ff0:	bf0c      	ite	eq
 8024ff2:	f004 040f 	andeq.w	r4, r4, #15
 8024ff6:	1124      	asrne	r4, r4, #4
 8024ff8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024ffc:	b2e4      	uxtb	r4, r4
 8024ffe:	3501      	adds	r5, #1
 8025000:	f100 808a 	bmi.w	8025118 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8025004:	45a9      	cmp	r9, r5
 8025006:	f340 8087 	ble.w	8025118 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802500a:	f1bc 0f00 	cmp.w	ip, #0
 802500e:	f000 8086 	beq.w	802511e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8025012:	2800      	cmp	r0, #0
 8025014:	db7e      	blt.n	8025114 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8025016:	4580      	cmp	r8, r0
 8025018:	dd7c      	ble.n	8025114 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802501a:	eb03 090e 	add.w	r9, r3, lr
 802501e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8025022:	f019 0f01 	tst.w	r9, #1
 8025026:	5d55      	ldrb	r5, [r2, r5]
 8025028:	bf0c      	ite	eq
 802502a:	f005 050f 	andeq.w	r5, r5, #15
 802502e:	112d      	asrne	r5, r5, #4
 8025030:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8025034:	b2ed      	uxtb	r5, r5
 8025036:	3001      	adds	r0, #1
 8025038:	d474      	bmi.n	8025124 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802503a:	4580      	cmp	r8, r0
 802503c:	dd72      	ble.n	8025124 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802503e:	2f00      	cmp	r7, #0
 8025040:	d072      	beq.n	8025128 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8025042:	3301      	adds	r3, #1
 8025044:	449e      	add	lr, r3
 8025046:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802504a:	f01e 0f01 	tst.w	lr, #1
 802504e:	5cd0      	ldrb	r0, [r2, r3]
 8025050:	bf0c      	ite	eq
 8025052:	f000 000f 	andeq.w	r0, r0, #15
 8025056:	1100      	asrne	r0, r0, #4
 8025058:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802505c:	b2c3      	uxtb	r3, r0
 802505e:	b2ba      	uxth	r2, r7
 8025060:	fa1f fc8c 	uxth.w	ip, ip
 8025064:	fb02 f00c 	mul.w	r0, r2, ip
 8025068:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802506c:	0112      	lsls	r2, r2, #4
 802506e:	fa1f fc8c 	uxth.w	ip, ip
 8025072:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8025076:	1a12      	subs	r2, r2, r0
 8025078:	eba7 070c 	sub.w	r7, r7, ip
 802507c:	b292      	uxth	r2, r2
 802507e:	b2bf      	uxth	r7, r7
 8025080:	4362      	muls	r2, r4
 8025082:	fb06 2207 	mla	r2, r6, r7, r2
 8025086:	fb0c 2505 	mla	r5, ip, r5, r2
 802508a:	fb00 5303 	mla	r3, r0, r3, r5
 802508e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025092:	b3a3      	cbz	r3, 80250fe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8025094:	4a25      	ldr	r2, [pc, #148]	; (802512c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8025096:	880e      	ldrh	r6, [r1, #0]
 8025098:	6815      	ldr	r5, [r2, #0]
 802509a:	1234      	asrs	r4, r6, #8
 802509c:	b29a      	uxth	r2, r3
 802509e:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80250a2:	43db      	mvns	r3, r3
 80250a4:	b2db      	uxtb	r3, r3
 80250a6:	fb10 f002 	smulbb	r0, r0, r2
 80250aa:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80250ae:	fb04 0403 	mla	r4, r4, r3, r0
 80250b2:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80250b6:	10f0      	asrs	r0, r6, #3
 80250b8:	b2ed      	uxtb	r5, r5
 80250ba:	00f6      	lsls	r6, r6, #3
 80250bc:	fb17 f702 	smulbb	r7, r7, r2
 80250c0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80250c4:	fb15 f202 	smulbb	r2, r5, r2
 80250c8:	b2f6      	uxtb	r6, r6
 80250ca:	b2a4      	uxth	r4, r4
 80250cc:	fb00 7003 	mla	r0, r0, r3, r7
 80250d0:	fb06 2303 	mla	r3, r6, r3, r2
 80250d4:	b29a      	uxth	r2, r3
 80250d6:	1c63      	adds	r3, r4, #1
 80250d8:	b280      	uxth	r0, r0
 80250da:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80250de:	1c53      	adds	r3, r2, #1
 80250e0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80250e4:	1c42      	adds	r2, r0, #1
 80250e6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80250ea:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80250ee:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80250f2:	0940      	lsrs	r0, r0, #5
 80250f4:	4323      	orrs	r3, r4
 80250f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80250fa:	4303      	orrs	r3, r0
 80250fc:	800b      	strh	r3, [r1, #0]
 80250fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025102:	2600      	movs	r6, #0
 8025104:	e764      	b.n	8024fd0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8025106:	2400      	movs	r4, #0
 8025108:	4626      	mov	r6, r4
 802510a:	e778      	b.n	8024ffe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802510c:	2400      	movs	r4, #0
 802510e:	e776      	b.n	8024ffe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8025110:	463c      	mov	r4, r7
 8025112:	e774      	b.n	8024ffe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8025114:	2500      	movs	r5, #0
 8025116:	e78e      	b.n	8025036 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8025118:	2300      	movs	r3, #0
 802511a:	461d      	mov	r5, r3
 802511c:	e79f      	b.n	802505e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802511e:	4663      	mov	r3, ip
 8025120:	4665      	mov	r5, ip
 8025122:	e79c      	b.n	802505e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8025124:	2300      	movs	r3, #0
 8025126:	e79a      	b.n	802505e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8025128:	463b      	mov	r3, r7
 802512a:	e798      	b.n	802505e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802512c:	20008818 	.word	0x20008818

08025130 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025134:	b093      	sub	sp, #76	; 0x4c
 8025136:	461d      	mov	r5, r3
 8025138:	920c      	str	r2, [sp, #48]	; 0x30
 802513a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802513c:	9107      	str	r1, [sp, #28]
 802513e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8025142:	9011      	str	r0, [sp, #68]	; 0x44
 8025144:	6850      	ldr	r0, [r2, #4]
 8025146:	6812      	ldr	r2, [r2, #0]
 8025148:	fb00 1303 	mla	r3, r0, r3, r1
 802514c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8025150:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025152:	689b      	ldr	r3, [r3, #8]
 8025154:	3301      	adds	r3, #1
 8025156:	f023 0301 	bic.w	r3, r3, #1
 802515a:	9306      	str	r3, [sp, #24]
 802515c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802515e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8025162:	681f      	ldr	r7, [r3, #0]
 8025164:	9b07      	ldr	r3, [sp, #28]
 8025166:	2b00      	cmp	r3, #0
 8025168:	dc03      	bgt.n	8025172 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802516a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802516c:	2b00      	cmp	r3, #0
 802516e:	f340 8267 	ble.w	8025640 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8025172:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025174:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025178:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802517c:	1e48      	subs	r0, r1, #1
 802517e:	f102 3cff 	add.w	ip, r2, #4294967295
 8025182:	2d00      	cmp	r5, #0
 8025184:	f340 80b8 	ble.w	80252f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8025188:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802518c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025190:	d406      	bmi.n	80251a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025192:	4586      	cmp	lr, r0
 8025194:	da04      	bge.n	80251a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025196:	2b00      	cmp	r3, #0
 8025198:	db02      	blt.n	80251a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802519a:	4563      	cmp	r3, ip
 802519c:	f2c0 80ad 	blt.w	80252fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80251a0:	f11e 0e01 	adds.w	lr, lr, #1
 80251a4:	f100 80a0 	bmi.w	80252e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 80251a8:	4571      	cmp	r1, lr
 80251aa:	f2c0 809d 	blt.w	80252e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 80251ae:	3301      	adds	r3, #1
 80251b0:	f100 809a 	bmi.w	80252e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 80251b4:	429a      	cmp	r2, r3
 80251b6:	f2c0 8097 	blt.w	80252e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 80251ba:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 80251be:	9509      	str	r5, [sp, #36]	; 0x24
 80251c0:	46c8      	mov	r8, r9
 80251c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80251c4:	2b00      	cmp	r3, #0
 80251c6:	f340 80b6 	ble.w	8025336 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80251ca:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80251ce:	9308      	str	r3, [sp, #32]
 80251d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80251d2:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80251d6:	1423      	asrs	r3, r4, #16
 80251d8:	ea4f 4026 	mov.w	r0, r6, asr #16
 80251dc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80251e0:	f100 813e 	bmi.w	8025460 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80251e4:	f10c 3bff 	add.w	fp, ip, #4294967295
 80251e8:	455b      	cmp	r3, fp
 80251ea:	f280 8139 	bge.w	8025460 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80251ee:	2800      	cmp	r0, #0
 80251f0:	f2c0 8136 	blt.w	8025460 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80251f4:	f10e 3bff 	add.w	fp, lr, #4294967295
 80251f8:	4558      	cmp	r0, fp
 80251fa:	f280 8131 	bge.w	8025460 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80251fe:	9a06      	ldr	r2, [sp, #24]
 8025200:	fb00 3302 	mla	r3, r0, r2, r3
 8025204:	0858      	lsrs	r0, r3, #1
 8025206:	07da      	lsls	r2, r3, #31
 8025208:	f817 c000 	ldrb.w	ip, [r7, r0]
 802520c:	9a08      	ldr	r2, [sp, #32]
 802520e:	bf54      	ite	pl
 8025210:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025214:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025218:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802521c:	fa5f fc8c 	uxtb.w	ip, ip
 8025220:	2a00      	cmp	r2, #0
 8025222:	f000 80cb 	beq.w	80253bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8025226:	1c58      	adds	r0, r3, #1
 8025228:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802522c:	07c0      	lsls	r0, r0, #31
 802522e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8025232:	bf54      	ite	pl
 8025234:	f00e 0e0f 	andpl.w	lr, lr, #15
 8025238:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802523c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8025240:	fa5f fe8e 	uxtb.w	lr, lr
 8025244:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8025248:	b1b9      	cbz	r1, 802527a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802524a:	4453      	add	r3, sl
 802524c:	0858      	lsrs	r0, r3, #1
 802524e:	07da      	lsls	r2, r3, #31
 8025250:	5c38      	ldrb	r0, [r7, r0]
 8025252:	bf54      	ite	pl
 8025254:	f000 000f 	andpl.w	r0, r0, #15
 8025258:	1100      	asrmi	r0, r0, #4
 802525a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802525e:	b2c0      	uxtb	r0, r0
 8025260:	900a      	str	r0, [sp, #40]	; 0x28
 8025262:	1c58      	adds	r0, r3, #1
 8025264:	0843      	lsrs	r3, r0, #1
 8025266:	07c2      	lsls	r2, r0, #31
 8025268:	5cfb      	ldrb	r3, [r7, r3]
 802526a:	bf54      	ite	pl
 802526c:	f003 030f 	andpl.w	r3, r3, #15
 8025270:	111b      	asrmi	r3, r3, #4
 8025272:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025276:	b2db      	uxtb	r3, r3
 8025278:	930e      	str	r3, [sp, #56]	; 0x38
 802527a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802527e:	b289      	uxth	r1, r1
 8025280:	fb02 f301 	mul.w	r3, r2, r1
 8025284:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025288:	0112      	lsls	r2, r2, #4
 802528a:	b289      	uxth	r1, r1
 802528c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8025290:	1a40      	subs	r0, r0, r1
 8025292:	fa1f fe80 	uxth.w	lr, r0
 8025296:	1ad2      	subs	r2, r2, r3
 8025298:	980d      	ldr	r0, [sp, #52]	; 0x34
 802529a:	b292      	uxth	r2, r2
 802529c:	4342      	muls	r2, r0
 802529e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80252a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80252a4:	fb01 c102 	mla	r1, r1, r2, ip
 80252a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80252aa:	fb03 1302 	mla	r3, r3, r2, r1
 80252ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80252b2:	2bff      	cmp	r3, #255	; 0xff
 80252b4:	f040 8093 	bne.w	80253de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80252b8:	4bbe      	ldr	r3, [pc, #760]	; (80255b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80252ba:	681a      	ldr	r2, [r3, #0]
 80252bc:	4bbe      	ldr	r3, [pc, #760]	; (80255b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 80252be:	0951      	lsrs	r1, r2, #5
 80252c0:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80252c4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80252c8:	430b      	orrs	r3, r1
 80252ca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80252ce:	4313      	orrs	r3, r2
 80252d0:	f8a8 3000 	strh.w	r3, [r8]
 80252d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80252d6:	441c      	add	r4, r3
 80252d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80252da:	441e      	add	r6, r3
 80252dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80252de:	3b01      	subs	r3, #1
 80252e0:	f108 0802 	add.w	r8, r8, #2
 80252e4:	9309      	str	r3, [sp, #36]	; 0x24
 80252e6:	e76c      	b.n	80251c2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80252e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80252ea:	441c      	add	r4, r3
 80252ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80252ee:	3d01      	subs	r5, #1
 80252f0:	441e      	add	r6, r3
 80252f2:	f109 0902 	add.w	r9, r9, #2
 80252f6:	e744      	b.n	8025182 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80252f8:	d021      	beq.n	802533e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80252fa:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80252fc:	1e6b      	subs	r3, r5, #1
 80252fe:	fb00 4003 	mla	r0, r0, r3, r4
 8025302:	1400      	asrs	r0, r0, #16
 8025304:	f53f af59 	bmi.w	80251ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025308:	3901      	subs	r1, #1
 802530a:	4288      	cmp	r0, r1
 802530c:	f6bf af55 	bge.w	80251ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025310:	9920      	ldr	r1, [sp, #128]	; 0x80
 8025312:	fb01 6303 	mla	r3, r1, r3, r6
 8025316:	141b      	asrs	r3, r3, #16
 8025318:	f53f af4f 	bmi.w	80251ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802531c:	3a01      	subs	r2, #1
 802531e:	4293      	cmp	r3, r2
 8025320:	f6bf af4b 	bge.w	80251ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025324:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8025328:	9308      	str	r3, [sp, #32]
 802532a:	46a8      	mov	r8, r5
 802532c:	46ce      	mov	lr, r9
 802532e:	f1b8 0f00 	cmp.w	r8, #0
 8025332:	f300 80b5 	bgt.w	80254a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025336:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802533a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802533e:	9b07      	ldr	r3, [sp, #28]
 8025340:	2b00      	cmp	r3, #0
 8025342:	f340 817d 	ble.w	8025640 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8025346:	ee30 0a04 	vadd.f32	s0, s0, s8
 802534a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802534e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025352:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025354:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025358:	ee31 1a05 	vadd.f32	s2, s2, s10
 802535c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025360:	eef0 6a62 	vmov.f32	s13, s5
 8025364:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025368:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802536c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025370:	ee16 4a90 	vmov	r4, s13
 8025374:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025378:	eef0 6a43 	vmov.f32	s13, s6
 802537c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025380:	ee12 2a90 	vmov	r2, s5
 8025384:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025388:	fb92 f3f3 	sdiv	r3, r2, r3
 802538c:	ee13 2a10 	vmov	r2, s6
 8025390:	931f      	str	r3, [sp, #124]	; 0x7c
 8025392:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025394:	fb92 f3f3 	sdiv	r3, r2, r3
 8025398:	9320      	str	r3, [sp, #128]	; 0x80
 802539a:	9b07      	ldr	r3, [sp, #28]
 802539c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802539e:	3b01      	subs	r3, #1
 80253a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80253a4:	9307      	str	r3, [sp, #28]
 80253a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80253a8:	ee16 6a90 	vmov	r6, s13
 80253ac:	bf14      	ite	ne
 80253ae:	461d      	movne	r5, r3
 80253b0:	4615      	moveq	r5, r2
 80253b2:	eeb0 3a67 	vmov.f32	s6, s15
 80253b6:	eef0 2a47 	vmov.f32	s5, s14
 80253ba:	e6d3      	b.n	8025164 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80253bc:	2900      	cmp	r1, #0
 80253be:	f43f af5c 	beq.w	802527a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80253c2:	eb0a 0003 	add.w	r0, sl, r3
 80253c6:	0843      	lsrs	r3, r0, #1
 80253c8:	07c0      	lsls	r0, r0, #31
 80253ca:	5cfb      	ldrb	r3, [r7, r3]
 80253cc:	bf54      	ite	pl
 80253ce:	f003 030f 	andpl.w	r3, r3, #15
 80253d2:	111b      	asrmi	r3, r3, #4
 80253d4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80253d8:	b2db      	uxtb	r3, r3
 80253da:	930a      	str	r3, [sp, #40]	; 0x28
 80253dc:	e74d      	b.n	802527a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80253de:	2b00      	cmp	r3, #0
 80253e0:	f43f af78 	beq.w	80252d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80253e4:	4a73      	ldr	r2, [pc, #460]	; (80255b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80253e6:	f8b8 c000 	ldrh.w	ip, [r8]
 80253ea:	6810      	ldr	r0, [r2, #0]
 80253ec:	fa1f fe83 	uxth.w	lr, r3
 80253f0:	ea4f 212c 	mov.w	r1, ip, asr #8
 80253f4:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80253f8:	43db      	mvns	r3, r3
 80253fa:	b2db      	uxtb	r3, r3
 80253fc:	fb12 f20e 	smulbb	r2, r2, lr
 8025400:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025404:	fb01 2103 	mla	r1, r1, r3, r2
 8025408:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802540c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025410:	b2c0      	uxtb	r0, r0
 8025412:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025416:	fb1b fb0e 	smulbb	fp, fp, lr
 802541a:	b289      	uxth	r1, r1
 802541c:	fb10 fe0e 	smulbb	lr, r0, lr
 8025420:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025424:	fa5f fc8c 	uxtb.w	ip, ip
 8025428:	fb02 b203 	mla	r2, r2, r3, fp
 802542c:	1c48      	adds	r0, r1, #1
 802542e:	fb0c e303 	mla	r3, ip, r3, lr
 8025432:	b292      	uxth	r2, r2
 8025434:	b29b      	uxth	r3, r3
 8025436:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802543a:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802543e:	f102 0b01 	add.w	fp, r2, #1
 8025442:	1c59      	adds	r1, r3, #1
 8025444:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025448:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802544c:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8025450:	0952      	lsrs	r2, r2, #5
 8025452:	4301      	orrs	r1, r0
 8025454:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025458:	4311      	orrs	r1, r2
 802545a:	f8a8 1000 	strh.w	r1, [r8]
 802545e:	e739      	b.n	80252d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025460:	f113 0b01 	adds.w	fp, r3, #1
 8025464:	f53f af36 	bmi.w	80252d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025468:	45dc      	cmp	ip, fp
 802546a:	f6ff af33 	blt.w	80252d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802546e:	f110 0b01 	adds.w	fp, r0, #1
 8025472:	f53f af2f 	bmi.w	80252d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025476:	45de      	cmp	lr, fp
 8025478:	f6ff af2c 	blt.w	80252d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802547c:	9a08      	ldr	r2, [sp, #32]
 802547e:	9302      	str	r3, [sp, #8]
 8025480:	fa0f f38e 	sxth.w	r3, lr
 8025484:	9301      	str	r3, [sp, #4]
 8025486:	fa0f f38c 	sxth.w	r3, ip
 802548a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802548e:	9105      	str	r1, [sp, #20]
 8025490:	9300      	str	r3, [sp, #0]
 8025492:	463a      	mov	r2, r7
 8025494:	4653      	mov	r3, sl
 8025496:	4641      	mov	r1, r8
 8025498:	9811      	ldr	r0, [sp, #68]	; 0x44
 802549a:	f7ff fd73 	bl	8024f84 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802549e:	e719      	b.n	80252d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80254a0:	9906      	ldr	r1, [sp, #24]
 80254a2:	1422      	asrs	r2, r4, #16
 80254a4:	1433      	asrs	r3, r6, #16
 80254a6:	fb01 2303 	mla	r3, r1, r3, r2
 80254aa:	085a      	lsrs	r2, r3, #1
 80254ac:	07d9      	lsls	r1, r3, #31
 80254ae:	5cba      	ldrb	r2, [r7, r2]
 80254b0:	bf54      	ite	pl
 80254b2:	f002 020f 	andpl.w	r2, r2, #15
 80254b6:	1112      	asrmi	r2, r2, #4
 80254b8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80254bc:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80254c0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80254c4:	b2d2      	uxtb	r2, r2
 80254c6:	2800      	cmp	r0, #0
 80254c8:	d062      	beq.n	8025590 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 80254ca:	f103 0a01 	add.w	sl, r3, #1
 80254ce:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80254d2:	f01a 0f01 	tst.w	sl, #1
 80254d6:	5c79      	ldrb	r1, [r7, r1]
 80254d8:	bf0c      	ite	eq
 80254da:	f001 010f 	andeq.w	r1, r1, #15
 80254de:	1109      	asrne	r1, r1, #4
 80254e0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80254e4:	b2c9      	uxtb	r1, r1
 80254e6:	910f      	str	r1, [sp, #60]	; 0x3c
 80254e8:	f1bc 0f00 	cmp.w	ip, #0
 80254ec:	d019      	beq.n	8025522 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80254ee:	9908      	ldr	r1, [sp, #32]
 80254f0:	440b      	add	r3, r1
 80254f2:	0859      	lsrs	r1, r3, #1
 80254f4:	f013 0f01 	tst.w	r3, #1
 80254f8:	5c79      	ldrb	r1, [r7, r1]
 80254fa:	bf0c      	ite	eq
 80254fc:	f001 010f 	andeq.w	r1, r1, #15
 8025500:	1109      	asrne	r1, r1, #4
 8025502:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025506:	b2c9      	uxtb	r1, r1
 8025508:	3301      	adds	r3, #1
 802550a:	910b      	str	r1, [sp, #44]	; 0x2c
 802550c:	0859      	lsrs	r1, r3, #1
 802550e:	07db      	lsls	r3, r3, #31
 8025510:	5c79      	ldrb	r1, [r7, r1]
 8025512:	bf54      	ite	pl
 8025514:	f001 010f 	andpl.w	r1, r1, #15
 8025518:	1109      	asrmi	r1, r1, #4
 802551a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802551e:	b2c9      	uxtb	r1, r1
 8025520:	9110      	str	r1, [sp, #64]	; 0x40
 8025522:	b280      	uxth	r0, r0
 8025524:	fa1f fc8c 	uxth.w	ip, ip
 8025528:	fb00 f30c 	mul.w	r3, r0, ip
 802552c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8025530:	0100      	lsls	r0, r0, #4
 8025532:	fa1f fc8c 	uxth.w	ip, ip
 8025536:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802553a:	eba1 010c 	sub.w	r1, r1, ip
 802553e:	fa1f fa81 	uxth.w	sl, r1
 8025542:	1ac0      	subs	r0, r0, r3
 8025544:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025546:	b280      	uxth	r0, r0
 8025548:	4348      	muls	r0, r1
 802554a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802554c:	fb02 020a 	mla	r2, r2, sl, r0
 8025550:	fb0c 2c01 	mla	ip, ip, r1, r2
 8025554:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025556:	fb03 c302 	mla	r3, r3, r2, ip
 802555a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802555e:	2bff      	cmp	r3, #255	; 0xff
 8025560:	d12c      	bne.n	80255bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025562:	4b14      	ldr	r3, [pc, #80]	; (80255b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8025564:	681a      	ldr	r2, [r3, #0]
 8025566:	4b14      	ldr	r3, [pc, #80]	; (80255b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8025568:	0951      	lsrs	r1, r2, #5
 802556a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802556e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025572:	430b      	orrs	r3, r1
 8025574:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025578:	4313      	orrs	r3, r2
 802557a:	f8ae 3000 	strh.w	r3, [lr]
 802557e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025580:	441c      	add	r4, r3
 8025582:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025584:	f10e 0e02 	add.w	lr, lr, #2
 8025588:	441e      	add	r6, r3
 802558a:	f108 38ff 	add.w	r8, r8, #4294967295
 802558e:	e6ce      	b.n	802532e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8025590:	f1bc 0f00 	cmp.w	ip, #0
 8025594:	d0c5      	beq.n	8025522 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8025596:	9908      	ldr	r1, [sp, #32]
 8025598:	440b      	add	r3, r1
 802559a:	0859      	lsrs	r1, r3, #1
 802559c:	07db      	lsls	r3, r3, #31
 802559e:	5c79      	ldrb	r1, [r7, r1]
 80255a0:	bf54      	ite	pl
 80255a2:	f001 010f 	andpl.w	r1, r1, #15
 80255a6:	1109      	asrmi	r1, r1, #4
 80255a8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80255ac:	b2c9      	uxtb	r1, r1
 80255ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80255b0:	e7b7      	b.n	8025522 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80255b2:	bf00      	nop
 80255b4:	20008818 	.word	0x20008818
 80255b8:	fffff800 	.word	0xfffff800
 80255bc:	2b00      	cmp	r3, #0
 80255be:	d0de      	beq.n	802557e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80255c0:	4a21      	ldr	r2, [pc, #132]	; (8025648 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 80255c2:	f8be c000 	ldrh.w	ip, [lr]
 80255c6:	6810      	ldr	r0, [r2, #0]
 80255c8:	fa1f fa83 	uxth.w	sl, r3
 80255cc:	ea4f 212c 	mov.w	r1, ip, asr #8
 80255d0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80255d4:	43db      	mvns	r3, r3
 80255d6:	b2db      	uxtb	r3, r3
 80255d8:	fb12 f20a 	smulbb	r2, r2, sl
 80255dc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80255e0:	fb01 2103 	mla	r1, r1, r3, r2
 80255e4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80255e8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80255ec:	b2c0      	uxtb	r0, r0
 80255ee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80255f2:	fa5f fc8c 	uxtb.w	ip, ip
 80255f6:	fb10 f00a 	smulbb	r0, r0, sl
 80255fa:	fb0c 0003 	mla	r0, ip, r3, r0
 80255fe:	b289      	uxth	r1, r1
 8025600:	fb1b fb0a 	smulbb	fp, fp, sl
 8025604:	b280      	uxth	r0, r0
 8025606:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802560a:	fb02 b203 	mla	r2, r2, r3, fp
 802560e:	1c4b      	adds	r3, r1, #1
 8025610:	f100 0b01 	add.w	fp, r0, #1
 8025614:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025618:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802561c:	b292      	uxth	r2, r2
 802561e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8025622:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8025626:	ea4b 0101 	orr.w	r1, fp, r1
 802562a:	f102 0b01 	add.w	fp, r2, #1
 802562e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8025632:	0952      	lsrs	r2, r2, #5
 8025634:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025638:	4311      	orrs	r1, r2
 802563a:	f8ae 1000 	strh.w	r1, [lr]
 802563e:	e79e      	b.n	802557e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8025640:	b013      	add	sp, #76	; 0x4c
 8025642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025646:	bf00      	nop
 8025648:	20008818 	.word	0x20008818

0802564c <CRC_Lock>:
 802564c:	b530      	push	{r4, r5, lr}
 802564e:	4a20      	ldr	r2, [pc, #128]	; (80256d0 <CRC_Lock+0x84>)
 8025650:	6813      	ldr	r3, [r2, #0]
 8025652:	f023 0301 	bic.w	r3, r3, #1
 8025656:	6013      	str	r3, [r2, #0]
 8025658:	4b1e      	ldr	r3, [pc, #120]	; (80256d4 <CRC_Lock+0x88>)
 802565a:	681a      	ldr	r2, [r3, #0]
 802565c:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8025660:	4022      	ands	r2, r4
 8025662:	f24c 2540 	movw	r5, #49728	; 0xc240
 8025666:	42aa      	cmp	r2, r5
 8025668:	d005      	beq.n	8025676 <CRC_Lock+0x2a>
 802566a:	681b      	ldr	r3, [r3, #0]
 802566c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8025670:	4023      	ands	r3, r4
 8025672:	4293      	cmp	r3, r2
 8025674:	d124      	bne.n	80256c0 <CRC_Lock+0x74>
 8025676:	4b18      	ldr	r3, [pc, #96]	; (80256d8 <CRC_Lock+0x8c>)
 8025678:	681b      	ldr	r3, [r3, #0]
 802567a:	bb0b      	cbnz	r3, 80256c0 <CRC_Lock+0x74>
 802567c:	4b17      	ldr	r3, [pc, #92]	; (80256dc <CRC_Lock+0x90>)
 802567e:	681a      	ldr	r2, [r3, #0]
 8025680:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025684:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8025688:	d00d      	beq.n	80256a6 <CRC_Lock+0x5a>
 802568a:	681a      	ldr	r2, [r3, #0]
 802568c:	f240 4483 	movw	r4, #1155	; 0x483
 8025690:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025694:	42a2      	cmp	r2, r4
 8025696:	d006      	beq.n	80256a6 <CRC_Lock+0x5a>
 8025698:	681b      	ldr	r3, [r3, #0]
 802569a:	f240 4285 	movw	r2, #1157	; 0x485
 802569e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80256a2:	4293      	cmp	r3, r2
 80256a4:	d10c      	bne.n	80256c0 <CRC_Lock+0x74>
 80256a6:	4b0e      	ldr	r3, [pc, #56]	; (80256e0 <CRC_Lock+0x94>)
 80256a8:	2201      	movs	r2, #1
 80256aa:	601a      	str	r2, [r3, #0]
 80256ac:	681a      	ldr	r2, [r3, #0]
 80256ae:	2a00      	cmp	r2, #0
 80256b0:	d1fc      	bne.n	80256ac <CRC_Lock+0x60>
 80256b2:	4b0c      	ldr	r3, [pc, #48]	; (80256e4 <CRC_Lock+0x98>)
 80256b4:	6018      	str	r0, [r3, #0]
 80256b6:	6818      	ldr	r0, [r3, #0]
 80256b8:	1a43      	subs	r3, r0, r1
 80256ba:	4258      	negs	r0, r3
 80256bc:	4158      	adcs	r0, r3
 80256be:	bd30      	pop	{r4, r5, pc}
 80256c0:	4b09      	ldr	r3, [pc, #36]	; (80256e8 <CRC_Lock+0x9c>)
 80256c2:	2201      	movs	r2, #1
 80256c4:	601a      	str	r2, [r3, #0]
 80256c6:	681a      	ldr	r2, [r3, #0]
 80256c8:	2a00      	cmp	r2, #0
 80256ca:	d1fc      	bne.n	80256c6 <CRC_Lock+0x7a>
 80256cc:	4b07      	ldr	r3, [pc, #28]	; (80256ec <CRC_Lock+0xa0>)
 80256ce:	e7f1      	b.n	80256b4 <CRC_Lock+0x68>
 80256d0:	e0002000 	.word	0xe0002000
 80256d4:	e000ed00 	.word	0xe000ed00
 80256d8:	e0042000 	.word	0xe0042000
 80256dc:	5c001000 	.word	0x5c001000
 80256e0:	58024c08 	.word	0x58024c08
 80256e4:	58024c00 	.word	0x58024c00
 80256e8:	40023008 	.word	0x40023008
 80256ec:	40023000 	.word	0x40023000

080256f0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80256f0:	6101      	str	r1, [r0, #16]
 80256f2:	4770      	bx	lr

080256f4 <_ZN8touchgfx8Gestures4tickEv>:
 80256f4:	7b83      	ldrb	r3, [r0, #14]
 80256f6:	b14b      	cbz	r3, 802570c <_ZN8touchgfx8Gestures4tickEv+0x18>
 80256f8:	8903      	ldrh	r3, [r0, #8]
 80256fa:	3301      	adds	r3, #1
 80256fc:	b29b      	uxth	r3, r3
 80256fe:	2b07      	cmp	r3, #7
 8025700:	8103      	strh	r3, [r0, #8]
 8025702:	bf81      	itttt	hi
 8025704:	2300      	movhi	r3, #0
 8025706:	8143      	strhhi	r3, [r0, #10]
 8025708:	8183      	strhhi	r3, [r0, #12]
 802570a:	7383      	strbhi	r3, [r0, #14]
 802570c:	4770      	bx	lr
	...

08025710 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8025710:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8025714:	4698      	mov	r8, r3
 8025716:	8883      	ldrh	r3, [r0, #4]
 8025718:	f8ad 3006 	strh.w	r3, [sp, #6]
 802571c:	eba8 0303 	sub.w	r3, r8, r3
 8025720:	b21b      	sxth	r3, r3
 8025722:	4604      	mov	r4, r0
 8025724:	2b00      	cmp	r3, #0
 8025726:	4617      	mov	r7, r2
 8025728:	4a18      	ldr	r2, [pc, #96]	; (802578c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802572a:	9200      	str	r2, [sp, #0]
 802572c:	bfb8      	it	lt
 802572e:	425b      	neglt	r3, r3
 8025730:	8aa2      	ldrh	r2, [r4, #20]
 8025732:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8025736:	f8ad 800a 	strh.w	r8, [sp, #10]
 802573a:	b21b      	sxth	r3, r3
 802573c:	460e      	mov	r6, r1
 802573e:	4293      	cmp	r3, r2
 8025740:	88c1      	ldrh	r1, [r0, #6]
 8025742:	f8ad 1008 	strh.w	r1, [sp, #8]
 8025746:	f04f 0000 	mov.w	r0, #0
 802574a:	f88d 0004 	strb.w	r0, [sp, #4]
 802574e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8025752:	dc07      	bgt.n	8025764 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 8025754:	1a69      	subs	r1, r5, r1
 8025756:	b209      	sxth	r1, r1
 8025758:	2900      	cmp	r1, #0
 802575a:	bfb8      	it	lt
 802575c:	4249      	neglt	r1, r1
 802575e:	b209      	sxth	r1, r1
 8025760:	428a      	cmp	r2, r1
 8025762:	da10      	bge.n	8025786 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 8025764:	6920      	ldr	r0, [r4, #16]
 8025766:	6803      	ldr	r3, [r0, #0]
 8025768:	4669      	mov	r1, sp
 802576a:	685b      	ldr	r3, [r3, #4]
 802576c:	4798      	blx	r3
 802576e:	eba8 0606 	sub.w	r6, r8, r6
 8025772:	2300      	movs	r3, #0
 8025774:	1bef      	subs	r7, r5, r7
 8025776:	2001      	movs	r0, #1
 8025778:	8123      	strh	r3, [r4, #8]
 802577a:	8166      	strh	r6, [r4, #10]
 802577c:	81a7      	strh	r7, [r4, #12]
 802577e:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025782:	80e5      	strh	r5, [r4, #6]
 8025784:	73a0      	strb	r0, [r4, #14]
 8025786:	b004      	add	sp, #16
 8025788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802578c:	0802b03c 	.word	0x0802b03c

08025790 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8025790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025792:	461e      	mov	r6, r3
 8025794:	1e4b      	subs	r3, r1, #1
 8025796:	2b01      	cmp	r3, #1
 8025798:	b085      	sub	sp, #20
 802579a:	4604      	mov	r4, r0
 802579c:	460d      	mov	r5, r1
 802579e:	4617      	mov	r7, r2
 80257a0:	d84b      	bhi.n	802583a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80257a2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80257a6:	1cd3      	adds	r3, r2, #3
 80257a8:	b29b      	uxth	r3, r3
 80257aa:	2b06      	cmp	r3, #6
 80257ac:	d916      	bls.n	80257dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80257ae:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8025850 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80257b2:	f8cd c004 	str.w	ip, [sp, #4]
 80257b6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80257ba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80257be:	6900      	ldr	r0, [r0, #16]
 80257c0:	f8ad 100c 	strh.w	r1, [sp, #12]
 80257c4:	f04f 0c00 	mov.w	ip, #0
 80257c8:	f88d c008 	strb.w	ip, [sp, #8]
 80257cc:	f8ad 200a 	strh.w	r2, [sp, #10]
 80257d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80257d4:	6803      	ldr	r3, [r0, #0]
 80257d6:	a901      	add	r1, sp, #4
 80257d8:	689b      	ldr	r3, [r3, #8]
 80257da:	4798      	blx	r3
 80257dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80257e0:	1cd3      	adds	r3, r2, #3
 80257e2:	b29b      	uxth	r3, r3
 80257e4:	2b06      	cmp	r3, #6
 80257e6:	d916      	bls.n	8025816 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80257e8:	f8df c064 	ldr.w	ip, [pc, #100]	; 8025850 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80257ec:	f8cd c004 	str.w	ip, [sp, #4]
 80257f0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80257f4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80257f8:	6920      	ldr	r0, [r4, #16]
 80257fa:	f8ad 100c 	strh.w	r1, [sp, #12]
 80257fe:	f04f 0c01 	mov.w	ip, #1
 8025802:	f88d c008 	strb.w	ip, [sp, #8]
 8025806:	f8ad 200a 	strh.w	r2, [sp, #10]
 802580a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802580e:	6803      	ldr	r3, [r0, #0]
 8025810:	a901      	add	r1, sp, #4
 8025812:	689b      	ldr	r3, [r3, #8]
 8025814:	4798      	blx	r3
 8025816:	4b0d      	ldr	r3, [pc, #52]	; (802584c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8025818:	9301      	str	r3, [sp, #4]
 802581a:	6920      	ldr	r0, [r4, #16]
 802581c:	f88d 5008 	strb.w	r5, [sp, #8]
 8025820:	2300      	movs	r3, #0
 8025822:	f8ad 700a 	strh.w	r7, [sp, #10]
 8025826:	f8ad 600c 	strh.w	r6, [sp, #12]
 802582a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802582e:	6803      	ldr	r3, [r0, #0]
 8025830:	a901      	add	r1, sp, #4
 8025832:	681b      	ldr	r3, [r3, #0]
 8025834:	4798      	blx	r3
 8025836:	b005      	add	sp, #20
 8025838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802583a:	2900      	cmp	r1, #0
 802583c:	d1eb      	bne.n	8025816 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802583e:	80a2      	strh	r2, [r4, #4]
 8025840:	80c6      	strh	r6, [r0, #6]
 8025842:	60a1      	str	r1, [r4, #8]
 8025844:	81a1      	strh	r1, [r4, #12]
 8025846:	73a1      	strb	r1, [r4, #14]
 8025848:	e7e5      	b.n	8025816 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802584a:	bf00      	nop
 802584c:	0802b028 	.word	0x0802b028
 8025850:	0802b050 	.word	0x0802b050

08025854 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 8025854:	10c9      	asrs	r1, r1, #3
 8025856:	2900      	cmp	r1, #0
 8025858:	bfb8      	it	lt
 802585a:	4249      	neglt	r1, r1
 802585c:	2801      	cmp	r0, #1
 802585e:	d108      	bne.n	8025872 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8025860:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8025864:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8025868:	4601      	mov	r1, r0
 802586a:	dd02      	ble.n	8025872 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 802586c:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8025870:	4770      	bx	lr
 8025872:	29ff      	cmp	r1, #255	; 0xff
 8025874:	bfa8      	it	ge
 8025876:	21ff      	movge	r1, #255	; 0xff
 8025878:	4608      	mov	r0, r1
 802587a:	4770      	bx	lr

0802587c <_ZN8touchgfx10Rasterizer6lineToEii>:
 802587c:	b410      	push	{r4}
 802587e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8025882:	429c      	cmp	r4, r3
 8025884:	d803      	bhi.n	802588e <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8025886:	f85d 4b04 	ldr.w	r4, [sp], #4
 802588a:	f7ef bb81 	b.w	8014f90 <_ZN8touchgfx7Outline6lineToEii>
 802588e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025892:	4770      	bx	lr

08025894 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8025894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025898:	b08b      	sub	sp, #44	; 0x2c
 802589a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802589e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80258a2:	9308      	str	r3, [sp, #32]
 80258a4:	4606      	mov	r6, r0
 80258a6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80258aa:	9309      	str	r3, [sp, #36]	; 0x24
 80258ac:	468a      	mov	sl, r1
 80258ae:	f7ef fcdc 	bl	801526a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 80258b2:	68b5      	ldr	r5, [r6, #8]
 80258b4:	4604      	mov	r4, r0
 80258b6:	2d00      	cmp	r5, #0
 80258b8:	d044      	beq.n	8025944 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80258ba:	6873      	ldr	r3, [r6, #4]
 80258bc:	42ab      	cmp	r3, r5
 80258be:	d33d      	bcc.n	802593c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 80258c0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80258c4:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 80258c8:	eb02 0b03 	add.w	fp, r2, r3
 80258cc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80258d0:	fb02 1203 	mla	r2, r2, r3, r1
 80258d4:	9205      	str	r2, [sp, #20]
 80258d6:	1e6a      	subs	r2, r5, #1
 80258d8:	9204      	str	r2, [sp, #16]
 80258da:	f04f 0800 	mov.w	r8, #0
 80258de:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 80258e2:	f9b4 7000 	ldrsh.w	r7, [r4]
 80258e6:	454b      	cmp	r3, r9
 80258e8:	463a      	mov	r2, r7
 80258ea:	d008      	beq.n	80258fe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80258ec:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 80258f0:	eb03 0b09 	add.w	fp, r3, r9
 80258f4:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80258f8:	fb03 1309 	mla	r3, r3, r9, r1
 80258fc:	9305      	str	r3, [sp, #20]
 80258fe:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8025902:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8025906:	4498      	add	r8, r3
 8025908:	9b04      	ldr	r3, [sp, #16]
 802590a:	3b01      	subs	r3, #1
 802590c:	9304      	str	r3, [sp, #16]
 802590e:	9b04      	ldr	r3, [sp, #16]
 8025910:	3301      	adds	r3, #1
 8025912:	d015      	beq.n	8025940 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8025914:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8025918:	42bb      	cmp	r3, r7
 802591a:	d117      	bne.n	802594c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802591c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8025920:	9b04      	ldr	r3, [sp, #16]
 8025922:	4548      	cmp	r0, r9
 8025924:	f103 33ff 	add.w	r3, r3, #4294967295
 8025928:	d17f      	bne.n	8025a2a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x196>
 802592a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802592e:	4401      	add	r1, r0
 8025930:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8025934:	4480      	add	r8, r0
 8025936:	e7e9      	b.n	802590c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8025938:	461f      	mov	r7, r3
 802593a:	e044      	b.n	80259c6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x132>
 802593c:	2000      	movs	r0, #0
 802593e:	e002      	b.n	8025946 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8025940:	2900      	cmp	r1, #0
 8025942:	d16f      	bne.n	8025a24 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x190>
 8025944:	2001      	movs	r0, #1
 8025946:	b00b      	add	sp, #44	; 0x2c
 8025948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802594c:	2900      	cmp	r1, #0
 802594e:	d030      	beq.n	80259b2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11e>
 8025950:	2f00      	cmp	r7, #0
 8025952:	db29      	blt.n	80259a8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 8025954:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8025958:	42bb      	cmp	r3, r7
 802595a:	dd25      	ble.n	80259a8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 802595c:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8025960:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8025964:	f7ff ff76 	bl	8025854 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8025968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802596a:	fb10 f003 	smulbb	r0, r0, r3
 802596e:	b280      	uxth	r0, r0
 8025970:	1c41      	adds	r1, r0, #1
 8025972:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025976:	1209      	asrs	r1, r1, #8
 8025978:	f011 0fff 	tst.w	r1, #255	; 0xff
 802597c:	d014      	beq.n	80259a8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 802597e:	9808      	ldr	r0, [sp, #32]
 8025980:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8025982:	b2c9      	uxtb	r1, r1
 8025984:	b2ba      	uxth	r2, r7
 8025986:	9102      	str	r1, [sp, #8]
 8025988:	2101      	movs	r1, #1
 802598a:	4413      	add	r3, r2
 802598c:	9101      	str	r1, [sp, #4]
 802598e:	4402      	add	r2, r0
 8025990:	fa0f f18b 	sxth.w	r1, fp
 8025994:	f8da 0000 	ldr.w	r0, [sl]
 8025998:	9100      	str	r1, [sp, #0]
 802599a:	6941      	ldr	r1, [r0, #20]
 802599c:	b21b      	sxth	r3, r3
 802599e:	460d      	mov	r5, r1
 80259a0:	b212      	sxth	r2, r2
 80259a2:	9905      	ldr	r1, [sp, #20]
 80259a4:	4650      	mov	r0, sl
 80259a6:	47a8      	blx	r5
 80259a8:	9b04      	ldr	r3, [sp, #16]
 80259aa:	3301      	adds	r3, #1
 80259ac:	f107 0201 	add.w	r2, r7, #1
 80259b0:	d0c8      	beq.n	8025944 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80259b2:	f9b4 7000 	ldrsh.w	r7, [r4]
 80259b6:	1abb      	subs	r3, r7, r2
 80259b8:	2b00      	cmp	r3, #0
 80259ba:	dd31      	ble.n	8025a20 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80259bc:	2a00      	cmp	r2, #0
 80259be:	dabb      	bge.n	8025938 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 80259c0:	2f00      	cmp	r7, #0
 80259c2:	dd2d      	ble.n	8025a20 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80259c4:	2200      	movs	r2, #0
 80259c6:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 80259ca:	19d1      	adds	r1, r2, r7
 80259cc:	4299      	cmp	r1, r3
 80259ce:	db02      	blt.n	80259d6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x142>
 80259d0:	1a9f      	subs	r7, r3, r2
 80259d2:	2f00      	cmp	r7, #0
 80259d4:	dd24      	ble.n	8025a20 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80259d6:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80259da:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 80259de:	f7ff ff39 	bl	8025854 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 80259e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80259e4:	fb10 f003 	smulbb	r0, r0, r3
 80259e8:	b280      	uxth	r0, r0
 80259ea:	1c41      	adds	r1, r0, #1
 80259ec:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80259f0:	1209      	asrs	r1, r1, #8
 80259f2:	f011 0fff 	tst.w	r1, #255	; 0xff
 80259f6:	d013      	beq.n	8025a20 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80259f8:	9808      	ldr	r0, [sp, #32]
 80259fa:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 80259fc:	b292      	uxth	r2, r2
 80259fe:	b2c9      	uxtb	r1, r1
 8025a00:	4413      	add	r3, r2
 8025a02:	9102      	str	r1, [sp, #8]
 8025a04:	4402      	add	r2, r0
 8025a06:	b23f      	sxth	r7, r7
 8025a08:	f8da 0000 	ldr.w	r0, [sl]
 8025a0c:	9701      	str	r7, [sp, #4]
 8025a0e:	fa0f f18b 	sxth.w	r1, fp
 8025a12:	9100      	str	r1, [sp, #0]
 8025a14:	6947      	ldr	r7, [r0, #20]
 8025a16:	9905      	ldr	r1, [sp, #20]
 8025a18:	b21b      	sxth	r3, r3
 8025a1a:	b212      	sxth	r2, r2
 8025a1c:	4650      	mov	r0, sl
 8025a1e:	47b8      	blx	r7
 8025a20:	464b      	mov	r3, r9
 8025a22:	e75c      	b.n	80258de <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8025a24:	2f00      	cmp	r7, #0
 8025a26:	da95      	bge.n	8025954 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xc0>
 8025a28:	e78c      	b.n	8025944 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8025a2a:	2900      	cmp	r1, #0
 8025a2c:	d0f8      	beq.n	8025a20 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8025a2e:	e78f      	b.n	8025950 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbc>

08025a30 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8025a30:	4b4c      	ldr	r3, [pc, #304]	; (8025b64 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x134>)
 8025a32:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8025a36:	2500      	movs	r5, #0
 8025a38:	f100 0620 	add.w	r6, r0, #32
 8025a3c:	4604      	mov	r4, r0
 8025a3e:	e9c0 3100 	strd	r3, r1, [r0]
 8025a42:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8025a46:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8025a4a:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8025a4e:	f100 0718 	add.w	r7, r0, #24
 8025a52:	4630      	mov	r0, r6
 8025a54:	4690      	mov	r8, r2
 8025a56:	f7ee fdd3 	bl	8014600 <_ZN8touchgfx7OutlineC1Ev>
 8025a5a:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 8025a5e:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8025a62:	2301      	movs	r3, #1
 8025a64:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8025a68:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8025a6c:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8025a70:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8025a74:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8025a78:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 8025a7c:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8025a80:	f9b8 2000 	ldrsh.w	r2, [r8]
 8025a84:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8025a88:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8025a8c:	9500      	str	r5, [sp, #0]
 8025a8e:	4410      	add	r0, r2
 8025a90:	b280      	uxth	r0, r0
 8025a92:	fa0f fa80 	sxth.w	sl, r0
 8025a96:	45aa      	cmp	sl, r5
 8025a98:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8025a9c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8025aa0:	dd5c      	ble.n	8025b5c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025aa2:	4591      	cmp	r9, r2
 8025aa4:	dd5a      	ble.n	8025b5c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025aa6:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8025aaa:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8025aae:	440b      	add	r3, r1
 8025ab0:	b29b      	uxth	r3, r3
 8025ab2:	b21d      	sxth	r5, r3
 8025ab4:	2d00      	cmp	r5, #0
 8025ab6:	dd51      	ble.n	8025b5c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025ab8:	458e      	cmp	lr, r1
 8025aba:	dd4f      	ble.n	8025b5c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025abc:	45d1      	cmp	r9, sl
 8025abe:	bfb8      	it	lt
 8025ac0:	fa1f f089 	uxthlt.w	r0, r9
 8025ac4:	45ae      	cmp	lr, r5
 8025ac6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8025aca:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8025ace:	bfb8      	it	lt
 8025ad0:	fa1f f38e 	uxthlt.w	r3, lr
 8025ad4:	1a80      	subs	r0, r0, r2
 8025ad6:	1a5b      	subs	r3, r3, r1
 8025ad8:	f8ad 0004 	strh.w	r0, [sp, #4]
 8025adc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8025ae0:	f8ad 2000 	strh.w	r2, [sp]
 8025ae4:	f8ad 1002 	strh.w	r1, [sp, #2]
 8025ae8:	466d      	mov	r5, sp
 8025aea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025aee:	e887 0003 	stmia.w	r7, {r0, r1}
 8025af2:	f8dc 3000 	ldr.w	r3, [ip]
 8025af6:	4660      	mov	r0, ip
 8025af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025afa:	4639      	mov	r1, r7
 8025afc:	4798      	blx	r3
 8025afe:	6861      	ldr	r1, [r4, #4]
 8025b00:	4628      	mov	r0, r5
 8025b02:	3104      	adds	r1, #4
 8025b04:	f7f0 ff12 	bl	801692c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025b08:	4638      	mov	r0, r7
 8025b0a:	f7f0 fee7 	bl	80168dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025b0e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8025b12:	f8bd 2000 	ldrh.w	r2, [sp]
 8025b16:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8025b1a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8025b1e:	4630      	mov	r0, r6
 8025b20:	f7ee fd52 	bl	80145c8 <_ZN8touchgfx7Outline5resetEv>
 8025b24:	f9bd 3000 	ldrsh.w	r3, [sp]
 8025b28:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8025b2c:	015b      	lsls	r3, r3, #5
 8025b2e:	60a3      	str	r3, [r4, #8]
 8025b30:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8025b34:	015b      	lsls	r3, r3, #5
 8025b36:	60e3      	str	r3, [r4, #12]
 8025b38:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8025b3c:	015b      	lsls	r3, r3, #5
 8025b3e:	6123      	str	r3, [r4, #16]
 8025b40:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8025b44:	015b      	lsls	r3, r3, #5
 8025b46:	6163      	str	r3, [r4, #20]
 8025b48:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8025b4c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8025b50:	4620      	mov	r0, r4
 8025b52:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 8025b56:	b002      	add	sp, #8
 8025b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025b5c:	2300      	movs	r3, #0
 8025b5e:	9301      	str	r3, [sp, #4]
 8025b60:	e7c2      	b.n	8025ae8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb8>
 8025b62:	bf00      	nop
 8025b64:	0802a8a0 	.word	0x0802a8a0

08025b68 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8025b68:	b510      	push	{r4, lr}
 8025b6a:	4b07      	ldr	r3, [pc, #28]	; (8025b88 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8025b6c:	781b      	ldrb	r3, [r3, #0]
 8025b6e:	2b01      	cmp	r3, #1
 8025b70:	d108      	bne.n	8025b84 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8025b72:	6843      	ldr	r3, [r0, #4]
 8025b74:	6814      	ldr	r4, [r2, #0]
 8025b76:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8025b7a:	680b      	ldr	r3, [r1, #0]
 8025b7c:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8025b80:	6013      	str	r3, [r2, #0]
 8025b82:	600c      	str	r4, [r1, #0]
 8025b84:	bd10      	pop	{r4, pc}
 8025b86:	bf00      	nop
 8025b88:	20008800 	.word	0x20008800

08025b8c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8025b8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025b8e:	ab02      	add	r3, sp, #8
 8025b90:	4604      	mov	r4, r0
 8025b92:	f843 2d08 	str.w	r2, [r3, #-8]!
 8025b96:	9101      	str	r1, [sp, #4]
 8025b98:	461a      	mov	r2, r3
 8025b9a:	a901      	add	r1, sp, #4
 8025b9c:	f7ff ffe4 	bl	8025b68 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8025ba0:	68a3      	ldr	r3, [r4, #8]
 8025ba2:	9901      	ldr	r1, [sp, #4]
 8025ba4:	9a00      	ldr	r2, [sp, #0]
 8025ba6:	1ac9      	subs	r1, r1, r3
 8025ba8:	68e3      	ldr	r3, [r4, #12]
 8025baa:	9101      	str	r1, [sp, #4]
 8025bac:	1ad2      	subs	r2, r2, r3
 8025bae:	2a00      	cmp	r2, #0
 8025bb0:	9200      	str	r2, [sp, #0]
 8025bb2:	db1c      	blt.n	8025bee <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8025bb4:	6963      	ldr	r3, [r4, #20]
 8025bb6:	429a      	cmp	r2, r3
 8025bb8:	bfac      	ite	ge
 8025bba:	2002      	movge	r0, #2
 8025bbc:	2000      	movlt	r0, #0
 8025bbe:	2900      	cmp	r1, #0
 8025bc0:	db17      	blt.n	8025bf2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8025bc2:	6923      	ldr	r3, [r4, #16]
 8025bc4:	4299      	cmp	r1, r3
 8025bc6:	bfac      	ite	ge
 8025bc8:	2308      	movge	r3, #8
 8025bca:	2300      	movlt	r3, #0
 8025bcc:	4303      	orrs	r3, r0
 8025bce:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8025bd2:	b2dd      	uxtb	r5, r3
 8025bd4:	b978      	cbnz	r0, 8025bf6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8025bd6:	f104 0020 	add.w	r0, r4, #32
 8025bda:	f7ff fe4f 	bl	802587c <_ZN8touchgfx10Rasterizer6lineToEii>
 8025bde:	9b01      	ldr	r3, [sp, #4]
 8025be0:	65e3      	str	r3, [r4, #92]	; 0x5c
 8025be2:	9b00      	ldr	r3, [sp, #0]
 8025be4:	6623      	str	r3, [r4, #96]	; 0x60
 8025be6:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8025bea:	b002      	add	sp, #8
 8025bec:	bd70      	pop	{r4, r5, r6, pc}
 8025bee:	2001      	movs	r0, #1
 8025bf0:	e7e5      	b.n	8025bbe <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8025bf2:	2304      	movs	r3, #4
 8025bf4:	e7ea      	b.n	8025bcc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8025bf6:	b113      	cbz	r3, 8025bfe <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8025bf8:	ea10 0305 	ands.w	r3, r0, r5
 8025bfc:	d11d      	bne.n	8025c3a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xae>
 8025bfe:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8025c02:	f104 0620 	add.w	r6, r4, #32
 8025c06:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 8025c0a:	b193      	cbz	r3, 8025c32 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8025c0c:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8025c10:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8025c14:	4298      	cmp	r0, r3
 8025c16:	d802      	bhi.n	8025c1e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8025c18:	4630      	mov	r0, r6
 8025c1a:	f7ef f9d3 	bl	8014fc4 <_ZN8touchgfx7Outline6moveToEii>
 8025c1e:	2300      	movs	r3, #0
 8025c20:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8025c24:	2301      	movs	r3, #1
 8025c26:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8025c2a:	e9dd 2100 	ldrd	r2, r1, [sp]
 8025c2e:	4630      	mov	r0, r6
 8025c30:	e7d3      	b.n	8025bda <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8025c32:	4630      	mov	r0, r6
 8025c34:	f7ff fe22 	bl	802587c <_ZN8touchgfx10Rasterizer6lineToEii>
 8025c38:	e7f7      	b.n	8025c2a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8025c3a:	461d      	mov	r5, r3
 8025c3c:	e7cf      	b.n	8025bde <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>

08025c3e <_ZN8touchgfx6Canvas5closeEv>:
 8025c3e:	b538      	push	{r3, r4, r5, lr}
 8025c40:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8025c44:	4604      	mov	r4, r0
 8025c46:	b993      	cbnz	r3, 8025c6e <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025c48:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8025c4c:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 8025c50:	4213      	tst	r3, r2
 8025c52:	d10c      	bne.n	8025c6e <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025c54:	f100 0520 	add.w	r5, r0, #32
 8025c58:	b123      	cbz	r3, 8025c64 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8025c5a:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 8025c5e:	4628      	mov	r0, r5
 8025c60:	f7ff fe0c 	bl	802587c <_ZN8touchgfx10Rasterizer6lineToEii>
 8025c64:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8025c68:	4628      	mov	r0, r5
 8025c6a:	f7ff fe07 	bl	802587c <_ZN8touchgfx10Rasterizer6lineToEii>
 8025c6e:	2300      	movs	r3, #0
 8025c70:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8025c74:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 8025c78:	4298      	cmp	r0, r3
 8025c7a:	bf34      	ite	cc
 8025c7c:	2000      	movcc	r0, #0
 8025c7e:	2001      	movcs	r0, #1
 8025c80:	bd38      	pop	{r3, r4, r5, pc}
	...

08025c84 <_ZN8touchgfx6Canvas6renderEh>:
 8025c84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025c88:	4604      	mov	r4, r0
 8025c8a:	6840      	ldr	r0, [r0, #4]
 8025c8c:	6803      	ldr	r3, [r0, #0]
 8025c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8025c90:	460d      	mov	r5, r1
 8025c92:	4798      	blx	r3
 8025c94:	fb10 f105 	smulbb	r1, r0, r5
 8025c98:	b289      	uxth	r1, r1
 8025c9a:	1c4d      	adds	r5, r1, #1
 8025c9c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8025ca0:	122d      	asrs	r5, r5, #8
 8025ca2:	f000 8098 	beq.w	8025dd6 <_ZN8touchgfx6Canvas6renderEh+0x152>
 8025ca6:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8025caa:	2b00      	cmp	r3, #0
 8025cac:	f000 8093 	beq.w	8025dd6 <_ZN8touchgfx6Canvas6renderEh+0x152>
 8025cb0:	4620      	mov	r0, r4
 8025cb2:	f7ff ffc4 	bl	8025c3e <_ZN8touchgfx6Canvas5closeEv>
 8025cb6:	4607      	mov	r7, r0
 8025cb8:	2800      	cmp	r0, #0
 8025cba:	d043      	beq.n	8025d44 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8025cbc:	6863      	ldr	r3, [r4, #4]
 8025cbe:	4e47      	ldr	r6, [pc, #284]	; (8025ddc <_ZN8touchgfx6Canvas6renderEh+0x158>)
 8025cc0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8025cc2:	6837      	ldr	r7, [r6, #0]
 8025cc4:	6803      	ldr	r3, [r0, #0]
 8025cc6:	689b      	ldr	r3, [r3, #8]
 8025cc8:	4798      	blx	r3
 8025cca:	4601      	mov	r1, r0
 8025ccc:	4638      	mov	r0, r7
 8025cce:	f7ec fa5f 	bl	8012190 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8025cd2:	4607      	mov	r7, r0
 8025cd4:	f7e4 f922 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 8025cd8:	6803      	ldr	r3, [r0, #0]
 8025cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025cdc:	4798      	blx	r3
 8025cde:	4680      	mov	r8, r0
 8025ce0:	f7e4 f91c 	bl	8009f1c <_ZN8touchgfx3HAL3lcdEv>
 8025ce4:	6803      	ldr	r3, [r0, #0]
 8025ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025ce8:	4798      	blx	r3
 8025cea:	280b      	cmp	r0, #11
 8025cec:	d858      	bhi.n	8025da0 <_ZN8touchgfx6Canvas6renderEh+0x11c>
 8025cee:	e8df f000 	tbb	[pc, r0]
 8025cf2:	594e      	.short	0x594e
 8025cf4:	2d570669 	.word	0x2d570669
 8025cf8:	6262623d 	.word	0x6262623d
 8025cfc:	6262      	.short	0x6262
 8025cfe:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025d02:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8025d06:	2208      	movs	r2, #8
 8025d08:	fb91 f2f2 	sdiv	r2, r1, r2
 8025d0c:	fb08 2303 	mla	r3, r8, r3, r2
 8025d10:	441f      	add	r7, r3
 8025d12:	424b      	negs	r3, r1
 8025d14:	f003 0307 	and.w	r3, r3, #7
 8025d18:	f001 0107 	and.w	r1, r1, #7
 8025d1c:	bf58      	it	pl
 8025d1e:	4259      	negpl	r1, r3
 8025d20:	b2c9      	uxtb	r1, r1
 8025d22:	b2ed      	uxtb	r5, r5
 8025d24:	e9cd 1500 	strd	r1, r5, [sp]
 8025d28:	6860      	ldr	r0, [r4, #4]
 8025d2a:	fa0f f388 	sxth.w	r3, r8
 8025d2e:	463a      	mov	r2, r7
 8025d30:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8025d32:	f104 0020 	add.w	r0, r4, #32
 8025d36:	f7ff fdad 	bl	8025894 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8025d3a:	4607      	mov	r7, r0
 8025d3c:	6830      	ldr	r0, [r6, #0]
 8025d3e:	6803      	ldr	r3, [r0, #0]
 8025d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025d42:	4798      	blx	r3
 8025d44:	4638      	mov	r0, r7
 8025d46:	b002      	add	sp, #8
 8025d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025d4c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025d50:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8025d54:	2204      	movs	r2, #4
 8025d56:	fb91 f2f2 	sdiv	r2, r1, r2
 8025d5a:	fb08 2303 	mla	r3, r8, r3, r2
 8025d5e:	441f      	add	r7, r3
 8025d60:	424b      	negs	r3, r1
 8025d62:	f003 0303 	and.w	r3, r3, #3
 8025d66:	f001 0103 	and.w	r1, r1, #3
 8025d6a:	e7d7      	b.n	8025d1c <_ZN8touchgfx6Canvas6renderEh+0x98>
 8025d6c:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8025d70:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025d74:	2900      	cmp	r1, #0
 8025d76:	f04f 0202 	mov.w	r2, #2
 8025d7a:	fb91 f2f2 	sdiv	r2, r1, r2
 8025d7e:	f001 0101 	and.w	r1, r1, #1
 8025d82:	fb08 2303 	mla	r3, r8, r3, r2
 8025d86:	441f      	add	r7, r3
 8025d88:	bfb8      	it	lt
 8025d8a:	4249      	neglt	r1, r1
 8025d8c:	e7c8      	b.n	8025d20 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 8025d8e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025d92:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8025d96:	fb08 f303 	mul.w	r3, r8, r3
 8025d9a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8025d9e:	441f      	add	r7, r3
 8025da0:	2100      	movs	r1, #0
 8025da2:	e7be      	b.n	8025d22 <_ZN8touchgfx6Canvas6renderEh+0x9e>
 8025da4:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025da8:	fb08 f203 	mul.w	r2, r8, r3
 8025dac:	8b23      	ldrh	r3, [r4, #24]
 8025dae:	2103      	movs	r1, #3
 8025db0:	fb13 2301 	smlabb	r3, r3, r1, r2
 8025db4:	e7f3      	b.n	8025d9e <_ZN8touchgfx6Canvas6renderEh+0x11a>
 8025db6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025dba:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8025dbe:	fb08 2303 	mla	r3, r8, r3, r2
 8025dc2:	e7ec      	b.n	8025d9e <_ZN8touchgfx6Canvas6renderEh+0x11a>
 8025dc4:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025dc8:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8025dcc:	fb08 f303 	mul.w	r3, r8, r3
 8025dd0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8025dd4:	e7e3      	b.n	8025d9e <_ZN8touchgfx6Canvas6renderEh+0x11a>
 8025dd6:	2701      	movs	r7, #1
 8025dd8:	e7b4      	b.n	8025d44 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8025dda:	bf00      	nop
 8025ddc:	20008808 	.word	0x20008808

08025de0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8025de0:	b513      	push	{r0, r1, r4, lr}
 8025de2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8025de6:	4604      	mov	r4, r0
 8025de8:	e9cd 2100 	strd	r2, r1, [sp]
 8025dec:	b1a3      	cbz	r3, 8025e18 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8025dee:	466a      	mov	r2, sp
 8025df0:	a901      	add	r1, sp, #4
 8025df2:	4620      	mov	r0, r4
 8025df4:	f7ff feb8 	bl	8025b68 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8025df8:	68a3      	ldr	r3, [r4, #8]
 8025dfa:	9901      	ldr	r1, [sp, #4]
 8025dfc:	9a00      	ldr	r2, [sp, #0]
 8025dfe:	1ac9      	subs	r1, r1, r3
 8025e00:	68e3      	ldr	r3, [r4, #12]
 8025e02:	9101      	str	r1, [sp, #4]
 8025e04:	1ad2      	subs	r2, r2, r3
 8025e06:	2a00      	cmp	r2, #0
 8025e08:	9200      	str	r2, [sp, #0]
 8025e0a:	da0b      	bge.n	8025e24 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8025e0c:	2301      	movs	r3, #1
 8025e0e:	2900      	cmp	r1, #0
 8025e10:	da0e      	bge.n	8025e30 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8025e12:	f043 0304 	orr.w	r3, r3, #4
 8025e16:	e013      	b.n	8025e40 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8025e18:	f7ff ff11 	bl	8025c3e <_ZN8touchgfx6Canvas5closeEv>
 8025e1c:	2800      	cmp	r0, #0
 8025e1e:	d1e6      	bne.n	8025dee <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8025e20:	b002      	add	sp, #8
 8025e22:	bd10      	pop	{r4, pc}
 8025e24:	6963      	ldr	r3, [r4, #20]
 8025e26:	429a      	cmp	r2, r3
 8025e28:	bfac      	ite	ge
 8025e2a:	2302      	movge	r3, #2
 8025e2c:	2300      	movlt	r3, #0
 8025e2e:	e7ee      	b.n	8025e0e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8025e30:	6920      	ldr	r0, [r4, #16]
 8025e32:	4281      	cmp	r1, r0
 8025e34:	bfac      	ite	ge
 8025e36:	2008      	movge	r0, #8
 8025e38:	2000      	movlt	r0, #0
 8025e3a:	4318      	orrs	r0, r3
 8025e3c:	b2c3      	uxtb	r3, r0
 8025e3e:	b158      	cbz	r0, 8025e58 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8025e40:	2201      	movs	r2, #1
 8025e42:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8025e46:	9901      	ldr	r1, [sp, #4]
 8025e48:	9a00      	ldr	r2, [sp, #0]
 8025e4a:	66a1      	str	r1, [r4, #104]	; 0x68
 8025e4c:	66e2      	str	r2, [r4, #108]	; 0x6c
 8025e4e:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 8025e52:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8025e56:	e7e3      	b.n	8025e20 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8025e58:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8025e5c:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8025e60:	4298      	cmp	r0, r3
 8025e62:	d803      	bhi.n	8025e6c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8025e64:	f104 0020 	add.w	r0, r4, #32
 8025e68:	f7ef f8ac 	bl	8014fc4 <_ZN8touchgfx7Outline6moveToEii>
 8025e6c:	2300      	movs	r3, #0
 8025e6e:	2201      	movs	r2, #1
 8025e70:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8025e74:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8025e78:	e7e5      	b.n	8025e46 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08025e7a <__aeabi_atexit>:
 8025e7a:	460b      	mov	r3, r1
 8025e7c:	4601      	mov	r1, r0
 8025e7e:	4618      	mov	r0, r3
 8025e80:	f000 bdb0 	b.w	80269e4 <__cxa_atexit>

08025e84 <_ZdlPvj>:
 8025e84:	f000 b812 	b.w	8025eac <_ZdlPv>

08025e88 <__cxa_guard_acquire>:
 8025e88:	6803      	ldr	r3, [r0, #0]
 8025e8a:	07db      	lsls	r3, r3, #31
 8025e8c:	d406      	bmi.n	8025e9c <__cxa_guard_acquire+0x14>
 8025e8e:	7843      	ldrb	r3, [r0, #1]
 8025e90:	b103      	cbz	r3, 8025e94 <__cxa_guard_acquire+0xc>
 8025e92:	deff      	udf	#255	; 0xff
 8025e94:	2301      	movs	r3, #1
 8025e96:	7043      	strb	r3, [r0, #1]
 8025e98:	4618      	mov	r0, r3
 8025e9a:	4770      	bx	lr
 8025e9c:	2000      	movs	r0, #0
 8025e9e:	4770      	bx	lr

08025ea0 <__cxa_guard_release>:
 8025ea0:	2301      	movs	r3, #1
 8025ea2:	6003      	str	r3, [r0, #0]
 8025ea4:	4770      	bx	lr

08025ea6 <__cxa_pure_virtual>:
 8025ea6:	b508      	push	{r3, lr}
 8025ea8:	f000 f80e 	bl	8025ec8 <_ZSt9terminatev>

08025eac <_ZdlPv>:
 8025eac:	f000 bee6 	b.w	8026c7c <free>

08025eb0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8025eb0:	b508      	push	{r3, lr}
 8025eb2:	4780      	blx	r0
 8025eb4:	f000 fd6a 	bl	802698c <abort>

08025eb8 <_ZSt13get_terminatev>:
 8025eb8:	4b02      	ldr	r3, [pc, #8]	; (8025ec4 <_ZSt13get_terminatev+0xc>)
 8025eba:	6818      	ldr	r0, [r3, #0]
 8025ebc:	f3bf 8f5b 	dmb	ish
 8025ec0:	4770      	bx	lr
 8025ec2:	bf00      	nop
 8025ec4:	20000094 	.word	0x20000094

08025ec8 <_ZSt9terminatev>:
 8025ec8:	b508      	push	{r3, lr}
 8025eca:	f7ff fff5 	bl	8025eb8 <_ZSt13get_terminatev>
 8025ece:	f7ff ffef 	bl	8025eb0 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08025ed4 <sinf>:
 8025ed4:	ee10 3a10 	vmov	r3, s0
 8025ed8:	b507      	push	{r0, r1, r2, lr}
 8025eda:	4a1f      	ldr	r2, [pc, #124]	; (8025f58 <sinf+0x84>)
 8025edc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025ee0:	4293      	cmp	r3, r2
 8025ee2:	dc07      	bgt.n	8025ef4 <sinf+0x20>
 8025ee4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8025f5c <sinf+0x88>
 8025ee8:	2000      	movs	r0, #0
 8025eea:	b003      	add	sp, #12
 8025eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8025ef0:	f000 bc48 	b.w	8026784 <__kernel_sinf>
 8025ef4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8025ef8:	db04      	blt.n	8025f04 <sinf+0x30>
 8025efa:	ee30 0a40 	vsub.f32	s0, s0, s0
 8025efe:	b003      	add	sp, #12
 8025f00:	f85d fb04 	ldr.w	pc, [sp], #4
 8025f04:	4668      	mov	r0, sp
 8025f06:	f000 f82b 	bl	8025f60 <__ieee754_rem_pio2f>
 8025f0a:	f000 0003 	and.w	r0, r0, #3
 8025f0e:	2801      	cmp	r0, #1
 8025f10:	d00a      	beq.n	8025f28 <sinf+0x54>
 8025f12:	2802      	cmp	r0, #2
 8025f14:	d00f      	beq.n	8025f36 <sinf+0x62>
 8025f16:	b9c0      	cbnz	r0, 8025f4a <sinf+0x76>
 8025f18:	eddd 0a01 	vldr	s1, [sp, #4]
 8025f1c:	ed9d 0a00 	vldr	s0, [sp]
 8025f20:	2001      	movs	r0, #1
 8025f22:	f000 fc2f 	bl	8026784 <__kernel_sinf>
 8025f26:	e7ea      	b.n	8025efe <sinf+0x2a>
 8025f28:	eddd 0a01 	vldr	s1, [sp, #4]
 8025f2c:	ed9d 0a00 	vldr	s0, [sp]
 8025f30:	f000 f952 	bl	80261d8 <__kernel_cosf>
 8025f34:	e7e3      	b.n	8025efe <sinf+0x2a>
 8025f36:	eddd 0a01 	vldr	s1, [sp, #4]
 8025f3a:	ed9d 0a00 	vldr	s0, [sp]
 8025f3e:	2001      	movs	r0, #1
 8025f40:	f000 fc20 	bl	8026784 <__kernel_sinf>
 8025f44:	eeb1 0a40 	vneg.f32	s0, s0
 8025f48:	e7d9      	b.n	8025efe <sinf+0x2a>
 8025f4a:	eddd 0a01 	vldr	s1, [sp, #4]
 8025f4e:	ed9d 0a00 	vldr	s0, [sp]
 8025f52:	f000 f941 	bl	80261d8 <__kernel_cosf>
 8025f56:	e7f5      	b.n	8025f44 <sinf+0x70>
 8025f58:	3f490fd8 	.word	0x3f490fd8
 8025f5c:	00000000 	.word	0x00000000

08025f60 <__ieee754_rem_pio2f>:
 8025f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025f62:	ee10 6a10 	vmov	r6, s0
 8025f66:	4b8e      	ldr	r3, [pc, #568]	; (80261a0 <__ieee754_rem_pio2f+0x240>)
 8025f68:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8025f6c:	429d      	cmp	r5, r3
 8025f6e:	b087      	sub	sp, #28
 8025f70:	eef0 7a40 	vmov.f32	s15, s0
 8025f74:	4604      	mov	r4, r0
 8025f76:	dc05      	bgt.n	8025f84 <__ieee754_rem_pio2f+0x24>
 8025f78:	2300      	movs	r3, #0
 8025f7a:	ed80 0a00 	vstr	s0, [r0]
 8025f7e:	6043      	str	r3, [r0, #4]
 8025f80:	2000      	movs	r0, #0
 8025f82:	e01a      	b.n	8025fba <__ieee754_rem_pio2f+0x5a>
 8025f84:	4b87      	ldr	r3, [pc, #540]	; (80261a4 <__ieee754_rem_pio2f+0x244>)
 8025f86:	429d      	cmp	r5, r3
 8025f88:	dc46      	bgt.n	8026018 <__ieee754_rem_pio2f+0xb8>
 8025f8a:	2e00      	cmp	r6, #0
 8025f8c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80261a8 <__ieee754_rem_pio2f+0x248>
 8025f90:	4b86      	ldr	r3, [pc, #536]	; (80261ac <__ieee754_rem_pio2f+0x24c>)
 8025f92:	f025 050f 	bic.w	r5, r5, #15
 8025f96:	dd1f      	ble.n	8025fd8 <__ieee754_rem_pio2f+0x78>
 8025f98:	429d      	cmp	r5, r3
 8025f9a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8025f9e:	d00e      	beq.n	8025fbe <__ieee754_rem_pio2f+0x5e>
 8025fa0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80261b0 <__ieee754_rem_pio2f+0x250>
 8025fa4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8025fa8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8025fac:	ed80 0a00 	vstr	s0, [r0]
 8025fb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025fb4:	2001      	movs	r0, #1
 8025fb6:	edc4 7a01 	vstr	s15, [r4, #4]
 8025fba:	b007      	add	sp, #28
 8025fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025fbe:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80261b4 <__ieee754_rem_pio2f+0x254>
 8025fc2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80261b8 <__ieee754_rem_pio2f+0x258>
 8025fc6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8025fca:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8025fce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8025fd2:	edc0 6a00 	vstr	s13, [r0]
 8025fd6:	e7eb      	b.n	8025fb0 <__ieee754_rem_pio2f+0x50>
 8025fd8:	429d      	cmp	r5, r3
 8025fda:	ee77 7a80 	vadd.f32	s15, s15, s0
 8025fde:	d00e      	beq.n	8025ffe <__ieee754_rem_pio2f+0x9e>
 8025fe0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80261b0 <__ieee754_rem_pio2f+0x250>
 8025fe4:	ee37 0a87 	vadd.f32	s0, s15, s14
 8025fe8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8025fec:	ed80 0a00 	vstr	s0, [r0]
 8025ff0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8025ff8:	edc4 7a01 	vstr	s15, [r4, #4]
 8025ffc:	e7dd      	b.n	8025fba <__ieee754_rem_pio2f+0x5a>
 8025ffe:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80261b4 <__ieee754_rem_pio2f+0x254>
 8026002:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80261b8 <__ieee754_rem_pio2f+0x258>
 8026006:	ee77 7a80 	vadd.f32	s15, s15, s0
 802600a:	ee77 6a87 	vadd.f32	s13, s15, s14
 802600e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8026012:	edc0 6a00 	vstr	s13, [r0]
 8026016:	e7eb      	b.n	8025ff0 <__ieee754_rem_pio2f+0x90>
 8026018:	4b68      	ldr	r3, [pc, #416]	; (80261bc <__ieee754_rem_pio2f+0x25c>)
 802601a:	429d      	cmp	r5, r3
 802601c:	dc72      	bgt.n	8026104 <__ieee754_rem_pio2f+0x1a4>
 802601e:	f000 fbf9 	bl	8026814 <fabsf>
 8026022:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80261c0 <__ieee754_rem_pio2f+0x260>
 8026026:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802602a:	eee0 7a07 	vfma.f32	s15, s0, s14
 802602e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8026032:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8026036:	ee17 0a90 	vmov	r0, s15
 802603a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80261a8 <__ieee754_rem_pio2f+0x248>
 802603e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8026042:	281f      	cmp	r0, #31
 8026044:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80261b0 <__ieee754_rem_pio2f+0x250>
 8026048:	ee67 7a27 	vmul.f32	s15, s14, s15
 802604c:	eeb1 6a47 	vneg.f32	s12, s14
 8026050:	ee70 6a67 	vsub.f32	s13, s0, s15
 8026054:	ee16 2a90 	vmov	r2, s13
 8026058:	dc1c      	bgt.n	8026094 <__ieee754_rem_pio2f+0x134>
 802605a:	495a      	ldr	r1, [pc, #360]	; (80261c4 <__ieee754_rem_pio2f+0x264>)
 802605c:	1e47      	subs	r7, r0, #1
 802605e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8026062:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8026066:	428b      	cmp	r3, r1
 8026068:	d014      	beq.n	8026094 <__ieee754_rem_pio2f+0x134>
 802606a:	6022      	str	r2, [r4, #0]
 802606c:	ed94 7a00 	vldr	s14, [r4]
 8026070:	ee30 0a47 	vsub.f32	s0, s0, s14
 8026074:	2e00      	cmp	r6, #0
 8026076:	ee30 0a67 	vsub.f32	s0, s0, s15
 802607a:	ed84 0a01 	vstr	s0, [r4, #4]
 802607e:	da9c      	bge.n	8025fba <__ieee754_rem_pio2f+0x5a>
 8026080:	eeb1 7a47 	vneg.f32	s14, s14
 8026084:	eeb1 0a40 	vneg.f32	s0, s0
 8026088:	ed84 7a00 	vstr	s14, [r4]
 802608c:	ed84 0a01 	vstr	s0, [r4, #4]
 8026090:	4240      	negs	r0, r0
 8026092:	e792      	b.n	8025fba <__ieee754_rem_pio2f+0x5a>
 8026094:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8026098:	15eb      	asrs	r3, r5, #23
 802609a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 802609e:	2d08      	cmp	r5, #8
 80260a0:	dde3      	ble.n	802606a <__ieee754_rem_pio2f+0x10a>
 80260a2:	eddf 7a44 	vldr	s15, [pc, #272]	; 80261b4 <__ieee754_rem_pio2f+0x254>
 80260a6:	eddf 5a44 	vldr	s11, [pc, #272]	; 80261b8 <__ieee754_rem_pio2f+0x258>
 80260aa:	eef0 6a40 	vmov.f32	s13, s0
 80260ae:	eee6 6a27 	vfma.f32	s13, s12, s15
 80260b2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80260b6:	eea6 0a27 	vfma.f32	s0, s12, s15
 80260ba:	eef0 7a40 	vmov.f32	s15, s0
 80260be:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80260c2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80260c6:	ee15 2a90 	vmov	r2, s11
 80260ca:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80260ce:	1a5b      	subs	r3, r3, r1
 80260d0:	2b19      	cmp	r3, #25
 80260d2:	dc04      	bgt.n	80260de <__ieee754_rem_pio2f+0x17e>
 80260d4:	edc4 5a00 	vstr	s11, [r4]
 80260d8:	eeb0 0a66 	vmov.f32	s0, s13
 80260dc:	e7c6      	b.n	802606c <__ieee754_rem_pio2f+0x10c>
 80260de:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80261c8 <__ieee754_rem_pio2f+0x268>
 80260e2:	eeb0 0a66 	vmov.f32	s0, s13
 80260e6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80260ea:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80260ee:	eddf 6a37 	vldr	s13, [pc, #220]	; 80261cc <__ieee754_rem_pio2f+0x26c>
 80260f2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80260f6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80260fa:	ee30 7a67 	vsub.f32	s14, s0, s15
 80260fe:	ed84 7a00 	vstr	s14, [r4]
 8026102:	e7b3      	b.n	802606c <__ieee754_rem_pio2f+0x10c>
 8026104:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8026108:	db06      	blt.n	8026118 <__ieee754_rem_pio2f+0x1b8>
 802610a:	ee70 7a40 	vsub.f32	s15, s0, s0
 802610e:	edc0 7a01 	vstr	s15, [r0, #4]
 8026112:	edc0 7a00 	vstr	s15, [r0]
 8026116:	e733      	b.n	8025f80 <__ieee754_rem_pio2f+0x20>
 8026118:	15ea      	asrs	r2, r5, #23
 802611a:	3a86      	subs	r2, #134	; 0x86
 802611c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8026120:	ee07 3a90 	vmov	s15, r3
 8026124:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8026128:	eddf 6a29 	vldr	s13, [pc, #164]	; 80261d0 <__ieee754_rem_pio2f+0x270>
 802612c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026130:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026134:	ed8d 7a03 	vstr	s14, [sp, #12]
 8026138:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802613c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8026140:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026144:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026148:	ed8d 7a04 	vstr	s14, [sp, #16]
 802614c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8026150:	eef5 7a40 	vcmp.f32	s15, #0.0
 8026154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026158:	edcd 7a05 	vstr	s15, [sp, #20]
 802615c:	d11e      	bne.n	802619c <__ieee754_rem_pio2f+0x23c>
 802615e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8026162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026166:	bf14      	ite	ne
 8026168:	2302      	movne	r3, #2
 802616a:	2301      	moveq	r3, #1
 802616c:	4919      	ldr	r1, [pc, #100]	; (80261d4 <__ieee754_rem_pio2f+0x274>)
 802616e:	9101      	str	r1, [sp, #4]
 8026170:	2102      	movs	r1, #2
 8026172:	9100      	str	r1, [sp, #0]
 8026174:	a803      	add	r0, sp, #12
 8026176:	4621      	mov	r1, r4
 8026178:	f000 f88e 	bl	8026298 <__kernel_rem_pio2f>
 802617c:	2e00      	cmp	r6, #0
 802617e:	f6bf af1c 	bge.w	8025fba <__ieee754_rem_pio2f+0x5a>
 8026182:	edd4 7a00 	vldr	s15, [r4]
 8026186:	eef1 7a67 	vneg.f32	s15, s15
 802618a:	edc4 7a00 	vstr	s15, [r4]
 802618e:	edd4 7a01 	vldr	s15, [r4, #4]
 8026192:	eef1 7a67 	vneg.f32	s15, s15
 8026196:	edc4 7a01 	vstr	s15, [r4, #4]
 802619a:	e779      	b.n	8026090 <__ieee754_rem_pio2f+0x130>
 802619c:	2303      	movs	r3, #3
 802619e:	e7e5      	b.n	802616c <__ieee754_rem_pio2f+0x20c>
 80261a0:	3f490fd8 	.word	0x3f490fd8
 80261a4:	4016cbe3 	.word	0x4016cbe3
 80261a8:	3fc90f80 	.word	0x3fc90f80
 80261ac:	3fc90fd0 	.word	0x3fc90fd0
 80261b0:	37354443 	.word	0x37354443
 80261b4:	37354400 	.word	0x37354400
 80261b8:	2e85a308 	.word	0x2e85a308
 80261bc:	43490f80 	.word	0x43490f80
 80261c0:	3f22f984 	.word	0x3f22f984
 80261c4:	0802b318 	.word	0x0802b318
 80261c8:	2e85a300 	.word	0x2e85a300
 80261cc:	248d3132 	.word	0x248d3132
 80261d0:	43800000 	.word	0x43800000
 80261d4:	0802b398 	.word	0x0802b398

080261d8 <__kernel_cosf>:
 80261d8:	ee10 3a10 	vmov	r3, s0
 80261dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80261e0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80261e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80261e8:	da05      	bge.n	80261f6 <__kernel_cosf+0x1e>
 80261ea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80261ee:	ee17 2a90 	vmov	r2, s15
 80261f2:	2a00      	cmp	r2, #0
 80261f4:	d03d      	beq.n	8026272 <__kernel_cosf+0x9a>
 80261f6:	ee60 5a00 	vmul.f32	s11, s0, s0
 80261fa:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8026278 <__kernel_cosf+0xa0>
 80261fe:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 802627c <__kernel_cosf+0xa4>
 8026202:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8026280 <__kernel_cosf+0xa8>
 8026206:	4a1f      	ldr	r2, [pc, #124]	; (8026284 <__kernel_cosf+0xac>)
 8026208:	eea5 7aa7 	vfma.f32	s14, s11, s15
 802620c:	4293      	cmp	r3, r2
 802620e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8026288 <__kernel_cosf+0xb0>
 8026212:	eee7 7a25 	vfma.f32	s15, s14, s11
 8026216:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 802628c <__kernel_cosf+0xb4>
 802621a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802621e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8026290 <__kernel_cosf+0xb8>
 8026222:	eee7 7a25 	vfma.f32	s15, s14, s11
 8026226:	eeb0 7a66 	vmov.f32	s14, s13
 802622a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802622e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8026232:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8026236:	ee67 6a25 	vmul.f32	s13, s14, s11
 802623a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 802623e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8026242:	dc04      	bgt.n	802624e <__kernel_cosf+0x76>
 8026244:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8026248:	ee36 0a47 	vsub.f32	s0, s12, s14
 802624c:	4770      	bx	lr
 802624e:	4a11      	ldr	r2, [pc, #68]	; (8026294 <__kernel_cosf+0xbc>)
 8026250:	4293      	cmp	r3, r2
 8026252:	bfda      	itte	le
 8026254:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8026258:	ee06 3a90 	vmovle	s13, r3
 802625c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8026260:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8026264:	ee36 0a66 	vsub.f32	s0, s12, s13
 8026268:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802626c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8026270:	4770      	bx	lr
 8026272:	eeb0 0a46 	vmov.f32	s0, s12
 8026276:	4770      	bx	lr
 8026278:	ad47d74e 	.word	0xad47d74e
 802627c:	310f74f6 	.word	0x310f74f6
 8026280:	3d2aaaab 	.word	0x3d2aaaab
 8026284:	3e999999 	.word	0x3e999999
 8026288:	b493f27c 	.word	0xb493f27c
 802628c:	37d00d01 	.word	0x37d00d01
 8026290:	bab60b61 	.word	0xbab60b61
 8026294:	3f480000 	.word	0x3f480000

08026298 <__kernel_rem_pio2f>:
 8026298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802629c:	ed2d 8b04 	vpush	{d8-d9}
 80262a0:	b0d9      	sub	sp, #356	; 0x164
 80262a2:	4688      	mov	r8, r1
 80262a4:	9002      	str	r0, [sp, #8]
 80262a6:	49bb      	ldr	r1, [pc, #748]	; (8026594 <__kernel_rem_pio2f+0x2fc>)
 80262a8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80262aa:	9301      	str	r3, [sp, #4]
 80262ac:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80262b0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80262b4:	1e59      	subs	r1, r3, #1
 80262b6:	1d13      	adds	r3, r2, #4
 80262b8:	db27      	blt.n	802630a <__kernel_rem_pio2f+0x72>
 80262ba:	f1b2 0b03 	subs.w	fp, r2, #3
 80262be:	bf48      	it	mi
 80262c0:	f102 0b04 	addmi.w	fp, r2, #4
 80262c4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80262c8:	1c45      	adds	r5, r0, #1
 80262ca:	00ec      	lsls	r4, r5, #3
 80262cc:	1a47      	subs	r7, r0, r1
 80262ce:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80265a4 <__kernel_rem_pio2f+0x30c>
 80262d2:	9403      	str	r4, [sp, #12]
 80262d4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80262d8:	eb0a 0c01 	add.w	ip, sl, r1
 80262dc:	ae1c      	add	r6, sp, #112	; 0x70
 80262de:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80262e2:	2400      	movs	r4, #0
 80262e4:	4564      	cmp	r4, ip
 80262e6:	dd12      	ble.n	802630e <__kernel_rem_pio2f+0x76>
 80262e8:	9b01      	ldr	r3, [sp, #4]
 80262ea:	ac1c      	add	r4, sp, #112	; 0x70
 80262ec:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80262f0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80262f4:	f04f 0c00 	mov.w	ip, #0
 80262f8:	45d4      	cmp	ip, sl
 80262fa:	dc27      	bgt.n	802634c <__kernel_rem_pio2f+0xb4>
 80262fc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8026300:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80265a4 <__kernel_rem_pio2f+0x30c>
 8026304:	4627      	mov	r7, r4
 8026306:	2600      	movs	r6, #0
 8026308:	e016      	b.n	8026338 <__kernel_rem_pio2f+0xa0>
 802630a:	2000      	movs	r0, #0
 802630c:	e7dc      	b.n	80262c8 <__kernel_rem_pio2f+0x30>
 802630e:	42e7      	cmn	r7, r4
 8026310:	bf5d      	ittte	pl
 8026312:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8026316:	ee07 3a90 	vmovpl	s15, r3
 802631a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802631e:	eef0 7a47 	vmovmi.f32	s15, s14
 8026322:	ece6 7a01 	vstmia	r6!, {s15}
 8026326:	3401      	adds	r4, #1
 8026328:	e7dc      	b.n	80262e4 <__kernel_rem_pio2f+0x4c>
 802632a:	ecf9 6a01 	vldmia	r9!, {s13}
 802632e:	ed97 7a00 	vldr	s14, [r7]
 8026332:	eee6 7a87 	vfma.f32	s15, s13, s14
 8026336:	3601      	adds	r6, #1
 8026338:	428e      	cmp	r6, r1
 802633a:	f1a7 0704 	sub.w	r7, r7, #4
 802633e:	ddf4      	ble.n	802632a <__kernel_rem_pio2f+0x92>
 8026340:	eceb 7a01 	vstmia	fp!, {s15}
 8026344:	f10c 0c01 	add.w	ip, ip, #1
 8026348:	3404      	adds	r4, #4
 802634a:	e7d5      	b.n	80262f8 <__kernel_rem_pio2f+0x60>
 802634c:	ab08      	add	r3, sp, #32
 802634e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8026352:	eddf 8a93 	vldr	s17, [pc, #588]	; 80265a0 <__kernel_rem_pio2f+0x308>
 8026356:	ed9f 9a91 	vldr	s18, [pc, #580]	; 802659c <__kernel_rem_pio2f+0x304>
 802635a:	9304      	str	r3, [sp, #16]
 802635c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8026360:	4656      	mov	r6, sl
 8026362:	00b3      	lsls	r3, r6, #2
 8026364:	9305      	str	r3, [sp, #20]
 8026366:	ab58      	add	r3, sp, #352	; 0x160
 8026368:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802636c:	ac08      	add	r4, sp, #32
 802636e:	ab44      	add	r3, sp, #272	; 0x110
 8026370:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8026374:	46a4      	mov	ip, r4
 8026376:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802637a:	4637      	mov	r7, r6
 802637c:	2f00      	cmp	r7, #0
 802637e:	f1a0 0004 	sub.w	r0, r0, #4
 8026382:	dc4f      	bgt.n	8026424 <__kernel_rem_pio2f+0x18c>
 8026384:	4628      	mov	r0, r5
 8026386:	e9cd 1206 	strd	r1, r2, [sp, #24]
 802638a:	f000 fa8d 	bl	80268a8 <scalbnf>
 802638e:	eeb0 8a40 	vmov.f32	s16, s0
 8026392:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8026396:	ee28 0a00 	vmul.f32	s0, s16, s0
 802639a:	f000 fa43 	bl	8026824 <floorf>
 802639e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80263a2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80263a6:	2d00      	cmp	r5, #0
 80263a8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80263ac:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80263b0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80263b4:	ee17 9a90 	vmov	r9, s15
 80263b8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80263bc:	dd44      	ble.n	8026448 <__kernel_rem_pio2f+0x1b0>
 80263be:	f106 3cff 	add.w	ip, r6, #4294967295
 80263c2:	ab08      	add	r3, sp, #32
 80263c4:	f1c5 0e08 	rsb	lr, r5, #8
 80263c8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80263cc:	fa47 f00e 	asr.w	r0, r7, lr
 80263d0:	4481      	add	r9, r0
 80263d2:	fa00 f00e 	lsl.w	r0, r0, lr
 80263d6:	1a3f      	subs	r7, r7, r0
 80263d8:	f1c5 0007 	rsb	r0, r5, #7
 80263dc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80263e0:	4107      	asrs	r7, r0
 80263e2:	2f00      	cmp	r7, #0
 80263e4:	dd3f      	ble.n	8026466 <__kernel_rem_pio2f+0x1ce>
 80263e6:	f04f 0e00 	mov.w	lr, #0
 80263ea:	f109 0901 	add.w	r9, r9, #1
 80263ee:	4673      	mov	r3, lr
 80263f0:	4576      	cmp	r6, lr
 80263f2:	dc6b      	bgt.n	80264cc <__kernel_rem_pio2f+0x234>
 80263f4:	2d00      	cmp	r5, #0
 80263f6:	dd04      	ble.n	8026402 <__kernel_rem_pio2f+0x16a>
 80263f8:	2d01      	cmp	r5, #1
 80263fa:	d078      	beq.n	80264ee <__kernel_rem_pio2f+0x256>
 80263fc:	2d02      	cmp	r5, #2
 80263fe:	f000 8081 	beq.w	8026504 <__kernel_rem_pio2f+0x26c>
 8026402:	2f02      	cmp	r7, #2
 8026404:	d12f      	bne.n	8026466 <__kernel_rem_pio2f+0x1ce>
 8026406:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802640a:	ee30 8a48 	vsub.f32	s16, s0, s16
 802640e:	b353      	cbz	r3, 8026466 <__kernel_rem_pio2f+0x1ce>
 8026410:	4628      	mov	r0, r5
 8026412:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8026416:	f000 fa47 	bl	80268a8 <scalbnf>
 802641a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802641e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8026422:	e020      	b.n	8026466 <__kernel_rem_pio2f+0x1ce>
 8026424:	ee60 7a28 	vmul.f32	s15, s0, s17
 8026428:	3f01      	subs	r7, #1
 802642a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802642e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026432:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8026436:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802643a:	ecac 0a01 	vstmia	ip!, {s0}
 802643e:	ed90 0a00 	vldr	s0, [r0]
 8026442:	ee37 0a80 	vadd.f32	s0, s15, s0
 8026446:	e799      	b.n	802637c <__kernel_rem_pio2f+0xe4>
 8026448:	d105      	bne.n	8026456 <__kernel_rem_pio2f+0x1be>
 802644a:	1e70      	subs	r0, r6, #1
 802644c:	ab08      	add	r3, sp, #32
 802644e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8026452:	11ff      	asrs	r7, r7, #7
 8026454:	e7c5      	b.n	80263e2 <__kernel_rem_pio2f+0x14a>
 8026456:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802645a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802645e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026462:	da31      	bge.n	80264c8 <__kernel_rem_pio2f+0x230>
 8026464:	2700      	movs	r7, #0
 8026466:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802646a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802646e:	f040 809b 	bne.w	80265a8 <__kernel_rem_pio2f+0x310>
 8026472:	1e74      	subs	r4, r6, #1
 8026474:	46a4      	mov	ip, r4
 8026476:	2000      	movs	r0, #0
 8026478:	45d4      	cmp	ip, sl
 802647a:	da4a      	bge.n	8026512 <__kernel_rem_pio2f+0x27a>
 802647c:	2800      	cmp	r0, #0
 802647e:	d07a      	beq.n	8026576 <__kernel_rem_pio2f+0x2de>
 8026480:	ab08      	add	r3, sp, #32
 8026482:	3d08      	subs	r5, #8
 8026484:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8026488:	2b00      	cmp	r3, #0
 802648a:	f000 8081 	beq.w	8026590 <__kernel_rem_pio2f+0x2f8>
 802648e:	4628      	mov	r0, r5
 8026490:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8026494:	00a5      	lsls	r5, r4, #2
 8026496:	f000 fa07 	bl	80268a8 <scalbnf>
 802649a:	aa44      	add	r2, sp, #272	; 0x110
 802649c:	1d2b      	adds	r3, r5, #4
 802649e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80265a0 <__kernel_rem_pio2f+0x308>
 80264a2:	18d1      	adds	r1, r2, r3
 80264a4:	4622      	mov	r2, r4
 80264a6:	2a00      	cmp	r2, #0
 80264a8:	f280 80ae 	bge.w	8026608 <__kernel_rem_pio2f+0x370>
 80264ac:	4622      	mov	r2, r4
 80264ae:	2a00      	cmp	r2, #0
 80264b0:	f2c0 80cc 	blt.w	802664c <__kernel_rem_pio2f+0x3b4>
 80264b4:	a944      	add	r1, sp, #272	; 0x110
 80264b6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80264ba:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8026598 <__kernel_rem_pio2f+0x300>
 80264be:	eddf 7a39 	vldr	s15, [pc, #228]	; 80265a4 <__kernel_rem_pio2f+0x30c>
 80264c2:	2000      	movs	r0, #0
 80264c4:	1aa1      	subs	r1, r4, r2
 80264c6:	e0b6      	b.n	8026636 <__kernel_rem_pio2f+0x39e>
 80264c8:	2702      	movs	r7, #2
 80264ca:	e78c      	b.n	80263e6 <__kernel_rem_pio2f+0x14e>
 80264cc:	6820      	ldr	r0, [r4, #0]
 80264ce:	b94b      	cbnz	r3, 80264e4 <__kernel_rem_pio2f+0x24c>
 80264d0:	b118      	cbz	r0, 80264da <__kernel_rem_pio2f+0x242>
 80264d2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80264d6:	6020      	str	r0, [r4, #0]
 80264d8:	2001      	movs	r0, #1
 80264da:	f10e 0e01 	add.w	lr, lr, #1
 80264de:	3404      	adds	r4, #4
 80264e0:	4603      	mov	r3, r0
 80264e2:	e785      	b.n	80263f0 <__kernel_rem_pio2f+0x158>
 80264e4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80264e8:	6020      	str	r0, [r4, #0]
 80264ea:	4618      	mov	r0, r3
 80264ec:	e7f5      	b.n	80264da <__kernel_rem_pio2f+0x242>
 80264ee:	1e74      	subs	r4, r6, #1
 80264f0:	a808      	add	r0, sp, #32
 80264f2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80264f6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80264fa:	f10d 0c20 	add.w	ip, sp, #32
 80264fe:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8026502:	e77e      	b.n	8026402 <__kernel_rem_pio2f+0x16a>
 8026504:	1e74      	subs	r4, r6, #1
 8026506:	a808      	add	r0, sp, #32
 8026508:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 802650c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8026510:	e7f3      	b.n	80264fa <__kernel_rem_pio2f+0x262>
 8026512:	ab08      	add	r3, sp, #32
 8026514:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8026518:	f10c 3cff 	add.w	ip, ip, #4294967295
 802651c:	4318      	orrs	r0, r3
 802651e:	e7ab      	b.n	8026478 <__kernel_rem_pio2f+0x1e0>
 8026520:	f10c 0c01 	add.w	ip, ip, #1
 8026524:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8026528:	2c00      	cmp	r4, #0
 802652a:	d0f9      	beq.n	8026520 <__kernel_rem_pio2f+0x288>
 802652c:	9b05      	ldr	r3, [sp, #20]
 802652e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8026532:	eb0d 0003 	add.w	r0, sp, r3
 8026536:	9b01      	ldr	r3, [sp, #4]
 8026538:	18f4      	adds	r4, r6, r3
 802653a:	ab1c      	add	r3, sp, #112	; 0x70
 802653c:	1c77      	adds	r7, r6, #1
 802653e:	384c      	subs	r0, #76	; 0x4c
 8026540:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8026544:	4466      	add	r6, ip
 8026546:	42be      	cmp	r6, r7
 8026548:	f6ff af0b 	blt.w	8026362 <__kernel_rem_pio2f+0xca>
 802654c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8026550:	f8dd e008 	ldr.w	lr, [sp, #8]
 8026554:	ee07 3a90 	vmov	s15, r3
 8026558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802655c:	f04f 0c00 	mov.w	ip, #0
 8026560:	ece4 7a01 	vstmia	r4!, {s15}
 8026564:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80265a4 <__kernel_rem_pio2f+0x30c>
 8026568:	46a1      	mov	r9, r4
 802656a:	458c      	cmp	ip, r1
 802656c:	dd07      	ble.n	802657e <__kernel_rem_pio2f+0x2e6>
 802656e:	ece0 7a01 	vstmia	r0!, {s15}
 8026572:	3701      	adds	r7, #1
 8026574:	e7e7      	b.n	8026546 <__kernel_rem_pio2f+0x2ae>
 8026576:	9804      	ldr	r0, [sp, #16]
 8026578:	f04f 0c01 	mov.w	ip, #1
 802657c:	e7d2      	b.n	8026524 <__kernel_rem_pio2f+0x28c>
 802657e:	ecfe 6a01 	vldmia	lr!, {s13}
 8026582:	ed39 7a01 	vldmdb	r9!, {s14}
 8026586:	f10c 0c01 	add.w	ip, ip, #1
 802658a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802658e:	e7ec      	b.n	802656a <__kernel_rem_pio2f+0x2d2>
 8026590:	3c01      	subs	r4, #1
 8026592:	e775      	b.n	8026480 <__kernel_rem_pio2f+0x1e8>
 8026594:	0802b6dc 	.word	0x0802b6dc
 8026598:	0802b6b0 	.word	0x0802b6b0
 802659c:	43800000 	.word	0x43800000
 80265a0:	3b800000 	.word	0x3b800000
 80265a4:	00000000 	.word	0x00000000
 80265a8:	9b03      	ldr	r3, [sp, #12]
 80265aa:	eeb0 0a48 	vmov.f32	s0, s16
 80265ae:	1a98      	subs	r0, r3, r2
 80265b0:	f000 f97a 	bl	80268a8 <scalbnf>
 80265b4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 802659c <__kernel_rem_pio2f+0x304>
 80265b8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80265bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80265c0:	db19      	blt.n	80265f6 <__kernel_rem_pio2f+0x35e>
 80265c2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80265a0 <__kernel_rem_pio2f+0x308>
 80265c6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80265ca:	aa08      	add	r2, sp, #32
 80265cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80265d0:	1c74      	adds	r4, r6, #1
 80265d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80265d6:	3508      	adds	r5, #8
 80265d8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80265dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80265e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80265e4:	ee10 3a10 	vmov	r3, s0
 80265e8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80265ec:	ee17 3a90 	vmov	r3, s15
 80265f0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80265f4:	e74b      	b.n	802648e <__kernel_rem_pio2f+0x1f6>
 80265f6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80265fa:	aa08      	add	r2, sp, #32
 80265fc:	ee10 3a10 	vmov	r3, s0
 8026600:	4634      	mov	r4, r6
 8026602:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8026606:	e742      	b.n	802648e <__kernel_rem_pio2f+0x1f6>
 8026608:	a808      	add	r0, sp, #32
 802660a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 802660e:	9001      	str	r0, [sp, #4]
 8026610:	ee07 0a90 	vmov	s15, r0
 8026614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026618:	3a01      	subs	r2, #1
 802661a:	ee67 7a80 	vmul.f32	s15, s15, s0
 802661e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8026622:	ed61 7a01 	vstmdb	r1!, {s15}
 8026626:	e73e      	b.n	80264a6 <__kernel_rem_pio2f+0x20e>
 8026628:	ecfc 6a01 	vldmia	ip!, {s13}
 802662c:	ecb6 7a01 	vldmia	r6!, {s14}
 8026630:	eee6 7a87 	vfma.f32	s15, s13, s14
 8026634:	3001      	adds	r0, #1
 8026636:	4550      	cmp	r0, sl
 8026638:	dc01      	bgt.n	802663e <__kernel_rem_pio2f+0x3a6>
 802663a:	4288      	cmp	r0, r1
 802663c:	ddf4      	ble.n	8026628 <__kernel_rem_pio2f+0x390>
 802663e:	a858      	add	r0, sp, #352	; 0x160
 8026640:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8026644:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8026648:	3a01      	subs	r2, #1
 802664a:	e730      	b.n	80264ae <__kernel_rem_pio2f+0x216>
 802664c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 802664e:	2a02      	cmp	r2, #2
 8026650:	dc09      	bgt.n	8026666 <__kernel_rem_pio2f+0x3ce>
 8026652:	2a00      	cmp	r2, #0
 8026654:	dc2a      	bgt.n	80266ac <__kernel_rem_pio2f+0x414>
 8026656:	d043      	beq.n	80266e0 <__kernel_rem_pio2f+0x448>
 8026658:	f009 0007 	and.w	r0, r9, #7
 802665c:	b059      	add	sp, #356	; 0x164
 802665e:	ecbd 8b04 	vpop	{d8-d9}
 8026662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026666:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8026668:	2b03      	cmp	r3, #3
 802666a:	d1f5      	bne.n	8026658 <__kernel_rem_pio2f+0x3c0>
 802666c:	ab30      	add	r3, sp, #192	; 0xc0
 802666e:	442b      	add	r3, r5
 8026670:	461a      	mov	r2, r3
 8026672:	4619      	mov	r1, r3
 8026674:	4620      	mov	r0, r4
 8026676:	2800      	cmp	r0, #0
 8026678:	f1a1 0104 	sub.w	r1, r1, #4
 802667c:	dc51      	bgt.n	8026722 <__kernel_rem_pio2f+0x48a>
 802667e:	4621      	mov	r1, r4
 8026680:	2901      	cmp	r1, #1
 8026682:	f1a2 0204 	sub.w	r2, r2, #4
 8026686:	dc5c      	bgt.n	8026742 <__kernel_rem_pio2f+0x4aa>
 8026688:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80265a4 <__kernel_rem_pio2f+0x30c>
 802668c:	3304      	adds	r3, #4
 802668e:	2c01      	cmp	r4, #1
 8026690:	dc67      	bgt.n	8026762 <__kernel_rem_pio2f+0x4ca>
 8026692:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8026696:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 802669a:	2f00      	cmp	r7, #0
 802669c:	d167      	bne.n	802676e <__kernel_rem_pio2f+0x4d6>
 802669e:	edc8 6a00 	vstr	s13, [r8]
 80266a2:	ed88 7a01 	vstr	s14, [r8, #4]
 80266a6:	edc8 7a02 	vstr	s15, [r8, #8]
 80266aa:	e7d5      	b.n	8026658 <__kernel_rem_pio2f+0x3c0>
 80266ac:	aa30      	add	r2, sp, #192	; 0xc0
 80266ae:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80265a4 <__kernel_rem_pio2f+0x30c>
 80266b2:	4413      	add	r3, r2
 80266b4:	4622      	mov	r2, r4
 80266b6:	2a00      	cmp	r2, #0
 80266b8:	da24      	bge.n	8026704 <__kernel_rem_pio2f+0x46c>
 80266ba:	b34f      	cbz	r7, 8026710 <__kernel_rem_pio2f+0x478>
 80266bc:	eef1 7a47 	vneg.f32	s15, s14
 80266c0:	edc8 7a00 	vstr	s15, [r8]
 80266c4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80266c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80266cc:	aa31      	add	r2, sp, #196	; 0xc4
 80266ce:	2301      	movs	r3, #1
 80266d0:	429c      	cmp	r4, r3
 80266d2:	da20      	bge.n	8026716 <__kernel_rem_pio2f+0x47e>
 80266d4:	b10f      	cbz	r7, 80266da <__kernel_rem_pio2f+0x442>
 80266d6:	eef1 7a67 	vneg.f32	s15, s15
 80266da:	edc8 7a01 	vstr	s15, [r8, #4]
 80266de:	e7bb      	b.n	8026658 <__kernel_rem_pio2f+0x3c0>
 80266e0:	aa30      	add	r2, sp, #192	; 0xc0
 80266e2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80265a4 <__kernel_rem_pio2f+0x30c>
 80266e6:	4413      	add	r3, r2
 80266e8:	2c00      	cmp	r4, #0
 80266ea:	da05      	bge.n	80266f8 <__kernel_rem_pio2f+0x460>
 80266ec:	b10f      	cbz	r7, 80266f2 <__kernel_rem_pio2f+0x45a>
 80266ee:	eef1 7a67 	vneg.f32	s15, s15
 80266f2:	edc8 7a00 	vstr	s15, [r8]
 80266f6:	e7af      	b.n	8026658 <__kernel_rem_pio2f+0x3c0>
 80266f8:	ed33 7a01 	vldmdb	r3!, {s14}
 80266fc:	3c01      	subs	r4, #1
 80266fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026702:	e7f1      	b.n	80266e8 <__kernel_rem_pio2f+0x450>
 8026704:	ed73 7a01 	vldmdb	r3!, {s15}
 8026708:	3a01      	subs	r2, #1
 802670a:	ee37 7a27 	vadd.f32	s14, s14, s15
 802670e:	e7d2      	b.n	80266b6 <__kernel_rem_pio2f+0x41e>
 8026710:	eef0 7a47 	vmov.f32	s15, s14
 8026714:	e7d4      	b.n	80266c0 <__kernel_rem_pio2f+0x428>
 8026716:	ecb2 7a01 	vldmia	r2!, {s14}
 802671a:	3301      	adds	r3, #1
 802671c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026720:	e7d6      	b.n	80266d0 <__kernel_rem_pio2f+0x438>
 8026722:	edd1 7a00 	vldr	s15, [r1]
 8026726:	edd1 6a01 	vldr	s13, [r1, #4]
 802672a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802672e:	3801      	subs	r0, #1
 8026730:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026734:	ed81 7a00 	vstr	s14, [r1]
 8026738:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802673c:	edc1 7a01 	vstr	s15, [r1, #4]
 8026740:	e799      	b.n	8026676 <__kernel_rem_pio2f+0x3de>
 8026742:	edd2 7a00 	vldr	s15, [r2]
 8026746:	edd2 6a01 	vldr	s13, [r2, #4]
 802674a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802674e:	3901      	subs	r1, #1
 8026750:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026754:	ed82 7a00 	vstr	s14, [r2]
 8026758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802675c:	edc2 7a01 	vstr	s15, [r2, #4]
 8026760:	e78e      	b.n	8026680 <__kernel_rem_pio2f+0x3e8>
 8026762:	ed33 7a01 	vldmdb	r3!, {s14}
 8026766:	3c01      	subs	r4, #1
 8026768:	ee77 7a87 	vadd.f32	s15, s15, s14
 802676c:	e78f      	b.n	802668e <__kernel_rem_pio2f+0x3f6>
 802676e:	eef1 6a66 	vneg.f32	s13, s13
 8026772:	eeb1 7a47 	vneg.f32	s14, s14
 8026776:	edc8 6a00 	vstr	s13, [r8]
 802677a:	ed88 7a01 	vstr	s14, [r8, #4]
 802677e:	eef1 7a67 	vneg.f32	s15, s15
 8026782:	e790      	b.n	80266a6 <__kernel_rem_pio2f+0x40e>

08026784 <__kernel_sinf>:
 8026784:	ee10 3a10 	vmov	r3, s0
 8026788:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802678c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8026790:	da04      	bge.n	802679c <__kernel_sinf+0x18>
 8026792:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8026796:	ee17 3a90 	vmov	r3, s15
 802679a:	b35b      	cbz	r3, 80267f4 <__kernel_sinf+0x70>
 802679c:	ee20 7a00 	vmul.f32	s14, s0, s0
 80267a0:	eddf 7a15 	vldr	s15, [pc, #84]	; 80267f8 <__kernel_sinf+0x74>
 80267a4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80267fc <__kernel_sinf+0x78>
 80267a8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80267ac:	eddf 7a14 	vldr	s15, [pc, #80]	; 8026800 <__kernel_sinf+0x7c>
 80267b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80267b4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8026804 <__kernel_sinf+0x80>
 80267b8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80267bc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8026808 <__kernel_sinf+0x84>
 80267c0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80267c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80267c8:	b930      	cbnz	r0, 80267d8 <__kernel_sinf+0x54>
 80267ca:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802680c <__kernel_sinf+0x88>
 80267ce:	eea7 6a27 	vfma.f32	s12, s14, s15
 80267d2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80267d6:	4770      	bx	lr
 80267d8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80267dc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80267e0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80267e4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80267e8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8026810 <__kernel_sinf+0x8c>
 80267ec:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80267f0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80267f4:	4770      	bx	lr
 80267f6:	bf00      	nop
 80267f8:	2f2ec9d3 	.word	0x2f2ec9d3
 80267fc:	b2d72f34 	.word	0xb2d72f34
 8026800:	3638ef1b 	.word	0x3638ef1b
 8026804:	b9500d01 	.word	0xb9500d01
 8026808:	3c088889 	.word	0x3c088889
 802680c:	be2aaaab 	.word	0xbe2aaaab
 8026810:	3e2aaaab 	.word	0x3e2aaaab

08026814 <fabsf>:
 8026814:	ee10 3a10 	vmov	r3, s0
 8026818:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802681c:	ee00 3a10 	vmov	s0, r3
 8026820:	4770      	bx	lr
	...

08026824 <floorf>:
 8026824:	ee10 3a10 	vmov	r3, s0
 8026828:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802682c:	3a7f      	subs	r2, #127	; 0x7f
 802682e:	2a16      	cmp	r2, #22
 8026830:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8026834:	dc2a      	bgt.n	802688c <floorf+0x68>
 8026836:	2a00      	cmp	r2, #0
 8026838:	da11      	bge.n	802685e <floorf+0x3a>
 802683a:	eddf 7a18 	vldr	s15, [pc, #96]	; 802689c <floorf+0x78>
 802683e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8026842:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8026846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802684a:	dd05      	ble.n	8026858 <floorf+0x34>
 802684c:	2b00      	cmp	r3, #0
 802684e:	da23      	bge.n	8026898 <floorf+0x74>
 8026850:	4a13      	ldr	r2, [pc, #76]	; (80268a0 <floorf+0x7c>)
 8026852:	2900      	cmp	r1, #0
 8026854:	bf18      	it	ne
 8026856:	4613      	movne	r3, r2
 8026858:	ee00 3a10 	vmov	s0, r3
 802685c:	4770      	bx	lr
 802685e:	4911      	ldr	r1, [pc, #68]	; (80268a4 <floorf+0x80>)
 8026860:	4111      	asrs	r1, r2
 8026862:	420b      	tst	r3, r1
 8026864:	d0fa      	beq.n	802685c <floorf+0x38>
 8026866:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802689c <floorf+0x78>
 802686a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802686e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8026872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026876:	ddef      	ble.n	8026858 <floorf+0x34>
 8026878:	2b00      	cmp	r3, #0
 802687a:	bfbe      	ittt	lt
 802687c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8026880:	fa40 f202 	asrlt.w	r2, r0, r2
 8026884:	189b      	addlt	r3, r3, r2
 8026886:	ea23 0301 	bic.w	r3, r3, r1
 802688a:	e7e5      	b.n	8026858 <floorf+0x34>
 802688c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8026890:	d3e4      	bcc.n	802685c <floorf+0x38>
 8026892:	ee30 0a00 	vadd.f32	s0, s0, s0
 8026896:	4770      	bx	lr
 8026898:	2300      	movs	r3, #0
 802689a:	e7dd      	b.n	8026858 <floorf+0x34>
 802689c:	7149f2ca 	.word	0x7149f2ca
 80268a0:	bf800000 	.word	0xbf800000
 80268a4:	007fffff 	.word	0x007fffff

080268a8 <scalbnf>:
 80268a8:	ee10 3a10 	vmov	r3, s0
 80268ac:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80268b0:	d025      	beq.n	80268fe <scalbnf+0x56>
 80268b2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80268b6:	d302      	bcc.n	80268be <scalbnf+0x16>
 80268b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80268bc:	4770      	bx	lr
 80268be:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80268c2:	d122      	bne.n	802690a <scalbnf+0x62>
 80268c4:	4b2a      	ldr	r3, [pc, #168]	; (8026970 <scalbnf+0xc8>)
 80268c6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8026974 <scalbnf+0xcc>
 80268ca:	4298      	cmp	r0, r3
 80268cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80268d0:	db16      	blt.n	8026900 <scalbnf+0x58>
 80268d2:	ee10 3a10 	vmov	r3, s0
 80268d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80268da:	3a19      	subs	r2, #25
 80268dc:	4402      	add	r2, r0
 80268de:	2afe      	cmp	r2, #254	; 0xfe
 80268e0:	dd15      	ble.n	802690e <scalbnf+0x66>
 80268e2:	ee10 3a10 	vmov	r3, s0
 80268e6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8026978 <scalbnf+0xd0>
 80268ea:	eddf 6a24 	vldr	s13, [pc, #144]	; 802697c <scalbnf+0xd4>
 80268ee:	2b00      	cmp	r3, #0
 80268f0:	eeb0 7a67 	vmov.f32	s14, s15
 80268f4:	bfb8      	it	lt
 80268f6:	eef0 7a66 	vmovlt.f32	s15, s13
 80268fa:	ee27 0a27 	vmul.f32	s0, s14, s15
 80268fe:	4770      	bx	lr
 8026900:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8026980 <scalbnf+0xd8>
 8026904:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026908:	4770      	bx	lr
 802690a:	0dd2      	lsrs	r2, r2, #23
 802690c:	e7e6      	b.n	80268dc <scalbnf+0x34>
 802690e:	2a00      	cmp	r2, #0
 8026910:	dd06      	ble.n	8026920 <scalbnf+0x78>
 8026912:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8026916:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802691a:	ee00 3a10 	vmov	s0, r3
 802691e:	4770      	bx	lr
 8026920:	f112 0f16 	cmn.w	r2, #22
 8026924:	da1a      	bge.n	802695c <scalbnf+0xb4>
 8026926:	f24c 3350 	movw	r3, #50000	; 0xc350
 802692a:	4298      	cmp	r0, r3
 802692c:	ee10 3a10 	vmov	r3, s0
 8026930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8026934:	dd0a      	ble.n	802694c <scalbnf+0xa4>
 8026936:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8026978 <scalbnf+0xd0>
 802693a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 802697c <scalbnf+0xd4>
 802693e:	eef0 7a40 	vmov.f32	s15, s0
 8026942:	2b00      	cmp	r3, #0
 8026944:	bf18      	it	ne
 8026946:	eeb0 0a47 	vmovne.f32	s0, s14
 802694a:	e7db      	b.n	8026904 <scalbnf+0x5c>
 802694c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8026980 <scalbnf+0xd8>
 8026950:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8026984 <scalbnf+0xdc>
 8026954:	eef0 7a40 	vmov.f32	s15, s0
 8026958:	2b00      	cmp	r3, #0
 802695a:	e7f3      	b.n	8026944 <scalbnf+0x9c>
 802695c:	3219      	adds	r2, #25
 802695e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8026962:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8026966:	eddf 7a08 	vldr	s15, [pc, #32]	; 8026988 <scalbnf+0xe0>
 802696a:	ee07 3a10 	vmov	s14, r3
 802696e:	e7c4      	b.n	80268fa <scalbnf+0x52>
 8026970:	ffff3cb0 	.word	0xffff3cb0
 8026974:	4c000000 	.word	0x4c000000
 8026978:	7149f2ca 	.word	0x7149f2ca
 802697c:	f149f2ca 	.word	0xf149f2ca
 8026980:	0da24260 	.word	0x0da24260
 8026984:	8da24260 	.word	0x8da24260
 8026988:	33000000 	.word	0x33000000

0802698c <abort>:
 802698c:	b508      	push	{r3, lr}
 802698e:	2006      	movs	r0, #6
 8026990:	f000 fe58 	bl	8027644 <raise>
 8026994:	2001      	movs	r0, #1
 8026996:	f7db f913 	bl	8001bc0 <_exit>
	...

0802699c <__assert_func>:
 802699c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802699e:	4614      	mov	r4, r2
 80269a0:	461a      	mov	r2, r3
 80269a2:	4b09      	ldr	r3, [pc, #36]	; (80269c8 <__assert_func+0x2c>)
 80269a4:	681b      	ldr	r3, [r3, #0]
 80269a6:	4605      	mov	r5, r0
 80269a8:	68d8      	ldr	r0, [r3, #12]
 80269aa:	b14c      	cbz	r4, 80269c0 <__assert_func+0x24>
 80269ac:	4b07      	ldr	r3, [pc, #28]	; (80269cc <__assert_func+0x30>)
 80269ae:	9100      	str	r1, [sp, #0]
 80269b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80269b4:	4906      	ldr	r1, [pc, #24]	; (80269d0 <__assert_func+0x34>)
 80269b6:	462b      	mov	r3, r5
 80269b8:	f000 f8fe 	bl	8026bb8 <fiprintf>
 80269bc:	f7ff ffe6 	bl	802698c <abort>
 80269c0:	4b04      	ldr	r3, [pc, #16]	; (80269d4 <__assert_func+0x38>)
 80269c2:	461c      	mov	r4, r3
 80269c4:	e7f3      	b.n	80269ae <__assert_func+0x12>
 80269c6:	bf00      	nop
 80269c8:	20000098 	.word	0x20000098
 80269cc:	0802b6e8 	.word	0x0802b6e8
 80269d0:	0802b6f5 	.word	0x0802b6f5
 80269d4:	0802b723 	.word	0x0802b723

080269d8 <atexit>:
 80269d8:	2300      	movs	r3, #0
 80269da:	4601      	mov	r1, r0
 80269dc:	461a      	mov	r2, r3
 80269de:	4618      	mov	r0, r3
 80269e0:	f000 bf62 	b.w	80278a8 <__register_exitproc>

080269e4 <__cxa_atexit>:
 80269e4:	b510      	push	{r4, lr}
 80269e6:	4c05      	ldr	r4, [pc, #20]	; (80269fc <__cxa_atexit+0x18>)
 80269e8:	4613      	mov	r3, r2
 80269ea:	b12c      	cbz	r4, 80269f8 <__cxa_atexit+0x14>
 80269ec:	460a      	mov	r2, r1
 80269ee:	4601      	mov	r1, r0
 80269f0:	2002      	movs	r0, #2
 80269f2:	f000 ff59 	bl	80278a8 <__register_exitproc>
 80269f6:	bd10      	pop	{r4, pc}
 80269f8:	4620      	mov	r0, r4
 80269fa:	e7fc      	b.n	80269f6 <__cxa_atexit+0x12>
 80269fc:	080278a9 	.word	0x080278a9

08026a00 <__errno>:
 8026a00:	4b01      	ldr	r3, [pc, #4]	; (8026a08 <__errno+0x8>)
 8026a02:	6818      	ldr	r0, [r3, #0]
 8026a04:	4770      	bx	lr
 8026a06:	bf00      	nop
 8026a08:	20000098 	.word	0x20000098

08026a0c <std>:
 8026a0c:	2300      	movs	r3, #0
 8026a0e:	b510      	push	{r4, lr}
 8026a10:	4604      	mov	r4, r0
 8026a12:	e9c0 3300 	strd	r3, r3, [r0]
 8026a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026a1a:	6083      	str	r3, [r0, #8]
 8026a1c:	8181      	strh	r1, [r0, #12]
 8026a1e:	6643      	str	r3, [r0, #100]	; 0x64
 8026a20:	81c2      	strh	r2, [r0, #14]
 8026a22:	6183      	str	r3, [r0, #24]
 8026a24:	4619      	mov	r1, r3
 8026a26:	2208      	movs	r2, #8
 8026a28:	305c      	adds	r0, #92	; 0x5c
 8026a2a:	f000 f93d 	bl	8026ca8 <memset>
 8026a2e:	4b05      	ldr	r3, [pc, #20]	; (8026a44 <std+0x38>)
 8026a30:	6263      	str	r3, [r4, #36]	; 0x24
 8026a32:	4b05      	ldr	r3, [pc, #20]	; (8026a48 <std+0x3c>)
 8026a34:	62a3      	str	r3, [r4, #40]	; 0x28
 8026a36:	4b05      	ldr	r3, [pc, #20]	; (8026a4c <std+0x40>)
 8026a38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8026a3a:	4b05      	ldr	r3, [pc, #20]	; (8026a50 <std+0x44>)
 8026a3c:	6224      	str	r4, [r4, #32]
 8026a3e:	6323      	str	r3, [r4, #48]	; 0x30
 8026a40:	bd10      	pop	{r4, pc}
 8026a42:	bf00      	nop
 8026a44:	0802767d 	.word	0x0802767d
 8026a48:	0802769f 	.word	0x0802769f
 8026a4c:	080276d7 	.word	0x080276d7
 8026a50:	080276fb 	.word	0x080276fb

08026a54 <_cleanup_r>:
 8026a54:	4901      	ldr	r1, [pc, #4]	; (8026a5c <_cleanup_r+0x8>)
 8026a56:	f000 b8c1 	b.w	8026bdc <_fwalk_reent>
 8026a5a:	bf00      	nop
 8026a5c:	08027a99 	.word	0x08027a99

08026a60 <__sfmoreglue>:
 8026a60:	b570      	push	{r4, r5, r6, lr}
 8026a62:	2268      	movs	r2, #104	; 0x68
 8026a64:	1e4d      	subs	r5, r1, #1
 8026a66:	4355      	muls	r5, r2
 8026a68:	460e      	mov	r6, r1
 8026a6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026a6e:	f000 f98f 	bl	8026d90 <_malloc_r>
 8026a72:	4604      	mov	r4, r0
 8026a74:	b140      	cbz	r0, 8026a88 <__sfmoreglue+0x28>
 8026a76:	2100      	movs	r1, #0
 8026a78:	e9c0 1600 	strd	r1, r6, [r0]
 8026a7c:	300c      	adds	r0, #12
 8026a7e:	60a0      	str	r0, [r4, #8]
 8026a80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026a84:	f000 f910 	bl	8026ca8 <memset>
 8026a88:	4620      	mov	r0, r4
 8026a8a:	bd70      	pop	{r4, r5, r6, pc}

08026a8c <__sfp_lock_acquire>:
 8026a8c:	4801      	ldr	r0, [pc, #4]	; (8026a94 <__sfp_lock_acquire+0x8>)
 8026a8e:	f000 b8ea 	b.w	8026c66 <__retarget_lock_acquire_recursive>
 8026a92:	bf00      	nop
 8026a94:	2000890e 	.word	0x2000890e

08026a98 <__sfp_lock_release>:
 8026a98:	4801      	ldr	r0, [pc, #4]	; (8026aa0 <__sfp_lock_release+0x8>)
 8026a9a:	f000 b8e6 	b.w	8026c6a <__retarget_lock_release_recursive>
 8026a9e:	bf00      	nop
 8026aa0:	2000890e 	.word	0x2000890e

08026aa4 <__sinit_lock_acquire>:
 8026aa4:	4801      	ldr	r0, [pc, #4]	; (8026aac <__sinit_lock_acquire+0x8>)
 8026aa6:	f000 b8de 	b.w	8026c66 <__retarget_lock_acquire_recursive>
 8026aaa:	bf00      	nop
 8026aac:	2000890f 	.word	0x2000890f

08026ab0 <__sinit_lock_release>:
 8026ab0:	4801      	ldr	r0, [pc, #4]	; (8026ab8 <__sinit_lock_release+0x8>)
 8026ab2:	f000 b8da 	b.w	8026c6a <__retarget_lock_release_recursive>
 8026ab6:	bf00      	nop
 8026ab8:	2000890f 	.word	0x2000890f

08026abc <__sinit>:
 8026abc:	b510      	push	{r4, lr}
 8026abe:	4604      	mov	r4, r0
 8026ac0:	f7ff fff0 	bl	8026aa4 <__sinit_lock_acquire>
 8026ac4:	69a3      	ldr	r3, [r4, #24]
 8026ac6:	b11b      	cbz	r3, 8026ad0 <__sinit+0x14>
 8026ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026acc:	f7ff bff0 	b.w	8026ab0 <__sinit_lock_release>
 8026ad0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026ad4:	6523      	str	r3, [r4, #80]	; 0x50
 8026ad6:	4b13      	ldr	r3, [pc, #76]	; (8026b24 <__sinit+0x68>)
 8026ad8:	4a13      	ldr	r2, [pc, #76]	; (8026b28 <__sinit+0x6c>)
 8026ada:	681b      	ldr	r3, [r3, #0]
 8026adc:	62a2      	str	r2, [r4, #40]	; 0x28
 8026ade:	42a3      	cmp	r3, r4
 8026ae0:	bf04      	itt	eq
 8026ae2:	2301      	moveq	r3, #1
 8026ae4:	61a3      	streq	r3, [r4, #24]
 8026ae6:	4620      	mov	r0, r4
 8026ae8:	f000 f820 	bl	8026b2c <__sfp>
 8026aec:	6060      	str	r0, [r4, #4]
 8026aee:	4620      	mov	r0, r4
 8026af0:	f000 f81c 	bl	8026b2c <__sfp>
 8026af4:	60a0      	str	r0, [r4, #8]
 8026af6:	4620      	mov	r0, r4
 8026af8:	f000 f818 	bl	8026b2c <__sfp>
 8026afc:	2200      	movs	r2, #0
 8026afe:	60e0      	str	r0, [r4, #12]
 8026b00:	2104      	movs	r1, #4
 8026b02:	6860      	ldr	r0, [r4, #4]
 8026b04:	f7ff ff82 	bl	8026a0c <std>
 8026b08:	68a0      	ldr	r0, [r4, #8]
 8026b0a:	2201      	movs	r2, #1
 8026b0c:	2109      	movs	r1, #9
 8026b0e:	f7ff ff7d 	bl	8026a0c <std>
 8026b12:	68e0      	ldr	r0, [r4, #12]
 8026b14:	2202      	movs	r2, #2
 8026b16:	2112      	movs	r1, #18
 8026b18:	f7ff ff78 	bl	8026a0c <std>
 8026b1c:	2301      	movs	r3, #1
 8026b1e:	61a3      	str	r3, [r4, #24]
 8026b20:	e7d2      	b.n	8026ac8 <__sinit+0xc>
 8026b22:	bf00      	nop
 8026b24:	0802b784 	.word	0x0802b784
 8026b28:	08026a55 	.word	0x08026a55

08026b2c <__sfp>:
 8026b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026b2e:	4607      	mov	r7, r0
 8026b30:	f7ff ffac 	bl	8026a8c <__sfp_lock_acquire>
 8026b34:	4b1e      	ldr	r3, [pc, #120]	; (8026bb0 <__sfp+0x84>)
 8026b36:	681e      	ldr	r6, [r3, #0]
 8026b38:	69b3      	ldr	r3, [r6, #24]
 8026b3a:	b913      	cbnz	r3, 8026b42 <__sfp+0x16>
 8026b3c:	4630      	mov	r0, r6
 8026b3e:	f7ff ffbd 	bl	8026abc <__sinit>
 8026b42:	3648      	adds	r6, #72	; 0x48
 8026b44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026b48:	3b01      	subs	r3, #1
 8026b4a:	d503      	bpl.n	8026b54 <__sfp+0x28>
 8026b4c:	6833      	ldr	r3, [r6, #0]
 8026b4e:	b30b      	cbz	r3, 8026b94 <__sfp+0x68>
 8026b50:	6836      	ldr	r6, [r6, #0]
 8026b52:	e7f7      	b.n	8026b44 <__sfp+0x18>
 8026b54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8026b58:	b9d5      	cbnz	r5, 8026b90 <__sfp+0x64>
 8026b5a:	4b16      	ldr	r3, [pc, #88]	; (8026bb4 <__sfp+0x88>)
 8026b5c:	60e3      	str	r3, [r4, #12]
 8026b5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026b62:	6665      	str	r5, [r4, #100]	; 0x64
 8026b64:	f000 f87e 	bl	8026c64 <__retarget_lock_init_recursive>
 8026b68:	f7ff ff96 	bl	8026a98 <__sfp_lock_release>
 8026b6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8026b70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8026b74:	6025      	str	r5, [r4, #0]
 8026b76:	61a5      	str	r5, [r4, #24]
 8026b78:	2208      	movs	r2, #8
 8026b7a:	4629      	mov	r1, r5
 8026b7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026b80:	f000 f892 	bl	8026ca8 <memset>
 8026b84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026b88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026b8c:	4620      	mov	r0, r4
 8026b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026b90:	3468      	adds	r4, #104	; 0x68
 8026b92:	e7d9      	b.n	8026b48 <__sfp+0x1c>
 8026b94:	2104      	movs	r1, #4
 8026b96:	4638      	mov	r0, r7
 8026b98:	f7ff ff62 	bl	8026a60 <__sfmoreglue>
 8026b9c:	4604      	mov	r4, r0
 8026b9e:	6030      	str	r0, [r6, #0]
 8026ba0:	2800      	cmp	r0, #0
 8026ba2:	d1d5      	bne.n	8026b50 <__sfp+0x24>
 8026ba4:	f7ff ff78 	bl	8026a98 <__sfp_lock_release>
 8026ba8:	230c      	movs	r3, #12
 8026baa:	603b      	str	r3, [r7, #0]
 8026bac:	e7ee      	b.n	8026b8c <__sfp+0x60>
 8026bae:	bf00      	nop
 8026bb0:	0802b784 	.word	0x0802b784
 8026bb4:	ffff0001 	.word	0xffff0001

08026bb8 <fiprintf>:
 8026bb8:	b40e      	push	{r1, r2, r3}
 8026bba:	b503      	push	{r0, r1, lr}
 8026bbc:	4601      	mov	r1, r0
 8026bbe:	ab03      	add	r3, sp, #12
 8026bc0:	4805      	ldr	r0, [pc, #20]	; (8026bd8 <fiprintf+0x20>)
 8026bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8026bc6:	6800      	ldr	r0, [r0, #0]
 8026bc8:	9301      	str	r3, [sp, #4]
 8026bca:	f000 f97f 	bl	8026ecc <_vfiprintf_r>
 8026bce:	b002      	add	sp, #8
 8026bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8026bd4:	b003      	add	sp, #12
 8026bd6:	4770      	bx	lr
 8026bd8:	20000098 	.word	0x20000098

08026bdc <_fwalk_reent>:
 8026bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026be0:	4606      	mov	r6, r0
 8026be2:	4688      	mov	r8, r1
 8026be4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026be8:	2700      	movs	r7, #0
 8026bea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026bee:	f1b9 0901 	subs.w	r9, r9, #1
 8026bf2:	d505      	bpl.n	8026c00 <_fwalk_reent+0x24>
 8026bf4:	6824      	ldr	r4, [r4, #0]
 8026bf6:	2c00      	cmp	r4, #0
 8026bf8:	d1f7      	bne.n	8026bea <_fwalk_reent+0xe>
 8026bfa:	4638      	mov	r0, r7
 8026bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026c00:	89ab      	ldrh	r3, [r5, #12]
 8026c02:	2b01      	cmp	r3, #1
 8026c04:	d907      	bls.n	8026c16 <_fwalk_reent+0x3a>
 8026c06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026c0a:	3301      	adds	r3, #1
 8026c0c:	d003      	beq.n	8026c16 <_fwalk_reent+0x3a>
 8026c0e:	4629      	mov	r1, r5
 8026c10:	4630      	mov	r0, r6
 8026c12:	47c0      	blx	r8
 8026c14:	4307      	orrs	r7, r0
 8026c16:	3568      	adds	r5, #104	; 0x68
 8026c18:	e7e9      	b.n	8026bee <_fwalk_reent+0x12>
	...

08026c1c <__libc_init_array>:
 8026c1c:	b570      	push	{r4, r5, r6, lr}
 8026c1e:	4d0d      	ldr	r5, [pc, #52]	; (8026c54 <__libc_init_array+0x38>)
 8026c20:	4c0d      	ldr	r4, [pc, #52]	; (8026c58 <__libc_init_array+0x3c>)
 8026c22:	1b64      	subs	r4, r4, r5
 8026c24:	10a4      	asrs	r4, r4, #2
 8026c26:	2600      	movs	r6, #0
 8026c28:	42a6      	cmp	r6, r4
 8026c2a:	d109      	bne.n	8026c40 <__libc_init_array+0x24>
 8026c2c:	4d0b      	ldr	r5, [pc, #44]	; (8026c5c <__libc_init_array+0x40>)
 8026c2e:	4c0c      	ldr	r4, [pc, #48]	; (8026c60 <__libc_init_array+0x44>)
 8026c30:	f001 f826 	bl	8027c80 <_init>
 8026c34:	1b64      	subs	r4, r4, r5
 8026c36:	10a4      	asrs	r4, r4, #2
 8026c38:	2600      	movs	r6, #0
 8026c3a:	42a6      	cmp	r6, r4
 8026c3c:	d105      	bne.n	8026c4a <__libc_init_array+0x2e>
 8026c3e:	bd70      	pop	{r4, r5, r6, pc}
 8026c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8026c44:	4798      	blx	r3
 8026c46:	3601      	adds	r6, #1
 8026c48:	e7ee      	b.n	8026c28 <__libc_init_array+0xc>
 8026c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8026c4e:	4798      	blx	r3
 8026c50:	3601      	adds	r6, #1
 8026c52:	e7f2      	b.n	8026c3a <__libc_init_array+0x1e>
 8026c54:	0802d81c 	.word	0x0802d81c
 8026c58:	0802d81c 	.word	0x0802d81c
 8026c5c:	0802d81c 	.word	0x0802d81c
 8026c60:	0802d834 	.word	0x0802d834

08026c64 <__retarget_lock_init_recursive>:
 8026c64:	4770      	bx	lr

08026c66 <__retarget_lock_acquire_recursive>:
 8026c66:	4770      	bx	lr

08026c68 <__retarget_lock_release>:
 8026c68:	4770      	bx	lr

08026c6a <__retarget_lock_release_recursive>:
 8026c6a:	4770      	bx	lr

08026c6c <malloc>:
 8026c6c:	4b02      	ldr	r3, [pc, #8]	; (8026c78 <malloc+0xc>)
 8026c6e:	4601      	mov	r1, r0
 8026c70:	6818      	ldr	r0, [r3, #0]
 8026c72:	f000 b88d 	b.w	8026d90 <_malloc_r>
 8026c76:	bf00      	nop
 8026c78:	20000098 	.word	0x20000098

08026c7c <free>:
 8026c7c:	4b02      	ldr	r3, [pc, #8]	; (8026c88 <free+0xc>)
 8026c7e:	4601      	mov	r1, r0
 8026c80:	6818      	ldr	r0, [r3, #0]
 8026c82:	f000 b819 	b.w	8026cb8 <_free_r>
 8026c86:	bf00      	nop
 8026c88:	20000098 	.word	0x20000098

08026c8c <memcpy>:
 8026c8c:	440a      	add	r2, r1
 8026c8e:	4291      	cmp	r1, r2
 8026c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8026c94:	d100      	bne.n	8026c98 <memcpy+0xc>
 8026c96:	4770      	bx	lr
 8026c98:	b510      	push	{r4, lr}
 8026c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026ca2:	4291      	cmp	r1, r2
 8026ca4:	d1f9      	bne.n	8026c9a <memcpy+0xe>
 8026ca6:	bd10      	pop	{r4, pc}

08026ca8 <memset>:
 8026ca8:	4402      	add	r2, r0
 8026caa:	4603      	mov	r3, r0
 8026cac:	4293      	cmp	r3, r2
 8026cae:	d100      	bne.n	8026cb2 <memset+0xa>
 8026cb0:	4770      	bx	lr
 8026cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8026cb6:	e7f9      	b.n	8026cac <memset+0x4>

08026cb8 <_free_r>:
 8026cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026cba:	2900      	cmp	r1, #0
 8026cbc:	d044      	beq.n	8026d48 <_free_r+0x90>
 8026cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026cc2:	9001      	str	r0, [sp, #4]
 8026cc4:	2b00      	cmp	r3, #0
 8026cc6:	f1a1 0404 	sub.w	r4, r1, #4
 8026cca:	bfb8      	it	lt
 8026ccc:	18e4      	addlt	r4, r4, r3
 8026cce:	f000 ff97 	bl	8027c00 <__malloc_lock>
 8026cd2:	4a1e      	ldr	r2, [pc, #120]	; (8026d4c <_free_r+0x94>)
 8026cd4:	9801      	ldr	r0, [sp, #4]
 8026cd6:	6813      	ldr	r3, [r2, #0]
 8026cd8:	b933      	cbnz	r3, 8026ce8 <_free_r+0x30>
 8026cda:	6063      	str	r3, [r4, #4]
 8026cdc:	6014      	str	r4, [r2, #0]
 8026cde:	b003      	add	sp, #12
 8026ce0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026ce4:	f000 bf92 	b.w	8027c0c <__malloc_unlock>
 8026ce8:	42a3      	cmp	r3, r4
 8026cea:	d908      	bls.n	8026cfe <_free_r+0x46>
 8026cec:	6825      	ldr	r5, [r4, #0]
 8026cee:	1961      	adds	r1, r4, r5
 8026cf0:	428b      	cmp	r3, r1
 8026cf2:	bf01      	itttt	eq
 8026cf4:	6819      	ldreq	r1, [r3, #0]
 8026cf6:	685b      	ldreq	r3, [r3, #4]
 8026cf8:	1949      	addeq	r1, r1, r5
 8026cfa:	6021      	streq	r1, [r4, #0]
 8026cfc:	e7ed      	b.n	8026cda <_free_r+0x22>
 8026cfe:	461a      	mov	r2, r3
 8026d00:	685b      	ldr	r3, [r3, #4]
 8026d02:	b10b      	cbz	r3, 8026d08 <_free_r+0x50>
 8026d04:	42a3      	cmp	r3, r4
 8026d06:	d9fa      	bls.n	8026cfe <_free_r+0x46>
 8026d08:	6811      	ldr	r1, [r2, #0]
 8026d0a:	1855      	adds	r5, r2, r1
 8026d0c:	42a5      	cmp	r5, r4
 8026d0e:	d10b      	bne.n	8026d28 <_free_r+0x70>
 8026d10:	6824      	ldr	r4, [r4, #0]
 8026d12:	4421      	add	r1, r4
 8026d14:	1854      	adds	r4, r2, r1
 8026d16:	42a3      	cmp	r3, r4
 8026d18:	6011      	str	r1, [r2, #0]
 8026d1a:	d1e0      	bne.n	8026cde <_free_r+0x26>
 8026d1c:	681c      	ldr	r4, [r3, #0]
 8026d1e:	685b      	ldr	r3, [r3, #4]
 8026d20:	6053      	str	r3, [r2, #4]
 8026d22:	4421      	add	r1, r4
 8026d24:	6011      	str	r1, [r2, #0]
 8026d26:	e7da      	b.n	8026cde <_free_r+0x26>
 8026d28:	d902      	bls.n	8026d30 <_free_r+0x78>
 8026d2a:	230c      	movs	r3, #12
 8026d2c:	6003      	str	r3, [r0, #0]
 8026d2e:	e7d6      	b.n	8026cde <_free_r+0x26>
 8026d30:	6825      	ldr	r5, [r4, #0]
 8026d32:	1961      	adds	r1, r4, r5
 8026d34:	428b      	cmp	r3, r1
 8026d36:	bf04      	itt	eq
 8026d38:	6819      	ldreq	r1, [r3, #0]
 8026d3a:	685b      	ldreq	r3, [r3, #4]
 8026d3c:	6063      	str	r3, [r4, #4]
 8026d3e:	bf04      	itt	eq
 8026d40:	1949      	addeq	r1, r1, r5
 8026d42:	6021      	streq	r1, [r4, #0]
 8026d44:	6054      	str	r4, [r2, #4]
 8026d46:	e7ca      	b.n	8026cde <_free_r+0x26>
 8026d48:	b003      	add	sp, #12
 8026d4a:	bd30      	pop	{r4, r5, pc}
 8026d4c:	20008910 	.word	0x20008910

08026d50 <sbrk_aligned>:
 8026d50:	b570      	push	{r4, r5, r6, lr}
 8026d52:	4e0e      	ldr	r6, [pc, #56]	; (8026d8c <sbrk_aligned+0x3c>)
 8026d54:	460c      	mov	r4, r1
 8026d56:	6831      	ldr	r1, [r6, #0]
 8026d58:	4605      	mov	r5, r0
 8026d5a:	b911      	cbnz	r1, 8026d62 <sbrk_aligned+0x12>
 8026d5c:	f000 fc3a 	bl	80275d4 <_sbrk_r>
 8026d60:	6030      	str	r0, [r6, #0]
 8026d62:	4621      	mov	r1, r4
 8026d64:	4628      	mov	r0, r5
 8026d66:	f000 fc35 	bl	80275d4 <_sbrk_r>
 8026d6a:	1c43      	adds	r3, r0, #1
 8026d6c:	d00a      	beq.n	8026d84 <sbrk_aligned+0x34>
 8026d6e:	1cc4      	adds	r4, r0, #3
 8026d70:	f024 0403 	bic.w	r4, r4, #3
 8026d74:	42a0      	cmp	r0, r4
 8026d76:	d007      	beq.n	8026d88 <sbrk_aligned+0x38>
 8026d78:	1a21      	subs	r1, r4, r0
 8026d7a:	4628      	mov	r0, r5
 8026d7c:	f000 fc2a 	bl	80275d4 <_sbrk_r>
 8026d80:	3001      	adds	r0, #1
 8026d82:	d101      	bne.n	8026d88 <sbrk_aligned+0x38>
 8026d84:	f04f 34ff 	mov.w	r4, #4294967295
 8026d88:	4620      	mov	r0, r4
 8026d8a:	bd70      	pop	{r4, r5, r6, pc}
 8026d8c:	20008914 	.word	0x20008914

08026d90 <_malloc_r>:
 8026d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026d94:	1ccd      	adds	r5, r1, #3
 8026d96:	f025 0503 	bic.w	r5, r5, #3
 8026d9a:	3508      	adds	r5, #8
 8026d9c:	2d0c      	cmp	r5, #12
 8026d9e:	bf38      	it	cc
 8026da0:	250c      	movcc	r5, #12
 8026da2:	2d00      	cmp	r5, #0
 8026da4:	4607      	mov	r7, r0
 8026da6:	db01      	blt.n	8026dac <_malloc_r+0x1c>
 8026da8:	42a9      	cmp	r1, r5
 8026daa:	d905      	bls.n	8026db8 <_malloc_r+0x28>
 8026dac:	230c      	movs	r3, #12
 8026dae:	603b      	str	r3, [r7, #0]
 8026db0:	2600      	movs	r6, #0
 8026db2:	4630      	mov	r0, r6
 8026db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026db8:	4e2e      	ldr	r6, [pc, #184]	; (8026e74 <_malloc_r+0xe4>)
 8026dba:	f000 ff21 	bl	8027c00 <__malloc_lock>
 8026dbe:	6833      	ldr	r3, [r6, #0]
 8026dc0:	461c      	mov	r4, r3
 8026dc2:	bb34      	cbnz	r4, 8026e12 <_malloc_r+0x82>
 8026dc4:	4629      	mov	r1, r5
 8026dc6:	4638      	mov	r0, r7
 8026dc8:	f7ff ffc2 	bl	8026d50 <sbrk_aligned>
 8026dcc:	1c43      	adds	r3, r0, #1
 8026dce:	4604      	mov	r4, r0
 8026dd0:	d14d      	bne.n	8026e6e <_malloc_r+0xde>
 8026dd2:	6834      	ldr	r4, [r6, #0]
 8026dd4:	4626      	mov	r6, r4
 8026dd6:	2e00      	cmp	r6, #0
 8026dd8:	d140      	bne.n	8026e5c <_malloc_r+0xcc>
 8026dda:	6823      	ldr	r3, [r4, #0]
 8026ddc:	4631      	mov	r1, r6
 8026dde:	4638      	mov	r0, r7
 8026de0:	eb04 0803 	add.w	r8, r4, r3
 8026de4:	f000 fbf6 	bl	80275d4 <_sbrk_r>
 8026de8:	4580      	cmp	r8, r0
 8026dea:	d13a      	bne.n	8026e62 <_malloc_r+0xd2>
 8026dec:	6821      	ldr	r1, [r4, #0]
 8026dee:	3503      	adds	r5, #3
 8026df0:	1a6d      	subs	r5, r5, r1
 8026df2:	f025 0503 	bic.w	r5, r5, #3
 8026df6:	3508      	adds	r5, #8
 8026df8:	2d0c      	cmp	r5, #12
 8026dfa:	bf38      	it	cc
 8026dfc:	250c      	movcc	r5, #12
 8026dfe:	4629      	mov	r1, r5
 8026e00:	4638      	mov	r0, r7
 8026e02:	f7ff ffa5 	bl	8026d50 <sbrk_aligned>
 8026e06:	3001      	adds	r0, #1
 8026e08:	d02b      	beq.n	8026e62 <_malloc_r+0xd2>
 8026e0a:	6823      	ldr	r3, [r4, #0]
 8026e0c:	442b      	add	r3, r5
 8026e0e:	6023      	str	r3, [r4, #0]
 8026e10:	e00e      	b.n	8026e30 <_malloc_r+0xa0>
 8026e12:	6822      	ldr	r2, [r4, #0]
 8026e14:	1b52      	subs	r2, r2, r5
 8026e16:	d41e      	bmi.n	8026e56 <_malloc_r+0xc6>
 8026e18:	2a0b      	cmp	r2, #11
 8026e1a:	d916      	bls.n	8026e4a <_malloc_r+0xba>
 8026e1c:	1961      	adds	r1, r4, r5
 8026e1e:	42a3      	cmp	r3, r4
 8026e20:	6025      	str	r5, [r4, #0]
 8026e22:	bf18      	it	ne
 8026e24:	6059      	strne	r1, [r3, #4]
 8026e26:	6863      	ldr	r3, [r4, #4]
 8026e28:	bf08      	it	eq
 8026e2a:	6031      	streq	r1, [r6, #0]
 8026e2c:	5162      	str	r2, [r4, r5]
 8026e2e:	604b      	str	r3, [r1, #4]
 8026e30:	4638      	mov	r0, r7
 8026e32:	f104 060b 	add.w	r6, r4, #11
 8026e36:	f000 fee9 	bl	8027c0c <__malloc_unlock>
 8026e3a:	f026 0607 	bic.w	r6, r6, #7
 8026e3e:	1d23      	adds	r3, r4, #4
 8026e40:	1af2      	subs	r2, r6, r3
 8026e42:	d0b6      	beq.n	8026db2 <_malloc_r+0x22>
 8026e44:	1b9b      	subs	r3, r3, r6
 8026e46:	50a3      	str	r3, [r4, r2]
 8026e48:	e7b3      	b.n	8026db2 <_malloc_r+0x22>
 8026e4a:	6862      	ldr	r2, [r4, #4]
 8026e4c:	42a3      	cmp	r3, r4
 8026e4e:	bf0c      	ite	eq
 8026e50:	6032      	streq	r2, [r6, #0]
 8026e52:	605a      	strne	r2, [r3, #4]
 8026e54:	e7ec      	b.n	8026e30 <_malloc_r+0xa0>
 8026e56:	4623      	mov	r3, r4
 8026e58:	6864      	ldr	r4, [r4, #4]
 8026e5a:	e7b2      	b.n	8026dc2 <_malloc_r+0x32>
 8026e5c:	4634      	mov	r4, r6
 8026e5e:	6876      	ldr	r6, [r6, #4]
 8026e60:	e7b9      	b.n	8026dd6 <_malloc_r+0x46>
 8026e62:	230c      	movs	r3, #12
 8026e64:	603b      	str	r3, [r7, #0]
 8026e66:	4638      	mov	r0, r7
 8026e68:	f000 fed0 	bl	8027c0c <__malloc_unlock>
 8026e6c:	e7a1      	b.n	8026db2 <_malloc_r+0x22>
 8026e6e:	6025      	str	r5, [r4, #0]
 8026e70:	e7de      	b.n	8026e30 <_malloc_r+0xa0>
 8026e72:	bf00      	nop
 8026e74:	20008910 	.word	0x20008910

08026e78 <__sfputc_r>:
 8026e78:	6893      	ldr	r3, [r2, #8]
 8026e7a:	3b01      	subs	r3, #1
 8026e7c:	2b00      	cmp	r3, #0
 8026e7e:	b410      	push	{r4}
 8026e80:	6093      	str	r3, [r2, #8]
 8026e82:	da08      	bge.n	8026e96 <__sfputc_r+0x1e>
 8026e84:	6994      	ldr	r4, [r2, #24]
 8026e86:	42a3      	cmp	r3, r4
 8026e88:	db01      	blt.n	8026e8e <__sfputc_r+0x16>
 8026e8a:	290a      	cmp	r1, #10
 8026e8c:	d103      	bne.n	8026e96 <__sfputc_r+0x1e>
 8026e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026e92:	f000 bc37 	b.w	8027704 <__swbuf_r>
 8026e96:	6813      	ldr	r3, [r2, #0]
 8026e98:	1c58      	adds	r0, r3, #1
 8026e9a:	6010      	str	r0, [r2, #0]
 8026e9c:	7019      	strb	r1, [r3, #0]
 8026e9e:	4608      	mov	r0, r1
 8026ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026ea4:	4770      	bx	lr

08026ea6 <__sfputs_r>:
 8026ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026ea8:	4606      	mov	r6, r0
 8026eaa:	460f      	mov	r7, r1
 8026eac:	4614      	mov	r4, r2
 8026eae:	18d5      	adds	r5, r2, r3
 8026eb0:	42ac      	cmp	r4, r5
 8026eb2:	d101      	bne.n	8026eb8 <__sfputs_r+0x12>
 8026eb4:	2000      	movs	r0, #0
 8026eb6:	e007      	b.n	8026ec8 <__sfputs_r+0x22>
 8026eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026ebc:	463a      	mov	r2, r7
 8026ebe:	4630      	mov	r0, r6
 8026ec0:	f7ff ffda 	bl	8026e78 <__sfputc_r>
 8026ec4:	1c43      	adds	r3, r0, #1
 8026ec6:	d1f3      	bne.n	8026eb0 <__sfputs_r+0xa>
 8026ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026ecc <_vfiprintf_r>:
 8026ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ed0:	460d      	mov	r5, r1
 8026ed2:	b09d      	sub	sp, #116	; 0x74
 8026ed4:	4614      	mov	r4, r2
 8026ed6:	4698      	mov	r8, r3
 8026ed8:	4606      	mov	r6, r0
 8026eda:	b118      	cbz	r0, 8026ee4 <_vfiprintf_r+0x18>
 8026edc:	6983      	ldr	r3, [r0, #24]
 8026ede:	b90b      	cbnz	r3, 8026ee4 <_vfiprintf_r+0x18>
 8026ee0:	f7ff fdec 	bl	8026abc <__sinit>
 8026ee4:	4b89      	ldr	r3, [pc, #548]	; (802710c <_vfiprintf_r+0x240>)
 8026ee6:	429d      	cmp	r5, r3
 8026ee8:	d11b      	bne.n	8026f22 <_vfiprintf_r+0x56>
 8026eea:	6875      	ldr	r5, [r6, #4]
 8026eec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026eee:	07d9      	lsls	r1, r3, #31
 8026ef0:	d405      	bmi.n	8026efe <_vfiprintf_r+0x32>
 8026ef2:	89ab      	ldrh	r3, [r5, #12]
 8026ef4:	059a      	lsls	r2, r3, #22
 8026ef6:	d402      	bmi.n	8026efe <_vfiprintf_r+0x32>
 8026ef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026efa:	f7ff feb4 	bl	8026c66 <__retarget_lock_acquire_recursive>
 8026efe:	89ab      	ldrh	r3, [r5, #12]
 8026f00:	071b      	lsls	r3, r3, #28
 8026f02:	d501      	bpl.n	8026f08 <_vfiprintf_r+0x3c>
 8026f04:	692b      	ldr	r3, [r5, #16]
 8026f06:	b9eb      	cbnz	r3, 8026f44 <_vfiprintf_r+0x78>
 8026f08:	4629      	mov	r1, r5
 8026f0a:	4630      	mov	r0, r6
 8026f0c:	f000 fc5e 	bl	80277cc <__swsetup_r>
 8026f10:	b1c0      	cbz	r0, 8026f44 <_vfiprintf_r+0x78>
 8026f12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026f14:	07dc      	lsls	r4, r3, #31
 8026f16:	d50e      	bpl.n	8026f36 <_vfiprintf_r+0x6a>
 8026f18:	f04f 30ff 	mov.w	r0, #4294967295
 8026f1c:	b01d      	add	sp, #116	; 0x74
 8026f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f22:	4b7b      	ldr	r3, [pc, #492]	; (8027110 <_vfiprintf_r+0x244>)
 8026f24:	429d      	cmp	r5, r3
 8026f26:	d101      	bne.n	8026f2c <_vfiprintf_r+0x60>
 8026f28:	68b5      	ldr	r5, [r6, #8]
 8026f2a:	e7df      	b.n	8026eec <_vfiprintf_r+0x20>
 8026f2c:	4b79      	ldr	r3, [pc, #484]	; (8027114 <_vfiprintf_r+0x248>)
 8026f2e:	429d      	cmp	r5, r3
 8026f30:	bf08      	it	eq
 8026f32:	68f5      	ldreq	r5, [r6, #12]
 8026f34:	e7da      	b.n	8026eec <_vfiprintf_r+0x20>
 8026f36:	89ab      	ldrh	r3, [r5, #12]
 8026f38:	0598      	lsls	r0, r3, #22
 8026f3a:	d4ed      	bmi.n	8026f18 <_vfiprintf_r+0x4c>
 8026f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026f3e:	f7ff fe94 	bl	8026c6a <__retarget_lock_release_recursive>
 8026f42:	e7e9      	b.n	8026f18 <_vfiprintf_r+0x4c>
 8026f44:	2300      	movs	r3, #0
 8026f46:	9309      	str	r3, [sp, #36]	; 0x24
 8026f48:	2320      	movs	r3, #32
 8026f4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026f4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8026f52:	2330      	movs	r3, #48	; 0x30
 8026f54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8027118 <_vfiprintf_r+0x24c>
 8026f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026f5c:	f04f 0901 	mov.w	r9, #1
 8026f60:	4623      	mov	r3, r4
 8026f62:	469a      	mov	sl, r3
 8026f64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026f68:	b10a      	cbz	r2, 8026f6e <_vfiprintf_r+0xa2>
 8026f6a:	2a25      	cmp	r2, #37	; 0x25
 8026f6c:	d1f9      	bne.n	8026f62 <_vfiprintf_r+0x96>
 8026f6e:	ebba 0b04 	subs.w	fp, sl, r4
 8026f72:	d00b      	beq.n	8026f8c <_vfiprintf_r+0xc0>
 8026f74:	465b      	mov	r3, fp
 8026f76:	4622      	mov	r2, r4
 8026f78:	4629      	mov	r1, r5
 8026f7a:	4630      	mov	r0, r6
 8026f7c:	f7ff ff93 	bl	8026ea6 <__sfputs_r>
 8026f80:	3001      	adds	r0, #1
 8026f82:	f000 80aa 	beq.w	80270da <_vfiprintf_r+0x20e>
 8026f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026f88:	445a      	add	r2, fp
 8026f8a:	9209      	str	r2, [sp, #36]	; 0x24
 8026f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8026f90:	2b00      	cmp	r3, #0
 8026f92:	f000 80a2 	beq.w	80270da <_vfiprintf_r+0x20e>
 8026f96:	2300      	movs	r3, #0
 8026f98:	f04f 32ff 	mov.w	r2, #4294967295
 8026f9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026fa0:	f10a 0a01 	add.w	sl, sl, #1
 8026fa4:	9304      	str	r3, [sp, #16]
 8026fa6:	9307      	str	r3, [sp, #28]
 8026fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026fac:	931a      	str	r3, [sp, #104]	; 0x68
 8026fae:	4654      	mov	r4, sl
 8026fb0:	2205      	movs	r2, #5
 8026fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026fb6:	4858      	ldr	r0, [pc, #352]	; (8027118 <_vfiprintf_r+0x24c>)
 8026fb8:	f7d9 f92a 	bl	8000210 <memchr>
 8026fbc:	9a04      	ldr	r2, [sp, #16]
 8026fbe:	b9d8      	cbnz	r0, 8026ff8 <_vfiprintf_r+0x12c>
 8026fc0:	06d1      	lsls	r1, r2, #27
 8026fc2:	bf44      	itt	mi
 8026fc4:	2320      	movmi	r3, #32
 8026fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026fca:	0713      	lsls	r3, r2, #28
 8026fcc:	bf44      	itt	mi
 8026fce:	232b      	movmi	r3, #43	; 0x2b
 8026fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8026fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8026fda:	d015      	beq.n	8027008 <_vfiprintf_r+0x13c>
 8026fdc:	9a07      	ldr	r2, [sp, #28]
 8026fde:	4654      	mov	r4, sl
 8026fe0:	2000      	movs	r0, #0
 8026fe2:	f04f 0c0a 	mov.w	ip, #10
 8026fe6:	4621      	mov	r1, r4
 8026fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026fec:	3b30      	subs	r3, #48	; 0x30
 8026fee:	2b09      	cmp	r3, #9
 8026ff0:	d94e      	bls.n	8027090 <_vfiprintf_r+0x1c4>
 8026ff2:	b1b0      	cbz	r0, 8027022 <_vfiprintf_r+0x156>
 8026ff4:	9207      	str	r2, [sp, #28]
 8026ff6:	e014      	b.n	8027022 <_vfiprintf_r+0x156>
 8026ff8:	eba0 0308 	sub.w	r3, r0, r8
 8026ffc:	fa09 f303 	lsl.w	r3, r9, r3
 8027000:	4313      	orrs	r3, r2
 8027002:	9304      	str	r3, [sp, #16]
 8027004:	46a2      	mov	sl, r4
 8027006:	e7d2      	b.n	8026fae <_vfiprintf_r+0xe2>
 8027008:	9b03      	ldr	r3, [sp, #12]
 802700a:	1d19      	adds	r1, r3, #4
 802700c:	681b      	ldr	r3, [r3, #0]
 802700e:	9103      	str	r1, [sp, #12]
 8027010:	2b00      	cmp	r3, #0
 8027012:	bfbb      	ittet	lt
 8027014:	425b      	neglt	r3, r3
 8027016:	f042 0202 	orrlt.w	r2, r2, #2
 802701a:	9307      	strge	r3, [sp, #28]
 802701c:	9307      	strlt	r3, [sp, #28]
 802701e:	bfb8      	it	lt
 8027020:	9204      	strlt	r2, [sp, #16]
 8027022:	7823      	ldrb	r3, [r4, #0]
 8027024:	2b2e      	cmp	r3, #46	; 0x2e
 8027026:	d10c      	bne.n	8027042 <_vfiprintf_r+0x176>
 8027028:	7863      	ldrb	r3, [r4, #1]
 802702a:	2b2a      	cmp	r3, #42	; 0x2a
 802702c:	d135      	bne.n	802709a <_vfiprintf_r+0x1ce>
 802702e:	9b03      	ldr	r3, [sp, #12]
 8027030:	1d1a      	adds	r2, r3, #4
 8027032:	681b      	ldr	r3, [r3, #0]
 8027034:	9203      	str	r2, [sp, #12]
 8027036:	2b00      	cmp	r3, #0
 8027038:	bfb8      	it	lt
 802703a:	f04f 33ff 	movlt.w	r3, #4294967295
 802703e:	3402      	adds	r4, #2
 8027040:	9305      	str	r3, [sp, #20]
 8027042:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8027128 <_vfiprintf_r+0x25c>
 8027046:	7821      	ldrb	r1, [r4, #0]
 8027048:	2203      	movs	r2, #3
 802704a:	4650      	mov	r0, sl
 802704c:	f7d9 f8e0 	bl	8000210 <memchr>
 8027050:	b140      	cbz	r0, 8027064 <_vfiprintf_r+0x198>
 8027052:	2340      	movs	r3, #64	; 0x40
 8027054:	eba0 000a 	sub.w	r0, r0, sl
 8027058:	fa03 f000 	lsl.w	r0, r3, r0
 802705c:	9b04      	ldr	r3, [sp, #16]
 802705e:	4303      	orrs	r3, r0
 8027060:	3401      	adds	r4, #1
 8027062:	9304      	str	r3, [sp, #16]
 8027064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027068:	482c      	ldr	r0, [pc, #176]	; (802711c <_vfiprintf_r+0x250>)
 802706a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802706e:	2206      	movs	r2, #6
 8027070:	f7d9 f8ce 	bl	8000210 <memchr>
 8027074:	2800      	cmp	r0, #0
 8027076:	d03f      	beq.n	80270f8 <_vfiprintf_r+0x22c>
 8027078:	4b29      	ldr	r3, [pc, #164]	; (8027120 <_vfiprintf_r+0x254>)
 802707a:	bb1b      	cbnz	r3, 80270c4 <_vfiprintf_r+0x1f8>
 802707c:	9b03      	ldr	r3, [sp, #12]
 802707e:	3307      	adds	r3, #7
 8027080:	f023 0307 	bic.w	r3, r3, #7
 8027084:	3308      	adds	r3, #8
 8027086:	9303      	str	r3, [sp, #12]
 8027088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802708a:	443b      	add	r3, r7
 802708c:	9309      	str	r3, [sp, #36]	; 0x24
 802708e:	e767      	b.n	8026f60 <_vfiprintf_r+0x94>
 8027090:	fb0c 3202 	mla	r2, ip, r2, r3
 8027094:	460c      	mov	r4, r1
 8027096:	2001      	movs	r0, #1
 8027098:	e7a5      	b.n	8026fe6 <_vfiprintf_r+0x11a>
 802709a:	2300      	movs	r3, #0
 802709c:	3401      	adds	r4, #1
 802709e:	9305      	str	r3, [sp, #20]
 80270a0:	4619      	mov	r1, r3
 80270a2:	f04f 0c0a 	mov.w	ip, #10
 80270a6:	4620      	mov	r0, r4
 80270a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80270ac:	3a30      	subs	r2, #48	; 0x30
 80270ae:	2a09      	cmp	r2, #9
 80270b0:	d903      	bls.n	80270ba <_vfiprintf_r+0x1ee>
 80270b2:	2b00      	cmp	r3, #0
 80270b4:	d0c5      	beq.n	8027042 <_vfiprintf_r+0x176>
 80270b6:	9105      	str	r1, [sp, #20]
 80270b8:	e7c3      	b.n	8027042 <_vfiprintf_r+0x176>
 80270ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80270be:	4604      	mov	r4, r0
 80270c0:	2301      	movs	r3, #1
 80270c2:	e7f0      	b.n	80270a6 <_vfiprintf_r+0x1da>
 80270c4:	ab03      	add	r3, sp, #12
 80270c6:	9300      	str	r3, [sp, #0]
 80270c8:	462a      	mov	r2, r5
 80270ca:	4b16      	ldr	r3, [pc, #88]	; (8027124 <_vfiprintf_r+0x258>)
 80270cc:	a904      	add	r1, sp, #16
 80270ce:	4630      	mov	r0, r6
 80270d0:	f3af 8000 	nop.w
 80270d4:	4607      	mov	r7, r0
 80270d6:	1c78      	adds	r0, r7, #1
 80270d8:	d1d6      	bne.n	8027088 <_vfiprintf_r+0x1bc>
 80270da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80270dc:	07d9      	lsls	r1, r3, #31
 80270de:	d405      	bmi.n	80270ec <_vfiprintf_r+0x220>
 80270e0:	89ab      	ldrh	r3, [r5, #12]
 80270e2:	059a      	lsls	r2, r3, #22
 80270e4:	d402      	bmi.n	80270ec <_vfiprintf_r+0x220>
 80270e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80270e8:	f7ff fdbf 	bl	8026c6a <__retarget_lock_release_recursive>
 80270ec:	89ab      	ldrh	r3, [r5, #12]
 80270ee:	065b      	lsls	r3, r3, #25
 80270f0:	f53f af12 	bmi.w	8026f18 <_vfiprintf_r+0x4c>
 80270f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80270f6:	e711      	b.n	8026f1c <_vfiprintf_r+0x50>
 80270f8:	ab03      	add	r3, sp, #12
 80270fa:	9300      	str	r3, [sp, #0]
 80270fc:	462a      	mov	r2, r5
 80270fe:	4b09      	ldr	r3, [pc, #36]	; (8027124 <_vfiprintf_r+0x258>)
 8027100:	a904      	add	r1, sp, #16
 8027102:	4630      	mov	r0, r6
 8027104:	f000 f880 	bl	8027208 <_printf_i>
 8027108:	e7e4      	b.n	80270d4 <_vfiprintf_r+0x208>
 802710a:	bf00      	nop
 802710c:	0802b744 	.word	0x0802b744
 8027110:	0802b764 	.word	0x0802b764
 8027114:	0802b724 	.word	0x0802b724
 8027118:	0802b788 	.word	0x0802b788
 802711c:	0802b792 	.word	0x0802b792
 8027120:	00000000 	.word	0x00000000
 8027124:	08026ea7 	.word	0x08026ea7
 8027128:	0802b78e 	.word	0x0802b78e

0802712c <_printf_common>:
 802712c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027130:	4616      	mov	r6, r2
 8027132:	4699      	mov	r9, r3
 8027134:	688a      	ldr	r2, [r1, #8]
 8027136:	690b      	ldr	r3, [r1, #16]
 8027138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802713c:	4293      	cmp	r3, r2
 802713e:	bfb8      	it	lt
 8027140:	4613      	movlt	r3, r2
 8027142:	6033      	str	r3, [r6, #0]
 8027144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027148:	4607      	mov	r7, r0
 802714a:	460c      	mov	r4, r1
 802714c:	b10a      	cbz	r2, 8027152 <_printf_common+0x26>
 802714e:	3301      	adds	r3, #1
 8027150:	6033      	str	r3, [r6, #0]
 8027152:	6823      	ldr	r3, [r4, #0]
 8027154:	0699      	lsls	r1, r3, #26
 8027156:	bf42      	ittt	mi
 8027158:	6833      	ldrmi	r3, [r6, #0]
 802715a:	3302      	addmi	r3, #2
 802715c:	6033      	strmi	r3, [r6, #0]
 802715e:	6825      	ldr	r5, [r4, #0]
 8027160:	f015 0506 	ands.w	r5, r5, #6
 8027164:	d106      	bne.n	8027174 <_printf_common+0x48>
 8027166:	f104 0a19 	add.w	sl, r4, #25
 802716a:	68e3      	ldr	r3, [r4, #12]
 802716c:	6832      	ldr	r2, [r6, #0]
 802716e:	1a9b      	subs	r3, r3, r2
 8027170:	42ab      	cmp	r3, r5
 8027172:	dc26      	bgt.n	80271c2 <_printf_common+0x96>
 8027174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8027178:	1e13      	subs	r3, r2, #0
 802717a:	6822      	ldr	r2, [r4, #0]
 802717c:	bf18      	it	ne
 802717e:	2301      	movne	r3, #1
 8027180:	0692      	lsls	r2, r2, #26
 8027182:	d42b      	bmi.n	80271dc <_printf_common+0xb0>
 8027184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027188:	4649      	mov	r1, r9
 802718a:	4638      	mov	r0, r7
 802718c:	47c0      	blx	r8
 802718e:	3001      	adds	r0, #1
 8027190:	d01e      	beq.n	80271d0 <_printf_common+0xa4>
 8027192:	6823      	ldr	r3, [r4, #0]
 8027194:	68e5      	ldr	r5, [r4, #12]
 8027196:	6832      	ldr	r2, [r6, #0]
 8027198:	f003 0306 	and.w	r3, r3, #6
 802719c:	2b04      	cmp	r3, #4
 802719e:	bf08      	it	eq
 80271a0:	1aad      	subeq	r5, r5, r2
 80271a2:	68a3      	ldr	r3, [r4, #8]
 80271a4:	6922      	ldr	r2, [r4, #16]
 80271a6:	bf0c      	ite	eq
 80271a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80271ac:	2500      	movne	r5, #0
 80271ae:	4293      	cmp	r3, r2
 80271b0:	bfc4      	itt	gt
 80271b2:	1a9b      	subgt	r3, r3, r2
 80271b4:	18ed      	addgt	r5, r5, r3
 80271b6:	2600      	movs	r6, #0
 80271b8:	341a      	adds	r4, #26
 80271ba:	42b5      	cmp	r5, r6
 80271bc:	d11a      	bne.n	80271f4 <_printf_common+0xc8>
 80271be:	2000      	movs	r0, #0
 80271c0:	e008      	b.n	80271d4 <_printf_common+0xa8>
 80271c2:	2301      	movs	r3, #1
 80271c4:	4652      	mov	r2, sl
 80271c6:	4649      	mov	r1, r9
 80271c8:	4638      	mov	r0, r7
 80271ca:	47c0      	blx	r8
 80271cc:	3001      	adds	r0, #1
 80271ce:	d103      	bne.n	80271d8 <_printf_common+0xac>
 80271d0:	f04f 30ff 	mov.w	r0, #4294967295
 80271d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80271d8:	3501      	adds	r5, #1
 80271da:	e7c6      	b.n	802716a <_printf_common+0x3e>
 80271dc:	18e1      	adds	r1, r4, r3
 80271de:	1c5a      	adds	r2, r3, #1
 80271e0:	2030      	movs	r0, #48	; 0x30
 80271e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80271e6:	4422      	add	r2, r4
 80271e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80271ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80271f0:	3302      	adds	r3, #2
 80271f2:	e7c7      	b.n	8027184 <_printf_common+0x58>
 80271f4:	2301      	movs	r3, #1
 80271f6:	4622      	mov	r2, r4
 80271f8:	4649      	mov	r1, r9
 80271fa:	4638      	mov	r0, r7
 80271fc:	47c0      	blx	r8
 80271fe:	3001      	adds	r0, #1
 8027200:	d0e6      	beq.n	80271d0 <_printf_common+0xa4>
 8027202:	3601      	adds	r6, #1
 8027204:	e7d9      	b.n	80271ba <_printf_common+0x8e>
	...

08027208 <_printf_i>:
 8027208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802720c:	7e0f      	ldrb	r7, [r1, #24]
 802720e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027210:	2f78      	cmp	r7, #120	; 0x78
 8027212:	4691      	mov	r9, r2
 8027214:	4680      	mov	r8, r0
 8027216:	460c      	mov	r4, r1
 8027218:	469a      	mov	sl, r3
 802721a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802721e:	d807      	bhi.n	8027230 <_printf_i+0x28>
 8027220:	2f62      	cmp	r7, #98	; 0x62
 8027222:	d80a      	bhi.n	802723a <_printf_i+0x32>
 8027224:	2f00      	cmp	r7, #0
 8027226:	f000 80d8 	beq.w	80273da <_printf_i+0x1d2>
 802722a:	2f58      	cmp	r7, #88	; 0x58
 802722c:	f000 80a3 	beq.w	8027376 <_printf_i+0x16e>
 8027230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027238:	e03a      	b.n	80272b0 <_printf_i+0xa8>
 802723a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802723e:	2b15      	cmp	r3, #21
 8027240:	d8f6      	bhi.n	8027230 <_printf_i+0x28>
 8027242:	a101      	add	r1, pc, #4	; (adr r1, 8027248 <_printf_i+0x40>)
 8027244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027248:	080272a1 	.word	0x080272a1
 802724c:	080272b5 	.word	0x080272b5
 8027250:	08027231 	.word	0x08027231
 8027254:	08027231 	.word	0x08027231
 8027258:	08027231 	.word	0x08027231
 802725c:	08027231 	.word	0x08027231
 8027260:	080272b5 	.word	0x080272b5
 8027264:	08027231 	.word	0x08027231
 8027268:	08027231 	.word	0x08027231
 802726c:	08027231 	.word	0x08027231
 8027270:	08027231 	.word	0x08027231
 8027274:	080273c1 	.word	0x080273c1
 8027278:	080272e5 	.word	0x080272e5
 802727c:	080273a3 	.word	0x080273a3
 8027280:	08027231 	.word	0x08027231
 8027284:	08027231 	.word	0x08027231
 8027288:	080273e3 	.word	0x080273e3
 802728c:	08027231 	.word	0x08027231
 8027290:	080272e5 	.word	0x080272e5
 8027294:	08027231 	.word	0x08027231
 8027298:	08027231 	.word	0x08027231
 802729c:	080273ab 	.word	0x080273ab
 80272a0:	682b      	ldr	r3, [r5, #0]
 80272a2:	1d1a      	adds	r2, r3, #4
 80272a4:	681b      	ldr	r3, [r3, #0]
 80272a6:	602a      	str	r2, [r5, #0]
 80272a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80272ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80272b0:	2301      	movs	r3, #1
 80272b2:	e0a3      	b.n	80273fc <_printf_i+0x1f4>
 80272b4:	6820      	ldr	r0, [r4, #0]
 80272b6:	6829      	ldr	r1, [r5, #0]
 80272b8:	0606      	lsls	r6, r0, #24
 80272ba:	f101 0304 	add.w	r3, r1, #4
 80272be:	d50a      	bpl.n	80272d6 <_printf_i+0xce>
 80272c0:	680e      	ldr	r6, [r1, #0]
 80272c2:	602b      	str	r3, [r5, #0]
 80272c4:	2e00      	cmp	r6, #0
 80272c6:	da03      	bge.n	80272d0 <_printf_i+0xc8>
 80272c8:	232d      	movs	r3, #45	; 0x2d
 80272ca:	4276      	negs	r6, r6
 80272cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80272d0:	485e      	ldr	r0, [pc, #376]	; (802744c <_printf_i+0x244>)
 80272d2:	230a      	movs	r3, #10
 80272d4:	e019      	b.n	802730a <_printf_i+0x102>
 80272d6:	680e      	ldr	r6, [r1, #0]
 80272d8:	602b      	str	r3, [r5, #0]
 80272da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80272de:	bf18      	it	ne
 80272e0:	b236      	sxthne	r6, r6
 80272e2:	e7ef      	b.n	80272c4 <_printf_i+0xbc>
 80272e4:	682b      	ldr	r3, [r5, #0]
 80272e6:	6820      	ldr	r0, [r4, #0]
 80272e8:	1d19      	adds	r1, r3, #4
 80272ea:	6029      	str	r1, [r5, #0]
 80272ec:	0601      	lsls	r1, r0, #24
 80272ee:	d501      	bpl.n	80272f4 <_printf_i+0xec>
 80272f0:	681e      	ldr	r6, [r3, #0]
 80272f2:	e002      	b.n	80272fa <_printf_i+0xf2>
 80272f4:	0646      	lsls	r6, r0, #25
 80272f6:	d5fb      	bpl.n	80272f0 <_printf_i+0xe8>
 80272f8:	881e      	ldrh	r6, [r3, #0]
 80272fa:	4854      	ldr	r0, [pc, #336]	; (802744c <_printf_i+0x244>)
 80272fc:	2f6f      	cmp	r7, #111	; 0x6f
 80272fe:	bf0c      	ite	eq
 8027300:	2308      	moveq	r3, #8
 8027302:	230a      	movne	r3, #10
 8027304:	2100      	movs	r1, #0
 8027306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802730a:	6865      	ldr	r5, [r4, #4]
 802730c:	60a5      	str	r5, [r4, #8]
 802730e:	2d00      	cmp	r5, #0
 8027310:	bfa2      	ittt	ge
 8027312:	6821      	ldrge	r1, [r4, #0]
 8027314:	f021 0104 	bicge.w	r1, r1, #4
 8027318:	6021      	strge	r1, [r4, #0]
 802731a:	b90e      	cbnz	r6, 8027320 <_printf_i+0x118>
 802731c:	2d00      	cmp	r5, #0
 802731e:	d04d      	beq.n	80273bc <_printf_i+0x1b4>
 8027320:	4615      	mov	r5, r2
 8027322:	fbb6 f1f3 	udiv	r1, r6, r3
 8027326:	fb03 6711 	mls	r7, r3, r1, r6
 802732a:	5dc7      	ldrb	r7, [r0, r7]
 802732c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8027330:	4637      	mov	r7, r6
 8027332:	42bb      	cmp	r3, r7
 8027334:	460e      	mov	r6, r1
 8027336:	d9f4      	bls.n	8027322 <_printf_i+0x11a>
 8027338:	2b08      	cmp	r3, #8
 802733a:	d10b      	bne.n	8027354 <_printf_i+0x14c>
 802733c:	6823      	ldr	r3, [r4, #0]
 802733e:	07de      	lsls	r6, r3, #31
 8027340:	d508      	bpl.n	8027354 <_printf_i+0x14c>
 8027342:	6923      	ldr	r3, [r4, #16]
 8027344:	6861      	ldr	r1, [r4, #4]
 8027346:	4299      	cmp	r1, r3
 8027348:	bfde      	ittt	le
 802734a:	2330      	movle	r3, #48	; 0x30
 802734c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027350:	f105 35ff 	addle.w	r5, r5, #4294967295
 8027354:	1b52      	subs	r2, r2, r5
 8027356:	6122      	str	r2, [r4, #16]
 8027358:	f8cd a000 	str.w	sl, [sp]
 802735c:	464b      	mov	r3, r9
 802735e:	aa03      	add	r2, sp, #12
 8027360:	4621      	mov	r1, r4
 8027362:	4640      	mov	r0, r8
 8027364:	f7ff fee2 	bl	802712c <_printf_common>
 8027368:	3001      	adds	r0, #1
 802736a:	d14c      	bne.n	8027406 <_printf_i+0x1fe>
 802736c:	f04f 30ff 	mov.w	r0, #4294967295
 8027370:	b004      	add	sp, #16
 8027372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027376:	4835      	ldr	r0, [pc, #212]	; (802744c <_printf_i+0x244>)
 8027378:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802737c:	6829      	ldr	r1, [r5, #0]
 802737e:	6823      	ldr	r3, [r4, #0]
 8027380:	f851 6b04 	ldr.w	r6, [r1], #4
 8027384:	6029      	str	r1, [r5, #0]
 8027386:	061d      	lsls	r5, r3, #24
 8027388:	d514      	bpl.n	80273b4 <_printf_i+0x1ac>
 802738a:	07df      	lsls	r7, r3, #31
 802738c:	bf44      	itt	mi
 802738e:	f043 0320 	orrmi.w	r3, r3, #32
 8027392:	6023      	strmi	r3, [r4, #0]
 8027394:	b91e      	cbnz	r6, 802739e <_printf_i+0x196>
 8027396:	6823      	ldr	r3, [r4, #0]
 8027398:	f023 0320 	bic.w	r3, r3, #32
 802739c:	6023      	str	r3, [r4, #0]
 802739e:	2310      	movs	r3, #16
 80273a0:	e7b0      	b.n	8027304 <_printf_i+0xfc>
 80273a2:	6823      	ldr	r3, [r4, #0]
 80273a4:	f043 0320 	orr.w	r3, r3, #32
 80273a8:	6023      	str	r3, [r4, #0]
 80273aa:	2378      	movs	r3, #120	; 0x78
 80273ac:	4828      	ldr	r0, [pc, #160]	; (8027450 <_printf_i+0x248>)
 80273ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80273b2:	e7e3      	b.n	802737c <_printf_i+0x174>
 80273b4:	0659      	lsls	r1, r3, #25
 80273b6:	bf48      	it	mi
 80273b8:	b2b6      	uxthmi	r6, r6
 80273ba:	e7e6      	b.n	802738a <_printf_i+0x182>
 80273bc:	4615      	mov	r5, r2
 80273be:	e7bb      	b.n	8027338 <_printf_i+0x130>
 80273c0:	682b      	ldr	r3, [r5, #0]
 80273c2:	6826      	ldr	r6, [r4, #0]
 80273c4:	6961      	ldr	r1, [r4, #20]
 80273c6:	1d18      	adds	r0, r3, #4
 80273c8:	6028      	str	r0, [r5, #0]
 80273ca:	0635      	lsls	r5, r6, #24
 80273cc:	681b      	ldr	r3, [r3, #0]
 80273ce:	d501      	bpl.n	80273d4 <_printf_i+0x1cc>
 80273d0:	6019      	str	r1, [r3, #0]
 80273d2:	e002      	b.n	80273da <_printf_i+0x1d2>
 80273d4:	0670      	lsls	r0, r6, #25
 80273d6:	d5fb      	bpl.n	80273d0 <_printf_i+0x1c8>
 80273d8:	8019      	strh	r1, [r3, #0]
 80273da:	2300      	movs	r3, #0
 80273dc:	6123      	str	r3, [r4, #16]
 80273de:	4615      	mov	r5, r2
 80273e0:	e7ba      	b.n	8027358 <_printf_i+0x150>
 80273e2:	682b      	ldr	r3, [r5, #0]
 80273e4:	1d1a      	adds	r2, r3, #4
 80273e6:	602a      	str	r2, [r5, #0]
 80273e8:	681d      	ldr	r5, [r3, #0]
 80273ea:	6862      	ldr	r2, [r4, #4]
 80273ec:	2100      	movs	r1, #0
 80273ee:	4628      	mov	r0, r5
 80273f0:	f7d8 ff0e 	bl	8000210 <memchr>
 80273f4:	b108      	cbz	r0, 80273fa <_printf_i+0x1f2>
 80273f6:	1b40      	subs	r0, r0, r5
 80273f8:	6060      	str	r0, [r4, #4]
 80273fa:	6863      	ldr	r3, [r4, #4]
 80273fc:	6123      	str	r3, [r4, #16]
 80273fe:	2300      	movs	r3, #0
 8027400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027404:	e7a8      	b.n	8027358 <_printf_i+0x150>
 8027406:	6923      	ldr	r3, [r4, #16]
 8027408:	462a      	mov	r2, r5
 802740a:	4649      	mov	r1, r9
 802740c:	4640      	mov	r0, r8
 802740e:	47d0      	blx	sl
 8027410:	3001      	adds	r0, #1
 8027412:	d0ab      	beq.n	802736c <_printf_i+0x164>
 8027414:	6823      	ldr	r3, [r4, #0]
 8027416:	079b      	lsls	r3, r3, #30
 8027418:	d413      	bmi.n	8027442 <_printf_i+0x23a>
 802741a:	68e0      	ldr	r0, [r4, #12]
 802741c:	9b03      	ldr	r3, [sp, #12]
 802741e:	4298      	cmp	r0, r3
 8027420:	bfb8      	it	lt
 8027422:	4618      	movlt	r0, r3
 8027424:	e7a4      	b.n	8027370 <_printf_i+0x168>
 8027426:	2301      	movs	r3, #1
 8027428:	4632      	mov	r2, r6
 802742a:	4649      	mov	r1, r9
 802742c:	4640      	mov	r0, r8
 802742e:	47d0      	blx	sl
 8027430:	3001      	adds	r0, #1
 8027432:	d09b      	beq.n	802736c <_printf_i+0x164>
 8027434:	3501      	adds	r5, #1
 8027436:	68e3      	ldr	r3, [r4, #12]
 8027438:	9903      	ldr	r1, [sp, #12]
 802743a:	1a5b      	subs	r3, r3, r1
 802743c:	42ab      	cmp	r3, r5
 802743e:	dcf2      	bgt.n	8027426 <_printf_i+0x21e>
 8027440:	e7eb      	b.n	802741a <_printf_i+0x212>
 8027442:	2500      	movs	r5, #0
 8027444:	f104 0619 	add.w	r6, r4, #25
 8027448:	e7f5      	b.n	8027436 <_printf_i+0x22e>
 802744a:	bf00      	nop
 802744c:	0802b799 	.word	0x0802b799
 8027450:	0802b7aa 	.word	0x0802b7aa

08027454 <iprintf>:
 8027454:	b40f      	push	{r0, r1, r2, r3}
 8027456:	4b0a      	ldr	r3, [pc, #40]	; (8027480 <iprintf+0x2c>)
 8027458:	b513      	push	{r0, r1, r4, lr}
 802745a:	681c      	ldr	r4, [r3, #0]
 802745c:	b124      	cbz	r4, 8027468 <iprintf+0x14>
 802745e:	69a3      	ldr	r3, [r4, #24]
 8027460:	b913      	cbnz	r3, 8027468 <iprintf+0x14>
 8027462:	4620      	mov	r0, r4
 8027464:	f7ff fb2a 	bl	8026abc <__sinit>
 8027468:	ab05      	add	r3, sp, #20
 802746a:	9a04      	ldr	r2, [sp, #16]
 802746c:	68a1      	ldr	r1, [r4, #8]
 802746e:	9301      	str	r3, [sp, #4]
 8027470:	4620      	mov	r0, r4
 8027472:	f7ff fd2b 	bl	8026ecc <_vfiprintf_r>
 8027476:	b002      	add	sp, #8
 8027478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802747c:	b004      	add	sp, #16
 802747e:	4770      	bx	lr
 8027480:	20000098 	.word	0x20000098

08027484 <rand>:
 8027484:	4b16      	ldr	r3, [pc, #88]	; (80274e0 <rand+0x5c>)
 8027486:	b510      	push	{r4, lr}
 8027488:	681c      	ldr	r4, [r3, #0]
 802748a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802748c:	b9b3      	cbnz	r3, 80274bc <rand+0x38>
 802748e:	2018      	movs	r0, #24
 8027490:	f7ff fbec 	bl	8026c6c <malloc>
 8027494:	63a0      	str	r0, [r4, #56]	; 0x38
 8027496:	b928      	cbnz	r0, 80274a4 <rand+0x20>
 8027498:	4602      	mov	r2, r0
 802749a:	4b12      	ldr	r3, [pc, #72]	; (80274e4 <rand+0x60>)
 802749c:	4812      	ldr	r0, [pc, #72]	; (80274e8 <rand+0x64>)
 802749e:	214e      	movs	r1, #78	; 0x4e
 80274a0:	f7ff fa7c 	bl	802699c <__assert_func>
 80274a4:	4a11      	ldr	r2, [pc, #68]	; (80274ec <rand+0x68>)
 80274a6:	4b12      	ldr	r3, [pc, #72]	; (80274f0 <rand+0x6c>)
 80274a8:	e9c0 2300 	strd	r2, r3, [r0]
 80274ac:	4b11      	ldr	r3, [pc, #68]	; (80274f4 <rand+0x70>)
 80274ae:	6083      	str	r3, [r0, #8]
 80274b0:	230b      	movs	r3, #11
 80274b2:	8183      	strh	r3, [r0, #12]
 80274b4:	2201      	movs	r2, #1
 80274b6:	2300      	movs	r3, #0
 80274b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80274bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80274be:	4a0e      	ldr	r2, [pc, #56]	; (80274f8 <rand+0x74>)
 80274c0:	6920      	ldr	r0, [r4, #16]
 80274c2:	6963      	ldr	r3, [r4, #20]
 80274c4:	490d      	ldr	r1, [pc, #52]	; (80274fc <rand+0x78>)
 80274c6:	4342      	muls	r2, r0
 80274c8:	fb01 2203 	mla	r2, r1, r3, r2
 80274cc:	fba0 0101 	umull	r0, r1, r0, r1
 80274d0:	1c43      	adds	r3, r0, #1
 80274d2:	eb42 0001 	adc.w	r0, r2, r1
 80274d6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80274da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80274de:	bd10      	pop	{r4, pc}
 80274e0:	20000098 	.word	0x20000098
 80274e4:	0802b7c0 	.word	0x0802b7c0
 80274e8:	0802b7d7 	.word	0x0802b7d7
 80274ec:	abcd330e 	.word	0xabcd330e
 80274f0:	e66d1234 	.word	0xe66d1234
 80274f4:	0005deec 	.word	0x0005deec
 80274f8:	5851f42d 	.word	0x5851f42d
 80274fc:	4c957f2d 	.word	0x4c957f2d

08027500 <cleanup_glue>:
 8027500:	b538      	push	{r3, r4, r5, lr}
 8027502:	460c      	mov	r4, r1
 8027504:	6809      	ldr	r1, [r1, #0]
 8027506:	4605      	mov	r5, r0
 8027508:	b109      	cbz	r1, 802750e <cleanup_glue+0xe>
 802750a:	f7ff fff9 	bl	8027500 <cleanup_glue>
 802750e:	4621      	mov	r1, r4
 8027510:	4628      	mov	r0, r5
 8027512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027516:	f7ff bbcf 	b.w	8026cb8 <_free_r>
	...

0802751c <_reclaim_reent>:
 802751c:	4b2c      	ldr	r3, [pc, #176]	; (80275d0 <_reclaim_reent+0xb4>)
 802751e:	681b      	ldr	r3, [r3, #0]
 8027520:	4283      	cmp	r3, r0
 8027522:	b570      	push	{r4, r5, r6, lr}
 8027524:	4604      	mov	r4, r0
 8027526:	d051      	beq.n	80275cc <_reclaim_reent+0xb0>
 8027528:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802752a:	b143      	cbz	r3, 802753e <_reclaim_reent+0x22>
 802752c:	68db      	ldr	r3, [r3, #12]
 802752e:	2b00      	cmp	r3, #0
 8027530:	d14a      	bne.n	80275c8 <_reclaim_reent+0xac>
 8027532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027534:	6819      	ldr	r1, [r3, #0]
 8027536:	b111      	cbz	r1, 802753e <_reclaim_reent+0x22>
 8027538:	4620      	mov	r0, r4
 802753a:	f7ff fbbd 	bl	8026cb8 <_free_r>
 802753e:	6961      	ldr	r1, [r4, #20]
 8027540:	b111      	cbz	r1, 8027548 <_reclaim_reent+0x2c>
 8027542:	4620      	mov	r0, r4
 8027544:	f7ff fbb8 	bl	8026cb8 <_free_r>
 8027548:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802754a:	b111      	cbz	r1, 8027552 <_reclaim_reent+0x36>
 802754c:	4620      	mov	r0, r4
 802754e:	f7ff fbb3 	bl	8026cb8 <_free_r>
 8027552:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8027554:	b111      	cbz	r1, 802755c <_reclaim_reent+0x40>
 8027556:	4620      	mov	r0, r4
 8027558:	f7ff fbae 	bl	8026cb8 <_free_r>
 802755c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802755e:	b111      	cbz	r1, 8027566 <_reclaim_reent+0x4a>
 8027560:	4620      	mov	r0, r4
 8027562:	f7ff fba9 	bl	8026cb8 <_free_r>
 8027566:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027568:	b111      	cbz	r1, 8027570 <_reclaim_reent+0x54>
 802756a:	4620      	mov	r0, r4
 802756c:	f7ff fba4 	bl	8026cb8 <_free_r>
 8027570:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8027572:	b111      	cbz	r1, 802757a <_reclaim_reent+0x5e>
 8027574:	4620      	mov	r0, r4
 8027576:	f7ff fb9f 	bl	8026cb8 <_free_r>
 802757a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802757c:	b111      	cbz	r1, 8027584 <_reclaim_reent+0x68>
 802757e:	4620      	mov	r0, r4
 8027580:	f7ff fb9a 	bl	8026cb8 <_free_r>
 8027584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027586:	b111      	cbz	r1, 802758e <_reclaim_reent+0x72>
 8027588:	4620      	mov	r0, r4
 802758a:	f7ff fb95 	bl	8026cb8 <_free_r>
 802758e:	69a3      	ldr	r3, [r4, #24]
 8027590:	b1e3      	cbz	r3, 80275cc <_reclaim_reent+0xb0>
 8027592:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8027594:	4620      	mov	r0, r4
 8027596:	4798      	blx	r3
 8027598:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802759a:	b1b9      	cbz	r1, 80275cc <_reclaim_reent+0xb0>
 802759c:	4620      	mov	r0, r4
 802759e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80275a2:	f7ff bfad 	b.w	8027500 <cleanup_glue>
 80275a6:	5949      	ldr	r1, [r1, r5]
 80275a8:	b941      	cbnz	r1, 80275bc <_reclaim_reent+0xa0>
 80275aa:	3504      	adds	r5, #4
 80275ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80275ae:	2d80      	cmp	r5, #128	; 0x80
 80275b0:	68d9      	ldr	r1, [r3, #12]
 80275b2:	d1f8      	bne.n	80275a6 <_reclaim_reent+0x8a>
 80275b4:	4620      	mov	r0, r4
 80275b6:	f7ff fb7f 	bl	8026cb8 <_free_r>
 80275ba:	e7ba      	b.n	8027532 <_reclaim_reent+0x16>
 80275bc:	680e      	ldr	r6, [r1, #0]
 80275be:	4620      	mov	r0, r4
 80275c0:	f7ff fb7a 	bl	8026cb8 <_free_r>
 80275c4:	4631      	mov	r1, r6
 80275c6:	e7ef      	b.n	80275a8 <_reclaim_reent+0x8c>
 80275c8:	2500      	movs	r5, #0
 80275ca:	e7ef      	b.n	80275ac <_reclaim_reent+0x90>
 80275cc:	bd70      	pop	{r4, r5, r6, pc}
 80275ce:	bf00      	nop
 80275d0:	20000098 	.word	0x20000098

080275d4 <_sbrk_r>:
 80275d4:	b538      	push	{r3, r4, r5, lr}
 80275d6:	4d06      	ldr	r5, [pc, #24]	; (80275f0 <_sbrk_r+0x1c>)
 80275d8:	2300      	movs	r3, #0
 80275da:	4604      	mov	r4, r0
 80275dc:	4608      	mov	r0, r1
 80275de:	602b      	str	r3, [r5, #0]
 80275e0:	f7da fb66 	bl	8001cb0 <_sbrk>
 80275e4:	1c43      	adds	r3, r0, #1
 80275e6:	d102      	bne.n	80275ee <_sbrk_r+0x1a>
 80275e8:	682b      	ldr	r3, [r5, #0]
 80275ea:	b103      	cbz	r3, 80275ee <_sbrk_r+0x1a>
 80275ec:	6023      	str	r3, [r4, #0]
 80275ee:	bd38      	pop	{r3, r4, r5, pc}
 80275f0:	20008a20 	.word	0x20008a20

080275f4 <_raise_r>:
 80275f4:	291f      	cmp	r1, #31
 80275f6:	b538      	push	{r3, r4, r5, lr}
 80275f8:	4604      	mov	r4, r0
 80275fa:	460d      	mov	r5, r1
 80275fc:	d904      	bls.n	8027608 <_raise_r+0x14>
 80275fe:	2316      	movs	r3, #22
 8027600:	6003      	str	r3, [r0, #0]
 8027602:	f04f 30ff 	mov.w	r0, #4294967295
 8027606:	bd38      	pop	{r3, r4, r5, pc}
 8027608:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802760a:	b112      	cbz	r2, 8027612 <_raise_r+0x1e>
 802760c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027610:	b94b      	cbnz	r3, 8027626 <_raise_r+0x32>
 8027612:	4620      	mov	r0, r4
 8027614:	f000 f830 	bl	8027678 <_getpid_r>
 8027618:	462a      	mov	r2, r5
 802761a:	4601      	mov	r1, r0
 802761c:	4620      	mov	r0, r4
 802761e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027622:	f000 b817 	b.w	8027654 <_kill_r>
 8027626:	2b01      	cmp	r3, #1
 8027628:	d00a      	beq.n	8027640 <_raise_r+0x4c>
 802762a:	1c59      	adds	r1, r3, #1
 802762c:	d103      	bne.n	8027636 <_raise_r+0x42>
 802762e:	2316      	movs	r3, #22
 8027630:	6003      	str	r3, [r0, #0]
 8027632:	2001      	movs	r0, #1
 8027634:	e7e7      	b.n	8027606 <_raise_r+0x12>
 8027636:	2400      	movs	r4, #0
 8027638:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802763c:	4628      	mov	r0, r5
 802763e:	4798      	blx	r3
 8027640:	2000      	movs	r0, #0
 8027642:	e7e0      	b.n	8027606 <_raise_r+0x12>

08027644 <raise>:
 8027644:	4b02      	ldr	r3, [pc, #8]	; (8027650 <raise+0xc>)
 8027646:	4601      	mov	r1, r0
 8027648:	6818      	ldr	r0, [r3, #0]
 802764a:	f7ff bfd3 	b.w	80275f4 <_raise_r>
 802764e:	bf00      	nop
 8027650:	20000098 	.word	0x20000098

08027654 <_kill_r>:
 8027654:	b538      	push	{r3, r4, r5, lr}
 8027656:	4d07      	ldr	r5, [pc, #28]	; (8027674 <_kill_r+0x20>)
 8027658:	2300      	movs	r3, #0
 802765a:	4604      	mov	r4, r0
 802765c:	4608      	mov	r0, r1
 802765e:	4611      	mov	r1, r2
 8027660:	602b      	str	r3, [r5, #0]
 8027662:	f7da fa9d 	bl	8001ba0 <_kill>
 8027666:	1c43      	adds	r3, r0, #1
 8027668:	d102      	bne.n	8027670 <_kill_r+0x1c>
 802766a:	682b      	ldr	r3, [r5, #0]
 802766c:	b103      	cbz	r3, 8027670 <_kill_r+0x1c>
 802766e:	6023      	str	r3, [r4, #0]
 8027670:	bd38      	pop	{r3, r4, r5, pc}
 8027672:	bf00      	nop
 8027674:	20008a20 	.word	0x20008a20

08027678 <_getpid_r>:
 8027678:	f7da ba8a 	b.w	8001b90 <_getpid>

0802767c <__sread>:
 802767c:	b510      	push	{r4, lr}
 802767e:	460c      	mov	r4, r1
 8027680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027684:	f000 fac8 	bl	8027c18 <_read_r>
 8027688:	2800      	cmp	r0, #0
 802768a:	bfab      	itete	ge
 802768c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802768e:	89a3      	ldrhlt	r3, [r4, #12]
 8027690:	181b      	addge	r3, r3, r0
 8027692:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8027696:	bfac      	ite	ge
 8027698:	6563      	strge	r3, [r4, #84]	; 0x54
 802769a:	81a3      	strhlt	r3, [r4, #12]
 802769c:	bd10      	pop	{r4, pc}

0802769e <__swrite>:
 802769e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80276a2:	461f      	mov	r7, r3
 80276a4:	898b      	ldrh	r3, [r1, #12]
 80276a6:	05db      	lsls	r3, r3, #23
 80276a8:	4605      	mov	r5, r0
 80276aa:	460c      	mov	r4, r1
 80276ac:	4616      	mov	r6, r2
 80276ae:	d505      	bpl.n	80276bc <__swrite+0x1e>
 80276b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80276b4:	2302      	movs	r3, #2
 80276b6:	2200      	movs	r2, #0
 80276b8:	f000 fa2a 	bl	8027b10 <_lseek_r>
 80276bc:	89a3      	ldrh	r3, [r4, #12]
 80276be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80276c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80276c6:	81a3      	strh	r3, [r4, #12]
 80276c8:	4632      	mov	r2, r6
 80276ca:	463b      	mov	r3, r7
 80276cc:	4628      	mov	r0, r5
 80276ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80276d2:	f000 b869 	b.w	80277a8 <_write_r>

080276d6 <__sseek>:
 80276d6:	b510      	push	{r4, lr}
 80276d8:	460c      	mov	r4, r1
 80276da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80276de:	f000 fa17 	bl	8027b10 <_lseek_r>
 80276e2:	1c43      	adds	r3, r0, #1
 80276e4:	89a3      	ldrh	r3, [r4, #12]
 80276e6:	bf15      	itete	ne
 80276e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80276ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80276ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80276f2:	81a3      	strheq	r3, [r4, #12]
 80276f4:	bf18      	it	ne
 80276f6:	81a3      	strhne	r3, [r4, #12]
 80276f8:	bd10      	pop	{r4, pc}

080276fa <__sclose>:
 80276fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80276fe:	f000 b935 	b.w	802796c <_close_r>
	...

08027704 <__swbuf_r>:
 8027704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027706:	460e      	mov	r6, r1
 8027708:	4614      	mov	r4, r2
 802770a:	4605      	mov	r5, r0
 802770c:	b118      	cbz	r0, 8027716 <__swbuf_r+0x12>
 802770e:	6983      	ldr	r3, [r0, #24]
 8027710:	b90b      	cbnz	r3, 8027716 <__swbuf_r+0x12>
 8027712:	f7ff f9d3 	bl	8026abc <__sinit>
 8027716:	4b21      	ldr	r3, [pc, #132]	; (802779c <__swbuf_r+0x98>)
 8027718:	429c      	cmp	r4, r3
 802771a:	d12b      	bne.n	8027774 <__swbuf_r+0x70>
 802771c:	686c      	ldr	r4, [r5, #4]
 802771e:	69a3      	ldr	r3, [r4, #24]
 8027720:	60a3      	str	r3, [r4, #8]
 8027722:	89a3      	ldrh	r3, [r4, #12]
 8027724:	071a      	lsls	r2, r3, #28
 8027726:	d52f      	bpl.n	8027788 <__swbuf_r+0x84>
 8027728:	6923      	ldr	r3, [r4, #16]
 802772a:	b36b      	cbz	r3, 8027788 <__swbuf_r+0x84>
 802772c:	6923      	ldr	r3, [r4, #16]
 802772e:	6820      	ldr	r0, [r4, #0]
 8027730:	1ac0      	subs	r0, r0, r3
 8027732:	6963      	ldr	r3, [r4, #20]
 8027734:	b2f6      	uxtb	r6, r6
 8027736:	4283      	cmp	r3, r0
 8027738:	4637      	mov	r7, r6
 802773a:	dc04      	bgt.n	8027746 <__swbuf_r+0x42>
 802773c:	4621      	mov	r1, r4
 802773e:	4628      	mov	r0, r5
 8027740:	f000 f9aa 	bl	8027a98 <_fflush_r>
 8027744:	bb30      	cbnz	r0, 8027794 <__swbuf_r+0x90>
 8027746:	68a3      	ldr	r3, [r4, #8]
 8027748:	3b01      	subs	r3, #1
 802774a:	60a3      	str	r3, [r4, #8]
 802774c:	6823      	ldr	r3, [r4, #0]
 802774e:	1c5a      	adds	r2, r3, #1
 8027750:	6022      	str	r2, [r4, #0]
 8027752:	701e      	strb	r6, [r3, #0]
 8027754:	6963      	ldr	r3, [r4, #20]
 8027756:	3001      	adds	r0, #1
 8027758:	4283      	cmp	r3, r0
 802775a:	d004      	beq.n	8027766 <__swbuf_r+0x62>
 802775c:	89a3      	ldrh	r3, [r4, #12]
 802775e:	07db      	lsls	r3, r3, #31
 8027760:	d506      	bpl.n	8027770 <__swbuf_r+0x6c>
 8027762:	2e0a      	cmp	r6, #10
 8027764:	d104      	bne.n	8027770 <__swbuf_r+0x6c>
 8027766:	4621      	mov	r1, r4
 8027768:	4628      	mov	r0, r5
 802776a:	f000 f995 	bl	8027a98 <_fflush_r>
 802776e:	b988      	cbnz	r0, 8027794 <__swbuf_r+0x90>
 8027770:	4638      	mov	r0, r7
 8027772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027774:	4b0a      	ldr	r3, [pc, #40]	; (80277a0 <__swbuf_r+0x9c>)
 8027776:	429c      	cmp	r4, r3
 8027778:	d101      	bne.n	802777e <__swbuf_r+0x7a>
 802777a:	68ac      	ldr	r4, [r5, #8]
 802777c:	e7cf      	b.n	802771e <__swbuf_r+0x1a>
 802777e:	4b09      	ldr	r3, [pc, #36]	; (80277a4 <__swbuf_r+0xa0>)
 8027780:	429c      	cmp	r4, r3
 8027782:	bf08      	it	eq
 8027784:	68ec      	ldreq	r4, [r5, #12]
 8027786:	e7ca      	b.n	802771e <__swbuf_r+0x1a>
 8027788:	4621      	mov	r1, r4
 802778a:	4628      	mov	r0, r5
 802778c:	f000 f81e 	bl	80277cc <__swsetup_r>
 8027790:	2800      	cmp	r0, #0
 8027792:	d0cb      	beq.n	802772c <__swbuf_r+0x28>
 8027794:	f04f 37ff 	mov.w	r7, #4294967295
 8027798:	e7ea      	b.n	8027770 <__swbuf_r+0x6c>
 802779a:	bf00      	nop
 802779c:	0802b744 	.word	0x0802b744
 80277a0:	0802b764 	.word	0x0802b764
 80277a4:	0802b724 	.word	0x0802b724

080277a8 <_write_r>:
 80277a8:	b538      	push	{r3, r4, r5, lr}
 80277aa:	4d07      	ldr	r5, [pc, #28]	; (80277c8 <_write_r+0x20>)
 80277ac:	4604      	mov	r4, r0
 80277ae:	4608      	mov	r0, r1
 80277b0:	4611      	mov	r1, r2
 80277b2:	2200      	movs	r2, #0
 80277b4:	602a      	str	r2, [r5, #0]
 80277b6:	461a      	mov	r2, r3
 80277b8:	f7da fa29 	bl	8001c0e <_write>
 80277bc:	1c43      	adds	r3, r0, #1
 80277be:	d102      	bne.n	80277c6 <_write_r+0x1e>
 80277c0:	682b      	ldr	r3, [r5, #0]
 80277c2:	b103      	cbz	r3, 80277c6 <_write_r+0x1e>
 80277c4:	6023      	str	r3, [r4, #0]
 80277c6:	bd38      	pop	{r3, r4, r5, pc}
 80277c8:	20008a20 	.word	0x20008a20

080277cc <__swsetup_r>:
 80277cc:	4b32      	ldr	r3, [pc, #200]	; (8027898 <__swsetup_r+0xcc>)
 80277ce:	b570      	push	{r4, r5, r6, lr}
 80277d0:	681d      	ldr	r5, [r3, #0]
 80277d2:	4606      	mov	r6, r0
 80277d4:	460c      	mov	r4, r1
 80277d6:	b125      	cbz	r5, 80277e2 <__swsetup_r+0x16>
 80277d8:	69ab      	ldr	r3, [r5, #24]
 80277da:	b913      	cbnz	r3, 80277e2 <__swsetup_r+0x16>
 80277dc:	4628      	mov	r0, r5
 80277de:	f7ff f96d 	bl	8026abc <__sinit>
 80277e2:	4b2e      	ldr	r3, [pc, #184]	; (802789c <__swsetup_r+0xd0>)
 80277e4:	429c      	cmp	r4, r3
 80277e6:	d10f      	bne.n	8027808 <__swsetup_r+0x3c>
 80277e8:	686c      	ldr	r4, [r5, #4]
 80277ea:	89a3      	ldrh	r3, [r4, #12]
 80277ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80277f0:	0719      	lsls	r1, r3, #28
 80277f2:	d42c      	bmi.n	802784e <__swsetup_r+0x82>
 80277f4:	06dd      	lsls	r5, r3, #27
 80277f6:	d411      	bmi.n	802781c <__swsetup_r+0x50>
 80277f8:	2309      	movs	r3, #9
 80277fa:	6033      	str	r3, [r6, #0]
 80277fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027800:	81a3      	strh	r3, [r4, #12]
 8027802:	f04f 30ff 	mov.w	r0, #4294967295
 8027806:	e03e      	b.n	8027886 <__swsetup_r+0xba>
 8027808:	4b25      	ldr	r3, [pc, #148]	; (80278a0 <__swsetup_r+0xd4>)
 802780a:	429c      	cmp	r4, r3
 802780c:	d101      	bne.n	8027812 <__swsetup_r+0x46>
 802780e:	68ac      	ldr	r4, [r5, #8]
 8027810:	e7eb      	b.n	80277ea <__swsetup_r+0x1e>
 8027812:	4b24      	ldr	r3, [pc, #144]	; (80278a4 <__swsetup_r+0xd8>)
 8027814:	429c      	cmp	r4, r3
 8027816:	bf08      	it	eq
 8027818:	68ec      	ldreq	r4, [r5, #12]
 802781a:	e7e6      	b.n	80277ea <__swsetup_r+0x1e>
 802781c:	0758      	lsls	r0, r3, #29
 802781e:	d512      	bpl.n	8027846 <__swsetup_r+0x7a>
 8027820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027822:	b141      	cbz	r1, 8027836 <__swsetup_r+0x6a>
 8027824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027828:	4299      	cmp	r1, r3
 802782a:	d002      	beq.n	8027832 <__swsetup_r+0x66>
 802782c:	4630      	mov	r0, r6
 802782e:	f7ff fa43 	bl	8026cb8 <_free_r>
 8027832:	2300      	movs	r3, #0
 8027834:	6363      	str	r3, [r4, #52]	; 0x34
 8027836:	89a3      	ldrh	r3, [r4, #12]
 8027838:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802783c:	81a3      	strh	r3, [r4, #12]
 802783e:	2300      	movs	r3, #0
 8027840:	6063      	str	r3, [r4, #4]
 8027842:	6923      	ldr	r3, [r4, #16]
 8027844:	6023      	str	r3, [r4, #0]
 8027846:	89a3      	ldrh	r3, [r4, #12]
 8027848:	f043 0308 	orr.w	r3, r3, #8
 802784c:	81a3      	strh	r3, [r4, #12]
 802784e:	6923      	ldr	r3, [r4, #16]
 8027850:	b94b      	cbnz	r3, 8027866 <__swsetup_r+0x9a>
 8027852:	89a3      	ldrh	r3, [r4, #12]
 8027854:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802785c:	d003      	beq.n	8027866 <__swsetup_r+0x9a>
 802785e:	4621      	mov	r1, r4
 8027860:	4630      	mov	r0, r6
 8027862:	f000 f98d 	bl	8027b80 <__smakebuf_r>
 8027866:	89a0      	ldrh	r0, [r4, #12]
 8027868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802786c:	f010 0301 	ands.w	r3, r0, #1
 8027870:	d00a      	beq.n	8027888 <__swsetup_r+0xbc>
 8027872:	2300      	movs	r3, #0
 8027874:	60a3      	str	r3, [r4, #8]
 8027876:	6963      	ldr	r3, [r4, #20]
 8027878:	425b      	negs	r3, r3
 802787a:	61a3      	str	r3, [r4, #24]
 802787c:	6923      	ldr	r3, [r4, #16]
 802787e:	b943      	cbnz	r3, 8027892 <__swsetup_r+0xc6>
 8027880:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027884:	d1ba      	bne.n	80277fc <__swsetup_r+0x30>
 8027886:	bd70      	pop	{r4, r5, r6, pc}
 8027888:	0781      	lsls	r1, r0, #30
 802788a:	bf58      	it	pl
 802788c:	6963      	ldrpl	r3, [r4, #20]
 802788e:	60a3      	str	r3, [r4, #8]
 8027890:	e7f4      	b.n	802787c <__swsetup_r+0xb0>
 8027892:	2000      	movs	r0, #0
 8027894:	e7f7      	b.n	8027886 <__swsetup_r+0xba>
 8027896:	bf00      	nop
 8027898:	20000098 	.word	0x20000098
 802789c:	0802b744 	.word	0x0802b744
 80278a0:	0802b764 	.word	0x0802b764
 80278a4:	0802b724 	.word	0x0802b724

080278a8 <__register_exitproc>:
 80278a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80278ac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8027968 <__register_exitproc+0xc0>
 80278b0:	4606      	mov	r6, r0
 80278b2:	f8d8 0000 	ldr.w	r0, [r8]
 80278b6:	461f      	mov	r7, r3
 80278b8:	460d      	mov	r5, r1
 80278ba:	4691      	mov	r9, r2
 80278bc:	f7ff f9d3 	bl	8026c66 <__retarget_lock_acquire_recursive>
 80278c0:	4b25      	ldr	r3, [pc, #148]	; (8027958 <__register_exitproc+0xb0>)
 80278c2:	681c      	ldr	r4, [r3, #0]
 80278c4:	b934      	cbnz	r4, 80278d4 <__register_exitproc+0x2c>
 80278c6:	4c25      	ldr	r4, [pc, #148]	; (802795c <__register_exitproc+0xb4>)
 80278c8:	601c      	str	r4, [r3, #0]
 80278ca:	4b25      	ldr	r3, [pc, #148]	; (8027960 <__register_exitproc+0xb8>)
 80278cc:	b113      	cbz	r3, 80278d4 <__register_exitproc+0x2c>
 80278ce:	681b      	ldr	r3, [r3, #0]
 80278d0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80278d4:	6863      	ldr	r3, [r4, #4]
 80278d6:	2b1f      	cmp	r3, #31
 80278d8:	dd07      	ble.n	80278ea <__register_exitproc+0x42>
 80278da:	f8d8 0000 	ldr.w	r0, [r8]
 80278de:	f7ff f9c4 	bl	8026c6a <__retarget_lock_release_recursive>
 80278e2:	f04f 30ff 	mov.w	r0, #4294967295
 80278e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80278ea:	b34e      	cbz	r6, 8027940 <__register_exitproc+0x98>
 80278ec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80278f0:	b988      	cbnz	r0, 8027916 <__register_exitproc+0x6e>
 80278f2:	4b1c      	ldr	r3, [pc, #112]	; (8027964 <__register_exitproc+0xbc>)
 80278f4:	b923      	cbnz	r3, 8027900 <__register_exitproc+0x58>
 80278f6:	f8d8 0000 	ldr.w	r0, [r8]
 80278fa:	f7ff f9b5 	bl	8026c68 <__retarget_lock_release>
 80278fe:	e7f0      	b.n	80278e2 <__register_exitproc+0x3a>
 8027900:	f44f 7084 	mov.w	r0, #264	; 0x108
 8027904:	f7ff f9b2 	bl	8026c6c <malloc>
 8027908:	2800      	cmp	r0, #0
 802790a:	d0f4      	beq.n	80278f6 <__register_exitproc+0x4e>
 802790c:	2300      	movs	r3, #0
 802790e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8027912:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8027916:	6863      	ldr	r3, [r4, #4]
 8027918:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802791c:	2201      	movs	r2, #1
 802791e:	409a      	lsls	r2, r3
 8027920:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8027924:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8027928:	4313      	orrs	r3, r2
 802792a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802792e:	2e02      	cmp	r6, #2
 8027930:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8027934:	bf02      	ittt	eq
 8027936:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802793a:	4313      	orreq	r3, r2
 802793c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8027940:	6863      	ldr	r3, [r4, #4]
 8027942:	f8d8 0000 	ldr.w	r0, [r8]
 8027946:	1c5a      	adds	r2, r3, #1
 8027948:	3302      	adds	r3, #2
 802794a:	6062      	str	r2, [r4, #4]
 802794c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8027950:	f7ff f98b 	bl	8026c6a <__retarget_lock_release_recursive>
 8027954:	2000      	movs	r0, #0
 8027956:	e7c6      	b.n	80278e6 <__register_exitproc+0x3e>
 8027958:	20008ab0 	.word	0x20008ab0
 802795c:	20008a24 	.word	0x20008a24
 8027960:	0802b7bc 	.word	0x0802b7bc
 8027964:	08026c6d 	.word	0x08026c6d
 8027968:	200000fc 	.word	0x200000fc

0802796c <_close_r>:
 802796c:	b538      	push	{r3, r4, r5, lr}
 802796e:	4d06      	ldr	r5, [pc, #24]	; (8027988 <_close_r+0x1c>)
 8027970:	2300      	movs	r3, #0
 8027972:	4604      	mov	r4, r0
 8027974:	4608      	mov	r0, r1
 8027976:	602b      	str	r3, [r5, #0]
 8027978:	f7da f965 	bl	8001c46 <_close>
 802797c:	1c43      	adds	r3, r0, #1
 802797e:	d102      	bne.n	8027986 <_close_r+0x1a>
 8027980:	682b      	ldr	r3, [r5, #0]
 8027982:	b103      	cbz	r3, 8027986 <_close_r+0x1a>
 8027984:	6023      	str	r3, [r4, #0]
 8027986:	bd38      	pop	{r3, r4, r5, pc}
 8027988:	20008a20 	.word	0x20008a20

0802798c <__sflush_r>:
 802798c:	898a      	ldrh	r2, [r1, #12]
 802798e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027992:	4605      	mov	r5, r0
 8027994:	0710      	lsls	r0, r2, #28
 8027996:	460c      	mov	r4, r1
 8027998:	d458      	bmi.n	8027a4c <__sflush_r+0xc0>
 802799a:	684b      	ldr	r3, [r1, #4]
 802799c:	2b00      	cmp	r3, #0
 802799e:	dc05      	bgt.n	80279ac <__sflush_r+0x20>
 80279a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80279a2:	2b00      	cmp	r3, #0
 80279a4:	dc02      	bgt.n	80279ac <__sflush_r+0x20>
 80279a6:	2000      	movs	r0, #0
 80279a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80279ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80279ae:	2e00      	cmp	r6, #0
 80279b0:	d0f9      	beq.n	80279a6 <__sflush_r+0x1a>
 80279b2:	2300      	movs	r3, #0
 80279b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80279b8:	682f      	ldr	r7, [r5, #0]
 80279ba:	602b      	str	r3, [r5, #0]
 80279bc:	d032      	beq.n	8027a24 <__sflush_r+0x98>
 80279be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80279c0:	89a3      	ldrh	r3, [r4, #12]
 80279c2:	075a      	lsls	r2, r3, #29
 80279c4:	d505      	bpl.n	80279d2 <__sflush_r+0x46>
 80279c6:	6863      	ldr	r3, [r4, #4]
 80279c8:	1ac0      	subs	r0, r0, r3
 80279ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80279cc:	b10b      	cbz	r3, 80279d2 <__sflush_r+0x46>
 80279ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80279d0:	1ac0      	subs	r0, r0, r3
 80279d2:	2300      	movs	r3, #0
 80279d4:	4602      	mov	r2, r0
 80279d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80279d8:	6a21      	ldr	r1, [r4, #32]
 80279da:	4628      	mov	r0, r5
 80279dc:	47b0      	blx	r6
 80279de:	1c43      	adds	r3, r0, #1
 80279e0:	89a3      	ldrh	r3, [r4, #12]
 80279e2:	d106      	bne.n	80279f2 <__sflush_r+0x66>
 80279e4:	6829      	ldr	r1, [r5, #0]
 80279e6:	291d      	cmp	r1, #29
 80279e8:	d82c      	bhi.n	8027a44 <__sflush_r+0xb8>
 80279ea:	4a2a      	ldr	r2, [pc, #168]	; (8027a94 <__sflush_r+0x108>)
 80279ec:	40ca      	lsrs	r2, r1
 80279ee:	07d6      	lsls	r6, r2, #31
 80279f0:	d528      	bpl.n	8027a44 <__sflush_r+0xb8>
 80279f2:	2200      	movs	r2, #0
 80279f4:	6062      	str	r2, [r4, #4]
 80279f6:	04d9      	lsls	r1, r3, #19
 80279f8:	6922      	ldr	r2, [r4, #16]
 80279fa:	6022      	str	r2, [r4, #0]
 80279fc:	d504      	bpl.n	8027a08 <__sflush_r+0x7c>
 80279fe:	1c42      	adds	r2, r0, #1
 8027a00:	d101      	bne.n	8027a06 <__sflush_r+0x7a>
 8027a02:	682b      	ldr	r3, [r5, #0]
 8027a04:	b903      	cbnz	r3, 8027a08 <__sflush_r+0x7c>
 8027a06:	6560      	str	r0, [r4, #84]	; 0x54
 8027a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027a0a:	602f      	str	r7, [r5, #0]
 8027a0c:	2900      	cmp	r1, #0
 8027a0e:	d0ca      	beq.n	80279a6 <__sflush_r+0x1a>
 8027a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027a14:	4299      	cmp	r1, r3
 8027a16:	d002      	beq.n	8027a1e <__sflush_r+0x92>
 8027a18:	4628      	mov	r0, r5
 8027a1a:	f7ff f94d 	bl	8026cb8 <_free_r>
 8027a1e:	2000      	movs	r0, #0
 8027a20:	6360      	str	r0, [r4, #52]	; 0x34
 8027a22:	e7c1      	b.n	80279a8 <__sflush_r+0x1c>
 8027a24:	6a21      	ldr	r1, [r4, #32]
 8027a26:	2301      	movs	r3, #1
 8027a28:	4628      	mov	r0, r5
 8027a2a:	47b0      	blx	r6
 8027a2c:	1c41      	adds	r1, r0, #1
 8027a2e:	d1c7      	bne.n	80279c0 <__sflush_r+0x34>
 8027a30:	682b      	ldr	r3, [r5, #0]
 8027a32:	2b00      	cmp	r3, #0
 8027a34:	d0c4      	beq.n	80279c0 <__sflush_r+0x34>
 8027a36:	2b1d      	cmp	r3, #29
 8027a38:	d001      	beq.n	8027a3e <__sflush_r+0xb2>
 8027a3a:	2b16      	cmp	r3, #22
 8027a3c:	d101      	bne.n	8027a42 <__sflush_r+0xb6>
 8027a3e:	602f      	str	r7, [r5, #0]
 8027a40:	e7b1      	b.n	80279a6 <__sflush_r+0x1a>
 8027a42:	89a3      	ldrh	r3, [r4, #12]
 8027a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027a48:	81a3      	strh	r3, [r4, #12]
 8027a4a:	e7ad      	b.n	80279a8 <__sflush_r+0x1c>
 8027a4c:	690f      	ldr	r7, [r1, #16]
 8027a4e:	2f00      	cmp	r7, #0
 8027a50:	d0a9      	beq.n	80279a6 <__sflush_r+0x1a>
 8027a52:	0793      	lsls	r3, r2, #30
 8027a54:	680e      	ldr	r6, [r1, #0]
 8027a56:	bf08      	it	eq
 8027a58:	694b      	ldreq	r3, [r1, #20]
 8027a5a:	600f      	str	r7, [r1, #0]
 8027a5c:	bf18      	it	ne
 8027a5e:	2300      	movne	r3, #0
 8027a60:	eba6 0807 	sub.w	r8, r6, r7
 8027a64:	608b      	str	r3, [r1, #8]
 8027a66:	f1b8 0f00 	cmp.w	r8, #0
 8027a6a:	dd9c      	ble.n	80279a6 <__sflush_r+0x1a>
 8027a6c:	6a21      	ldr	r1, [r4, #32]
 8027a6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027a70:	4643      	mov	r3, r8
 8027a72:	463a      	mov	r2, r7
 8027a74:	4628      	mov	r0, r5
 8027a76:	47b0      	blx	r6
 8027a78:	2800      	cmp	r0, #0
 8027a7a:	dc06      	bgt.n	8027a8a <__sflush_r+0xfe>
 8027a7c:	89a3      	ldrh	r3, [r4, #12]
 8027a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027a82:	81a3      	strh	r3, [r4, #12]
 8027a84:	f04f 30ff 	mov.w	r0, #4294967295
 8027a88:	e78e      	b.n	80279a8 <__sflush_r+0x1c>
 8027a8a:	4407      	add	r7, r0
 8027a8c:	eba8 0800 	sub.w	r8, r8, r0
 8027a90:	e7e9      	b.n	8027a66 <__sflush_r+0xda>
 8027a92:	bf00      	nop
 8027a94:	20400001 	.word	0x20400001

08027a98 <_fflush_r>:
 8027a98:	b538      	push	{r3, r4, r5, lr}
 8027a9a:	690b      	ldr	r3, [r1, #16]
 8027a9c:	4605      	mov	r5, r0
 8027a9e:	460c      	mov	r4, r1
 8027aa0:	b913      	cbnz	r3, 8027aa8 <_fflush_r+0x10>
 8027aa2:	2500      	movs	r5, #0
 8027aa4:	4628      	mov	r0, r5
 8027aa6:	bd38      	pop	{r3, r4, r5, pc}
 8027aa8:	b118      	cbz	r0, 8027ab2 <_fflush_r+0x1a>
 8027aaa:	6983      	ldr	r3, [r0, #24]
 8027aac:	b90b      	cbnz	r3, 8027ab2 <_fflush_r+0x1a>
 8027aae:	f7ff f805 	bl	8026abc <__sinit>
 8027ab2:	4b14      	ldr	r3, [pc, #80]	; (8027b04 <_fflush_r+0x6c>)
 8027ab4:	429c      	cmp	r4, r3
 8027ab6:	d11b      	bne.n	8027af0 <_fflush_r+0x58>
 8027ab8:	686c      	ldr	r4, [r5, #4]
 8027aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027abe:	2b00      	cmp	r3, #0
 8027ac0:	d0ef      	beq.n	8027aa2 <_fflush_r+0xa>
 8027ac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027ac4:	07d0      	lsls	r0, r2, #31
 8027ac6:	d404      	bmi.n	8027ad2 <_fflush_r+0x3a>
 8027ac8:	0599      	lsls	r1, r3, #22
 8027aca:	d402      	bmi.n	8027ad2 <_fflush_r+0x3a>
 8027acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027ace:	f7ff f8ca 	bl	8026c66 <__retarget_lock_acquire_recursive>
 8027ad2:	4628      	mov	r0, r5
 8027ad4:	4621      	mov	r1, r4
 8027ad6:	f7ff ff59 	bl	802798c <__sflush_r>
 8027ada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027adc:	07da      	lsls	r2, r3, #31
 8027ade:	4605      	mov	r5, r0
 8027ae0:	d4e0      	bmi.n	8027aa4 <_fflush_r+0xc>
 8027ae2:	89a3      	ldrh	r3, [r4, #12]
 8027ae4:	059b      	lsls	r3, r3, #22
 8027ae6:	d4dd      	bmi.n	8027aa4 <_fflush_r+0xc>
 8027ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027aea:	f7ff f8be 	bl	8026c6a <__retarget_lock_release_recursive>
 8027aee:	e7d9      	b.n	8027aa4 <_fflush_r+0xc>
 8027af0:	4b05      	ldr	r3, [pc, #20]	; (8027b08 <_fflush_r+0x70>)
 8027af2:	429c      	cmp	r4, r3
 8027af4:	d101      	bne.n	8027afa <_fflush_r+0x62>
 8027af6:	68ac      	ldr	r4, [r5, #8]
 8027af8:	e7df      	b.n	8027aba <_fflush_r+0x22>
 8027afa:	4b04      	ldr	r3, [pc, #16]	; (8027b0c <_fflush_r+0x74>)
 8027afc:	429c      	cmp	r4, r3
 8027afe:	bf08      	it	eq
 8027b00:	68ec      	ldreq	r4, [r5, #12]
 8027b02:	e7da      	b.n	8027aba <_fflush_r+0x22>
 8027b04:	0802b744 	.word	0x0802b744
 8027b08:	0802b764 	.word	0x0802b764
 8027b0c:	0802b724 	.word	0x0802b724

08027b10 <_lseek_r>:
 8027b10:	b538      	push	{r3, r4, r5, lr}
 8027b12:	4d07      	ldr	r5, [pc, #28]	; (8027b30 <_lseek_r+0x20>)
 8027b14:	4604      	mov	r4, r0
 8027b16:	4608      	mov	r0, r1
 8027b18:	4611      	mov	r1, r2
 8027b1a:	2200      	movs	r2, #0
 8027b1c:	602a      	str	r2, [r5, #0]
 8027b1e:	461a      	mov	r2, r3
 8027b20:	f7da f8b8 	bl	8001c94 <_lseek>
 8027b24:	1c43      	adds	r3, r0, #1
 8027b26:	d102      	bne.n	8027b2e <_lseek_r+0x1e>
 8027b28:	682b      	ldr	r3, [r5, #0]
 8027b2a:	b103      	cbz	r3, 8027b2e <_lseek_r+0x1e>
 8027b2c:	6023      	str	r3, [r4, #0]
 8027b2e:	bd38      	pop	{r3, r4, r5, pc}
 8027b30:	20008a20 	.word	0x20008a20

08027b34 <__swhatbuf_r>:
 8027b34:	b570      	push	{r4, r5, r6, lr}
 8027b36:	460e      	mov	r6, r1
 8027b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027b3c:	2900      	cmp	r1, #0
 8027b3e:	b096      	sub	sp, #88	; 0x58
 8027b40:	4614      	mov	r4, r2
 8027b42:	461d      	mov	r5, r3
 8027b44:	da08      	bge.n	8027b58 <__swhatbuf_r+0x24>
 8027b46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8027b4a:	2200      	movs	r2, #0
 8027b4c:	602a      	str	r2, [r5, #0]
 8027b4e:	061a      	lsls	r2, r3, #24
 8027b50:	d410      	bmi.n	8027b74 <__swhatbuf_r+0x40>
 8027b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027b56:	e00e      	b.n	8027b76 <__swhatbuf_r+0x42>
 8027b58:	466a      	mov	r2, sp
 8027b5a:	f000 f86f 	bl	8027c3c <_fstat_r>
 8027b5e:	2800      	cmp	r0, #0
 8027b60:	dbf1      	blt.n	8027b46 <__swhatbuf_r+0x12>
 8027b62:	9a01      	ldr	r2, [sp, #4]
 8027b64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8027b68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8027b6c:	425a      	negs	r2, r3
 8027b6e:	415a      	adcs	r2, r3
 8027b70:	602a      	str	r2, [r5, #0]
 8027b72:	e7ee      	b.n	8027b52 <__swhatbuf_r+0x1e>
 8027b74:	2340      	movs	r3, #64	; 0x40
 8027b76:	2000      	movs	r0, #0
 8027b78:	6023      	str	r3, [r4, #0]
 8027b7a:	b016      	add	sp, #88	; 0x58
 8027b7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08027b80 <__smakebuf_r>:
 8027b80:	898b      	ldrh	r3, [r1, #12]
 8027b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027b84:	079d      	lsls	r5, r3, #30
 8027b86:	4606      	mov	r6, r0
 8027b88:	460c      	mov	r4, r1
 8027b8a:	d507      	bpl.n	8027b9c <__smakebuf_r+0x1c>
 8027b8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027b90:	6023      	str	r3, [r4, #0]
 8027b92:	6123      	str	r3, [r4, #16]
 8027b94:	2301      	movs	r3, #1
 8027b96:	6163      	str	r3, [r4, #20]
 8027b98:	b002      	add	sp, #8
 8027b9a:	bd70      	pop	{r4, r5, r6, pc}
 8027b9c:	ab01      	add	r3, sp, #4
 8027b9e:	466a      	mov	r2, sp
 8027ba0:	f7ff ffc8 	bl	8027b34 <__swhatbuf_r>
 8027ba4:	9900      	ldr	r1, [sp, #0]
 8027ba6:	4605      	mov	r5, r0
 8027ba8:	4630      	mov	r0, r6
 8027baa:	f7ff f8f1 	bl	8026d90 <_malloc_r>
 8027bae:	b948      	cbnz	r0, 8027bc4 <__smakebuf_r+0x44>
 8027bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027bb4:	059a      	lsls	r2, r3, #22
 8027bb6:	d4ef      	bmi.n	8027b98 <__smakebuf_r+0x18>
 8027bb8:	f023 0303 	bic.w	r3, r3, #3
 8027bbc:	f043 0302 	orr.w	r3, r3, #2
 8027bc0:	81a3      	strh	r3, [r4, #12]
 8027bc2:	e7e3      	b.n	8027b8c <__smakebuf_r+0xc>
 8027bc4:	4b0d      	ldr	r3, [pc, #52]	; (8027bfc <__smakebuf_r+0x7c>)
 8027bc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8027bc8:	89a3      	ldrh	r3, [r4, #12]
 8027bca:	6020      	str	r0, [r4, #0]
 8027bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027bd0:	81a3      	strh	r3, [r4, #12]
 8027bd2:	9b00      	ldr	r3, [sp, #0]
 8027bd4:	6163      	str	r3, [r4, #20]
 8027bd6:	9b01      	ldr	r3, [sp, #4]
 8027bd8:	6120      	str	r0, [r4, #16]
 8027bda:	b15b      	cbz	r3, 8027bf4 <__smakebuf_r+0x74>
 8027bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027be0:	4630      	mov	r0, r6
 8027be2:	f000 f83d 	bl	8027c60 <_isatty_r>
 8027be6:	b128      	cbz	r0, 8027bf4 <__smakebuf_r+0x74>
 8027be8:	89a3      	ldrh	r3, [r4, #12]
 8027bea:	f023 0303 	bic.w	r3, r3, #3
 8027bee:	f043 0301 	orr.w	r3, r3, #1
 8027bf2:	81a3      	strh	r3, [r4, #12]
 8027bf4:	89a0      	ldrh	r0, [r4, #12]
 8027bf6:	4305      	orrs	r5, r0
 8027bf8:	81a5      	strh	r5, [r4, #12]
 8027bfa:	e7cd      	b.n	8027b98 <__smakebuf_r+0x18>
 8027bfc:	08026a55 	.word	0x08026a55

08027c00 <__malloc_lock>:
 8027c00:	4801      	ldr	r0, [pc, #4]	; (8027c08 <__malloc_lock+0x8>)
 8027c02:	f7ff b830 	b.w	8026c66 <__retarget_lock_acquire_recursive>
 8027c06:	bf00      	nop
 8027c08:	2000890d 	.word	0x2000890d

08027c0c <__malloc_unlock>:
 8027c0c:	4801      	ldr	r0, [pc, #4]	; (8027c14 <__malloc_unlock+0x8>)
 8027c0e:	f7ff b82c 	b.w	8026c6a <__retarget_lock_release_recursive>
 8027c12:	bf00      	nop
 8027c14:	2000890d 	.word	0x2000890d

08027c18 <_read_r>:
 8027c18:	b538      	push	{r3, r4, r5, lr}
 8027c1a:	4d07      	ldr	r5, [pc, #28]	; (8027c38 <_read_r+0x20>)
 8027c1c:	4604      	mov	r4, r0
 8027c1e:	4608      	mov	r0, r1
 8027c20:	4611      	mov	r1, r2
 8027c22:	2200      	movs	r2, #0
 8027c24:	602a      	str	r2, [r5, #0]
 8027c26:	461a      	mov	r2, r3
 8027c28:	f7d9 ffd4 	bl	8001bd4 <_read>
 8027c2c:	1c43      	adds	r3, r0, #1
 8027c2e:	d102      	bne.n	8027c36 <_read_r+0x1e>
 8027c30:	682b      	ldr	r3, [r5, #0]
 8027c32:	b103      	cbz	r3, 8027c36 <_read_r+0x1e>
 8027c34:	6023      	str	r3, [r4, #0]
 8027c36:	bd38      	pop	{r3, r4, r5, pc}
 8027c38:	20008a20 	.word	0x20008a20

08027c3c <_fstat_r>:
 8027c3c:	b538      	push	{r3, r4, r5, lr}
 8027c3e:	4d07      	ldr	r5, [pc, #28]	; (8027c5c <_fstat_r+0x20>)
 8027c40:	2300      	movs	r3, #0
 8027c42:	4604      	mov	r4, r0
 8027c44:	4608      	mov	r0, r1
 8027c46:	4611      	mov	r1, r2
 8027c48:	602b      	str	r3, [r5, #0]
 8027c4a:	f7da f808 	bl	8001c5e <_fstat>
 8027c4e:	1c43      	adds	r3, r0, #1
 8027c50:	d102      	bne.n	8027c58 <_fstat_r+0x1c>
 8027c52:	682b      	ldr	r3, [r5, #0]
 8027c54:	b103      	cbz	r3, 8027c58 <_fstat_r+0x1c>
 8027c56:	6023      	str	r3, [r4, #0]
 8027c58:	bd38      	pop	{r3, r4, r5, pc}
 8027c5a:	bf00      	nop
 8027c5c:	20008a20 	.word	0x20008a20

08027c60 <_isatty_r>:
 8027c60:	b538      	push	{r3, r4, r5, lr}
 8027c62:	4d06      	ldr	r5, [pc, #24]	; (8027c7c <_isatty_r+0x1c>)
 8027c64:	2300      	movs	r3, #0
 8027c66:	4604      	mov	r4, r0
 8027c68:	4608      	mov	r0, r1
 8027c6a:	602b      	str	r3, [r5, #0]
 8027c6c:	f7da f807 	bl	8001c7e <_isatty>
 8027c70:	1c43      	adds	r3, r0, #1
 8027c72:	d102      	bne.n	8027c7a <_isatty_r+0x1a>
 8027c74:	682b      	ldr	r3, [r5, #0]
 8027c76:	b103      	cbz	r3, 8027c7a <_isatty_r+0x1a>
 8027c78:	6023      	str	r3, [r4, #0]
 8027c7a:	bd38      	pop	{r3, r4, r5, pc}
 8027c7c:	20008a20 	.word	0x20008a20

08027c80 <_init>:
 8027c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027c82:	bf00      	nop
 8027c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027c86:	bc08      	pop	{r3}
 8027c88:	469e      	mov	lr, r3
 8027c8a:	4770      	bx	lr

08027c8c <_fini>:
 8027c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027c8e:	bf00      	nop
 8027c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027c92:	bc08      	pop	{r3}
 8027c94:	469e      	mov	lr, r3
 8027c96:	4770      	bx	lr
